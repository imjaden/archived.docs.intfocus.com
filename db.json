{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/vue/source/browserconfig.xml","path":"browserconfig.xml","modified":1,"renderable":1},{"_id":"themes/vue/source/manifest.json","path":"manifest.json","modified":1,"renderable":1},{"_id":"themes/vue/source/css/benchmark.styl","path":"css/benchmark.styl","modified":1,"renderable":1},{"_id":"themes/vue/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/vue/source/css/page.styl","path":"css/page.styl","modified":1,"renderable":1},{"_id":"themes/vue/source/css/search.styl","path":"css/search.styl","modified":1,"renderable":1},{"_id":"themes/vue/source/images/aaha.png","path":"images/aaha.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/accelebrate.png","path":"images/accelebrate.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/bestvpn_co.png","path":"images/bestvpn_co.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/alligator_io.svg","path":"images/alligator_io.svg","modified":1,"renderable":1},{"_id":"themes/vue/source/images/bacancy_technology.png","path":"images/bacancy_technology.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/chaitin.png","path":"images/chaitin.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/blokt_cryptocurrency_news.png","path":"images/blokt_cryptocurrency_news.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/check.png","path":"images/check.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/cloudstudio.png","path":"images/cloudstudio.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/bit.png","path":"images/bit.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/coding.png","path":"images/coding.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/coin-bch.png","path":"images/coin-bch.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/coin-btc.png","path":"images/coin-btc.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/coin-eth.png","path":"images/coin-eth.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/coin-ltc.png","path":"images/coin-ltc.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/dcloud.gif","path":"images/dcloud.gif","modified":1,"renderable":1},{"_id":"themes/vue/source/images/derek_pollard.png","path":"images/derek_pollard.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/devexpress.png","path":"images/devexpress.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/devsquad.png","path":"images/devsquad.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/down.png","path":"images/down.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/dopamine.png","path":"images/dopamine.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/energy_comparison.png","path":"images/energy_comparison.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/earthlink.png","path":"images/earthlink.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/fastcoding_inc.svg","path":"images/fastcoding_inc.svg","modified":1,"renderable":1},{"_id":"themes/vue/source/images/feed.png","path":"images/feed.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/firestick_tricks.png","path":"images/firestick_tricks.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/frontend_love.png","path":"images/frontend_love.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/geekbang-ad.jpg","path":"images/geekbang-ad.jpg","modified":1,"renderable":1},{"_id":"themes/vue/source/images/geekbang-vue-ad.gif","path":"images/geekbang-vue-ad.gif","modified":1,"renderable":1},{"_id":"themes/vue/source/images/gitee.png","path":"images/gitee.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/gridsome.png","path":"images/gridsome.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/html_burger.png","path":"images/html_burger.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/icons.png","path":"images/icons.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/icons_8.png","path":"images/icons_8.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/inkoop.png","path":"images/inkoop.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/intfocus.png","path":"images/intfocus.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/intygrate.png","path":"images/intygrate.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/isle_of_code.png","path":"images/isle_of_code.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/jqwidgets_.png","path":"images/jqwidgets_.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/jqwidgets_ltd.png","path":"images/jqwidgets_ltd.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/laravel.png","path":"images/laravel.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/logo-100x50.png","path":"images/logo-100x50.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/logo.png","path":"images/logo.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/menu.png","path":"images/menu.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/marcus_hiles.png","path":"images/marcus_hiles.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/nativescript.png","path":"images/nativescript.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/modus.png","path":"images/modus.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/onsen_ui.png","path":"images/onsen_ui.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/neds.png","path":"images/neds.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/opteo.png","path":"images/opteo.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/passionate_people.png","path":"images/passionate_people.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/patreon.png","path":"images/patreon.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/paypal.png","path":"images/paypal.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/search.png","path":"images/search.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/shopware_ag.png","path":"images/shopware_ag.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/shopware_ag.svg","path":"images/shopware_ag.svg","modified":1,"renderable":1},{"_id":"themes/vue/source/images/special-sponsor-spot.png","path":"images/special-sponsor-spot.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/stdlib.png","path":"images/stdlib.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/syncfusion.png","path":"images/syncfusion.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/syp-java-admin.png","path":"images/syp-java-admin.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/tee__.png","path":"images/tee__.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/tencent-ad.png","path":"images/tencent-ad.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/tidelift.png","path":"images/tidelift.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/tighten_co.png","path":"images/tighten_co.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/tooltwist.png","path":"images/tooltwist.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/usave.png","path":"images/usave.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/valuecoders.png","path":"images/valuecoders.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/vehikl.png","path":"images/vehikl.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/vpnranks.png","path":"images/vpnranks.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/vuejobs.png","path":"images/vuejobs.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/vuemastery.png","path":"images/vuemastery.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/vueschool.png","path":"images/vueschool.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/vuetify.png","path":"images/vuetify.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/webdock.png","path":"images/webdock.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/wilderminds.png","path":"images/wilderminds.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/x_team.png","path":"images/x_team.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/y8.png","path":"images/y8.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/yakaz.png","path":"images/yakaz.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/youku.png","path":"images/youku.png","modified":1,"renderable":1},{"_id":"themes/vue/source/js/common.js","path":"js/common.js","modified":1,"renderable":1},{"_id":"themes/vue/source/js/smooth-scroll.min.js","path":"js/smooth-scroll.min.js","modified":1,"renderable":1},{"_id":"themes/vue/source/js/vue.js","path":"js/vue.js","modified":1,"renderable":1},{"_id":"themes/vue/source/js/css.escape.js","path":"js/css.escape.js","modified":1,"renderable":1},{"_id":"themes/vue/source/js/vue.min.js","path":"js/vue.min.js","modified":1,"renderable":1},{"_id":"themes/vue/source/fonts/Dosis/Dosis-Medium.ttf","path":"fonts/Dosis/Dosis-Medium.ttf","modified":1,"renderable":1},{"_id":"themes/vue/source/fonts/Source_Sans_Pro/SourceSansPro-Light.ttf","path":"fonts/Source_Sans_Pro/SourceSansPro-Light.ttf","modified":1,"renderable":1},{"_id":"themes/vue/source/fonts/Dosis/OFL.txt","path":"fonts/Dosis/OFL.txt","modified":1,"renderable":1},{"_id":"themes/vue/source/fonts/Source_Sans_Pro/SourceSansPro-Semibold.ttf","path":"fonts/Source_Sans_Pro/SourceSansPro-Semibold.ttf","modified":1,"renderable":1},{"_id":"themes/vue/source/fonts/Source_Sans_Pro/OFL.txt","path":"fonts/Source_Sans_Pro/OFL.txt","modified":1,"renderable":1},{"_id":"themes/vue/source/fonts/Source_Sans_Pro/SourceSansPro-Regular.ttf","path":"fonts/Source_Sans_Pro/SourceSansPro-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/vue/source/fonts/Roboto_Mono/LICENSE.txt","path":"fonts/Roboto_Mono/LICENSE.txt","modified":1,"renderable":1},{"_id":"themes/vue/source/fonts/Roboto_Mono/RobotoMono-Regular.ttf","path":"fonts/Roboto_Mono/RobotoMono-Regular.ttf","modified":1,"renderable":1},{"_id":"src/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"src/developer/sypetl.rb","path":"developer/sypetl.rb","modified":1,"renderable":0},{"_id":"src/images/ETL流规范.png","path":"images/ETL流规范.png","modified":1,"renderable":0},{"_id":"src/images/Gitlab协作规范.png","path":"images/Gitlab协作规范.png","modified":1,"renderable":0},{"_id":"src/images/RDC功能流程图.png","path":"images/RDC功能流程图.png","modified":1,"renderable":0},{"_id":"src/images/MySQL-ER图示例.png","path":"images/MySQL-ER图示例.png","modified":1,"renderable":0},{"_id":"src/images/RDC请求流程图.png","path":"images/RDC请求流程图.png","modified":1,"renderable":0},{"_id":"src/images/RESTFul-API.gif","path":"images/RESTFul-API.gif","modified":1,"renderable":0},{"_id":"src/images/SypCtl-ServiceStatus.png","path":"images/SypCtl-ServiceStatus.png","modified":1,"renderable":0},{"_id":"src/images/SypCtlServer-AgentLog.png","path":"images/SypCtlServer-AgentLog.png","modified":1,"renderable":0},{"_id":"src/images/SypCtlServer-BackupFile.png","path":"images/SypCtlServer-BackupFile.png","modified":1,"renderable":0},{"_id":"src/images/SypCtlServer-BackupMySQL.png","path":"images/SypCtlServer-BackupMySQL.png","modified":1,"renderable":0},{"_id":"src/images/SypCtlServer-ServiceStatus.png","path":"images/SypCtlServer-ServiceStatus.png","modified":1,"renderable":0},{"_id":"src/images/SypCtlSync演示.png","path":"images/SypCtlSync演示.png","modified":1,"renderable":0},{"_id":"src/images/SypCtl三级备份方案.png","path":"images/SypCtl三级备份方案.png","modified":1,"renderable":0},{"_id":"src/images/SypCtl功能结构.png","path":"images/SypCtl功能结构.png","modified":1,"renderable":0},{"_id":"src/images/SypEtl-MonitorLog.png","path":"images/SypEtl-MonitorLog.png","modified":1,"renderable":0},{"_id":"src/images/breakpoint_hit.png","path":"images/breakpoint_hit.png","modified":1,"renderable":0},{"_id":"src/images/breakpoint_set.png","path":"images/breakpoint_set.png","modified":1,"renderable":0},{"_id":"src/images/config_add.png","path":"images/config_add.png","modified":1,"renderable":0},{"_id":"src/images/components.png","path":"images/components.png","modified":1,"renderable":0},{"_id":"src/images/data.png","path":"images/data.png","modified":1,"renderable":0},{"_id":"src/images/devtools-storage-chrome.png","path":"images/devtools-storage-chrome.png","modified":1,"renderable":0},{"_id":"src/images/devtools-storage-edge.png","path":"images/devtools-storage-edge.png","modified":1,"renderable":0},{"_id":"src/images/devtools-storage.png","path":"images/devtools-storage.png","modified":1,"renderable":0},{"_id":"src/images/devtools-timetravel.gif","path":"images/devtools-timetravel.gif","modified":1,"renderable":0},{"_id":"src/images/dom-tree.png","path":"images/dom-tree.png","modified":1,"renderable":0},{"_id":"src/images/gitlab-merge-request-conflicts.png","path":"images/gitlab-merge-request-conflicts.png","modified":1,"renderable":0},{"_id":"src/images/gitlab-new-merge-request-submit.png","path":"images/gitlab-new-merge-request-submit.png","modified":1,"renderable":0},{"_id":"src/images/gitlab-new-merge-request.png","path":"images/gitlab-new-merge-request.png","modified":1,"renderable":0},{"_id":"src/images/hn-architecture.png","path":"images/hn-architecture.png","modified":1,"renderable":0},{"_id":"src/images/lifecycle.png","path":"images/lifecycle.png","modified":1,"renderable":0},{"_id":"src/images/logged-proxied-data.png","path":"images/logged-proxied-data.png","modified":1,"renderable":0},{"_id":"src/images/memory-leak-example.png","path":"images/memory-leak-example.png","modified":1,"renderable":0},{"_id":"src/images/mvvm.png","path":"images/mvvm.png","modified":1,"renderable":0},{"_id":"src/images/props-events.png","path":"images/props-events.png","modified":1,"renderable":0},{"_id":"src/images/readme-domain-guides.png","path":"images/readme-domain-guides.png","modified":1,"renderable":0},{"_id":"src/images/search-by-algolia.png","path":"images/search-by-algolia.png","modified":1,"renderable":0},{"_id":"src/images/state.png","path":"images/state.png","modified":1,"renderable":0},{"_id":"src/images/transition.png","path":"images/transition.png","modified":1,"renderable":0},{"_id":"src/images/typescript-type-error.png","path":"images/typescript-type-error.png","modified":1,"renderable":0},{"_id":"src/images/vue-component-with-preprocessors.png","path":"images/vue-component-with-preprocessors.png","modified":1,"renderable":0},{"_id":"src/images/vue-component.png","path":"images/vue-component.png","modified":1,"renderable":0},{"_id":"src/images/业务菜单结构图.png","path":"images/业务菜单结构图.png","modified":1,"renderable":0},{"_id":"src/images/功能说明文档规范.png","path":"images/功能说明文档规范.png","modified":1,"renderable":0},{"_id":"src/images/印象笔记-工作日志-偏好设置.png","path":"images/印象笔记-工作日志-偏好设置.png","modified":1,"renderable":0},{"_id":"src/images/印象笔记-工作日志-布局规范.png","path":"images/印象笔记-工作日志-布局规范.png","modified":1,"renderable":0},{"_id":"src/images/印象笔记-工作日志-标题栏规范.png","path":"images/印象笔记-工作日志-标题栏规范.png","modified":1,"renderable":0},{"_id":"src/images/团队协作体系.png","path":"images/团队协作体系.png","modified":1,"renderable":0},{"_id":"src/images/团队效率驱动图.png","path":"images/团队效率驱动图.png","modified":1,"renderable":0},{"_id":"src/images/培训总结交付规范-01.png","path":"images/培训总结交付规范-01.png","modified":1,"renderable":0},{"_id":"src/images/图片原型路径说明.png","path":"images/图片原型路径说明.png","modified":1,"renderable":0},{"_id":"src/images/培训总结交付规范-02.png","path":"images/培训总结交付规范-02.png","modified":1,"renderable":0},{"_id":"src/images/小程序-我的-积分.png","path":"images/小程序-我的-积分.png","modified":1,"renderable":0},{"_id":"src/images/小程序积分说明.png","path":"images/小程序积分说明.png","modified":1,"renderable":0},{"_id":"src/images/报表开发流程.png","path":"images/报表开发流程.png","modified":1,"renderable":0},{"_id":"src/images/提交表单.jpeg","path":"images/提交表单.jpeg","modified":1,"renderable":0},{"_id":"src/images/推送消息.png","path":"images/推送消息.png","modified":1,"renderable":0},{"_id":"src/images/数据库运维规范.png","path":"images/数据库运维规范.png","modified":1,"renderable":0},{"_id":"src/images/源码体系.png","path":"images/源码体系.png","modified":1,"renderable":0},{"_id":"src/images/职场仪式感.png","path":"images/职场仪式感.png","modified":1,"renderable":0},{"_id":"src/images/职场认知闭环.png","path":"images/职场认知闭环.png","modified":1,"renderable":0},{"_id":"src/images/胜因学院-业务流程图.png","path":"images/胜因学院-业务流程图.png","modified":1,"renderable":0},{"_id":"src/images/胜因学院-小程序业务效果图.png","path":"images/胜因学院-小程序业务效果图.png","modified":1,"renderable":0},{"_id":"src/images/胜因学院-小程序模块框架图.png","path":"images/胜因学院-小程序模块框架图.png","modified":1,"renderable":0},{"_id":"src/images/胜因学院-我的-积分.png","path":"images/胜因学院-我的-积分.png","modified":1,"renderable":0},{"_id":"src/images/jenkins-deploy/jenkins-deploy-gitlab-branch01.png","path":"images/jenkins-deploy/jenkins-deploy-gitlab-branch01.png","modified":1,"renderable":0},{"_id":"src/images/jenkins-deploy/jenkins-deploy-gitlab-branch02.png","path":"images/jenkins-deploy/jenkins-deploy-gitlab-branch02.png","modified":1,"renderable":0},{"_id":"src/images/jenkins-deploy/jenkins-deploy-step01.png","path":"images/jenkins-deploy/jenkins-deploy-step01.png","modified":1,"renderable":0},{"_id":"src/images/jenkins-deploy/jenkins-deploy-step03.png","path":"images/jenkins-deploy/jenkins-deploy-step03.png","modified":1,"renderable":0},{"_id":"src/images/jenkins-deploy/jenkins-deploy-index.png","path":"images/jenkins-deploy/jenkins-deploy-index.png","modified":1,"renderable":0},{"_id":"src/images/jenkins-deploy/jenkins-deploy-step04.png","path":"images/jenkins-deploy/jenkins-deploy-step04.png","modified":1,"renderable":0},{"_id":"src/images/jenkins-deploy/jenkins-deploy-step02.png","path":"images/jenkins-deploy/jenkins-deploy-step02.png","modified":1,"renderable":0},{"_id":"src/images/jenkins-deploy/jenkins-deploy-step05.png","path":"images/jenkins-deploy/jenkins-deploy-step05.png","modified":1,"renderable":0},{"_id":"src/images/jenkins-deploy/jenkins-deploy-view.png","path":"images/jenkins-deploy/jenkins-deploy-view.png","modified":1,"renderable":0},{"_id":"src/images/jenkins-deploy/jenkins-projects.png","path":"images/jenkins-deploy/jenkins-projects.png","modified":1,"renderable":0},{"_id":"src/images/jenkins-exception/jenkins-部署异常-代码语法错误.png","path":"images/jenkins-exception/jenkins-部署异常-代码语法错误.png","modified":1,"renderable":0},{"_id":"src/images/jenkins-exception/jenkins-部署异常-服务启动失败.png","path":"images/jenkins-exception/jenkins-部署异常-服务启动失败.png","modified":1,"renderable":0}],"Cache":[{"_id":"src/application/api-middleground.md","hash":"9fc56d0bc595f6b34ebe39e046baba6c7724f7db","modified":1686394145483},{"_id":"src/about/index.md","hash":"bb8049cee48b60a7f8d93b037d164c84ad0c221b","modified":1686394145483},{"_id":"src/index.md","hash":"39b6c104b0e8f09ecd04e89ef7d128271b88dfd0","modified":1686394145780},{"_id":"src/CNAME","hash":"fa1806b05a0927536b927adf485fbcc0c0caa3f5","modified":1686394145482},{"_id":"src/application/report-middleground.md","hash":"ca4e1443b13e4b198f7e45e41e3588bd89514b11","modified":1686394145483},{"_id":"src/application/syp-wechat-service-number.md","hash":"abcb15eba01dd879e32a1647e50088c4379feba0","modified":1686394145483},{"_id":"src/application/syp-android-tv.md","hash":"804c6d277daae6a0c1bd4581443b51eb4d126cca","modified":1686394145483},{"_id":"src/application/data-middleground.md","hash":"0e7b2f51e81d5099896f05afd4ecf3c14478fc38","modified":1686394145483},{"_id":"src/application/syp-wxmp.md","hash":"510d680d6788d93589820ededd94b7a2856ebd5c","modified":1686394145483},{"_id":"src/developer/api-design-guide.md","hash":"cca345624f346d4881d86f8d5fe8407bcb9684d6","modified":1686394145484},{"_id":"src/developer/environment-guide.md","hash":"b21ced5a988fbc5e13b8929eb27ab3973bcb97f9","modified":1686394145485},{"_id":"src/developer/etl-devops-guide.md","hash":"fe6a2879cb323852a834ff7a0fdd3fc1a0868ab3","modified":1686394145485},{"_id":"src/developer/guide.md","hash":"0c941830c6694217175af2a453028100882f6828","modified":1686394145486},{"_id":"src/developer/jenkins-deploy.md","hash":"8bb6d2222c8166600dee27365259d2f8d502a025","modified":1686394145486},{"_id":"src/developer/etl-script-example.sh.md","hash":"96c551b7ba4f194df3169fc1e62553e94af2f3b3","modified":1686394145486},{"_id":"src/developer/menu-guide.md","hash":"e20acea499e5fa0f2dec7a1ddeee13ef853a3c40","modified":1686394145486},{"_id":"src/developer/project-connections.md","hash":"ae776914a96d6df0d0d337f93ec46be9bbf48c45","modified":1686394145486},{"_id":"src/developer/rdc-guide.md","hash":"c0528991bdfce793bdf7bd444b6b250a36a7b72d","modified":1686394145486},{"_id":"src/corporate-culture/wednesday-release.md","hash":"adbd707d3d1690594f3c75871e18453d161e3e27","modified":1686394145484},{"_id":"src/corporate-culture/teamwork.md","hash":"90139d09c7f4458743cbd9be9b9d481d0c413fde","modified":1686394145484},{"_id":"src/developer/sypctl-readme.md","hash":"46b8b0d623ecaa581cdf89940677d5e444316e45","modified":1686394145489},{"_id":"src/corporate-culture/online-documents.md","hash":"a85e5e3b702e9ec7eefeb54cf8a33d4c5d4da422","modified":1686394145484},{"_id":"src/developer/sypetl.rb","hash":"22c767d68df7ea7bb0b214cadcaf526df8d9527b","modified":1686394145489},{"_id":"src/corporate-culture/weekly-publication.md","hash":"241d4fcc49cb6e6cd571b194f11c4d6edc80598c","modified":1686394145484},{"_id":"src/corporate-culture/workplace-ceremony.md","hash":"539e8372a5b7f6b28e0685e857954a83ff3fc5d3","modified":1686394145484},{"_id":"src/images/RESTFul-API.gif","hash":"22fb70958383c32c9a71447b834d75f4c60a5dbf","modified":1686394145505},{"_id":"src/images/data.png","hash":"7071337f9071f93ebf85639ede38b0f40fd75d98","modified":1686394145568},{"_id":"src/images/components.png","hash":"2f4056d9c0448a3204386ddefd84025ea8a58967","modified":1686394145562},{"_id":"src/images/devtools-storage-edge.png","hash":"4550f8c408787ed427c5f6b07530533690be1a3c","modified":1686394145570},{"_id":"src/images/devtools-storage-chrome.png","hash":"4c6defcd7f965e743c5a9d9242766e67b7a79a38","modified":1686394145569},{"_id":"src/images/dom-tree.png","hash":"820025017bfcf319d411f6eb2a6f07d543132028","modified":1686394145576},{"_id":"src/images/hn-architecture.png","hash":"0b4adafb587478119e1fb5808f8f04481268a3ce","modified":1686394145599},{"_id":"src/images/logged-proxied-data.png","hash":"0e875c2ded04180d9fc73785fbc91351b8159648","modified":1686394145669},{"_id":"src/images/lifecycle.png","hash":"53345be1363e09b3e43e34d27c030c4f376b060a","modified":1686394145668},{"_id":"src/images/mvvm.png","hash":"b83d7f54d5f2df09a662a7057cd521d23b67e451","modified":1686394145672},{"_id":"src/images/search-by-algolia.png","hash":"b580b0eb3965b62ce9bb1bab1ed0577448f73075","modified":1686394145676},{"_id":"src/images/props-events.png","hash":"0f0328ec572bda3f864bb65eea5dbbf32b59504c","modified":1686394145672},{"_id":"src/images/state.png","hash":"8d8033027c49fee1f795cdca0736c4315efc54fa","modified":1686394145677},{"_id":"src/images/transition.png","hash":"918faae8f4e8e8d0b02c7516ba3c9931b9161487","modified":1686394145677},{"_id":"src/images/typescript-type-error.png","hash":"f282f85d3fe94a7ebd2f741efad3d55a5469dcc5","modified":1686394145679},{"_id":"src/images/vue-component-with-preprocessors.png","hash":"daed0210c92685fd128bd5e8b9338700619b2442","modified":1686394145680},{"_id":"src/images/vue-component.png","hash":"a9155a78d17b79c5f8e28f4ccf48864fcf172efb","modified":1686394145681},{"_id":"src/images/小程序-我的-积分.png","hash":"a9092bef4bd32710f22d515f482a9603e4f7f685","modified":1686394145722},{"_id":"src/images/推送消息.png","hash":"e98a873c28e42e18d540f762bc1edca64c8efe58","modified":1686394145732},{"_id":"src/developer/api-guide/datav-report.md","hash":"970ec6daa6d1236a399dbb4b51e60d4c8f835bc7","modified":1686394145485},{"_id":"src/developer/api-guide/java-admin-add-module.md","hash":"05d1f69455e3a08afd44c5986a61877373bd54ed","modified":1686394145485},{"_id":"src/partials/_deliver_guide.md","hash":"8a2aa8f38a770d6638e39e081146317d21d80dd2","modified":1686394145780},{"_id":"src/developer/api-guide/syp-wxmp.md","hash":"54e1d49be8af099910db0ceeeaf780d4f66355ff","modified":1686394145485},{"_id":"src/developer/style-guide/cdn.md","hash":"f3760fc855ae8afb8a6eafc9f936bf775b23510d","modified":1686394145487},{"_id":"src/developer/style-guide/gitlab.md","hash":"b40e89d736e640b86305d475b68b2e7d7e703539","modified":1686394145487},{"_id":"src/developer/style-guide/javascript.md","hash":"0dfa720b2633e5fc635f12eaa4668f1b50a46c11","modified":1686394145488},{"_id":"src/developer/style-guide/if-else-optimize-solutions.md","hash":"a1430589276f46b849e06d5fdfbd6b1e13b05814","modified":1686394145487},{"_id":"src/developer/style-guide/tips-to-keep-java-code-clean.md","hash":"8f22eae4abba6d94003502e6e23e4e491cd6f3a0","modified":1686394145489},{"_id":"src/developer/style-guide/java.md","hash":"59eb12f4f456275c2447496bf369cdfab7423542","modified":1686394145488},{"_id":"src/developer/style-guide/mysql-insert-ignore-replace-duplicate-different.md","hash":"20c48c423736f301579bee539461c2eb14165c92","modified":1686394145488},{"_id":"src/developer/style-guide/tips-to-keep-javascript-code-clean.md","hash":"2e53d46c44deef87a6733711710de892fb63e235","modified":1686394145489},{"_id":"src/developer/style-guide/mysql.md","hash":"64bc57e69e64b1e844409169a45b51057a7601ec","modified":1686394145489},{"_id":"src/images/devtools-storage.png","hash":"edc4425d005028a30d2f2ae66183ecb65f0d988f","modified":1686394145571},{"_id":"src/images/提交表单.jpeg","hash":"708483d0d9598097fbfc45bcd8f0ca1ce2010167","modified":1686394145733},{"_id":"src/images/胜因学院-我的-积分.png","hash":"450c1ade891d30c70ece6099a5709f59cf8be8ea","modified":1686394145779},{"_id":"src/images/ETL流规范.png","hash":"daf63b3eea77ef08c0be83ac5496ac164f06ff9c","modified":1686394145492},{"_id":"src/images/RDC功能流程图.png","hash":"a241099865c2d83219e203e0b5ffff86d1887c1a","modified":1686394145504},{"_id":"src/images/RDC请求流程图.png","hash":"d88a41870defe5d4732acf2545f108c1ffbaf080","modified":1686394145505},{"_id":"src/images/gitlab-merge-request-conflicts.png","hash":"b47cd6c3f43e6f415b5bd4c57ee8f59d29305949","modified":1686394145585},{"_id":"src/images/印象笔记-工作日志-偏好设置.png","hash":"4ce22f0ffe8d2ce4eacd91b8b314e6edb7a88188","modified":1686394145689},{"_id":"src/images/印象笔记-工作日志-布局规范.png","hash":"4f4105b8b06849a0b023de14f7861ef032be706a","modified":1686394145690},{"_id":"src/images/团队效率驱动图.png","hash":"b9b9df02e421ed6dc47384294539abcecbd851d7","modified":1686394145700},{"_id":"src/images/图片原型路径说明.png","hash":"bf85cb4f0beaf2a8a13b84de5491da34b763a5ee","modified":1686394145702},{"_id":"src/images/报表开发流程.png","hash":"981d82d5a7831ef03cca1ab15688b592f520a40c","modified":1686394145728},{"_id":"src/images/胜因学院-业务流程图.png","hash":"be797e251cedc918a50ce17e93c74421dcad7b7e","modified":1686394145766},{"_id":"src/images/胜因学院-小程序模块框架图.png","hash":"1e230c97f1f0b2dc7f6fa411b7f9bd59b059ea80","modified":1686394145778},{"_id":"src/images/SypCtl-ServiceStatus.png","hash":"687e6c1e7c26157b6c5790f174a0e3278c7c585d","modified":1686394145508},{"_id":"src/images/SypCtlServer-ServiceStatus.png","hash":"e039d7bdb4ada1ed0e9e41eff07339ee3aa859d8","modified":1686394145527},{"_id":"src/images/SypCtl三级备份方案.png","hash":"c42d0dbc3d2f8e1495ea10522e1361cf8ca39414","modified":1686394145535},{"_id":"src/images/SypCtl功能结构.png","hash":"2465496edd5215d1bc95df9b3bc29961c6547580","modified":1686394145538},{"_id":"src/images/gitlab-new-merge-request-submit.png","hash":"eb7da323756a8a5dcde1efdcc477eeeec6baa712","modified":1686394145588},{"_id":"src/images/gitlab-new-merge-request.png","hash":"f813245bfa217b6c304dde34d83e1e7633921d4b","modified":1686394145598},{"_id":"src/images/readme-domain-guides.png","hash":"fe00b5fbfd51bc2642bea4b8da5a0bb49c823cd5","modified":1686394145676},{"_id":"src/images/memory-leak-example.png","hash":"7c2df66d99f06df266d294aa7c923fe5e8af7657","modified":1686394145671},{"_id":"src/images/功能说明文档规范.png","hash":"9010a1dee70c6ba1d3a44088781ad00e72ad7842","modified":1686394145687},{"_id":"themes/vue/layout/index.ejs","hash":"8d2d3a2c0b99a35e72043071968bf51312e3880d","modified":1686394145782},{"_id":"themes/vue/layout/layout.ejs","hash":"7b305e798378d00a56d94b5604611497115c4349","modified":1686394145783},{"_id":"themes/vue/layout/page.ejs","hash":"07056df8b890bae9516e845caa9e6a9c7dc38de2","modified":1686394145783},{"_id":"themes/vue/_config.yml","hash":"ce43774d3f5f1b574dfb2f54b832249d50adf7d9","modified":1686394145780},{"_id":"themes/vue/layout/post.ejs","hash":"1cdeb67a1177bca464a11eb44a86f8824220bd41","modified":1686394145787},{"_id":"themes/vue/layout/sponsors-page.ejs","hash":"5c05da93ccf11201b96f0c10282828eeba1c0740","modified":1686394145787},{"_id":"themes/vue/source/browserconfig.xml","hash":"7836fcf8b3a9a39ea41b1193d08521ca2cd20539","modified":1686394145787},{"_id":"themes/vue/layout/icons/btc.ejs","hash":"fed9b5d4b5e19813dc6dea1e58143d402b8692e0","modified":1686394145781},{"_id":"themes/vue/layout/icons/github-dark.ejs","hash":"beffc9f0efdbf78868f6f59ee3a75d9a9ecd8cda","modified":1686394145781},{"_id":"themes/vue/source/manifest.json","hash":"eb4c734e31c5781341590a24d0d53c43640e4ca4","modified":1686394145839},{"_id":"themes/vue/layout/icons/bch.ejs","hash":"d5d3f724738964e5ea4dcb5ca733c5a3ce6268ad","modified":1686394145781},{"_id":"themes/vue/layout/icons/ltc.ejs","hash":"6d74d8a03ae0729d84e58c5a776916d7fb217543","modified":1686394145782},{"_id":"themes/vue/layout/icons/github.ejs","hash":"188ffb2152598973849360eafeb18d4f907cf32a","modified":1686394145781},{"_id":"themes/vue/layout/icons/play.ejs","hash":"af4cb73bbfdadd794e0fba125fdcd66fc3263f22","modified":1686394145782},{"_id":"themes/vue/layout/icons/eth.ejs","hash":"36e176c7e64e56c0e2b5da03d6a297344862b550","modified":1686394145781},{"_id":"themes/vue/layout/icons/twitter.ejs","hash":"4fc8410bd2bc266c81d87399c8b66c5cbae5ce69","modified":1686394145782},{"_id":"themes/vue/layout/partials/ad-pagetop.ejs","hash":"2ccebde7bc929536faac342945a15532a4f7e1a3","modified":1686394145783},{"_id":"themes/vue/layout/icons/medium.ejs","hash":"11850bc444cc7b966bc804930fb7aa9bb4790f8d","modified":1686394145782},{"_id":"themes/vue/layout/partials/ad.ejs","hash":"680873cf4b40a1bc25ab4743302fed479cdf03c5","modified":1686394145784},{"_id":"themes/vue/layout/partials/application_dropdown.ejs","hash":"7bf4045dc3da18cb63ee0dd1e1631c2045a10209","modified":1686394145784},{"_id":"themes/vue/layout/partials/ad-text.ejs","hash":"4b7836bc7f2a212772a8029297cbbbe21b1de654","modified":1686394145784},{"_id":"themes/vue/layout/partials/corporate_culture_dropdown.ejs","hash":"064f50bb6598687e53555bec2b464b3ae6d09de4","modified":1686394145785},{"_id":"themes/vue/layout/partials/contributors.ejs","hash":"19cbb08d56735c7215c47ec46fdcc656cb10dab0","modified":1686394145784},{"_id":"themes/vue/layout/partials/main_menu.ejs","hash":"0acd2770f93c605cfa84060933f082b219eeea56","modified":1686394145785},{"_id":"themes/vue/layout/partials/language_dropdown.ejs","hash":"0f06c9fef4cf717c0b613d6ba38924bd1de35f3d","modified":1686394145785},{"_id":"themes/vue/layout/partials/sidebar.ejs","hash":"c6fe503acc642c61ac5236904cd1ce8c50b427a8","modified":1686394145786},{"_id":"themes/vue/layout/partials/header.ejs","hash":"bdd0334d9153ea4054d1f0886fd0fd7bf00817a0","modified":1686394145785},{"_id":"themes/vue/layout/partials/platinum_sponsors.ejs","hash":"c84b7000dfff891ce68420a69a14306f9ea2a878","modified":1686394145786},{"_id":"themes/vue/layout/partials/sponsors.ejs","hash":"99efb7aa1ab3f7463dad38c335175e911d1008fe","modified":1686394145786},{"_id":"themes/vue/layout/partials/developer_dropdown.ejs","hash":"0623888d422583a316f7aa260a0395cf6562ad77","modified":1686394145785},{"_id":"themes/vue/layout/partials/sponsors_sidebar.ejs","hash":"4e749d47df002e1e11da124765720bf9851449dc","modified":1686394145786},{"_id":"themes/vue/layout/partials/toc.ejs","hash":"7ff29ccaf91239d7af76d29b79282e7ec96a6d3f","modified":1686394145787},{"_id":"themes/vue/layout/partials/support_vue_dropdown.ejs","hash":"fe9bb23186ae33ccc680ef3afbfb8ac73e3ca246","modified":1686394145786},{"_id":"themes/vue/source/css/_ad-pagetop.styl","hash":"db923b32fe1c78fab2dca8f2e1af691821f9ae4e","modified":1686394145788},{"_id":"themes/vue/source/css/_ad.styl","hash":"87398b12ccd32dbcd979a91f7b8acfc731721fd1","modified":1686394145788},{"_id":"themes/vue/source/css/_animations.styl","hash":"709eff86f230249ea35a7d6374d21b81e870cb1c","modified":1686394145788},{"_id":"themes/vue/source/css/_api.styl","hash":"d1d041953b75246d6733324ea0073bc5491468b1","modified":1686394145788},{"_id":"themes/vue/source/css/_fonts.styl","hash":"c2d6a6f72f961f37f42c559bc394637ab62f0400","modified":1686394145789},{"_id":"themes/vue/source/css/_header.styl","hash":"7dca67637e5367560f28e2b6201367d1477800a7","modified":1686394145789},{"_id":"themes/vue/source/css/_demo.styl","hash":"587c26bdedf0bcbaed841fe4222431439ed7d16e","modified":1686394145788},{"_id":"themes/vue/source/css/_common.styl","hash":"165fc5eb0b2cbf9b96b2cd8f7c6213bcea14a1b1","modified":1686394145788},{"_id":"themes/vue/source/css/_migration.styl","hash":"6c95c614220e0318913282fe793f84b0e99ab7a6","modified":1686394145789},{"_id":"themes/vue/source/css/_scrimba.styl","hash":"16dc38ef54d9e4a579e4cc545e6121f277bf640b","modified":1686394145789},{"_id":"themes/vue/source/css/_modal.styl","hash":"4cda20b9065f34382014f9985bcac3db423ae0af","modified":1686394145789},{"_id":"themes/vue/source/css/_search-page.styl","hash":"b836d30b5fa0366ea1308b2e1d8e5fa987e0ccd2","modified":1686394145790},{"_id":"themes/vue/source/css/_settings.styl","hash":"7ae3af2790cfc6597ba07de072f994e59db28a17","modified":1686394145790},{"_id":"themes/vue/source/css/_offline-menu.styl","hash":"bdd13f1a8814197cd629fc433ca8874b5af929ec","modified":1686394145789},{"_id":"themes/vue/source/css/_sidebar.styl","hash":"33dddb3d514729aa038dbb8671d6fcad19e98c44","modified":1686394145790},{"_id":"themes/vue/source/css/_sponsors-index.styl","hash":"7ab6d71fb235e8979c7a6661622ad750192ad167","modified":1686394145790},{"_id":"themes/vue/source/css/_sponsors-page.styl","hash":"2920beb84c8f9b93acd2ff161991240e6389db94","modified":1686394145790},{"_id":"themes/vue/source/css/_sponsors-sidebar.styl","hash":"902587580e09f5ef6325916a372f893498ba7cf1","modified":1686394145790},{"_id":"themes/vue/source/css/_style-guide.styl","hash":"e3f11c65cfc816bf5694a7ce0f45249ddd1b53ab","modified":1686394145791},{"_id":"themes/vue/source/css/_team.styl","hash":"462dd48773c43984441271ab2aad3d5ae582e1d7","modified":1686394145791},{"_id":"themes/vue/source/css/_syntax.styl","hash":"7c0ec4305e66d1610ddccb62236a83c1c314d7a3","modified":1686394145791},{"_id":"themes/vue/source/css/_themes-example.styl","hash":"913c2a7a358fd74da4ec37019ecc9b6faafa8101","modified":1686394145791},{"_id":"themes/vue/source/css/benchmark.styl","hash":"f676e3d142530aef8a4f29a22360f4516047a1ff","modified":1686394145791},{"_id":"themes/vue/source/css/search.styl","hash":"006d48944e9513d569ba68ed054755a5aa42c338","modified":1686394145792},{"_id":"themes/vue/source/css/index.styl","hash":"ca0711ac35a386ae0aa2a376a1d385720462a75f","modified":1686394145792},{"_id":"themes/vue/source/css/page.styl","hash":"0d4fdd9be847d6a5c770ff50d1cfb9e6df0c6234","modified":1686394145792},{"_id":"themes/vue/source/images/aaha.png","hash":"081c1d01fd9d611e6270d45d87c15b41fbc1aaed","modified":1686394145801},{"_id":"themes/vue/source/images/bestvpn_co.png","hash":"499990e72cb49b3c53316d376c787ff1c5f17a7f","modified":1686394145804},{"_id":"themes/vue/source/images/alligator_io.svg","hash":"95f65bec674298d1fe49b46768034dbf64b4adbf","modified":1686394145802},{"_id":"themes/vue/source/images/chaitin.png","hash":"a61b1ec393b9600d173255fed72fd873a72b8225","modified":1686394145806},{"_id":"themes/vue/source/images/blokt_cryptocurrency_news.png","hash":"3182170f44bb83993946303ae81d3b6c1890c957","modified":1686394145805},{"_id":"themes/vue/source/images/check.png","hash":"b22174f8a966abf7a46eba7991be7a7ae5e16637","modified":1686394145806},{"_id":"themes/vue/source/images/bit.png","hash":"c017f11268e43727a12aa40885ea1f18056233b1","modified":1686394145805},{"_id":"themes/vue/source/images/cloudstudio.png","hash":"a0cb4e3d6a3f8f06e0c0416c71427dd01f3af52b","modified":1686394145806},{"_id":"themes/vue/source/images/coding.png","hash":"42d13e784d11c72f8bb40042b2d99761ddbe8559","modified":1686394145807},{"_id":"themes/vue/source/images/coin-bch.png","hash":"783293c8b782e7772e61f62e1168ae175a0a1456","modified":1686394145807},{"_id":"themes/vue/source/images/coin-btc.png","hash":"4dc6d5b671dba33b3e293180ccc9ec2f0b480a6b","modified":1686394145807},{"_id":"themes/vue/source/images/coin-ltc.png","hash":"2bf87f92612990bc609dcc8826a344be05166717","modified":1686394145808},{"_id":"themes/vue/source/images/coin-eth.png","hash":"aadb0a7d299f9a2baf2bf2d281f70d1e26e15a48","modified":1686394145807},{"_id":"themes/vue/source/images/derek_pollard.png","hash":"a09bcb5d8fe8a712b31591aa2169f751ea7591ba","modified":1686394145808},{"_id":"themes/vue/source/images/devexpress.png","hash":"8b39711fba0756c8407e27de46f2641ac651f30b","modified":1686394145808},{"_id":"themes/vue/source/images/dcloud.gif","hash":"84f104960642885316979bb45856c53a93e6b2e8","modified":1686394145808},{"_id":"themes/vue/source/images/devsquad.png","hash":"f96551ba232f1b005512892334e912b45cc37374","modified":1686394145809},{"_id":"themes/vue/source/images/down.png","hash":"6ded74a98bb128e76bfd45cffede2679fd0598f0","modified":1686394145810},{"_id":"themes/vue/source/images/dopamine.png","hash":"2ea0928227dd6cb44ceeca4ed877feb2be741ff1","modified":1686394145810},{"_id":"themes/vue/source/images/energy_comparison.png","hash":"eb8657097242bd990585ddae38ad72e8388917ca","modified":1686394145810},{"_id":"themes/vue/source/images/earthlink.png","hash":"b47c30f0093a0e8c48c5d0ae1feff24d6ef64de4","modified":1686394145810},{"_id":"themes/vue/source/images/feed.png","hash":"eba32c4f87e5ea1f89dce9c68d8603c8f82a8cd9","modified":1686394145811},{"_id":"themes/vue/source/images/fastcoding_inc.svg","hash":"12cfd6800f3b3b37999001eb41f9ff515888bc8c","modified":1686394145811},{"_id":"themes/vue/source/images/frontend_love.png","hash":"ef3695d6a19646599211f886e3a27cd75a374ef6","modified":1686394145811},{"_id":"themes/vue/source/images/firestick_tricks.png","hash":"b43bc723f029191685f77fb573b5c0aadbc2a12d","modified":1686394145811},{"_id":"themes/vue/source/images/geekbang-vue-ad.gif","hash":"c24983efc7dba466d8c4cc56a1c5749c19f73602","modified":1686394145813},{"_id":"themes/vue/source/images/gitee.png","hash":"29fbe638ec4e24faad12f345399eac7f426b2772","modified":1686394145813},{"_id":"themes/vue/source/images/html_burger.png","hash":"a6c54ce4ae3ad4b5f1b02a3bb1ca7da838eee8f5","modified":1686394145815},{"_id":"themes/vue/source/images/gridsome.png","hash":"85adec48d683c206a5ccfaaf2de39c8b12ce09fb","modified":1686394145814},{"_id":"themes/vue/source/images/icons.png","hash":"50aa19eac3a7bf6acb435838b7a890050a4a6d8d","modified":1686394145815},{"_id":"themes/vue/source/images/icons_8.png","hash":"4d44e5b251f72dffe37ac7007042fc0b7beb34fb","modified":1686394145816},{"_id":"themes/vue/source/images/inkoop.png","hash":"fb568c6e466a6c19e5ee40bf92cf2527c58a6db2","modified":1686394145816},{"_id":"themes/vue/source/images/intfocus.png","hash":"ed658107ad25b2350d87df5a69e6ef1a26a1a978","modified":1686394145816},{"_id":"themes/vue/source/images/intygrate.png","hash":"f55e418bdf6b1a9fc72fee3d86ec02cc51c6d83b","modified":1686394145817},{"_id":"themes/vue/source/images/isle_of_code.png","hash":"ff273db09eb5ca17d047c73256ee311a9a04d911","modified":1686394145817},{"_id":"themes/vue/source/images/jqwidgets_.png","hash":"6ffa378d97190dc88d4d54fa0051c36c6088e03d","modified":1686394145817},{"_id":"themes/vue/source/images/laravel.png","hash":"010281d898830dbb8c848f6a272ba46ddc95e800","modified":1686394145818},{"_id":"themes/vue/source/images/logo-100x50.png","hash":"c31487c3d2a226d87ab9c341445581e0f4dc1e44","modified":1686394145818},{"_id":"themes/vue/source/images/jqwidgets_ltd.png","hash":"eb4da2aec072a3f2a6c3cd322e1a44528f737177","modified":1686394145818},{"_id":"themes/vue/source/images/marcus_hiles.png","hash":"08a36fa5f6bd0156a8b7ccd86ff74baf56776536","modified":1686394145819},{"_id":"themes/vue/source/images/menu.png","hash":"45d62574f2a22017c2aa2001964eaf560f1f70c6","modified":1686394145819},{"_id":"themes/vue/source/images/logo.png","hash":"ed658107ad25b2350d87df5a69e6ef1a26a1a978","modified":1686394145818},{"_id":"themes/vue/source/images/nativescript.png","hash":"ce3751738de68182c1e9ebab7d345227753cc5dc","modified":1686394145820},{"_id":"themes/vue/source/images/modus.png","hash":"d4f2c2f7292b26ce11d88d2b08ff299f4e8eb2d4","modified":1686394145819},{"_id":"themes/vue/source/images/onsen_ui.png","hash":"0dc98d72d447a8f4d3b8c43cb0890362597de194","modified":1686394145820},{"_id":"themes/vue/source/images/neds.png","hash":"675a3f7997063c12a48946219db52948732b71b2","modified":1686394145820},{"_id":"themes/vue/source/images/opteo.png","hash":"1915a34af45592878eacc3764dc603a81491f4ae","modified":1686394145821},{"_id":"themes/vue/source/images/passionate_people.png","hash":"c637a4f55fe9d8f469a20796fe159b18fe54b327","modified":1686394145822},{"_id":"themes/vue/source/images/patreon.png","hash":"bb0d0dd23c4058d8be63cdf0ccba1e6a13b05acf","modified":1686394145822},{"_id":"themes/vue/source/images/paypal.png","hash":"b1c3741633ff0c0f8f8a0e80d68202c14a524009","modified":1686394145822},{"_id":"themes/vue/source/images/search.png","hash":"7f519d31bc3c6ca005b6ca5d8ff5ded172df627a","modified":1686394145822},{"_id":"themes/vue/source/images/shopware_ag.png","hash":"c440385ade9c0f9c66104bd1b1b7d41d32c0251a","modified":1686394145822},{"_id":"themes/vue/source/images/shopware_ag.svg","hash":"658c483629cfce8eed7221d1f8463b532abaab02","modified":1686394145823},{"_id":"themes/vue/source/images/stdlib.png","hash":"7adff740e3c1a55e243dff2fb903250d1ba3f559","modified":1686394145825},{"_id":"themes/vue/source/images/syncfusion.png","hash":"688285b2ae526c27aaa5cd081a95c881750c59cc","modified":1686394145826},{"_id":"themes/vue/source/images/tee__.png","hash":"e9fc652b1ed66c56be035c1a4607ade5724efc1f","modified":1686394145826},{"_id":"themes/vue/source/images/tidelift.png","hash":"63c60abbab4bcc37340f29e0db8290383fb35631","modified":1686394145827},{"_id":"themes/vue/source/images/syp-java-admin.png","hash":"544d2fdfc0a3e8bd7d80d250c52294fa9772f22f","modified":1686394145826},{"_id":"themes/vue/source/images/tighten_co.png","hash":"a0f3f8614ad7f9a4e0eaa0793cf24519b5b25e45","modified":1686394145827},{"_id":"themes/vue/source/images/tencent-ad.png","hash":"91e12bd1f3ec7dd78592d5a0d340731a1ad804f2","modified":1686394145827},{"_id":"themes/vue/source/images/tooltwist.png","hash":"e625a481e2eb3f7194273d58b250d0fafd42e462","modified":1686394145828},{"_id":"themes/vue/source/images/valuecoders.png","hash":"ae72f75eea4e7864c06b7641d0a4d426bdc59f18","modified":1686394145830},{"_id":"themes/vue/source/images/vpnranks.png","hash":"a8fc6afa79b73ca9e15a76387c5d68273690d08c","modified":1686394145830},{"_id":"themes/vue/source/images/vuejobs.png","hash":"149231804a4686f1ec890f7d984207ea83cf8190","modified":1686394145831},{"_id":"themes/vue/source/images/vehikl.png","hash":"e5f045088e79ac5d3aedd2d4efc5b37d15431df0","modified":1686394145830},{"_id":"themes/vue/source/images/vuemastery.png","hash":"a783b81f0d9ded6e8d46991cc8d18ff878e17656","modified":1686394145831},{"_id":"themes/vue/source/images/webdock.png","hash":"c32ce7cafbc31378c592226dac6ab8e0a8d9b124","modified":1686394145832},{"_id":"themes/vue/source/images/vueschool.png","hash":"a4ae5d18c97b8cb5a5d8fcd4c80a6230bf2fc3d9","modified":1686394145831},{"_id":"themes/vue/source/images/vuetify.png","hash":"66254951f82e0639fb588b362f72b80839d9f411","modified":1686394145832},{"_id":"themes/vue/source/images/wilderminds.png","hash":"a9e87eda70ad75a6148e1a980cb4e4ddb085e3ca","modified":1686394145833},{"_id":"themes/vue/source/images/x_team.png","hash":"c2d996ec0a802ce39d695266fbc142dd7dad45c0","modified":1686394145833},{"_id":"themes/vue/source/images/y8.png","hash":"9b584ce4cc6a0724d1dd01ce694411e54f790425","modified":1686394145833},{"_id":"themes/vue/source/images/yakaz.png","hash":"8287ea4beca210e44cde508247c09b930e48d01a","modified":1686394145834},{"_id":"themes/vue/source/images/youku.png","hash":"5a34edc5e3cb1fee6fe31d8920853e849eedc282","modified":1686394145834},{"_id":"themes/vue/source/js/common.js","hash":"a3f4ec57cc0efa950919817879d80df413873bf0","modified":1686394145834},{"_id":"themes/vue/source/js/smooth-scroll.min.js","hash":"90cdfb5d91db8cce21ab705335d591768555f474","modified":1686394145835},{"_id":"themes/vue/source/js/css.escape.js","hash":"1d0e28a08261de3955b0ee18432e304c1f468441","modified":1686394145835},{"_id":"themes/vue/source/fonts/Dosis/OFL.txt","hash":"d9c7f99f550afe09df563a58309b9ff960e2bca5","modified":1686394145794},{"_id":"themes/vue/source/fonts/Roboto_Mono/LICENSE.txt","hash":"2b8b815229aa8a61e483fb4ba0588b8b6c491890","modified":1686394145794},{"_id":"themes/vue/source/fonts/Source_Sans_Pro/OFL.txt","hash":"790b53c62615441e9bddfd8050bff50be2058b87","modified":1686394145796},{"_id":"src/images/数据库运维规范.png","hash":"7ae15e154e23c0af5583cb94a4568392175e9a65","modified":1686394145743},{"_id":"src/images/jenkins-deploy/jenkins-deploy-gitlab-branch02.png","hash":"4be794ccac93fa149a9fbc956596df5bfe5db748","modified":1686394145621},{"_id":"src/images/jenkins-deploy/jenkins-deploy-gitlab-branch01.png","hash":"3e7f98db0ff3f3906d4df548c7ec3b767e8da8df","modified":1686394145611},{"_id":"src/images/jenkins-deploy/jenkins-deploy-step01.png","hash":"feea47834168571055c9085f44cbae270f817e21","modified":1686394145634},{"_id":"src/images/jenkins-deploy/jenkins-projects.png","hash":"b07f39064b42cb6e574d4293e391a319360e395f","modified":1686394145658},{"_id":"src/images/devtools-timetravel.gif","hash":"43ddab8e7869a513c2058d2892b54d0c556ef5e2","modified":1686394145575},{"_id":"src/images/业务菜单结构图.png","hash":"69141e06d8958aceee6198be0a51b3f5319b1a37","modified":1686394145685},{"_id":"src/images/印象笔记-工作日志-标题栏规范.png","hash":"3c048d3d832ed9423b61dab2ef749253ad93709d","modified":1686394145692},{"_id":"src/images/小程序积分说明.png","hash":"3981af5dbb2353a333fc46f53ad78b1a2655931a","modified":1686394145725},{"_id":"themes/vue/source/images/accelebrate.png","hash":"c20a58507563546c91813caa2d7751420a1d6cf3","modified":1686394145802},{"_id":"themes/vue/source/images/bacancy_technology.png","hash":"920b3e48d4b18d454ecaeffd4e2895ceff06d1ec","modified":1686394145804},{"_id":"themes/vue/source/images/usave.png","hash":"d9de7e9a012a636cdb323a62faa62d05fca33141","modified":1686394145829},{"_id":"src/images/源码体系.png","hash":"a53ebeab769ae50c73d4a698d2d6fb651367e7c2","modified":1686394145748},{"_id":"themes/vue/source/js/vue.min.js","hash":"28bb1c91e37b53f4ebb48ce482dccb240003e078","modified":1686394145838},{"_id":"themes/vue/source/fonts/Roboto_Mono/RobotoMono-Regular.ttf","hash":"69a65c2b797d2fa124b4c709097e761b7857a035","modified":1686394145795},{"_id":"src/images/jenkins-deploy/jenkins-deploy-step03.png","hash":"68dacca5a8375fd260960ecda677a6ef68e8105d","modified":1686394145640},{"_id":"src/images/jenkins-deploy/jenkins-deploy-step02.png","hash":"fdd1b5037460e5d1896470119dcd66e78182c4c7","modified":1686394145637},{"_id":"src/images/团队协作体系.png","hash":"34f98223c7105e353fa46fa52f70210e4d8aa7e9","modified":1686394145697},{"_id":"src/images/培训总结交付规范-01.png","hash":"2c488b8adc3bec34a33429c7a6a194f3805c4122","modified":1686394145706},{"_id":"themes/vue/source/images/geekbang-ad.jpg","hash":"3beb4627c739c5a1eb05689259fe10ca921a2c92","modified":1686394145813},{"_id":"themes/vue/source/fonts/Dosis/Dosis-Medium.ttf","hash":"46067c93a46fbb4d0b38f9ce7fe0e2c5e4d8c047","modified":1686394145793},{"_id":"themes/vue/source/fonts/Source_Sans_Pro/SourceSansPro-Light.ttf","hash":"bae12c1d7c8d38f88ac5566ea3b3a97c9f5ac446","modified":1686394145797},{"_id":"themes/vue/source/fonts/Source_Sans_Pro/SourceSansPro-Regular.ttf","hash":"1e9f0372c269da205fdbac8cf27cb9cf59f6ad45","modified":1686394145799},{"_id":"themes/vue/source/fonts/Source_Sans_Pro/SourceSansPro-Semibold.ttf","hash":"f08e28d10c1bfe92543416e30b59620942859696","modified":1686394145801},{"_id":"src/images/职场仪式感.png","hash":"3bd7e6f9ecb6c89ea061d5a08430f46c054a6cec","modified":1686394145758},{"_id":"src/images/职场认知闭环.png","hash":"fc6db5284945f6f0af4c9df8dddd95e7777a4556","modified":1686394145764},{"_id":"src/images/jenkins-exception/jenkins-部署异常-代码语法错误.png","hash":"c6ea8ea8c8f7e617a816b125a1f125d3dc84761a","modified":1686394145663},{"_id":"src/images/jenkins-exception/jenkins-部署异常-服务启动失败.png","hash":"8de2531223ba48af8a0a44dd5ae0176aee91666e","modified":1686394145667},{"_id":"src/images/Gitlab协作规范.png","hash":"fa220e5539f663700c07ad492df68a3c182b818e","modified":1686394145496},{"_id":"themes/vue/source/images/special-sponsor-spot.png","hash":"f635521496f2f8a4c35c67160b088c1756b7d948","modified":1686394145825},{"_id":"src/images/jenkins-deploy/jenkins-deploy-step04.png","hash":"a2b9771f391988398d10fcbf3a92b9a59633f65f","modified":1686394145645},{"_id":"src/images/SypCtlServer-AgentLog.png","hash":"78bc18c28763ec79d55874092ce29fc7b379d0d8","modified":1686394145512},{"_id":"src/images/MySQL-ER图示例.png","hash":"bbe55b405b2460071c34fc9c34bed60e520c0e09","modified":1686394145501},{"_id":"src/images/SypCtlSync演示.png","hash":"8638c1c924300bcd7bab0fbda67fd787a3062122","modified":1686394145532},{"_id":"themes/vue/source/js/vue.js","hash":"e7bebefc32cb9c0d8261e764e8f24c1cd41c217f","modified":1686394145837},{"_id":"src/images/jenkins-deploy/jenkins-deploy-index.png","hash":"b4167a2c64dfda9016861bacbffb0815eb093b41","modified":1686394145631},{"_id":"src/images/jenkins-deploy/jenkins-deploy-view.png","hash":"352b6bd49f98dcf14bf94f7479d1916c99b15a59","modified":1686394145656},{"_id":"src/images/SypCtlServer-BackupFile.png","hash":"2a59cd0d0c326690ebaa1d7ebe8bcab86d613212","modified":1686394145517},{"_id":"src/images/breakpoint_set.png","hash":"db3c2527261d19c83424b69d789fca4a85dbec07","modified":1686394145561},{"_id":"src/images/config_add.png","hash":"ef17eaeb40ca00f9c66d813c569c1b54160db1a9","modified":1686394145567},{"_id":"src/images/jenkins-deploy/jenkins-deploy-step05.png","hash":"c14277f7a117a50585a365dd645daeaa9b82f41e","modified":1686394145651},{"_id":"src/images/breakpoint_hit.png","hash":"56c93842cb88a37df7dd327507c5c44f94459e72","modified":1686394145556},{"_id":"src/images/SypCtlServer-BackupMySQL.png","hash":"3f17ad56675098c2a85f621bf865cf7e39b1ad2a","modified":1686394145524},{"_id":"src/images/胜因学院-小程序业务效果图.png","hash":"f18deadb63b72411318713047292dc337fc57d03","modified":1686394145776},{"_id":"src/images/SypEtl-MonitorLog.png","hash":"b7e428342d48f13b1c0cf6de9965e6f1cae1d1d1","modified":1686394145546},{"_id":"src/images/培训总结交付规范-02.png","hash":"64da6d1cc436a4d553b13c5796dde97b79dfc8c7","modified":1686394145721},{"_id":"public/application/api-middleground.html","hash":"c7444718d401a6adb6ae888fcb3b92d0d7d9fda9","modified":1686394992986},{"_id":"public/application/data-middleground.html","hash":"7c2ec745348f5e3413cb63382af292ddbd563755","modified":1686394992986},{"_id":"public/application/syp-android-tv.html","hash":"b0c3570f07f0f1ec52593c957c5342da4b46fe44","modified":1686394992986},{"_id":"public/application/report-middleground.html","hash":"5c0e4d41a9add4adee91a1fd8f1b96a12722d837","modified":1686394992986},{"_id":"public/application/syp-wechat-service-number.html","hash":"4d8889c8c985f68233bfb872c73a81e4d7994b52","modified":1686394992986},{"_id":"public/developer/etl-script-example.sh.html","hash":"e87a983385ae0cf6676124223a6cc5040c86c160","modified":1686394992986},{"_id":"public/corporate-culture/wednesday-release.html","hash":"3a89428dd80c7570b41737177d65076d0868f9c6","modified":1686394992986},{"_id":"public/index.html","hash":"5570ec418a4064e79d40d5f4b495b2a606275b26","modified":1686394992986},{"_id":"public/about/index.html","hash":"373c90bca24b44ac3f603f5ebe76f892fb40f881","modified":1686394992986},{"_id":"public/application/syp-wxmp.html","hash":"248d86dfbd05629bc2c002e297fa357e10cfe1fe","modified":1686394992986},{"_id":"public/developer/api-design-guide.html","hash":"2d2e60b29b8e8fe9cad440ee8193820805e4ba5b","modified":1686394992986},{"_id":"public/developer/environment-guide.html","hash":"855e2de754e12d80d43acadb5c6cc795f8caa014","modified":1686394992986},{"_id":"public/developer/etl-devops-guide.html","hash":"24c1940fb28f214ddf4fc1cb3e3b36f10894323d","modified":1686394992986},{"_id":"public/developer/guide.html","hash":"2d92e37c200e305bfd527e0a010ecf6a914e2450","modified":1686394992986},{"_id":"public/developer/jenkins-deploy.html","hash":"96f3eacbc74c5b91a00398ac3da40c153d54594b","modified":1686394992986},{"_id":"public/developer/menu-guide.html","hash":"cf3190540b8317b8f6a771048b5d7de4d550988f","modified":1686394992986},{"_id":"public/developer/project-connections.html","hash":"d58ce1af07a815eefd5d6fc6c17b6f010c0cbe4f","modified":1686394992986},{"_id":"public/developer/rdc-guide.html","hash":"9b72d0c58fab8adc3f3b4cc69908045fb26f5cfa","modified":1686394992986},{"_id":"public/developer/sypctl-readme.html","hash":"6bf500cb38e899976401edc12c47a331f82f0065","modified":1686394992986},{"_id":"public/corporate-culture/online-documents.html","hash":"05d5564f157d44ae791503afc42ef0774f68cd1d","modified":1686394992986},{"_id":"public/corporate-culture/teamwork.html","hash":"77929e8feb8a877ef3435107e81ca001a5ea5075","modified":1686394992986},{"_id":"public/corporate-culture/weekly-publication.html","hash":"7259a3277eea1752ec052bb8fb651f3fe974c841","modified":1686394992986},{"_id":"public/corporate-culture/workplace-ceremony.html","hash":"ee2eb2c7f525133f007bffdcbc70e5e05ab29e9c","modified":1686394992986},{"_id":"public/developer/api-guide/java-admin-add-module.html","hash":"933b7262ee6e0439c18e0b17769b6c1ea0ccbe56","modified":1686394992986},{"_id":"public/developer/api-guide/datav-report.html","hash":"6b2876f47dfd352d5d483fabfffe434be21387c7","modified":1686394992986},{"_id":"public/developer/api-guide/syp-wxmp.html","hash":"aa9345856cef256364c1b44174729bb4bab55174","modified":1686394992986},{"_id":"public/developer/style-guide/gitlab.html","hash":"04c843d4f148b79c26bd69e38cf22fb7d0e70d7e","modified":1686394992986},{"_id":"public/developer/style-guide/cdn.html","hash":"6259203d447f140e7c19aaa01b06b1e1d51a8d73","modified":1686394992986},{"_id":"public/developer/style-guide/if-else-optimize-solutions.html","hash":"eac733e11c984c31ec89529fbfb0debe1f9cf63b","modified":1686394992986},{"_id":"public/developer/style-guide/java.html","hash":"f129ea64eff2edcda751291b7966ceb115751b72","modified":1686394992986},{"_id":"public/developer/style-guide/javascript.html","hash":"1bcacda4de02584e43f61378f7dbb67057d40f42","modified":1686394992986},{"_id":"public/developer/style-guide/mysql-insert-ignore-replace-duplicate-different.html","hash":"5a3a8c6319b820fb31768cf85e014137fd596305","modified":1686394992986},{"_id":"public/developer/style-guide/tips-to-keep-java-code-clean.html","hash":"0770e0f3714a58703d5222e53b0533ff0cd6bbe5","modified":1686394992986},{"_id":"public/developer/style-guide/mysql.html","hash":"81a1d161b13ecce638d85207623131c99f2a1f28","modified":1686394992986},{"_id":"public/developer/style-guide/tips-to-keep-javascript-code-clean.html","hash":"738bfdd73b0b2d8106a5f2f9af8af7a80006fda2","modified":1686394992986},{"_id":"public/images/aaha.png","hash":"081c1d01fd9d611e6270d45d87c15b41fbc1aaed","modified":1686394992986},{"_id":"public/browserconfig.xml","hash":"7836fcf8b3a9a39ea41b1193d08521ca2cd20539","modified":1686394992986},{"_id":"public/images/bestvpn_co.png","hash":"499990e72cb49b3c53316d376c787ff1c5f17a7f","modified":1686394992986},{"_id":"public/images/blokt_cryptocurrency_news.png","hash":"3182170f44bb83993946303ae81d3b6c1890c957","modified":1686394992986},{"_id":"public/images/check.png","hash":"b22174f8a966abf7a46eba7991be7a7ae5e16637","modified":1686394992986},{"_id":"public/images/chaitin.png","hash":"a61b1ec393b9600d173255fed72fd873a72b8225","modified":1686394992986},{"_id":"public/images/alligator_io.svg","hash":"95f65bec674298d1fe49b46768034dbf64b4adbf","modified":1686394992986},{"_id":"public/images/cloudstudio.png","hash":"a0cb4e3d6a3f8f06e0c0416c71427dd01f3af52b","modified":1686394992986},{"_id":"public/images/bit.png","hash":"c017f11268e43727a12aa40885ea1f18056233b1","modified":1686394992986},{"_id":"public/images/coding.png","hash":"42d13e784d11c72f8bb40042b2d99761ddbe8559","modified":1686394992986},{"_id":"public/images/coin-bch.png","hash":"783293c8b782e7772e61f62e1168ae175a0a1456","modified":1686394992986},{"_id":"public/images/coin-btc.png","hash":"4dc6d5b671dba33b3e293180ccc9ec2f0b480a6b","modified":1686394992986},{"_id":"public/images/dcloud.gif","hash":"84f104960642885316979bb45856c53a93e6b2e8","modified":1686394992986},{"_id":"public/images/coin-ltc.png","hash":"2bf87f92612990bc609dcc8826a344be05166717","modified":1686394992986},{"_id":"public/images/coin-eth.png","hash":"aadb0a7d299f9a2baf2bf2d281f70d1e26e15a48","modified":1686394992986},{"_id":"public/images/devexpress.png","hash":"8b39711fba0756c8407e27de46f2641ac651f30b","modified":1686394992986},{"_id":"public/images/devsquad.png","hash":"f96551ba232f1b005512892334e912b45cc37374","modified":1686394992986},{"_id":"public/images/derek_pollard.png","hash":"a09bcb5d8fe8a712b31591aa2169f751ea7591ba","modified":1686394992986},{"_id":"public/images/down.png","hash":"6ded74a98bb128e76bfd45cffede2679fd0598f0","modified":1686394992986},{"_id":"public/images/dopamine.png","hash":"2ea0928227dd6cb44ceeca4ed877feb2be741ff1","modified":1686394992986},{"_id":"public/images/earthlink.png","hash":"b47c30f0093a0e8c48c5d0ae1feff24d6ef64de4","modified":1686394992986},{"_id":"public/images/fastcoding_inc.svg","hash":"12cfd6800f3b3b37999001eb41f9ff515888bc8c","modified":1686394992986},{"_id":"public/images/feed.png","hash":"eba32c4f87e5ea1f89dce9c68d8603c8f82a8cd9","modified":1686394992986},{"_id":"public/images/frontend_love.png","hash":"ef3695d6a19646599211f886e3a27cd75a374ef6","modified":1686394992986},{"_id":"public/images/firestick_tricks.png","hash":"b43bc723f029191685f77fb573b5c0aadbc2a12d","modified":1686394992986},{"_id":"public/images/energy_comparison.png","hash":"eb8657097242bd990585ddae38ad72e8388917ca","modified":1686394992986},{"_id":"public/images/geekbang-vue-ad.gif","hash":"c24983efc7dba466d8c4cc56a1c5749c19f73602","modified":1686394992986},{"_id":"public/images/gitee.png","hash":"29fbe638ec4e24faad12f345399eac7f426b2772","modified":1686394992986},{"_id":"public/images/icons.png","hash":"50aa19eac3a7bf6acb435838b7a890050a4a6d8d","modified":1686394992986},{"_id":"public/images/gridsome.png","hash":"85adec48d683c206a5ccfaaf2de39c8b12ce09fb","modified":1686394992986},{"_id":"public/images/inkoop.png","hash":"fb568c6e466a6c19e5ee40bf92cf2527c58a6db2","modified":1686394992986},{"_id":"public/images/html_burger.png","hash":"a6c54ce4ae3ad4b5f1b02a3bb1ca7da838eee8f5","modified":1686394992986},{"_id":"public/images/intfocus.png","hash":"ed658107ad25b2350d87df5a69e6ef1a26a1a978","modified":1686394992986},{"_id":"public/images/intygrate.png","hash":"f55e418bdf6b1a9fc72fee3d86ec02cc51c6d83b","modified":1686394992986},{"_id":"public/images/isle_of_code.png","hash":"ff273db09eb5ca17d047c73256ee311a9a04d911","modified":1686394992986},{"_id":"public/images/jqwidgets_.png","hash":"6ffa378d97190dc88d4d54fa0051c36c6088e03d","modified":1686394992986},{"_id":"public/images/icons_8.png","hash":"4d44e5b251f72dffe37ac7007042fc0b7beb34fb","modified":1686394992986},{"_id":"public/images/jqwidgets_ltd.png","hash":"eb4da2aec072a3f2a6c3cd322e1a44528f737177","modified":1686394992986},{"_id":"public/images/laravel.png","hash":"010281d898830dbb8c848f6a272ba46ddc95e800","modified":1686394992986},{"_id":"public/images/logo-100x50.png","hash":"c31487c3d2a226d87ab9c341445581e0f4dc1e44","modified":1686394992986},{"_id":"public/images/menu.png","hash":"45d62574f2a22017c2aa2001964eaf560f1f70c6","modified":1686394992986},{"_id":"public/images/logo.png","hash":"ed658107ad25b2350d87df5a69e6ef1a26a1a978","modified":1686394992986},{"_id":"public/images/nativescript.png","hash":"ce3751738de68182c1e9ebab7d345227753cc5dc","modified":1686394992986},{"_id":"public/images/neds.png","hash":"675a3f7997063c12a48946219db52948732b71b2","modified":1686394992986},{"_id":"public/images/modus.png","hash":"d4f2c2f7292b26ce11d88d2b08ff299f4e8eb2d4","modified":1686394992986},{"_id":"public/images/marcus_hiles.png","hash":"08a36fa5f6bd0156a8b7ccd86ff74baf56776536","modified":1686394992986},{"_id":"public/images/onsen_ui.png","hash":"0dc98d72d447a8f4d3b8c43cb0890362597de194","modified":1686394992986},{"_id":"public/images/opteo.png","hash":"1915a34af45592878eacc3764dc603a81491f4ae","modified":1686394992986},{"_id":"public/images/patreon.png","hash":"bb0d0dd23c4058d8be63cdf0ccba1e6a13b05acf","modified":1686394992986},{"_id":"public/images/passionate_people.png","hash":"c637a4f55fe9d8f469a20796fe159b18fe54b327","modified":1686394992986},{"_id":"public/images/search.png","hash":"7f519d31bc3c6ca005b6ca5d8ff5ded172df627a","modified":1686394992986},{"_id":"public/images/paypal.png","hash":"b1c3741633ff0c0f8f8a0e80d68202c14a524009","modified":1686394992986},{"_id":"public/images/shopware_ag.png","hash":"c440385ade9c0f9c66104bd1b1b7d41d32c0251a","modified":1686394992986},{"_id":"public/images/shopware_ag.svg","hash":"658c483629cfce8eed7221d1f8463b532abaab02","modified":1686394992986},{"_id":"public/images/syncfusion.png","hash":"688285b2ae526c27aaa5cd081a95c881750c59cc","modified":1686394992986},{"_id":"public/images/stdlib.png","hash":"7adff740e3c1a55e243dff2fb903250d1ba3f559","modified":1686394992986},{"_id":"public/images/syp-java-admin.png","hash":"544d2fdfc0a3e8bd7d80d250c52294fa9772f22f","modified":1686394992986},{"_id":"public/images/tee__.png","hash":"e9fc652b1ed66c56be035c1a4607ade5724efc1f","modified":1686394992986},{"_id":"public/images/tencent-ad.png","hash":"91e12bd1f3ec7dd78592d5a0d340731a1ad804f2","modified":1686394992986},{"_id":"public/images/tighten_co.png","hash":"a0f3f8614ad7f9a4e0eaa0793cf24519b5b25e45","modified":1686394992986},{"_id":"public/images/tidelift.png","hash":"63c60abbab4bcc37340f29e0db8290383fb35631","modified":1686394992986},{"_id":"public/images/tooltwist.png","hash":"e625a481e2eb3f7194273d58b250d0fafd42e462","modified":1686394992986},{"_id":"public/images/valuecoders.png","hash":"ae72f75eea4e7864c06b7641d0a4d426bdc59f18","modified":1686394992986},{"_id":"public/images/vpnranks.png","hash":"a8fc6afa79b73ca9e15a76387c5d68273690d08c","modified":1686394992986},{"_id":"public/images/vuejobs.png","hash":"149231804a4686f1ec890f7d984207ea83cf8190","modified":1686394992986},{"_id":"public/images/vehikl.png","hash":"e5f045088e79ac5d3aedd2d4efc5b37d15431df0","modified":1686394992986},{"_id":"public/images/vuemastery.png","hash":"a783b81f0d9ded6e8d46991cc8d18ff878e17656","modified":1686394992986},{"_id":"public/images/vuetify.png","hash":"66254951f82e0639fb588b362f72b80839d9f411","modified":1686394992986},{"_id":"public/images/vueschool.png","hash":"a4ae5d18c97b8cb5a5d8fcd4c80a6230bf2fc3d9","modified":1686394992986},{"_id":"public/images/webdock.png","hash":"c32ce7cafbc31378c592226dac6ab8e0a8d9b124","modified":1686394992986},{"_id":"public/images/x_team.png","hash":"c2d996ec0a802ce39d695266fbc142dd7dad45c0","modified":1686394992986},{"_id":"public/images/wilderminds.png","hash":"a9e87eda70ad75a6148e1a980cb4e4ddb085e3ca","modified":1686394992986},{"_id":"public/images/yakaz.png","hash":"8287ea4beca210e44cde508247c09b930e48d01a","modified":1686394992986},{"_id":"public/images/y8.png","hash":"9b584ce4cc6a0724d1dd01ce694411e54f790425","modified":1686394992986},{"_id":"public/images/youku.png","hash":"5a34edc5e3cb1fee6fe31d8920853e849eedc282","modified":1686394992986},{"_id":"public/fonts/Dosis/OFL.txt","hash":"d9c7f99f550afe09df563a58309b9ff960e2bca5","modified":1686394992986},{"_id":"public/fonts/Roboto_Mono/LICENSE.txt","hash":"2b8b815229aa8a61e483fb4ba0588b8b6c491890","modified":1686394992986},{"_id":"public/fonts/Source_Sans_Pro/OFL.txt","hash":"790b53c62615441e9bddfd8050bff50be2058b87","modified":1686394992986},{"_id":"public/CNAME","hash":"fa1806b05a0927536b927adf485fbcc0c0caa3f5","modified":1686394992986},{"_id":"public/developer/sypetl.rb","hash":"22c767d68df7ea7bb0b214cadcaf526df8d9527b","modified":1686394992986},{"_id":"public/images/RESTFul-API.gif","hash":"22fb70958383c32c9a71447b834d75f4c60a5dbf","modified":1686394992986},{"_id":"public/images/components.png","hash":"2f4056d9c0448a3204386ddefd84025ea8a58967","modified":1686394992986},{"_id":"public/images/data.png","hash":"7071337f9071f93ebf85639ede38b0f40fd75d98","modified":1686394992986},{"_id":"public/images/devtools-storage-chrome.png","hash":"4c6defcd7f965e743c5a9d9242766e67b7a79a38","modified":1686394992986},{"_id":"public/images/devtools-storage-edge.png","hash":"4550f8c408787ed427c5f6b07530533690be1a3c","modified":1686394992986},{"_id":"public/images/dom-tree.png","hash":"820025017bfcf319d411f6eb2a6f07d543132028","modified":1686394992986},{"_id":"public/images/hn-architecture.png","hash":"0b4adafb587478119e1fb5808f8f04481268a3ce","modified":1686394992986},{"_id":"public/images/lifecycle.png","hash":"53345be1363e09b3e43e34d27c030c4f376b060a","modified":1686394992986},{"_id":"public/images/logged-proxied-data.png","hash":"0e875c2ded04180d9fc73785fbc91351b8159648","modified":1686394992986},{"_id":"public/images/mvvm.png","hash":"b83d7f54d5f2df09a662a7057cd521d23b67e451","modified":1686394992986},{"_id":"public/images/props-events.png","hash":"0f0328ec572bda3f864bb65eea5dbbf32b59504c","modified":1686394992986},{"_id":"public/images/search-by-algolia.png","hash":"b580b0eb3965b62ce9bb1bab1ed0577448f73075","modified":1686394992986},{"_id":"public/images/state.png","hash":"8d8033027c49fee1f795cdca0736c4315efc54fa","modified":1686394992986},{"_id":"public/images/transition.png","hash":"918faae8f4e8e8d0b02c7516ba3c9931b9161487","modified":1686394992986},{"_id":"public/images/typescript-type-error.png","hash":"f282f85d3fe94a7ebd2f741efad3d55a5469dcc5","modified":1686394992986},{"_id":"public/images/vue-component.png","hash":"a9155a78d17b79c5f8e28f4ccf48864fcf172efb","modified":1686394992986},{"_id":"public/images/vue-component-with-preprocessors.png","hash":"daed0210c92685fd128bd5e8b9338700619b2442","modified":1686394992986},{"_id":"public/images/小程序-我的-积分.png","hash":"a9092bef4bd32710f22d515f482a9603e4f7f685","modified":1686394992986},{"_id":"public/images/推送消息.png","hash":"e98a873c28e42e18d540f762bc1edca64c8efe58","modified":1686394992986},{"_id":"public/images/bacancy_technology.png","hash":"920b3e48d4b18d454ecaeffd4e2895ceff06d1ec","modified":1686394992986},{"_id":"public/images/accelebrate.png","hash":"c20a58507563546c91813caa2d7751420a1d6cf3","modified":1686394992986},{"_id":"public/images/usave.png","hash":"d9de7e9a012a636cdb323a62faa62d05fca33141","modified":1686394992986},{"_id":"public/fonts/Roboto_Mono/RobotoMono-Regular.ttf","hash":"69a65c2b797d2fa124b4c709097e761b7857a035","modified":1686394992986},{"_id":"public/manifest.json","hash":"52c45de7e763e744bad322e1dc3deb8b05af7c67","modified":1686394992986},{"_id":"public/css/search.css","hash":"cd794bd9629c33d38c76e31e8ba773ad7643f95c","modified":1686394992986},{"_id":"public/js/smooth-scroll.min.js","hash":"90cdfb5d91db8cce21ab705335d591768555f474","modified":1686394992986},{"_id":"public/js/css.escape.js","hash":"1d0e28a08261de3955b0ee18432e304c1f468441","modified":1686394992986},{"_id":"public/css/benchmark.css","hash":"3424ee8c27052da2ab9f544027f49e1550385e9d","modified":1686394992986},{"_id":"public/css/page.css","hash":"648141b4bf04e7091be373ade0966a1d38402b7c","modified":1686394992986},{"_id":"public/css/index.css","hash":"2481ea84d7fc8b26ce83076ec8655393ca0cae0a","modified":1686394992986},{"_id":"public/js/common.js","hash":"a3f4ec57cc0efa950919817879d80df413873bf0","modified":1686394992986},{"_id":"public/js/vue.js","hash":"e7bebefc32cb9c0d8261e764e8f24c1cd41c217f","modified":1686394992986},{"_id":"public/js/vue.min.js","hash":"28bb1c91e37b53f4ebb48ce482dccb240003e078","modified":1686394992986},{"_id":"public/images/devtools-storage.png","hash":"edc4425d005028a30d2f2ae66183ecb65f0d988f","modified":1686394992986},{"_id":"public/images/提交表单.jpeg","hash":"708483d0d9598097fbfc45bcd8f0ca1ce2010167","modified":1686394992986},{"_id":"public/images/胜因学院-我的-积分.png","hash":"450c1ade891d30c70ece6099a5709f59cf8be8ea","modified":1686394992986},{"_id":"public/images/geekbang-ad.jpg","hash":"3beb4627c739c5a1eb05689259fe10ca921a2c92","modified":1686394992986},{"_id":"public/fonts/Dosis/Dosis-Medium.ttf","hash":"46067c93a46fbb4d0b38f9ce7fe0e2c5e4d8c047","modified":1686394992986},{"_id":"public/fonts/Source_Sans_Pro/SourceSansPro-Light.ttf","hash":"bae12c1d7c8d38f88ac5566ea3b3a97c9f5ac446","modified":1686394992986},{"_id":"public/fonts/Source_Sans_Pro/SourceSansPro-Semibold.ttf","hash":"f08e28d10c1bfe92543416e30b59620942859696","modified":1686394992986},{"_id":"public/fonts/Source_Sans_Pro/SourceSansPro-Regular.ttf","hash":"1e9f0372c269da205fdbac8cf27cb9cf59f6ad45","modified":1686394992986},{"_id":"public/images/ETL流规范.png","hash":"daf63b3eea77ef08c0be83ac5496ac164f06ff9c","modified":1686394992986},{"_id":"public/images/RDC功能流程图.png","hash":"a241099865c2d83219e203e0b5ffff86d1887c1a","modified":1686394992986},{"_id":"public/images/RDC请求流程图.png","hash":"d88a41870defe5d4732acf2545f108c1ffbaf080","modified":1686394992986},{"_id":"public/images/gitlab-merge-request-conflicts.png","hash":"b47cd6c3f43e6f415b5bd4c57ee8f59d29305949","modified":1686394992986},{"_id":"public/images/印象笔记-工作日志-偏好设置.png","hash":"4ce22f0ffe8d2ce4eacd91b8b314e6edb7a88188","modified":1686394992986},{"_id":"public/images/印象笔记-工作日志-布局规范.png","hash":"4f4105b8b06849a0b023de14f7861ef032be706a","modified":1686394992986},{"_id":"public/images/图片原型路径说明.png","hash":"bf85cb4f0beaf2a8a13b84de5491da34b763a5ee","modified":1686394992986},{"_id":"public/images/团队效率驱动图.png","hash":"b9b9df02e421ed6dc47384294539abcecbd851d7","modified":1686394992986},{"_id":"public/images/报表开发流程.png","hash":"981d82d5a7831ef03cca1ab15688b592f520a40c","modified":1686394992986},{"_id":"public/images/胜因学院-业务流程图.png","hash":"be797e251cedc918a50ce17e93c74421dcad7b7e","modified":1686394992986},{"_id":"public/images/胜因学院-小程序模块框架图.png","hash":"1e230c97f1f0b2dc7f6fa411b7f9bd59b059ea80","modified":1686394992986},{"_id":"public/images/special-sponsor-spot.png","hash":"f635521496f2f8a4c35c67160b088c1756b7d948","modified":1686394992986},{"_id":"public/images/SypCtl-ServiceStatus.png","hash":"687e6c1e7c26157b6c5790f174a0e3278c7c585d","modified":1686394992986},{"_id":"public/images/SypCtlServer-ServiceStatus.png","hash":"e039d7bdb4ada1ed0e9e41eff07339ee3aa859d8","modified":1686394992986},{"_id":"public/images/SypCtl三级备份方案.png","hash":"c42d0dbc3d2f8e1495ea10522e1361cf8ca39414","modified":1686394992986},{"_id":"public/images/SypCtl功能结构.png","hash":"2465496edd5215d1bc95df9b3bc29961c6547580","modified":1686394992986},{"_id":"public/images/gitlab-new-merge-request.png","hash":"f813245bfa217b6c304dde34d83e1e7633921d4b","modified":1686394992986},{"_id":"public/images/gitlab-new-merge-request-submit.png","hash":"eb7da323756a8a5dcde1efdcc477eeeec6baa712","modified":1686394992986},{"_id":"public/images/memory-leak-example.png","hash":"7c2df66d99f06df266d294aa7c923fe5e8af7657","modified":1686394992986},{"_id":"public/images/readme-domain-guides.png","hash":"fe00b5fbfd51bc2642bea4b8da5a0bb49c823cd5","modified":1686394992986},{"_id":"public/images/功能说明文档规范.png","hash":"9010a1dee70c6ba1d3a44088781ad00e72ad7842","modified":1686394992986},{"_id":"public/images/数据库运维规范.png","hash":"7ae15e154e23c0af5583cb94a4568392175e9a65","modified":1686394992986},{"_id":"public/images/jenkins-deploy/jenkins-deploy-gitlab-branch01.png","hash":"3e7f98db0ff3f3906d4df548c7ec3b767e8da8df","modified":1686394992986},{"_id":"public/images/jenkins-deploy/jenkins-deploy-step01.png","hash":"feea47834168571055c9085f44cbae270f817e21","modified":1686394992986},{"_id":"public/images/jenkins-deploy/jenkins-deploy-gitlab-branch02.png","hash":"4be794ccac93fa149a9fbc956596df5bfe5db748","modified":1686394992986},{"_id":"public/images/jenkins-deploy/jenkins-projects.png","hash":"b07f39064b42cb6e574d4293e391a319360e395f","modified":1686394992986},{"_id":"public/images/devtools-timetravel.gif","hash":"43ddab8e7869a513c2058d2892b54d0c556ef5e2","modified":1686394992986},{"_id":"public/images/业务菜单结构图.png","hash":"69141e06d8958aceee6198be0a51b3f5319b1a37","modified":1686394992986},{"_id":"public/images/印象笔记-工作日志-标题栏规范.png","hash":"3c048d3d832ed9423b61dab2ef749253ad93709d","modified":1686394992986},{"_id":"public/images/小程序积分说明.png","hash":"3981af5dbb2353a333fc46f53ad78b1a2655931a","modified":1686394992986},{"_id":"public/images/源码体系.png","hash":"a53ebeab769ae50c73d4a698d2d6fb651367e7c2","modified":1686394992986},{"_id":"public/images/jenkins-deploy/jenkins-deploy-step03.png","hash":"68dacca5a8375fd260960ecda677a6ef68e8105d","modified":1686394992986},{"_id":"public/images/jenkins-deploy/jenkins-deploy-step02.png","hash":"fdd1b5037460e5d1896470119dcd66e78182c4c7","modified":1686394992986},{"_id":"public/images/团队协作体系.png","hash":"34f98223c7105e353fa46fa52f70210e4d8aa7e9","modified":1686394992986},{"_id":"public/images/培训总结交付规范-01.png","hash":"2c488b8adc3bec34a33429c7a6a194f3805c4122","modified":1686394992986},{"_id":"public/images/职场仪式感.png","hash":"3bd7e6f9ecb6c89ea061d5a08430f46c054a6cec","modified":1686394992986},{"_id":"public/images/职场认知闭环.png","hash":"fc6db5284945f6f0af4c9df8dddd95e7777a4556","modified":1686394992986},{"_id":"public/images/jenkins-exception/jenkins-部署异常-代码语法错误.png","hash":"c6ea8ea8c8f7e617a816b125a1f125d3dc84761a","modified":1686394992986},{"_id":"public/images/jenkins-exception/jenkins-部署异常-服务启动失败.png","hash":"8de2531223ba48af8a0a44dd5ae0176aee91666e","modified":1686394992986},{"_id":"public/images/Gitlab协作规范.png","hash":"fa220e5539f663700c07ad492df68a3c182b818e","modified":1686394992986},{"_id":"public/images/jenkins-deploy/jenkins-deploy-step04.png","hash":"a2b9771f391988398d10fcbf3a92b9a59633f65f","modified":1686394992986},{"_id":"public/images/MySQL-ER图示例.png","hash":"bbe55b405b2460071c34fc9c34bed60e520c0e09","modified":1686394992986},{"_id":"public/images/SypCtlServer-AgentLog.png","hash":"78bc18c28763ec79d55874092ce29fc7b379d0d8","modified":1686394992986},{"_id":"public/images/SypCtlSync演示.png","hash":"8638c1c924300bcd7bab0fbda67fd787a3062122","modified":1686394992986},{"_id":"public/images/jenkins-deploy/jenkins-deploy-index.png","hash":"b4167a2c64dfda9016861bacbffb0815eb093b41","modified":1686394992986},{"_id":"public/images/jenkins-deploy/jenkins-deploy-view.png","hash":"352b6bd49f98dcf14bf94f7479d1916c99b15a59","modified":1686394992986},{"_id":"public/images/SypCtlServer-BackupFile.png","hash":"2a59cd0d0c326690ebaa1d7ebe8bcab86d613212","modified":1686394992986},{"_id":"public/images/breakpoint_set.png","hash":"db3c2527261d19c83424b69d789fca4a85dbec07","modified":1686394992986},{"_id":"public/images/config_add.png","hash":"ef17eaeb40ca00f9c66d813c569c1b54160db1a9","modified":1686394992986},{"_id":"public/images/jenkins-deploy/jenkins-deploy-step05.png","hash":"c14277f7a117a50585a365dd645daeaa9b82f41e","modified":1686394992986},{"_id":"public/images/breakpoint_hit.png","hash":"56c93842cb88a37df7dd327507c5c44f94459e72","modified":1686394992986},{"_id":"public/images/SypCtlServer-BackupMySQL.png","hash":"3f17ad56675098c2a85f621bf865cf7e39b1ad2a","modified":1686394992986},{"_id":"public/images/胜因学院-小程序业务效果图.png","hash":"f18deadb63b72411318713047292dc337fc57d03","modified":1686394992986},{"_id":"public/images/SypEtl-MonitorLog.png","hash":"b7e428342d48f13b1c0cf6de9965e6f1cae1d1d1","modified":1686394992986},{"_id":"public/images/培训总结交付规范-02.png","hash":"64da6d1cc436a4d553b13c5796dde97b79dfc8c7","modified":1686394992986}],"Category":[],"Data":[],"Page":[{"index":false,"_content":"","source":"index.md","raw":"index: false\n---\n","date":"2023-06-10T10:49:05.780Z","updated":"2023-06-10T10:49:05.780Z","path":"index.html","title":"","comments":1,"layout":"page","_id":"clipw1dcr0000oix5bno2fn28","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"贡献者","type":"about","order":0,"_content":"\n## Guide 翻译贡献\n\n### Essentials  基础\n\n序号 | 对应文档文件名 | 中文标题 | 翻译贡献者 | 校对主要贡献者\n----- | ------------- | --- | --- | --- | --- | ---\n1 |  installation.md | 安装 | [dingyiming](https://github.com/dingyiming)  | [ATLgo](https://github.com/ATLgo) [70data](https://github.com/70data)\n2 |  index.md |  介绍 | [hijiangtao](https://github.com/hijiangtao) | [70data](https://github.com/70data) [ATLgo](https://github.com/ATLgo)\n3 |  instance.md | 实例 | [dingyiming](https://github.com/dingyiming) | [70data](https://github.com/70data) [ATLgo](https://github.com/ATLgo)\n4 |  syntax.md  | 模板语法 | [daix6](https://github.com/daix6) | [70data](https://github.com/70data)\n5 |  computed.md | 计算属 性 | [dingyiming](https://github.com/dingyiming) [70data](https://github.com/70data) | [70data](https://github.com/70data)\n6 |  class-and-style.md | Class 与 Style 绑定 | [595074187](https://github.com/595074187) | [70data](https://github.com/70data)\n7 |  conditional.md  | 条件渲染 | [dingyiming](https://github.com/dingyiming) | [hgcoder](https://github.com/hgcoder)\n8 |  list.md |  列表渲染 | [tingtien](https://github.com/tingtien) | [hgcoder](https://github.com/hgcoder)\n9 |  events.md | 事件处理器 | [dingyiming](https://github.com/dingyiming) | [yangzj1992](https://github.com/yangzj1992)\n10 |  forms.md  | 表单控件绑定 | [dingyiming](https://github.com/dingyiming) | [yangzj1992](https://github.com/yangzj1992)\n11 |  components.md |  组件 | [ezreally](https://github.com/ezreally) | [cuiyongjian](https://github.com/cuiyongjian)\n\n### Advanced  进阶\n\n序号 | 对应文档文件名 | 中文标题 | 翻译贡献者 | 校对主要贡献者\n----- | ------------- | --- | --- | --- | ---\n12 |  transitions.md | 过渡: 进入, 离开, 和 列表 | [awe](https://github.com/hilongjw) | [bhnddowinf](https://github.com/bhnddowinf) [StoneQI](https://github.com/StoneQI)\n13 |  transitioning-state.md | 过渡状态 | [awe](https://github.com/hilongjw) | [bhnddowinf](https://github.com/bhnddowinf)\n14 |  render-function.md |  Render 函数 | [awe](https://github.com/hilongjw) | [bhnddowinf](https://github.com/bhnddowinf)\n15 |  reactivity.md |  深入响应式原理 | [veaba](https://github.com/veaba) | [yangzj1992](https://github.com/yangzj1992)\n16 |  custom-directive.md |  自定义指令 | [hurrytospring](https://github.com/hurrytospring) | [yangzj1992](https://github.com/yangzj1992)\n17 |  mixins.md |  混合 | [hurrytospring](https://github.com/hurrytospring) | [bhnddowinf](https://github.com/bhnddowinf)\n18 |  plugins.md |  插件 | [hgcoder](https://github.com/hgcoder) | [hgcoder](https://github.com/hgcoder)\n19 |  single-file-components.md |  单文件组件 | [ATLgo](https://github.com/ATLgo) | [zhouzihanntu](https://github.com/zhouzihanntu)\n20 |  routing.md | 路由 | [dingyiming](https://github.com/dingyiming) | [mlyknown](https://github.com/mlyknown)\n21 |  state-management.md |  状态管理 | [dear-lizhihua](https://github.com/dear-lizhihua) | [mlyknown](https://github.com/mlyknown)\n22 |  unit-testing.md | 单元测试 | [70data](https://github.com/70data) | [mlyknown](https://github.com/mlyknown)\n23 |  ssr.md |  服务端渲染 | [dingyiming](https://github.com/dingyiming) | [yongbolv](https://github.com/yongbolv)\n\n### Migration  迁移\n\n序号 | 对应文档文件名 | 中文标题 | 翻译贡献者 | 校对主要贡献者\n----- |  ------------- | --- | --- | --- | ---\n24 |  migration.md | 1.x迁移 | [hurrytospring](https://github.com/hurrytospring) | [yongbolv](https://github.com/yongbolv)\n27 |  migration-vue-router.md | vue-router 0.7.x 迁移 | [forzajuve10](https://github.com/forzajuve10) | [yizhixiaolongxia](https://github.com/yizhixiaolongxia)\n\n### Meta  更多\n\n序号 | 对应文档文件名 | 中文标题 |  翻译贡献者 | 校对主要贡献者\n----- | ------------- | --- | --- | --- | ---\n25 |  comparison.md |   对比其他框架 | [yongbolv](https://github.com/yongbolv) | [yangzj1992](https://github.com/yangzj1992)\n26 |  join.md |  加入 Vue.js 社区 | [daix6](https://github.com/daix6) | [zhouzihanntu](https://github.com/zhouzihanntu)\n\n## API翻译贡献\n\n序号 | 对应小节名称 | 中文标题 | 翻译贡献者 | 校对主要贡献者\n----- |  ------------- | --- | --- | --- | --- | ---\n1 |  Global Config | 全局配置 | [dear-lizhihua](https://github.com/dear-lizhihua) | [bhnddowinf](https://github.com/bhnddowinf)\n2 |  Global API | 全局 API | [dear-lizhihua](https://github.com/dear-lizhihua) | [bhnddowinf](https://github.com/bhnddowinf)\n3 |  Options / Data | 选项 / 数据 | [dear-lizhihua](https://github.com/dear-lizhihua) | [bhnddowinf](https://github.com/bhnddowinf)\n4 |  Options / DOM | 选项 / DOM | [ATLgo](https://github.com/ATLgo) | [bhnddowinf](https://github.com/bhnddowinf)\n5 |  Options / Lifecycle Hooks | 选项 / 生命周期钩子 | [ATLgo](https://github.com/ATLgo) | [bhnddowinf](https://github.com/bhnddowinf)\n6 |  Options / Assets | 选项 / 资源 | [dingyiming](https://github.com/dingyiming) | [bhnddowinf](https://github.com/bhnddowinf)\n7 |  Options / Misc | 选项 / 杂项 | [dingyiming](https://github.com/dingyiming) | [bhnddowinf](https://github.com/bhnddowinf)\n8 |  Instance Properties | 实例属性 | [coolzjy](https://github.com/coolzjy) | [bhnddowinf](https://github.com/bhnddowinf)\n9 |  Instance Methods / Data | 实例方法 / 数据 | [dingyiming](https://github.com/dingyiming) | [bhnddowinf](https://github.com/bhnddowinf)\n10 |  Instance Methods / Events | 实例方法 / 事件 | [mlyknown](https://github.com/mlyknown) | [bhnddowinf](https://github.com/bhnddowinf)\n11 |   Instance Methods / Lifecycle | 实例方法 / 生命周期 |  [mlyknown](https://github.com/mlyknown)| [bhnddowinf](https://github.com/bhnddowinf)\n12 |  Directives | 指令| [dingyiming](https://github.com/dingyiming) | [bhnddowinf](https://github.com/bhnddowinf)\n13 |  Special Attributes | 特殊元素 | [70data](https://github.com/70data) | [bhnddowinf](https://github.com/bhnddowinf)\n14 |  Built-In Components | 内置的组件  | [dear-lizhihua](https://github.com/dear-lizhihua) | [bhnddowinf](https://github.com/bhnddowinf)\n15 |  VNode Interface | VNode 接口  | [70data](https://github.com/70data) | [dear-lizhihua](https://github.com/dear-lizhihua)\n16 |  Server-Side Rendering | 服务端渲染| [70data](https://github.com/70data) | [dear-lizhihua](https://github.com/dear-lizhihua)\n\n## 示例翻译\n\n翻译贡献者 ： [lindazhang102](https://github.com/lindazhang102)\n\n## 感谢所有参与翻译的朋友们！\n","source":"about/index.md","raw":"---\ntitle: 贡献者\ntype: about\norder: 0\n---\n\n## Guide 翻译贡献\n\n### Essentials  基础\n\n序号 | 对应文档文件名 | 中文标题 | 翻译贡献者 | 校对主要贡献者\n----- | ------------- | --- | --- | --- | --- | ---\n1 |  installation.md | 安装 | [dingyiming](https://github.com/dingyiming)  | [ATLgo](https://github.com/ATLgo) [70data](https://github.com/70data)\n2 |  index.md |  介绍 | [hijiangtao](https://github.com/hijiangtao) | [70data](https://github.com/70data) [ATLgo](https://github.com/ATLgo)\n3 |  instance.md | 实例 | [dingyiming](https://github.com/dingyiming) | [70data](https://github.com/70data) [ATLgo](https://github.com/ATLgo)\n4 |  syntax.md  | 模板语法 | [daix6](https://github.com/daix6) | [70data](https://github.com/70data)\n5 |  computed.md | 计算属 性 | [dingyiming](https://github.com/dingyiming) [70data](https://github.com/70data) | [70data](https://github.com/70data)\n6 |  class-and-style.md | Class 与 Style 绑定 | [595074187](https://github.com/595074187) | [70data](https://github.com/70data)\n7 |  conditional.md  | 条件渲染 | [dingyiming](https://github.com/dingyiming) | [hgcoder](https://github.com/hgcoder)\n8 |  list.md |  列表渲染 | [tingtien](https://github.com/tingtien) | [hgcoder](https://github.com/hgcoder)\n9 |  events.md | 事件处理器 | [dingyiming](https://github.com/dingyiming) | [yangzj1992](https://github.com/yangzj1992)\n10 |  forms.md  | 表单控件绑定 | [dingyiming](https://github.com/dingyiming) | [yangzj1992](https://github.com/yangzj1992)\n11 |  components.md |  组件 | [ezreally](https://github.com/ezreally) | [cuiyongjian](https://github.com/cuiyongjian)\n\n### Advanced  进阶\n\n序号 | 对应文档文件名 | 中文标题 | 翻译贡献者 | 校对主要贡献者\n----- | ------------- | --- | --- | --- | ---\n12 |  transitions.md | 过渡: 进入, 离开, 和 列表 | [awe](https://github.com/hilongjw) | [bhnddowinf](https://github.com/bhnddowinf) [StoneQI](https://github.com/StoneQI)\n13 |  transitioning-state.md | 过渡状态 | [awe](https://github.com/hilongjw) | [bhnddowinf](https://github.com/bhnddowinf)\n14 |  render-function.md |  Render 函数 | [awe](https://github.com/hilongjw) | [bhnddowinf](https://github.com/bhnddowinf)\n15 |  reactivity.md |  深入响应式原理 | [veaba](https://github.com/veaba) | [yangzj1992](https://github.com/yangzj1992)\n16 |  custom-directive.md |  自定义指令 | [hurrytospring](https://github.com/hurrytospring) | [yangzj1992](https://github.com/yangzj1992)\n17 |  mixins.md |  混合 | [hurrytospring](https://github.com/hurrytospring) | [bhnddowinf](https://github.com/bhnddowinf)\n18 |  plugins.md |  插件 | [hgcoder](https://github.com/hgcoder) | [hgcoder](https://github.com/hgcoder)\n19 |  single-file-components.md |  单文件组件 | [ATLgo](https://github.com/ATLgo) | [zhouzihanntu](https://github.com/zhouzihanntu)\n20 |  routing.md | 路由 | [dingyiming](https://github.com/dingyiming) | [mlyknown](https://github.com/mlyknown)\n21 |  state-management.md |  状态管理 | [dear-lizhihua](https://github.com/dear-lizhihua) | [mlyknown](https://github.com/mlyknown)\n22 |  unit-testing.md | 单元测试 | [70data](https://github.com/70data) | [mlyknown](https://github.com/mlyknown)\n23 |  ssr.md |  服务端渲染 | [dingyiming](https://github.com/dingyiming) | [yongbolv](https://github.com/yongbolv)\n\n### Migration  迁移\n\n序号 | 对应文档文件名 | 中文标题 | 翻译贡献者 | 校对主要贡献者\n----- |  ------------- | --- | --- | --- | ---\n24 |  migration.md | 1.x迁移 | [hurrytospring](https://github.com/hurrytospring) | [yongbolv](https://github.com/yongbolv)\n27 |  migration-vue-router.md | vue-router 0.7.x 迁移 | [forzajuve10](https://github.com/forzajuve10) | [yizhixiaolongxia](https://github.com/yizhixiaolongxia)\n\n### Meta  更多\n\n序号 | 对应文档文件名 | 中文标题 |  翻译贡献者 | 校对主要贡献者\n----- | ------------- | --- | --- | --- | ---\n25 |  comparison.md |   对比其他框架 | [yongbolv](https://github.com/yongbolv) | [yangzj1992](https://github.com/yangzj1992)\n26 |  join.md |  加入 Vue.js 社区 | [daix6](https://github.com/daix6) | [zhouzihanntu](https://github.com/zhouzihanntu)\n\n## API翻译贡献\n\n序号 | 对应小节名称 | 中文标题 | 翻译贡献者 | 校对主要贡献者\n----- |  ------------- | --- | --- | --- | --- | ---\n1 |  Global Config | 全局配置 | [dear-lizhihua](https://github.com/dear-lizhihua) | [bhnddowinf](https://github.com/bhnddowinf)\n2 |  Global API | 全局 API | [dear-lizhihua](https://github.com/dear-lizhihua) | [bhnddowinf](https://github.com/bhnddowinf)\n3 |  Options / Data | 选项 / 数据 | [dear-lizhihua](https://github.com/dear-lizhihua) | [bhnddowinf](https://github.com/bhnddowinf)\n4 |  Options / DOM | 选项 / DOM | [ATLgo](https://github.com/ATLgo) | [bhnddowinf](https://github.com/bhnddowinf)\n5 |  Options / Lifecycle Hooks | 选项 / 生命周期钩子 | [ATLgo](https://github.com/ATLgo) | [bhnddowinf](https://github.com/bhnddowinf)\n6 |  Options / Assets | 选项 / 资源 | [dingyiming](https://github.com/dingyiming) | [bhnddowinf](https://github.com/bhnddowinf)\n7 |  Options / Misc | 选项 / 杂项 | [dingyiming](https://github.com/dingyiming) | [bhnddowinf](https://github.com/bhnddowinf)\n8 |  Instance Properties | 实例属性 | [coolzjy](https://github.com/coolzjy) | [bhnddowinf](https://github.com/bhnddowinf)\n9 |  Instance Methods / Data | 实例方法 / 数据 | [dingyiming](https://github.com/dingyiming) | [bhnddowinf](https://github.com/bhnddowinf)\n10 |  Instance Methods / Events | 实例方法 / 事件 | [mlyknown](https://github.com/mlyknown) | [bhnddowinf](https://github.com/bhnddowinf)\n11 |   Instance Methods / Lifecycle | 实例方法 / 生命周期 |  [mlyknown](https://github.com/mlyknown)| [bhnddowinf](https://github.com/bhnddowinf)\n12 |  Directives | 指令| [dingyiming](https://github.com/dingyiming) | [bhnddowinf](https://github.com/bhnddowinf)\n13 |  Special Attributes | 特殊元素 | [70data](https://github.com/70data) | [bhnddowinf](https://github.com/bhnddowinf)\n14 |  Built-In Components | 内置的组件  | [dear-lizhihua](https://github.com/dear-lizhihua) | [bhnddowinf](https://github.com/bhnddowinf)\n15 |  VNode Interface | VNode 接口  | [70data](https://github.com/70data) | [dear-lizhihua](https://github.com/dear-lizhihua)\n16 |  Server-Side Rendering | 服务端渲染| [70data](https://github.com/70data) | [dear-lizhihua](https://github.com/dear-lizhihua)\n\n## 示例翻译\n\n翻译贡献者 ： [lindazhang102](https://github.com/lindazhang102)\n\n## 感谢所有参与翻译的朋友们！\n","date":"2023-06-10T10:49:05.483Z","updated":"2023-06-10T10:49:05.483Z","path":"about/index.html","comments":1,"layout":"page","_id":"clipw1dcv0001oix526o6b0yi","content":"<h2 id=\"Guide-翻译贡献\"><a href=\"#Guide-翻译贡献\" class=\"headerlink\" title=\"Guide 翻译贡献\"></a>Guide 翻译贡献</h2><h3 id=\"Essentials-基础\"><a href=\"#Essentials-基础\" class=\"headerlink\" title=\"Essentials  基础\"></a>Essentials  基础</h3><p>序号 | 对应文档文件名 | 中文标题 | 翻译贡献者 | 校对主要贡献者<br>—– | ————- | — | — | — | — | —<br>1 |  installation.md | 安装 | <a href=\"https://github.com/dingyiming\">dingyiming</a>  | <a href=\"https://github.com/ATLgo\">ATLgo</a> <a href=\"https://github.com/70data\">70data</a><br>2 |  index.md |  介绍 | <a href=\"https://github.com/hijiangtao\">hijiangtao</a> | <a href=\"https://github.com/70data\">70data</a> <a href=\"https://github.com/ATLgo\">ATLgo</a><br>3 |  instance.md | 实例 | <a href=\"https://github.com/dingyiming\">dingyiming</a> | <a href=\"https://github.com/70data\">70data</a> <a href=\"https://github.com/ATLgo\">ATLgo</a><br>4 |  syntax.md  | 模板语法 | <a href=\"https://github.com/daix6\">daix6</a> | <a href=\"https://github.com/70data\">70data</a><br>5 |  computed.md | 计算属 性 | <a href=\"https://github.com/dingyiming\">dingyiming</a> <a href=\"https://github.com/70data\">70data</a> | <a href=\"https://github.com/70data\">70data</a><br>6 |  class-and-style.md | Class 与 Style 绑定 | <a href=\"https://github.com/595074187\">595074187</a> | <a href=\"https://github.com/70data\">70data</a><br>7 |  conditional.md  | 条件渲染 | <a href=\"https://github.com/dingyiming\">dingyiming</a> | <a href=\"https://github.com/hgcoder\">hgcoder</a><br>8 |  list.md |  列表渲染 | <a href=\"https://github.com/tingtien\">tingtien</a> | <a href=\"https://github.com/hgcoder\">hgcoder</a><br>9 |  events.md | 事件处理器 | <a href=\"https://github.com/dingyiming\">dingyiming</a> | <a href=\"https://github.com/yangzj1992\">yangzj1992</a><br>10 |  forms.md  | 表单控件绑定 | <a href=\"https://github.com/dingyiming\">dingyiming</a> | <a href=\"https://github.com/yangzj1992\">yangzj1992</a><br>11 |  components.md |  组件 | <a href=\"https://github.com/ezreally\">ezreally</a> | <a href=\"https://github.com/cuiyongjian\">cuiyongjian</a></p>\n<h3 id=\"Advanced-进阶\"><a href=\"#Advanced-进阶\" class=\"headerlink\" title=\"Advanced  进阶\"></a>Advanced  进阶</h3><p>序号 | 对应文档文件名 | 中文标题 | 翻译贡献者 | 校对主要贡献者<br>—– | ————- | — | — | — | —<br>12 |  transitions.md | 过渡: 进入, 离开, 和 列表 | <a href=\"https://github.com/hilongjw\">awe</a> | <a href=\"https://github.com/bhnddowinf\">bhnddowinf</a> <a href=\"https://github.com/StoneQI\">StoneQI</a><br>13 |  transitioning-state.md | 过渡状态 | <a href=\"https://github.com/hilongjw\">awe</a> | <a href=\"https://github.com/bhnddowinf\">bhnddowinf</a><br>14 |  render-function.md |  Render 函数 | <a href=\"https://github.com/hilongjw\">awe</a> | <a href=\"https://github.com/bhnddowinf\">bhnddowinf</a><br>15 |  reactivity.md |  深入响应式原理 | <a href=\"https://github.com/veaba\">veaba</a> | <a href=\"https://github.com/yangzj1992\">yangzj1992</a><br>16 |  custom-directive.md |  自定义指令 | <a href=\"https://github.com/hurrytospring\">hurrytospring</a> | <a href=\"https://github.com/yangzj1992\">yangzj1992</a><br>17 |  mixins.md |  混合 | <a href=\"https://github.com/hurrytospring\">hurrytospring</a> | <a href=\"https://github.com/bhnddowinf\">bhnddowinf</a><br>18 |  plugins.md |  插件 | <a href=\"https://github.com/hgcoder\">hgcoder</a> | <a href=\"https://github.com/hgcoder\">hgcoder</a><br>19 |  single-file-components.md |  单文件组件 | <a href=\"https://github.com/ATLgo\">ATLgo</a> | <a href=\"https://github.com/zhouzihanntu\">zhouzihanntu</a><br>20 |  routing.md | 路由 | <a href=\"https://github.com/dingyiming\">dingyiming</a> | <a href=\"https://github.com/mlyknown\">mlyknown</a><br>21 |  state-management.md |  状态管理 | <a href=\"https://github.com/dear-lizhihua\">dear-lizhihua</a> | <a href=\"https://github.com/mlyknown\">mlyknown</a><br>22 |  unit-testing.md | 单元测试 | <a href=\"https://github.com/70data\">70data</a> | <a href=\"https://github.com/mlyknown\">mlyknown</a><br>23 |  ssr.md |  服务端渲染 | <a href=\"https://github.com/dingyiming\">dingyiming</a> | <a href=\"https://github.com/yongbolv\">yongbolv</a></p>\n<h3 id=\"Migration-迁移\"><a href=\"#Migration-迁移\" class=\"headerlink\" title=\"Migration  迁移\"></a>Migration  迁移</h3><p>序号 | 对应文档文件名 | 中文标题 | 翻译贡献者 | 校对主要贡献者<br>—– |  ————- | — | — | — | —<br>24 |  migration.md | 1.x迁移 | <a href=\"https://github.com/hurrytospring\">hurrytospring</a> | <a href=\"https://github.com/yongbolv\">yongbolv</a><br>27 |  migration-vue-router.md | vue-router 0.7.x 迁移 | <a href=\"https://github.com/forzajuve10\">forzajuve10</a> | <a href=\"https://github.com/yizhixiaolongxia\">yizhixiaolongxia</a></p>\n<h3 id=\"Meta-更多\"><a href=\"#Meta-更多\" class=\"headerlink\" title=\"Meta  更多\"></a>Meta  更多</h3><p>序号 | 对应文档文件名 | 中文标题 |  翻译贡献者 | 校对主要贡献者<br>—– | ————- | — | — | — | —<br>25 |  comparison.md |   对比其他框架 | <a href=\"https://github.com/yongbolv\">yongbolv</a> | <a href=\"https://github.com/yangzj1992\">yangzj1992</a><br>26 |  join.md |  加入 Vue.js 社区 | <a href=\"https://github.com/daix6\">daix6</a> | <a href=\"https://github.com/zhouzihanntu\">zhouzihanntu</a></p>\n<h2 id=\"API翻译贡献\"><a href=\"#API翻译贡献\" class=\"headerlink\" title=\"API翻译贡献\"></a>API翻译贡献</h2><p>序号 | 对应小节名称 | 中文标题 | 翻译贡献者 | 校对主要贡献者<br>—– |  ————- | — | — | — | — | —<br>1 |  Global Config | 全局配置 | <a href=\"https://github.com/dear-lizhihua\">dear-lizhihua</a> | <a href=\"https://github.com/bhnddowinf\">bhnddowinf</a><br>2 |  Global API | 全局 API | <a href=\"https://github.com/dear-lizhihua\">dear-lizhihua</a> | <a href=\"https://github.com/bhnddowinf\">bhnddowinf</a><br>3 |  Options &#x2F; Data | 选项 &#x2F; 数据 | <a href=\"https://github.com/dear-lizhihua\">dear-lizhihua</a> | <a href=\"https://github.com/bhnddowinf\">bhnddowinf</a><br>4 |  Options &#x2F; DOM | 选项 &#x2F; DOM | <a href=\"https://github.com/ATLgo\">ATLgo</a> | <a href=\"https://github.com/bhnddowinf\">bhnddowinf</a><br>5 |  Options &#x2F; Lifecycle Hooks | 选项 &#x2F; 生命周期钩子 | <a href=\"https://github.com/ATLgo\">ATLgo</a> | <a href=\"https://github.com/bhnddowinf\">bhnddowinf</a><br>6 |  Options &#x2F; Assets | 选项 &#x2F; 资源 | <a href=\"https://github.com/dingyiming\">dingyiming</a> | <a href=\"https://github.com/bhnddowinf\">bhnddowinf</a><br>7 |  Options &#x2F; Misc | 选项 &#x2F; 杂项 | <a href=\"https://github.com/dingyiming\">dingyiming</a> | <a href=\"https://github.com/bhnddowinf\">bhnddowinf</a><br>8 |  Instance Properties | 实例属性 | <a href=\"https://github.com/coolzjy\">coolzjy</a> | <a href=\"https://github.com/bhnddowinf\">bhnddowinf</a><br>9 |  Instance Methods &#x2F; Data | 实例方法 &#x2F; 数据 | <a href=\"https://github.com/dingyiming\">dingyiming</a> | <a href=\"https://github.com/bhnddowinf\">bhnddowinf</a><br>10 |  Instance Methods &#x2F; Events | 实例方法 &#x2F; 事件 | <a href=\"https://github.com/mlyknown\">mlyknown</a> | <a href=\"https://github.com/bhnddowinf\">bhnddowinf</a><br>11 |   Instance Methods &#x2F; Lifecycle | 实例方法 &#x2F; 生命周期 |  <a href=\"https://github.com/mlyknown\">mlyknown</a>| <a href=\"https://github.com/bhnddowinf\">bhnddowinf</a><br>12 |  Directives | 指令| <a href=\"https://github.com/dingyiming\">dingyiming</a> | <a href=\"https://github.com/bhnddowinf\">bhnddowinf</a><br>13 |  Special Attributes | 特殊元素 | <a href=\"https://github.com/70data\">70data</a> | <a href=\"https://github.com/bhnddowinf\">bhnddowinf</a><br>14 |  Built-In Components | 内置的组件  | <a href=\"https://github.com/dear-lizhihua\">dear-lizhihua</a> | <a href=\"https://github.com/bhnddowinf\">bhnddowinf</a><br>15 |  VNode Interface | VNode 接口  | <a href=\"https://github.com/70data\">70data</a> | <a href=\"https://github.com/dear-lizhihua\">dear-lizhihua</a><br>16 |  Server-Side Rendering | 服务端渲染| <a href=\"https://github.com/70data\">70data</a> | <a href=\"https://github.com/dear-lizhihua\">dear-lizhihua</a></p>\n<h2 id=\"示例翻译\"><a href=\"#示例翻译\" class=\"headerlink\" title=\"示例翻译\"></a>示例翻译</h2><p>翻译贡献者 ： <a href=\"https://github.com/lindazhang102\">lindazhang102</a></p>\n<h2 id=\"感谢所有参与翻译的朋友们！\"><a href=\"#感谢所有参与翻译的朋友们！\" class=\"headerlink\" title=\"感谢所有参与翻译的朋友们！\"></a>感谢所有参与翻译的朋友们！</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Guide-翻译贡献\"><a href=\"#Guide-翻译贡献\" class=\"headerlink\" title=\"Guide 翻译贡献\"></a>Guide 翻译贡献</h2><h3 id=\"Essentials-基础\"><a href=\"#Essentials-基础\" class=\"headerlink\" title=\"Essentials  基础\"></a>Essentials  基础</h3><p>序号 | 对应文档文件名 | 中文标题 | 翻译贡献者 | 校对主要贡献者<br>—– | ————- | — | — | — | — | —<br>1 |  installation.md | 安装 | <a href=\"https://github.com/dingyiming\">dingyiming</a>  | <a href=\"https://github.com/ATLgo\">ATLgo</a> <a href=\"https://github.com/70data\">70data</a><br>2 |  index.md |  介绍 | <a href=\"https://github.com/hijiangtao\">hijiangtao</a> | <a href=\"https://github.com/70data\">70data</a> <a href=\"https://github.com/ATLgo\">ATLgo</a><br>3 |  instance.md | 实例 | <a href=\"https://github.com/dingyiming\">dingyiming</a> | <a href=\"https://github.com/70data\">70data</a> <a href=\"https://github.com/ATLgo\">ATLgo</a><br>4 |  syntax.md  | 模板语法 | <a href=\"https://github.com/daix6\">daix6</a> | <a href=\"https://github.com/70data\">70data</a><br>5 |  computed.md | 计算属 性 | <a href=\"https://github.com/dingyiming\">dingyiming</a> <a href=\"https://github.com/70data\">70data</a> | <a href=\"https://github.com/70data\">70data</a><br>6 |  class-and-style.md | Class 与 Style 绑定 | <a href=\"https://github.com/595074187\">595074187</a> | <a href=\"https://github.com/70data\">70data</a><br>7 |  conditional.md  | 条件渲染 | <a href=\"https://github.com/dingyiming\">dingyiming</a> | <a href=\"https://github.com/hgcoder\">hgcoder</a><br>8 |  list.md |  列表渲染 | <a href=\"https://github.com/tingtien\">tingtien</a> | <a href=\"https://github.com/hgcoder\">hgcoder</a><br>9 |  events.md | 事件处理器 | <a href=\"https://github.com/dingyiming\">dingyiming</a> | <a href=\"https://github.com/yangzj1992\">yangzj1992</a><br>10 |  forms.md  | 表单控件绑定 | <a href=\"https://github.com/dingyiming\">dingyiming</a> | <a href=\"https://github.com/yangzj1992\">yangzj1992</a><br>11 |  components.md |  组件 | <a href=\"https://github.com/ezreally\">ezreally</a> | <a href=\"https://github.com/cuiyongjian\">cuiyongjian</a></p>\n<h3 id=\"Advanced-进阶\"><a href=\"#Advanced-进阶\" class=\"headerlink\" title=\"Advanced  进阶\"></a>Advanced  进阶</h3><p>序号 | 对应文档文件名 | 中文标题 | 翻译贡献者 | 校对主要贡献者<br>—– | ————- | — | — | — | —<br>12 |  transitions.md | 过渡: 进入, 离开, 和 列表 | <a href=\"https://github.com/hilongjw\">awe</a> | <a href=\"https://github.com/bhnddowinf\">bhnddowinf</a> <a href=\"https://github.com/StoneQI\">StoneQI</a><br>13 |  transitioning-state.md | 过渡状态 | <a href=\"https://github.com/hilongjw\">awe</a> | <a href=\"https://github.com/bhnddowinf\">bhnddowinf</a><br>14 |  render-function.md |  Render 函数 | <a href=\"https://github.com/hilongjw\">awe</a> | <a href=\"https://github.com/bhnddowinf\">bhnddowinf</a><br>15 |  reactivity.md |  深入响应式原理 | <a href=\"https://github.com/veaba\">veaba</a> | <a href=\"https://github.com/yangzj1992\">yangzj1992</a><br>16 |  custom-directive.md |  自定义指令 | <a href=\"https://github.com/hurrytospring\">hurrytospring</a> | <a href=\"https://github.com/yangzj1992\">yangzj1992</a><br>17 |  mixins.md |  混合 | <a href=\"https://github.com/hurrytospring\">hurrytospring</a> | <a href=\"https://github.com/bhnddowinf\">bhnddowinf</a><br>18 |  plugins.md |  插件 | <a href=\"https://github.com/hgcoder\">hgcoder</a> | <a href=\"https://github.com/hgcoder\">hgcoder</a><br>19 |  single-file-components.md |  单文件组件 | <a href=\"https://github.com/ATLgo\">ATLgo</a> | <a href=\"https://github.com/zhouzihanntu\">zhouzihanntu</a><br>20 |  routing.md | 路由 | <a href=\"https://github.com/dingyiming\">dingyiming</a> | <a href=\"https://github.com/mlyknown\">mlyknown</a><br>21 |  state-management.md |  状态管理 | <a href=\"https://github.com/dear-lizhihua\">dear-lizhihua</a> | <a href=\"https://github.com/mlyknown\">mlyknown</a><br>22 |  unit-testing.md | 单元测试 | <a href=\"https://github.com/70data\">70data</a> | <a href=\"https://github.com/mlyknown\">mlyknown</a><br>23 |  ssr.md |  服务端渲染 | <a href=\"https://github.com/dingyiming\">dingyiming</a> | <a href=\"https://github.com/yongbolv\">yongbolv</a></p>\n<h3 id=\"Migration-迁移\"><a href=\"#Migration-迁移\" class=\"headerlink\" title=\"Migration  迁移\"></a>Migration  迁移</h3><p>序号 | 对应文档文件名 | 中文标题 | 翻译贡献者 | 校对主要贡献者<br>—– |  ————- | — | — | — | —<br>24 |  migration.md | 1.x迁移 | <a href=\"https://github.com/hurrytospring\">hurrytospring</a> | <a href=\"https://github.com/yongbolv\">yongbolv</a><br>27 |  migration-vue-router.md | vue-router 0.7.x 迁移 | <a href=\"https://github.com/forzajuve10\">forzajuve10</a> | <a href=\"https://github.com/yizhixiaolongxia\">yizhixiaolongxia</a></p>\n<h3 id=\"Meta-更多\"><a href=\"#Meta-更多\" class=\"headerlink\" title=\"Meta  更多\"></a>Meta  更多</h3><p>序号 | 对应文档文件名 | 中文标题 |  翻译贡献者 | 校对主要贡献者<br>—– | ————- | — | — | — | —<br>25 |  comparison.md |   对比其他框架 | <a href=\"https://github.com/yongbolv\">yongbolv</a> | <a href=\"https://github.com/yangzj1992\">yangzj1992</a><br>26 |  join.md |  加入 Vue.js 社区 | <a href=\"https://github.com/daix6\">daix6</a> | <a href=\"https://github.com/zhouzihanntu\">zhouzihanntu</a></p>\n<h2 id=\"API翻译贡献\"><a href=\"#API翻译贡献\" class=\"headerlink\" title=\"API翻译贡献\"></a>API翻译贡献</h2><p>序号 | 对应小节名称 | 中文标题 | 翻译贡献者 | 校对主要贡献者<br>—– |  ————- | — | — | — | — | —<br>1 |  Global Config | 全局配置 | <a href=\"https://github.com/dear-lizhihua\">dear-lizhihua</a> | <a href=\"https://github.com/bhnddowinf\">bhnddowinf</a><br>2 |  Global API | 全局 API | <a href=\"https://github.com/dear-lizhihua\">dear-lizhihua</a> | <a href=\"https://github.com/bhnddowinf\">bhnddowinf</a><br>3 |  Options &#x2F; Data | 选项 &#x2F; 数据 | <a href=\"https://github.com/dear-lizhihua\">dear-lizhihua</a> | <a href=\"https://github.com/bhnddowinf\">bhnddowinf</a><br>4 |  Options &#x2F; DOM | 选项 &#x2F; DOM | <a href=\"https://github.com/ATLgo\">ATLgo</a> | <a href=\"https://github.com/bhnddowinf\">bhnddowinf</a><br>5 |  Options &#x2F; Lifecycle Hooks | 选项 &#x2F; 生命周期钩子 | <a href=\"https://github.com/ATLgo\">ATLgo</a> | <a href=\"https://github.com/bhnddowinf\">bhnddowinf</a><br>6 |  Options &#x2F; Assets | 选项 &#x2F; 资源 | <a href=\"https://github.com/dingyiming\">dingyiming</a> | <a href=\"https://github.com/bhnddowinf\">bhnddowinf</a><br>7 |  Options &#x2F; Misc | 选项 &#x2F; 杂项 | <a href=\"https://github.com/dingyiming\">dingyiming</a> | <a href=\"https://github.com/bhnddowinf\">bhnddowinf</a><br>8 |  Instance Properties | 实例属性 | <a href=\"https://github.com/coolzjy\">coolzjy</a> | <a href=\"https://github.com/bhnddowinf\">bhnddowinf</a><br>9 |  Instance Methods &#x2F; Data | 实例方法 &#x2F; 数据 | <a href=\"https://github.com/dingyiming\">dingyiming</a> | <a href=\"https://github.com/bhnddowinf\">bhnddowinf</a><br>10 |  Instance Methods &#x2F; Events | 实例方法 &#x2F; 事件 | <a href=\"https://github.com/mlyknown\">mlyknown</a> | <a href=\"https://github.com/bhnddowinf\">bhnddowinf</a><br>11 |   Instance Methods &#x2F; Lifecycle | 实例方法 &#x2F; 生命周期 |  <a href=\"https://github.com/mlyknown\">mlyknown</a>| <a href=\"https://github.com/bhnddowinf\">bhnddowinf</a><br>12 |  Directives | 指令| <a href=\"https://github.com/dingyiming\">dingyiming</a> | <a href=\"https://github.com/bhnddowinf\">bhnddowinf</a><br>13 |  Special Attributes | 特殊元素 | <a href=\"https://github.com/70data\">70data</a> | <a href=\"https://github.com/bhnddowinf\">bhnddowinf</a><br>14 |  Built-In Components | 内置的组件  | <a href=\"https://github.com/dear-lizhihua\">dear-lizhihua</a> | <a href=\"https://github.com/bhnddowinf\">bhnddowinf</a><br>15 |  VNode Interface | VNode 接口  | <a href=\"https://github.com/70data\">70data</a> | <a href=\"https://github.com/dear-lizhihua\">dear-lizhihua</a><br>16 |  Server-Side Rendering | 服务端渲染| <a href=\"https://github.com/70data\">70data</a> | <a href=\"https://github.com/dear-lizhihua\">dear-lizhihua</a></p>\n<h2 id=\"示例翻译\"><a href=\"#示例翻译\" class=\"headerlink\" title=\"示例翻译\"></a>示例翻译</h2><p>翻译贡献者 ： <a href=\"https://github.com/lindazhang102\">lindazhang102</a></p>\n<h2 id=\"感谢所有参与翻译的朋友们！\"><a href=\"#感谢所有参与翻译的朋友们！\" class=\"headerlink\" title=\"感谢所有参与翻译的朋友们！\"></a>感谢所有参与翻译的朋友们！</h2>"},{"title":"接口中台","type":"接口中台","_content":"","source":"application/api-middleground.md","raw":"---\ntitle: 接口中台\ntype: 接口中台\n---","date":"2023-06-10T10:49:05.483Z","updated":"2023-06-10T10:49:05.483Z","path":"application/api-middleground.html","comments":1,"layout":"page","_id":"clipw1dcv0002oix5008i76du","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"数据中台","type":"数据中台","_content":"","source":"application/data-middleground.md","raw":"---\ntitle: 数据中台\ntype: 数据中台\n---","date":"2023-06-10T10:49:05.483Z","updated":"2023-06-10T10:49:05.483Z","path":"application/data-middleground.html","comments":1,"layout":"page","_id":"clipw1dcw0003oix5dgzd3xl4","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"胜因盒子","type":"胜因盒子","_content":"\n## 便捷属性\n\n- 连上显示器即可使用\n- 大屏实时展示业务数据\n- 数据报表自动定时刷新","source":"application/syp-android-tv.md","raw":"---\ntitle: 胜因盒子\ntype: 胜因盒子\n---\n\n## 便捷属性\n\n- 连上显示器即可使用\n- 大屏实时展示业务数据\n- 数据报表自动定时刷新","date":"2023-06-10T10:49:05.483Z","updated":"2023-06-10T10:49:05.483Z","path":"application/syp-android-tv.html","comments":1,"layout":"page","_id":"clipw1dcw0004oix5buhd8hdq","content":"<h2 id=\"便捷属性\"><a href=\"#便捷属性\" class=\"headerlink\" title=\"便捷属性\"></a>便捷属性</h2><ul>\n<li>连上显示器即可使用</li>\n<li>大屏实时展示业务数据</li>\n<li>数据报表自动定时刷新</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"便捷属性\"><a href=\"#便捷属性\" class=\"headerlink\" title=\"便捷属性\"></a>便捷属性</h2><ul>\n<li>连上显示器即可使用</li>\n<li>大屏实时展示业务数据</li>\n<li>数据报表自动定时刷新</li>\n</ul>\n"},{"title":"报表中台","type":"报表中台","_content":"","source":"application/report-middleground.md","raw":"---\ntitle: 报表中台\ntype: 报表中台\n---","date":"2023-06-10T10:49:05.483Z","updated":"2023-06-10T10:49:05.483Z","path":"application/report-middleground.html","comments":1,"layout":"page","_id":"clipw1dcw0005oix55vla9naz","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"胜因学院(服务号)","type":"胜因学院(服务号)","_content":"","source":"application/syp-wechat-service-number.md","raw":"---\ntitle: 胜因学院(服务号)\ntype: 胜因学院(服务号)\n---","date":"2023-06-10T10:49:05.483Z","updated":"2023-06-10T10:49:05.483Z","path":"application/syp-wechat-service-number.html","comments":1,"layout":"page","_id":"clipw1dcx0006oix5727f3m22","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"胜因学院(小程序)","type":"胜因学院(小程序)","_content":"\n## 业务流程图\n\n![胜因学院-业务流程图](/images/胜因学院-业务流程图.png)\n\n*注: attachments/xmind/胜因学院-业务流程图.xmind*\n\n## 业务效果图\n\n![胜因学院小程序-业务效果图](/images/胜因学院-小程序业务效果图.png)\n\n*注: attachments/axure/胜因学院业务效果图.rp*\n\n## 业务模块框架\n\n![胜因学院小程序-业务流程](/images/胜因学院-小程序模块框架图.png)\n\n*注: attachments/xmind/胜因学院-小程序功能框架图.xmind*\n\n接口文档: [登录模块](/developer/api-guide/syp-wxmp.html)\n\n## 积分流程图\n\n![小程序积分说明](/images/小程序积分说明.png)\n\n*注: attachments/xmind/胜因学院-小程序用户与微信账户的关联.xmind*\n\n[模板消息-微信小程序官方](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/template-message.html):\n> 步骤一：获取模板 ID\n> 步骤二：页面的 form 组件，属性 report-submit 为 true 时，可以声明为需要发送模板消息，此时点击按钮提交表单可以获取 formId，用于发送模板消息。或者当用户完成 支付行为，可以获取 prepay_id 用于发送模板消息。\n> 步骤三：调用接口下发模板消息\n\n## 积分5W1H\n\n### WHERE\n\n- 胜因学院-我的-积分\n\n![胜因学院-我的-积分](/images/胜因学院-我的-积分.png)\n\n### WHAT\n\n- 这里的积分，其实就是formID,每一个积分代表一个formID\n- formID用于给用户推送模板消息，每一个formID可推送一条模板消息\n- 模板消息就是小程序的服务通知，只有在业务有需要的时候才会给用户推送\n\n![推送消息](/images/推送消息.png)\n\n### WHEN\n\n- 每一位微信用户有其唯一识别的openID，每一个openID可对应多个formID\n- 根据业务需要，我们会在某些特定的表单处埋点，当用户提交这些表单，即可获取该用户的formID，一次提交行为对应一个formID\n- 用户通过提交表单向服务器提交数据，这是真正意义上的表单；但是在胜因学院小程序中，用户点击这些button（如下图所示），向服务器提交的数据为空值，也可算作一次提交表单行为，也可获取一个formID\n- 只有在业务有需要的时候才会消耗用户的formID推送模板消息，所以formID可能会有富余，而且formID的有效期是7天，只可使用7天内的formID，多余或过期的 formID 作废\n\n![提交表单](/images/提交表单.jpeg)\n\n### WHY\n\n- 这里的积分数量主要是为了提示客户当前能推送多少条模板消息，避免相互追责\n\n### HOW\n\n> 步骤一：获取模板 ID\n> 步骤二：页面的 form 组件，属性 report-submit 为 true 时，可以声明为需要发送模板消息，此时点击按钮提交表单可以获取 formId，用于发送模板消息。或者当用户完成 支付行为，可以获取 prepay_id 用于发送模板消息。\n> 步骤三：调用接口下发模板消息\n","source":"application/syp-wxmp.md","raw":"---\ntitle: 胜因学院(小程序)\ntype: 胜因学院(小程序)\n---\n\n## 业务流程图\n\n![胜因学院-业务流程图](/images/胜因学院-业务流程图.png)\n\n*注: attachments/xmind/胜因学院-业务流程图.xmind*\n\n## 业务效果图\n\n![胜因学院小程序-业务效果图](/images/胜因学院-小程序业务效果图.png)\n\n*注: attachments/axure/胜因学院业务效果图.rp*\n\n## 业务模块框架\n\n![胜因学院小程序-业务流程](/images/胜因学院-小程序模块框架图.png)\n\n*注: attachments/xmind/胜因学院-小程序功能框架图.xmind*\n\n接口文档: [登录模块](/developer/api-guide/syp-wxmp.html)\n\n## 积分流程图\n\n![小程序积分说明](/images/小程序积分说明.png)\n\n*注: attachments/xmind/胜因学院-小程序用户与微信账户的关联.xmind*\n\n[模板消息-微信小程序官方](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/template-message.html):\n> 步骤一：获取模板 ID\n> 步骤二：页面的 form 组件，属性 report-submit 为 true 时，可以声明为需要发送模板消息，此时点击按钮提交表单可以获取 formId，用于发送模板消息。或者当用户完成 支付行为，可以获取 prepay_id 用于发送模板消息。\n> 步骤三：调用接口下发模板消息\n\n## 积分5W1H\n\n### WHERE\n\n- 胜因学院-我的-积分\n\n![胜因学院-我的-积分](/images/胜因学院-我的-积分.png)\n\n### WHAT\n\n- 这里的积分，其实就是formID,每一个积分代表一个formID\n- formID用于给用户推送模板消息，每一个formID可推送一条模板消息\n- 模板消息就是小程序的服务通知，只有在业务有需要的时候才会给用户推送\n\n![推送消息](/images/推送消息.png)\n\n### WHEN\n\n- 每一位微信用户有其唯一识别的openID，每一个openID可对应多个formID\n- 根据业务需要，我们会在某些特定的表单处埋点，当用户提交这些表单，即可获取该用户的formID，一次提交行为对应一个formID\n- 用户通过提交表单向服务器提交数据，这是真正意义上的表单；但是在胜因学院小程序中，用户点击这些button（如下图所示），向服务器提交的数据为空值，也可算作一次提交表单行为，也可获取一个formID\n- 只有在业务有需要的时候才会消耗用户的formID推送模板消息，所以formID可能会有富余，而且formID的有效期是7天，只可使用7天内的formID，多余或过期的 formID 作废\n\n![提交表单](/images/提交表单.jpeg)\n\n### WHY\n\n- 这里的积分数量主要是为了提示客户当前能推送多少条模板消息，避免相互追责\n\n### HOW\n\n> 步骤一：获取模板 ID\n> 步骤二：页面的 form 组件，属性 report-submit 为 true 时，可以声明为需要发送模板消息，此时点击按钮提交表单可以获取 formId，用于发送模板消息。或者当用户完成 支付行为，可以获取 prepay_id 用于发送模板消息。\n> 步骤三：调用接口下发模板消息\n","date":"2023-06-10T10:49:05.483Z","updated":"2023-06-10T10:49:05.483Z","path":"application/syp-wxmp.html","comments":1,"layout":"page","_id":"clipw1dcx0007oix53syv77xn","content":"<h2 id=\"业务流程图\"><a href=\"#业务流程图\" class=\"headerlink\" title=\"业务流程图\"></a>业务流程图</h2><p><img src=\"/images/%E8%83%9C%E5%9B%A0%E5%AD%A6%E9%99%A2-%E4%B8%9A%E5%8A%A1%E6%B5%81%E7%A8%8B%E5%9B%BE.png\" alt=\"胜因学院-业务流程图\"></p>\n<p><em>注: attachments&#x2F;xmind&#x2F;胜因学院-业务流程图.xmind</em></p>\n<h2 id=\"业务效果图\"><a href=\"#业务效果图\" class=\"headerlink\" title=\"业务效果图\"></a>业务效果图</h2><p><img src=\"/images/%E8%83%9C%E5%9B%A0%E5%AD%A6%E9%99%A2-%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%9A%E5%8A%A1%E6%95%88%E6%9E%9C%E5%9B%BE.png\" alt=\"胜因学院小程序-业务效果图\"></p>\n<p><em>注: attachments&#x2F;axure&#x2F;胜因学院业务效果图.rp</em></p>\n<h2 id=\"业务模块框架\"><a href=\"#业务模块框架\" class=\"headerlink\" title=\"业务模块框架\"></a>业务模块框架</h2><p><img src=\"/images/%E8%83%9C%E5%9B%A0%E5%AD%A6%E9%99%A2-%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%A8%A1%E5%9D%97%E6%A1%86%E6%9E%B6%E5%9B%BE.png\" alt=\"胜因学院小程序-业务流程\"></p>\n<p><em>注: attachments&#x2F;xmind&#x2F;胜因学院-小程序功能框架图.xmind</em></p>\n<p>接口文档: <a href=\"/developer/api-guide/syp-wxmp.html\">登录模块</a></p>\n<h2 id=\"积分流程图\"><a href=\"#积分流程图\" class=\"headerlink\" title=\"积分流程图\"></a>积分流程图</h2><p><img src=\"/images/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%A7%AF%E5%88%86%E8%AF%B4%E6%98%8E.png\" alt=\"小程序积分说明\"></p>\n<p><em>注: attachments&#x2F;xmind&#x2F;胜因学院-小程序用户与微信账户的关联.xmind</em></p>\n<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/template-message.html\">模板消息-微信小程序官方</a>:</p>\n<blockquote>\n<p>步骤一：获取模板 ID<br>步骤二：页面的 form 组件，属性 report-submit 为 true 时，可以声明为需要发送模板消息，此时点击按钮提交表单可以获取 formId，用于发送模板消息。或者当用户完成 支付行为，可以获取 prepay_id 用于发送模板消息。<br>步骤三：调用接口下发模板消息</p>\n</blockquote>\n<h2 id=\"积分5W1H\"><a href=\"#积分5W1H\" class=\"headerlink\" title=\"积分5W1H\"></a>积分5W1H</h2><h3 id=\"WHERE\"><a href=\"#WHERE\" class=\"headerlink\" title=\"WHERE\"></a>WHERE</h3><ul>\n<li>胜因学院-我的-积分</li>\n</ul>\n<p><img src=\"/images/%E8%83%9C%E5%9B%A0%E5%AD%A6%E9%99%A2-%E6%88%91%E7%9A%84-%E7%A7%AF%E5%88%86.png\" alt=\"胜因学院-我的-积分\"></p>\n<h3 id=\"WHAT\"><a href=\"#WHAT\" class=\"headerlink\" title=\"WHAT\"></a>WHAT</h3><ul>\n<li>这里的积分，其实就是formID,每一个积分代表一个formID</li>\n<li>formID用于给用户推送模板消息，每一个formID可推送一条模板消息</li>\n<li>模板消息就是小程序的服务通知，只有在业务有需要的时候才会给用户推送</li>\n</ul>\n<p><img src=\"/images/%E6%8E%A8%E9%80%81%E6%B6%88%E6%81%AF.png\" alt=\"推送消息\"></p>\n<h3 id=\"WHEN\"><a href=\"#WHEN\" class=\"headerlink\" title=\"WHEN\"></a>WHEN</h3><ul>\n<li>每一位微信用户有其唯一识别的openID，每一个openID可对应多个formID</li>\n<li>根据业务需要，我们会在某些特定的表单处埋点，当用户提交这些表单，即可获取该用户的formID，一次提交行为对应一个formID</li>\n<li>用户通过提交表单向服务器提交数据，这是真正意义上的表单；但是在胜因学院小程序中，用户点击这些button（如下图所示），向服务器提交的数据为空值，也可算作一次提交表单行为，也可获取一个formID</li>\n<li>只有在业务有需要的时候才会消耗用户的formID推送模板消息，所以formID可能会有富余，而且formID的有效期是7天，只可使用7天内的formID，多余或过期的 formID 作废</li>\n</ul>\n<p><img src=\"/images/%E6%8F%90%E4%BA%A4%E8%A1%A8%E5%8D%95.jpeg\" alt=\"提交表单\"></p>\n<h3 id=\"WHY\"><a href=\"#WHY\" class=\"headerlink\" title=\"WHY\"></a>WHY</h3><ul>\n<li>这里的积分数量主要是为了提示客户当前能推送多少条模板消息，避免相互追责</li>\n</ul>\n<h3 id=\"HOW\"><a href=\"#HOW\" class=\"headerlink\" title=\"HOW\"></a>HOW</h3><blockquote>\n<p>步骤一：获取模板 ID<br>步骤二：页面的 form 组件，属性 report-submit 为 true 时，可以声明为需要发送模板消息，此时点击按钮提交表单可以获取 formId，用于发送模板消息。或者当用户完成 支付行为，可以获取 prepay_id 用于发送模板消息。<br>步骤三：调用接口下发模板消息</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"业务流程图\"><a href=\"#业务流程图\" class=\"headerlink\" title=\"业务流程图\"></a>业务流程图</h2><p><img src=\"/images/%E8%83%9C%E5%9B%A0%E5%AD%A6%E9%99%A2-%E4%B8%9A%E5%8A%A1%E6%B5%81%E7%A8%8B%E5%9B%BE.png\" alt=\"胜因学院-业务流程图\"></p>\n<p><em>注: attachments&#x2F;xmind&#x2F;胜因学院-业务流程图.xmind</em></p>\n<h2 id=\"业务效果图\"><a href=\"#业务效果图\" class=\"headerlink\" title=\"业务效果图\"></a>业务效果图</h2><p><img src=\"/images/%E8%83%9C%E5%9B%A0%E5%AD%A6%E9%99%A2-%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%9A%E5%8A%A1%E6%95%88%E6%9E%9C%E5%9B%BE.png\" alt=\"胜因学院小程序-业务效果图\"></p>\n<p><em>注: attachments&#x2F;axure&#x2F;胜因学院业务效果图.rp</em></p>\n<h2 id=\"业务模块框架\"><a href=\"#业务模块框架\" class=\"headerlink\" title=\"业务模块框架\"></a>业务模块框架</h2><p><img src=\"/images/%E8%83%9C%E5%9B%A0%E5%AD%A6%E9%99%A2-%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%A8%A1%E5%9D%97%E6%A1%86%E6%9E%B6%E5%9B%BE.png\" alt=\"胜因学院小程序-业务流程\"></p>\n<p><em>注: attachments&#x2F;xmind&#x2F;胜因学院-小程序功能框架图.xmind</em></p>\n<p>接口文档: <a href=\"/developer/api-guide/syp-wxmp.html\">登录模块</a></p>\n<h2 id=\"积分流程图\"><a href=\"#积分流程图\" class=\"headerlink\" title=\"积分流程图\"></a>积分流程图</h2><p><img src=\"/images/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%A7%AF%E5%88%86%E8%AF%B4%E6%98%8E.png\" alt=\"小程序积分说明\"></p>\n<p><em>注: attachments&#x2F;xmind&#x2F;胜因学院-小程序用户与微信账户的关联.xmind</em></p>\n<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/template-message.html\">模板消息-微信小程序官方</a>:</p>\n<blockquote>\n<p>步骤一：获取模板 ID<br>步骤二：页面的 form 组件，属性 report-submit 为 true 时，可以声明为需要发送模板消息，此时点击按钮提交表单可以获取 formId，用于发送模板消息。或者当用户完成 支付行为，可以获取 prepay_id 用于发送模板消息。<br>步骤三：调用接口下发模板消息</p>\n</blockquote>\n<h2 id=\"积分5W1H\"><a href=\"#积分5W1H\" class=\"headerlink\" title=\"积分5W1H\"></a>积分5W1H</h2><h3 id=\"WHERE\"><a href=\"#WHERE\" class=\"headerlink\" title=\"WHERE\"></a>WHERE</h3><ul>\n<li>胜因学院-我的-积分</li>\n</ul>\n<p><img src=\"/images/%E8%83%9C%E5%9B%A0%E5%AD%A6%E9%99%A2-%E6%88%91%E7%9A%84-%E7%A7%AF%E5%88%86.png\" alt=\"胜因学院-我的-积分\"></p>\n<h3 id=\"WHAT\"><a href=\"#WHAT\" class=\"headerlink\" title=\"WHAT\"></a>WHAT</h3><ul>\n<li>这里的积分，其实就是formID,每一个积分代表一个formID</li>\n<li>formID用于给用户推送模板消息，每一个formID可推送一条模板消息</li>\n<li>模板消息就是小程序的服务通知，只有在业务有需要的时候才会给用户推送</li>\n</ul>\n<p><img src=\"/images/%E6%8E%A8%E9%80%81%E6%B6%88%E6%81%AF.png\" alt=\"推送消息\"></p>\n<h3 id=\"WHEN\"><a href=\"#WHEN\" class=\"headerlink\" title=\"WHEN\"></a>WHEN</h3><ul>\n<li>每一位微信用户有其唯一识别的openID，每一个openID可对应多个formID</li>\n<li>根据业务需要，我们会在某些特定的表单处埋点，当用户提交这些表单，即可获取该用户的formID，一次提交行为对应一个formID</li>\n<li>用户通过提交表单向服务器提交数据，这是真正意义上的表单；但是在胜因学院小程序中，用户点击这些button（如下图所示），向服务器提交的数据为空值，也可算作一次提交表单行为，也可获取一个formID</li>\n<li>只有在业务有需要的时候才会消耗用户的formID推送模板消息，所以formID可能会有富余，而且formID的有效期是7天，只可使用7天内的formID，多余或过期的 formID 作废</li>\n</ul>\n<p><img src=\"/images/%E6%8F%90%E4%BA%A4%E8%A1%A8%E5%8D%95.jpeg\" alt=\"提交表单\"></p>\n<h3 id=\"WHY\"><a href=\"#WHY\" class=\"headerlink\" title=\"WHY\"></a>WHY</h3><ul>\n<li>这里的积分数量主要是为了提示客户当前能推送多少条模板消息，避免相互追责</li>\n</ul>\n<h3 id=\"HOW\"><a href=\"#HOW\" class=\"headerlink\" title=\"HOW\"></a>HOW</h3><blockquote>\n<p>步骤一：获取模板 ID<br>步骤二：页面的 form 组件，属性 report-submit 为 true 时，可以声明为需要发送模板消息，此时点击按钮提交表单可以获取 formId，用于发送模板消息。或者当用户完成 支付行为，可以获取 prepay_id 用于发送模板消息。<br>步骤三：调用接口下发模板消息</p>\n</blockquote>\n"},{"title":"API 设计","type":"API 设计","_content":"\n## RESTFul 理念\n\n![](/images/RESTFul-API.gif)\n\n> 我这篇文章的写作目的，就是想在符合架构原理的前提下，理解和评估以网络为基础的应用软件的架构设计，得到一个功能强、性能好、适宜通信的架构。REST指的是一组架构约束条件和原则。- 2000, Roy Fielding\n\nREST(Representational State Transfer) 表征性状态转移，代表着分布式服务的架构风格。 首次出现在 2000年 Roy Fielding 的博士论文中，Roy Fielding是HTTP规范的主要编写者之一。\n\n\n如果一个架构符合 REST 的约束条件和原则，我们就称它为 **RESTful架构**。\n\nREST 本身并没有创造新的技术、组件或服务，而隐藏在RESTful背后的理念就是使用 Web  的现有特征和能力， 更好地使用现有 Web 标准中的一些准则和约束。\n\n## REST 设计原则\n\n- **客户端-服务器**：将用户UI与数据存储分开，简化服务器组件来提高跨多个平台的用户界面的可移植性并提高可伸缩性。理解为前后端分离的思想。\n- **无状态**：从客户端到服务器的每个请求都包含理解请求所需的信息，并且不能利用服务器上存储的上下文。 尽可能的避免使用 session，由客户端自己标识会话状态（token）。\n- **规范接口**：REST接口约束定义：资源识别; 请求动作; 响应信息; 通过 uri 标出你要操作的资源，通过请求动作（http method）标识要执行的操作，通过返回的状态码来表示这次请求的执行结果。\n- **可缓存**： 缓存约束要求将对请求的响应中的数据隐式或显式标记为可缓存或不可缓存。如果响应是可缓存的，则客户端缓存有权重用该响应数据以用于以后的等效请求。 它表示get请求响应头中应该表示有是否可缓存的头（Cache-Control)\n\n## URI 规范\n\n- 请求动作(HttpMethod)\n  - **GET**：查询操作\n  - **POST**：新增操作\n  - **PUT**：更新操作\n  - **PATCH**：部分更新，推荐 PUT\n  - **DELETE**：删除操作\n\n- 使用连字符 `-` 而不是 `_` 来提高 URI 的可读性\n- URI 中使用小写字母\n- URI 结尾不要使用文件扩展名\n- 不要在末尾使用 `/`\n- 不要通过 URI 隐式传参(推荐显式传参 `?username=restful`)\n- 使用 Http Status 定义 API 执行结果\n  - 1xx：信息, 通信传输协议级信息。\n  - 2xx：成功, 表示客户端的请求已成功接受。\n  - 3xx：重定向, 表示客户端必须执行一些其他操作才能完成其请求。\n  - 4xx：客户端错误, 此类错误状态代码指向客户端。\n  - 5xx：服务器错误, 服务器端错误。\n\n- API 版本定义\n  - URI 版本控制（推荐）\n  \n    ```\n    http://api.example.com/v1\n    http://apiv1.example.com\n    ```\n\n  - 自定义请求标头进行版本控制\n\n    ```\n    Accept-version：v1\n    Accept-version：v2\n    ```\n\n  - Accept header 进行版本控制\n\n    ```\n    Accept:application / vnd.example.v1 + json\n    Accept:application / vnd.example + json; version = 1.0\n    ```\n","source":"developer/api-design-guide.md","raw":"---\ntitle: API 设计\ntype: API 设计\n---\n\n## RESTFul 理念\n\n![](/images/RESTFul-API.gif)\n\n> 我这篇文章的写作目的，就是想在符合架构原理的前提下，理解和评估以网络为基础的应用软件的架构设计，得到一个功能强、性能好、适宜通信的架构。REST指的是一组架构约束条件和原则。- 2000, Roy Fielding\n\nREST(Representational State Transfer) 表征性状态转移，代表着分布式服务的架构风格。 首次出现在 2000年 Roy Fielding 的博士论文中，Roy Fielding是HTTP规范的主要编写者之一。\n\n\n如果一个架构符合 REST 的约束条件和原则，我们就称它为 **RESTful架构**。\n\nREST 本身并没有创造新的技术、组件或服务，而隐藏在RESTful背后的理念就是使用 Web  的现有特征和能力， 更好地使用现有 Web 标准中的一些准则和约束。\n\n## REST 设计原则\n\n- **客户端-服务器**：将用户UI与数据存储分开，简化服务器组件来提高跨多个平台的用户界面的可移植性并提高可伸缩性。理解为前后端分离的思想。\n- **无状态**：从客户端到服务器的每个请求都包含理解请求所需的信息，并且不能利用服务器上存储的上下文。 尽可能的避免使用 session，由客户端自己标识会话状态（token）。\n- **规范接口**：REST接口约束定义：资源识别; 请求动作; 响应信息; 通过 uri 标出你要操作的资源，通过请求动作（http method）标识要执行的操作，通过返回的状态码来表示这次请求的执行结果。\n- **可缓存**： 缓存约束要求将对请求的响应中的数据隐式或显式标记为可缓存或不可缓存。如果响应是可缓存的，则客户端缓存有权重用该响应数据以用于以后的等效请求。 它表示get请求响应头中应该表示有是否可缓存的头（Cache-Control)\n\n## URI 规范\n\n- 请求动作(HttpMethod)\n  - **GET**：查询操作\n  - **POST**：新增操作\n  - **PUT**：更新操作\n  - **PATCH**：部分更新，推荐 PUT\n  - **DELETE**：删除操作\n\n- 使用连字符 `-` 而不是 `_` 来提高 URI 的可读性\n- URI 中使用小写字母\n- URI 结尾不要使用文件扩展名\n- 不要在末尾使用 `/`\n- 不要通过 URI 隐式传参(推荐显式传参 `?username=restful`)\n- 使用 Http Status 定义 API 执行结果\n  - 1xx：信息, 通信传输协议级信息。\n  - 2xx：成功, 表示客户端的请求已成功接受。\n  - 3xx：重定向, 表示客户端必须执行一些其他操作才能完成其请求。\n  - 4xx：客户端错误, 此类错误状态代码指向客户端。\n  - 5xx：服务器错误, 服务器端错误。\n\n- API 版本定义\n  - URI 版本控制（推荐）\n  \n    ```\n    http://api.example.com/v1\n    http://apiv1.example.com\n    ```\n\n  - 自定义请求标头进行版本控制\n\n    ```\n    Accept-version：v1\n    Accept-version：v2\n    ```\n\n  - Accept header 进行版本控制\n\n    ```\n    Accept:application / vnd.example.v1 + json\n    Accept:application / vnd.example + json; version = 1.0\n    ```\n","date":"2023-06-10T10:49:05.484Z","updated":"2023-06-10T10:49:05.484Z","path":"developer/api-design-guide.html","comments":1,"layout":"page","_id":"clipw1dcx0008oix5fse006nh","content":"<h2 id=\"RESTFul-理念\"><a href=\"#RESTFul-理念\" class=\"headerlink\" title=\"RESTFul 理念\"></a>RESTFul 理念</h2><p><img src=\"/images/RESTFul-API.gif\"></p>\n<blockquote>\n<p>我这篇文章的写作目的，就是想在符合架构原理的前提下，理解和评估以网络为基础的应用软件的架构设计，得到一个功能强、性能好、适宜通信的架构。REST指的是一组架构约束条件和原则。- 2000, Roy Fielding</p>\n</blockquote>\n<p>REST(Representational State Transfer) 表征性状态转移，代表着分布式服务的架构风格。 首次出现在 2000年 Roy Fielding 的博士论文中，Roy Fielding是HTTP规范的主要编写者之一。</p>\n<p>如果一个架构符合 REST 的约束条件和原则，我们就称它为 <strong>RESTful架构</strong>。</p>\n<p>REST 本身并没有创造新的技术、组件或服务，而隐藏在RESTful背后的理念就是使用 Web  的现有特征和能力， 更好地使用现有 Web 标准中的一些准则和约束。</p>\n<h2 id=\"REST-设计原则\"><a href=\"#REST-设计原则\" class=\"headerlink\" title=\"REST 设计原则\"></a>REST 设计原则</h2><ul>\n<li><strong>客户端-服务器</strong>：将用户UI与数据存储分开，简化服务器组件来提高跨多个平台的用户界面的可移植性并提高可伸缩性。理解为前后端分离的思想。</li>\n<li><strong>无状态</strong>：从客户端到服务器的每个请求都包含理解请求所需的信息，并且不能利用服务器上存储的上下文。 尽可能的避免使用 session，由客户端自己标识会话状态（token）。</li>\n<li><strong>规范接口</strong>：REST接口约束定义：资源识别; 请求动作; 响应信息; 通过 uri 标出你要操作的资源，通过请求动作（http method）标识要执行的操作，通过返回的状态码来表示这次请求的执行结果。</li>\n<li><strong>可缓存</strong>： 缓存约束要求将对请求的响应中的数据隐式或显式标记为可缓存或不可缓存。如果响应是可缓存的，则客户端缓存有权重用该响应数据以用于以后的等效请求。 它表示get请求响应头中应该表示有是否可缓存的头（Cache-Control)</li>\n</ul>\n<h2 id=\"URI-规范\"><a href=\"#URI-规范\" class=\"headerlink\" title=\"URI 规范\"></a>URI 规范</h2><ul>\n<li><p>请求动作(HttpMethod)</p>\n<ul>\n<li><strong>GET</strong>：查询操作</li>\n<li><strong>POST</strong>：新增操作</li>\n<li><strong>PUT</strong>：更新操作</li>\n<li><strong>PATCH</strong>：部分更新，推荐 PUT</li>\n<li><strong>DELETE</strong>：删除操作</li>\n</ul>\n</li>\n<li><p>使用连字符 <code>-</code> 而不是 <code>_</code> 来提高 URI 的可读性</p>\n</li>\n<li><p>URI 中使用小写字母</p>\n</li>\n<li><p>URI 结尾不要使用文件扩展名</p>\n</li>\n<li><p>不要在末尾使用 <code>/</code></p>\n</li>\n<li><p>不要通过 URI 隐式传参(推荐显式传参 <code>?username=restful</code>)</p>\n</li>\n<li><p>使用 Http Status 定义 API 执行结果</p>\n<ul>\n<li>1xx：信息, 通信传输协议级信息。</li>\n<li>2xx：成功, 表示客户端的请求已成功接受。</li>\n<li>3xx：重定向, 表示客户端必须执行一些其他操作才能完成其请求。</li>\n<li>4xx：客户端错误, 此类错误状态代码指向客户端。</li>\n<li>5xx：服务器错误, 服务器端错误。</li>\n</ul>\n</li>\n<li><p>API 版本定义</p>\n<ul>\n<li><p>URI 版本控制（推荐）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">http://api.example.com/v1<br>http://apiv1.example.com<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>自定义请求标头进行版本控制</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">Accept-version：v1<br>Accept-version：v2<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>Accept header 进行版本控制</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">Accept:application / vnd.example.v1 + json<br>Accept:application / vnd.example + json; version = 1.0<br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"RESTFul-理念\"><a href=\"#RESTFul-理念\" class=\"headerlink\" title=\"RESTFul 理念\"></a>RESTFul 理念</h2><p><img src=\"/images/RESTFul-API.gif\"></p>\n<blockquote>\n<p>我这篇文章的写作目的，就是想在符合架构原理的前提下，理解和评估以网络为基础的应用软件的架构设计，得到一个功能强、性能好、适宜通信的架构。REST指的是一组架构约束条件和原则。- 2000, Roy Fielding</p>\n</blockquote>\n<p>REST(Representational State Transfer) 表征性状态转移，代表着分布式服务的架构风格。 首次出现在 2000年 Roy Fielding 的博士论文中，Roy Fielding是HTTP规范的主要编写者之一。</p>\n<p>如果一个架构符合 REST 的约束条件和原则，我们就称它为 <strong>RESTful架构</strong>。</p>\n<p>REST 本身并没有创造新的技术、组件或服务，而隐藏在RESTful背后的理念就是使用 Web  的现有特征和能力， 更好地使用现有 Web 标准中的一些准则和约束。</p>\n<h2 id=\"REST-设计原则\"><a href=\"#REST-设计原则\" class=\"headerlink\" title=\"REST 设计原则\"></a>REST 设计原则</h2><ul>\n<li><strong>客户端-服务器</strong>：将用户UI与数据存储分开，简化服务器组件来提高跨多个平台的用户界面的可移植性并提高可伸缩性。理解为前后端分离的思想。</li>\n<li><strong>无状态</strong>：从客户端到服务器的每个请求都包含理解请求所需的信息，并且不能利用服务器上存储的上下文。 尽可能的避免使用 session，由客户端自己标识会话状态（token）。</li>\n<li><strong>规范接口</strong>：REST接口约束定义：资源识别; 请求动作; 响应信息; 通过 uri 标出你要操作的资源，通过请求动作（http method）标识要执行的操作，通过返回的状态码来表示这次请求的执行结果。</li>\n<li><strong>可缓存</strong>： 缓存约束要求将对请求的响应中的数据隐式或显式标记为可缓存或不可缓存。如果响应是可缓存的，则客户端缓存有权重用该响应数据以用于以后的等效请求。 它表示get请求响应头中应该表示有是否可缓存的头（Cache-Control)</li>\n</ul>\n<h2 id=\"URI-规范\"><a href=\"#URI-规范\" class=\"headerlink\" title=\"URI 规范\"></a>URI 规范</h2><ul>\n<li><p>请求动作(HttpMethod)</p>\n<ul>\n<li><strong>GET</strong>：查询操作</li>\n<li><strong>POST</strong>：新增操作</li>\n<li><strong>PUT</strong>：更新操作</li>\n<li><strong>PATCH</strong>：部分更新，推荐 PUT</li>\n<li><strong>DELETE</strong>：删除操作</li>\n</ul>\n</li>\n<li><p>使用连字符 <code>-</code> 而不是 <code>_</code> 来提高 URI 的可读性</p>\n</li>\n<li><p>URI 中使用小写字母</p>\n</li>\n<li><p>URI 结尾不要使用文件扩展名</p>\n</li>\n<li><p>不要在末尾使用 <code>/</code></p>\n</li>\n<li><p>不要通过 URI 隐式传参(推荐显式传参 <code>?username=restful</code>)</p>\n</li>\n<li><p>使用 Http Status 定义 API 执行结果</p>\n<ul>\n<li>1xx：信息, 通信传输协议级信息。</li>\n<li>2xx：成功, 表示客户端的请求已成功接受。</li>\n<li>3xx：重定向, 表示客户端必须执行一些其他操作才能完成其请求。</li>\n<li>4xx：客户端错误, 此类错误状态代码指向客户端。</li>\n<li>5xx：服务器错误, 服务器端错误。</li>\n</ul>\n</li>\n<li><p>API 版本定义</p>\n<ul>\n<li><p>URI 版本控制（推荐）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">http://api.example.com/v1<br>http://apiv1.example.com<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>自定义请求标头进行版本控制</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">Accept-version：v1<br>Accept-version：v2<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>Accept header 进行版本控制</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">Accept:application / vnd.example.v1 + json<br>Accept:application / vnd.example + json; version = 1.0<br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n"},{"title":"环境规范","type":"环境规范","_content":"\n## 公司设备规范\n\n出发点：\n- 公司设备开发环境不受员工流动影响\n- 工具、配置路径统一规范方便内部协作\n- 在线文档: 职场协作\n\n公司设备：\n- 工作事务仅允许使用公司设备\n- 禁止串用公司电脑及公开设备账号密码\n- 公司设备使用统一账号规范\n    - SYMac01\n    - SYMac02\n    - SYMac0N\n    - SYWin01\n    - SYWin02\n    - SYWin0N\n\n仅公司设备不足时允许使用个人设备：\n- 根据已知依赖的工具列表，快速、全面的安装软件\n\n## 软件部署规范\n\n- 项目目录: `~/WorkSpace`\n- 依赖包目录: `~/SourceSpace`\n- [工具包下载](https://pan.baidu.com/s/1P4yx7eHwJp29nfbnQ4qFEQ&shfl=shareset), 提取码: js5q\n\n软件安装规范(所有设备统一安装目录、配置档位置): 开发工具列表\n\n- iterm2/homebrew/sypctl\n- Maven, `~/SourceSpace/Maven3.6.2`\n- Zookeeper, `~/SourceSpace/Zookeeper3.4.10`\n- ActiveMQ, `~/SourceSpace/ActiveMQ5.15.5`\n- Kettle, `~/SourceSpace/Kettle`\n- MacDown, Markdown 文件: `~/SourceSpace/Markdown`\n- NaviCat, 操作SQL 存储: `~/SourceSpace/NaviCat`\n- Java\n- Redis/RDM\n- MySQL\n- IDEA\n- Chrome\n- Evernote\n- Xmind\n- Sublime Text\n\n## 线上环境规范\n\n关于线上资源事项：\n- 本地环境开发、调试时必须连接本地资源(MySQL/Redis/Mongo/Zookeeper等资源)\n- 临时调试线上问题时，允许连接云上数据资源(MySQL/Redis/Mongo/Zookeeper等资源), \n\n关于项目部署规范:\n- 目录规范:\n  - FTP: `/data/ftp`\n  - 备份: `/data/backup`\n  - Web: `/data/work/www`\n      - Java 运营平台\n      - JAVA API\n      - JAVA API Service\n      - 前端资源\n  - 脚本: `/data/work/scripts`\n      - 定时任务脚本\n      - Kettle ETL/Jobs 脚本\n  - 配置项: `/data/work/config`\n  - 工具: `/data/work/tools`\n\n    ```\n    /bin/java -> /data/work/tools/jdk-1.8.0_192/jre/bin/java\n    /bin/kitchen -> /data/work/tools/kettle-8.2.0.0_342/kitchen.sh\n    /bin/kettle -> /data/work/tools/kettle-8.2.0.0_342/spoon.sh\n    /bin/spoon -> /data/work/tools/kettle-8.2.0.0_342/spoon.sh\n    /bin/ruby -> /root/.rbenv/shims/ruby\n    ```\n\n  - 日志项: `/data/work/logs`\n\n  ```\n  $ mkdir -p /data/{ftp,backup,work/{www,tools,scripts,config,logs}}\n  ```\n  \n- Linux 系统运维账号\n   - Root: `sy-user`\n   - FTP: `sy-ftp-user`\n   - Web: `sy-www-user`\n   - 其他: `sy-devops-user`\n- MySQL 运维账号(DDL/DDM权限)\n   - 线上账号: `sy-user`\n   - 线下开发: `sy-dev-user`\n   - 客户账号: `sy-guest-user`\n- Redis 运维账号: `sy-user`\n","source":"developer/environment-guide.md","raw":"---\ntitle: 环境规范\ntype: 环境规范\n---\n\n## 公司设备规范\n\n出发点：\n- 公司设备开发环境不受员工流动影响\n- 工具、配置路径统一规范方便内部协作\n- 在线文档: 职场协作\n\n公司设备：\n- 工作事务仅允许使用公司设备\n- 禁止串用公司电脑及公开设备账号密码\n- 公司设备使用统一账号规范\n    - SYMac01\n    - SYMac02\n    - SYMac0N\n    - SYWin01\n    - SYWin02\n    - SYWin0N\n\n仅公司设备不足时允许使用个人设备：\n- 根据已知依赖的工具列表，快速、全面的安装软件\n\n## 软件部署规范\n\n- 项目目录: `~/WorkSpace`\n- 依赖包目录: `~/SourceSpace`\n- [工具包下载](https://pan.baidu.com/s/1P4yx7eHwJp29nfbnQ4qFEQ&shfl=shareset), 提取码: js5q\n\n软件安装规范(所有设备统一安装目录、配置档位置): 开发工具列表\n\n- iterm2/homebrew/sypctl\n- Maven, `~/SourceSpace/Maven3.6.2`\n- Zookeeper, `~/SourceSpace/Zookeeper3.4.10`\n- ActiveMQ, `~/SourceSpace/ActiveMQ5.15.5`\n- Kettle, `~/SourceSpace/Kettle`\n- MacDown, Markdown 文件: `~/SourceSpace/Markdown`\n- NaviCat, 操作SQL 存储: `~/SourceSpace/NaviCat`\n- Java\n- Redis/RDM\n- MySQL\n- IDEA\n- Chrome\n- Evernote\n- Xmind\n- Sublime Text\n\n## 线上环境规范\n\n关于线上资源事项：\n- 本地环境开发、调试时必须连接本地资源(MySQL/Redis/Mongo/Zookeeper等资源)\n- 临时调试线上问题时，允许连接云上数据资源(MySQL/Redis/Mongo/Zookeeper等资源), \n\n关于项目部署规范:\n- 目录规范:\n  - FTP: `/data/ftp`\n  - 备份: `/data/backup`\n  - Web: `/data/work/www`\n      - Java 运营平台\n      - JAVA API\n      - JAVA API Service\n      - 前端资源\n  - 脚本: `/data/work/scripts`\n      - 定时任务脚本\n      - Kettle ETL/Jobs 脚本\n  - 配置项: `/data/work/config`\n  - 工具: `/data/work/tools`\n\n    ```\n    /bin/java -> /data/work/tools/jdk-1.8.0_192/jre/bin/java\n    /bin/kitchen -> /data/work/tools/kettle-8.2.0.0_342/kitchen.sh\n    /bin/kettle -> /data/work/tools/kettle-8.2.0.0_342/spoon.sh\n    /bin/spoon -> /data/work/tools/kettle-8.2.0.0_342/spoon.sh\n    /bin/ruby -> /root/.rbenv/shims/ruby\n    ```\n\n  - 日志项: `/data/work/logs`\n\n  ```\n  $ mkdir -p /data/{ftp,backup,work/{www,tools,scripts,config,logs}}\n  ```\n  \n- Linux 系统运维账号\n   - Root: `sy-user`\n   - FTP: `sy-ftp-user`\n   - Web: `sy-www-user`\n   - 其他: `sy-devops-user`\n- MySQL 运维账号(DDL/DDM权限)\n   - 线上账号: `sy-user`\n   - 线下开发: `sy-dev-user`\n   - 客户账号: `sy-guest-user`\n- Redis 运维账号: `sy-user`\n","date":"2023-06-10T10:49:05.485Z","updated":"2023-06-10T10:49:05.485Z","path":"developer/environment-guide.html","comments":1,"layout":"page","_id":"clipw1dcx0009oix5ho43hxaf","content":"<h2 id=\"公司设备规范\"><a href=\"#公司设备规范\" class=\"headerlink\" title=\"公司设备规范\"></a>公司设备规范</h2><p>出发点：</p>\n<ul>\n<li>公司设备开发环境不受员工流动影响</li>\n<li>工具、配置路径统一规范方便内部协作</li>\n<li>在线文档: 职场协作</li>\n</ul>\n<p>公司设备：</p>\n<ul>\n<li>工作事务仅允许使用公司设备</li>\n<li>禁止串用公司电脑及公开设备账号密码</li>\n<li>公司设备使用统一账号规范<ul>\n<li>SYMac01</li>\n<li>SYMac02</li>\n<li>SYMac0N</li>\n<li>SYWin01</li>\n<li>SYWin02</li>\n<li>SYWin0N</li>\n</ul>\n</li>\n</ul>\n<p>仅公司设备不足时允许使用个人设备：</p>\n<ul>\n<li>根据已知依赖的工具列表，快速、全面的安装软件</li>\n</ul>\n<h2 id=\"软件部署规范\"><a href=\"#软件部署规范\" class=\"headerlink\" title=\"软件部署规范\"></a>软件部署规范</h2><ul>\n<li>项目目录: <code>~/WorkSpace</code></li>\n<li>依赖包目录: <code>~/SourceSpace</code></li>\n<li><a href=\"https://pan.baidu.com/s/1P4yx7eHwJp29nfbnQ4qFEQ&shfl=shareset\">工具包下载</a>, 提取码: js5q</li>\n</ul>\n<p>软件安装规范(所有设备统一安装目录、配置档位置): 开发工具列表</p>\n<ul>\n<li>iterm2&#x2F;homebrew&#x2F;sypctl</li>\n<li>Maven, <code>~/SourceSpace/Maven3.6.2</code></li>\n<li>Zookeeper, <code>~/SourceSpace/Zookeeper3.4.10</code></li>\n<li>ActiveMQ, <code>~/SourceSpace/ActiveMQ5.15.5</code></li>\n<li>Kettle, <code>~/SourceSpace/Kettle</code></li>\n<li>MacDown, Markdown 文件: <code>~/SourceSpace/Markdown</code></li>\n<li>NaviCat, 操作SQL 存储: <code>~/SourceSpace/NaviCat</code></li>\n<li>Java</li>\n<li>Redis&#x2F;RDM</li>\n<li>MySQL</li>\n<li>IDEA</li>\n<li>Chrome</li>\n<li>Evernote</li>\n<li>Xmind</li>\n<li>Sublime Text</li>\n</ul>\n<h2 id=\"线上环境规范\"><a href=\"#线上环境规范\" class=\"headerlink\" title=\"线上环境规范\"></a>线上环境规范</h2><p>关于线上资源事项：</p>\n<ul>\n<li>本地环境开发、调试时必须连接本地资源(MySQL&#x2F;Redis&#x2F;Mongo&#x2F;Zookeeper等资源)</li>\n<li>临时调试线上问题时，允许连接云上数据资源(MySQL&#x2F;Redis&#x2F;Mongo&#x2F;Zookeeper等资源),</li>\n</ul>\n<p>关于项目部署规范:</p>\n<ul>\n<li><p>目录规范:</p>\n<ul>\n<li><p>FTP: <code>/data/ftp</code></p>\n</li>\n<li><p>备份: <code>/data/backup</code></p>\n</li>\n<li><p>Web: <code>/data/work/www</code></p>\n<ul>\n<li>Java 运营平台</li>\n<li>JAVA API</li>\n<li>JAVA API Service</li>\n<li>前端资源</li>\n</ul>\n</li>\n<li><p>脚本: <code>/data/work/scripts</code></p>\n<ul>\n<li>定时任务脚本</li>\n<li>Kettle ETL&#x2F;Jobs 脚本</li>\n</ul>\n</li>\n<li><p>配置项: <code>/data/work/config</code></p>\n</li>\n<li><p>工具: <code>/data/work/tools</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">/bin/java -&gt; /data/work/tools/jdk-1.8.0_192/jre/bin/java<br>/bin/kitchen -&gt; /data/work/tools/kettle-8.2.0.0_342/kitchen.sh<br>/bin/kettle -&gt; /data/work/tools/kettle-8.2.0.0_342/spoon.sh<br>/bin/spoon -&gt; /data/work/tools/kettle-8.2.0.0_342/spoon.sh<br>/bin/ruby -&gt; /root/.rbenv/shims/ruby<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>日志项: <code>/data/work/logs</code></p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">$ mkdir -p /data/&#123;ftp,backup,work/&#123;www,tools,scripts,config,logs&#125;&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>Linux 系统运维账号</p>\n<ul>\n<li>Root: <code>sy-user</code></li>\n<li>FTP: <code>sy-ftp-user</code></li>\n<li>Web: <code>sy-www-user</code></li>\n<li>其他: <code>sy-devops-user</code></li>\n</ul>\n</li>\n<li><p>MySQL 运维账号(DDL&#x2F;DDM权限)</p>\n<ul>\n<li>线上账号: <code>sy-user</code></li>\n<li>线下开发: <code>sy-dev-user</code></li>\n<li>客户账号: <code>sy-guest-user</code></li>\n</ul>\n</li>\n<li><p>Redis 运维账号: <code>sy-user</code></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"公司设备规范\"><a href=\"#公司设备规范\" class=\"headerlink\" title=\"公司设备规范\"></a>公司设备规范</h2><p>出发点：</p>\n<ul>\n<li>公司设备开发环境不受员工流动影响</li>\n<li>工具、配置路径统一规范方便内部协作</li>\n<li>在线文档: 职场协作</li>\n</ul>\n<p>公司设备：</p>\n<ul>\n<li>工作事务仅允许使用公司设备</li>\n<li>禁止串用公司电脑及公开设备账号密码</li>\n<li>公司设备使用统一账号规范<ul>\n<li>SYMac01</li>\n<li>SYMac02</li>\n<li>SYMac0N</li>\n<li>SYWin01</li>\n<li>SYWin02</li>\n<li>SYWin0N</li>\n</ul>\n</li>\n</ul>\n<p>仅公司设备不足时允许使用个人设备：</p>\n<ul>\n<li>根据已知依赖的工具列表，快速、全面的安装软件</li>\n</ul>\n<h2 id=\"软件部署规范\"><a href=\"#软件部署规范\" class=\"headerlink\" title=\"软件部署规范\"></a>软件部署规范</h2><ul>\n<li>项目目录: <code>~/WorkSpace</code></li>\n<li>依赖包目录: <code>~/SourceSpace</code></li>\n<li><a href=\"https://pan.baidu.com/s/1P4yx7eHwJp29nfbnQ4qFEQ&shfl=shareset\">工具包下载</a>, 提取码: js5q</li>\n</ul>\n<p>软件安装规范(所有设备统一安装目录、配置档位置): 开发工具列表</p>\n<ul>\n<li>iterm2&#x2F;homebrew&#x2F;sypctl</li>\n<li>Maven, <code>~/SourceSpace/Maven3.6.2</code></li>\n<li>Zookeeper, <code>~/SourceSpace/Zookeeper3.4.10</code></li>\n<li>ActiveMQ, <code>~/SourceSpace/ActiveMQ5.15.5</code></li>\n<li>Kettle, <code>~/SourceSpace/Kettle</code></li>\n<li>MacDown, Markdown 文件: <code>~/SourceSpace/Markdown</code></li>\n<li>NaviCat, 操作SQL 存储: <code>~/SourceSpace/NaviCat</code></li>\n<li>Java</li>\n<li>Redis&#x2F;RDM</li>\n<li>MySQL</li>\n<li>IDEA</li>\n<li>Chrome</li>\n<li>Evernote</li>\n<li>Xmind</li>\n<li>Sublime Text</li>\n</ul>\n<h2 id=\"线上环境规范\"><a href=\"#线上环境规范\" class=\"headerlink\" title=\"线上环境规范\"></a>线上环境规范</h2><p>关于线上资源事项：</p>\n<ul>\n<li>本地环境开发、调试时必须连接本地资源(MySQL&#x2F;Redis&#x2F;Mongo&#x2F;Zookeeper等资源)</li>\n<li>临时调试线上问题时，允许连接云上数据资源(MySQL&#x2F;Redis&#x2F;Mongo&#x2F;Zookeeper等资源),</li>\n</ul>\n<p>关于项目部署规范:</p>\n<ul>\n<li><p>目录规范:</p>\n<ul>\n<li><p>FTP: <code>/data/ftp</code></p>\n</li>\n<li><p>备份: <code>/data/backup</code></p>\n</li>\n<li><p>Web: <code>/data/work/www</code></p>\n<ul>\n<li>Java 运营平台</li>\n<li>JAVA API</li>\n<li>JAVA API Service</li>\n<li>前端资源</li>\n</ul>\n</li>\n<li><p>脚本: <code>/data/work/scripts</code></p>\n<ul>\n<li>定时任务脚本</li>\n<li>Kettle ETL&#x2F;Jobs 脚本</li>\n</ul>\n</li>\n<li><p>配置项: <code>/data/work/config</code></p>\n</li>\n<li><p>工具: <code>/data/work/tools</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">/bin/java -&gt; /data/work/tools/jdk-1.8.0_192/jre/bin/java<br>/bin/kitchen -&gt; /data/work/tools/kettle-8.2.0.0_342/kitchen.sh<br>/bin/kettle -&gt; /data/work/tools/kettle-8.2.0.0_342/spoon.sh<br>/bin/spoon -&gt; /data/work/tools/kettle-8.2.0.0_342/spoon.sh<br>/bin/ruby -&gt; /root/.rbenv/shims/ruby<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>日志项: <code>/data/work/logs</code></p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">$ mkdir -p /data/&#123;ftp,backup,work/&#123;www,tools,scripts,config,logs&#125;&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>Linux 系统运维账号</p>\n<ul>\n<li>Root: <code>sy-user</code></li>\n<li>FTP: <code>sy-ftp-user</code></li>\n<li>Web: <code>sy-www-user</code></li>\n<li>其他: <code>sy-devops-user</code></li>\n</ul>\n</li>\n<li><p>MySQL 运维账号(DDL&#x2F;DDM权限)</p>\n<ul>\n<li>线上账号: <code>sy-user</code></li>\n<li>线下开发: <code>sy-dev-user</code></li>\n<li>客户账号: <code>sy-guest-user</code></li>\n</ul>\n</li>\n<li><p>Redis 运维账号: <code>sy-user</code></p>\n</li>\n</ul>\n"},{"title":"ETL 运维","type":"ETL 运维","_content":"\n## 思维导图\n\n![数据库运维规范.png](/images/数据库运维规范.png)\n\n*注: attachments/xmind/数据库运维规范.xmind*\n\n## 运维流程\n\n- 确认功能需求\n- **本地**开发测试\n- 维护运维 SQL 脚本至[SypModelScript](https://gitlab.idata.mobi/shengyiplus/syp-model-scripts)\n- 提交代码合并审核(*参考[Gitlab 协作](/corporate-culture/teamwork.html#Gitlab-协作)*)\n- 向管理员申请部署至**开发/正式**环境\n\n*注意:*\n- 确认提交的SQL运维脚本语法正确\n- 确认SQL运维脚本可重复执行(不报错)\n\n## 运维范围\n\n包含但不限于以下内容:(*参考[表设计规范](/developer/style-guide/mysql.html#表设计规范)*)\n\n- 数据库: DDL 语句、存储过程、函数、视图、事件\n- 数据表: DDL 语句、触发器、字段更新语句\n- 业务数据: 数据插入语句\n\n## ETL 流规范\n\n### 数据库分层\n\n![ETL流规范](/images/ETL流规范.png)\n\n*注: attachments/xmind/ETL流规范.xmind*\n\n由于当前业务简单（与数据量多少无关），ETL 流程分三段:（其实需要维护是两段）\n\n- **客户数据源**。\n\n  数据类型: **客户的数据库，或提供的 Excel/SQL 等数据。**  \n\n  客户数据源信息、定时提供的Excel/SQL数据备份归档在印象笔记。\n\n- **ODS 层**(操作数据存储 Operational Data Store)。\n\n  数据类型: 1. 业务需要的客户业务表；2. 非RDS层的计算数数据TDS中间表(转换数据存储 Transform Data Store)。\n\n- **RDS 层**(报表数据存储 Report/Result Data Store)。\n\n  报表加载直接使用的数据表；最佳实现方案是单层查询，若无法做到的话则考虑添加TDS数据中间表。\n\n### 表命名规范\n\n- [MySQL 编程规范](/developer/style-guide/mysql.html)\n- 库名/表名/字段名统一小写。\n- 库名/表名/字段名禁止使用 mysql 保留字。\n- ODS 层业务表命名: `ods_业务表名`。若客户数据表名有大写(Oracle/SQLServer), 则按驼峰转下划线规则，比如 `salesA` 对应 `ods_sales_a`。\n- ODS 层中间表命名: `tds_功能描述`。比如聚合汇总后的粉丝用户画像中间表 `tds_fans_personas`，若基于中间表多次计算的中间表在保持原表名后继续追加功能描述，比如基于粉丝用户画像聚合出区域分布表 `tds_fans_personas_regional_distributions`\n- RDS 层数据表命名: `rds_数据表`。原则上 1. RDS 表数据量应该很小；2. RDS 数据只能源自 TDS 中间表。\n\n### 脚本编程规范\n\n*注: 脚本部署路径参考[线上环境规范](/developer/environment-guide.html#线上环境规范)*\n\n1. 脚本第一行[Shebang](https://zh.wikipedia.org/zh-hans/Shebang) `#!/bin/bash`\n2. 脚本注解字段\n  - 开发人员: Jaden\n  - 更新日期: 2019-10-29\n  - 客户名称: Allergan\n  - 业务模块: SalesA-ODS-To-TDS\n  - 对接团队: ETOCRM\n  - 定时任务: `30 00 * * *`\n  - 业务描述: \n  - 代码步骤:\n3. 脚本执行严格模式 `set -e`, 遇错即中止执行\n4. 规范式注释输出(日期+注释说明)函数 `logger`\n4. 脚本代码八股文\n  - `Shebang`\n  - 注解区域\n  - 开启严格模式 `set -e`\n  - 变量、函数声明\n  - 功能代码段\n    - 合理使用 `logger`\n    - 内部脚本输出**不要**重定向到日志，以便统一收集日志\n  - 日志、文档归档\n  - 仪式感退出码(`exit 0`)\n6. 邮件通知\n\n`sypetl` 功能逻辑伪代码\n\n```\n$ find 脚本绝对路径\n$ check 注解字段\n$ bash 脚本 > 日志目录/脚本名称-日期.log\n$ send 邮件\n```\n\n\n`sypetl` 调用示例 \\`sypetl intfocus [example](/developer/etl-script-example.sh.html)\\`\n\n```\n$ sypetl\n操作示例:\n\n$ sypetl 公司名称 模块名称\n$ sypetlcheck 公司名称 模块名称\n\n脚本路径: /data/work/scripts/公司名称/模块名称/tools.sh\n\n$ sypetl intfocus example\n19/10/31 16:01:14 - 脚本路径: /data/work/scripts/intfocus/example/tools.sh\n19/10/31 16:01:14 - 检测必填项:\n19/10/31 16:01:14 - 配置正常 - ^# 开发人员: Aaron\n19/10/31 16:01:14 - 配置正常 - ^# 更新日期: 2019-10-29\n19/10/31 16:01:14 - 配置正常 - ^# 业务模块: SypEtl测试\n19/10/31 16:01:14 - 配置正常 - ^# 定时任务: 30 19 * * *\n19/10/31 16:01:14 - 配置正常 - ^# 代码步骤:\n19/10/31 16:01:14 - 配置正常 - ^# 更新日期: 2019-10-29\n19/10/31 16:01:14 - 配置正常 - ^# 客户名称: 艾尔建\n19/10/31 16:01:14 - 配置正常 - ^# 对接团队: 齐数ETOCRM\n19/10/31 16:01:14 - 配置正常 - ^# 代码步骤:\n19/10/31 16:01:14 - 配置正常 - ^# 业务描述:\n19/10/31 16:01:14 - 配置正常 - `set -e`\n19/10/31 16:01:14 - 日志路径: /data/work/logs/intfocus-example-191031160114.log\n19/10/31 16:01:14 - 邮件配置: /data/work/logs/sendmail.191031160114.json\n19/10/31 16:01:17 - 胜因运维<jaden.li@jaden.tech> => Jaden.Li<jaden.li@jaden.tech>, SypEtl测试, status: 250\n```\n\n### 备份/其他规范\n\n- ODS/RDS 层所有的数据表设计、存储过程、触发器、视图、事件都需要维护在 [SypModelScripts](https://gitlab.idata.mobi/shengyiplus/syp-model-scripts)\n- ODS 层的 ODS 业务表数据需要每日备份，并做人工检查。\n- 存储过程按功能需求设计，禁止不同功能的需求使用同一个存储过程。\n- 定时事件(event) 按功能需求设计，禁止不同功能的需求使用同一个定时事件。\n\n### PERSON 概念\n\n「PERSONA」是 Allen Cooper 提出来的一种通过调研和问卷获得的典型用户模型，用于产品需求挖掘与交互设计的方法。\n\n- **P, 基本性(Primary)**: 指该用户角色是否基于对真实用户的情景访谈;\n- **E, 同理性(Empathy)**: 指用户角色中包含姓名、照片和产品相关的描述，该用户角色是否引同理心;\n- **R, 真实性(Realistic)**: 指对那些每天与顾客打交道的人来说，用户角色是否看起来像真实人物;\n- **S, 独特性(Singular)**: 每个用户是否是独特的，彼此很少有相似性;\n- **O, 目标性(Objectives)**: 该用户角色是否包含与产品相关的高层次目标，是否包含关键词来描述该目标;\n- **N, 数量性(Number)**: 用户角色的数量是否足够少，以便设计团队能记住每个用户角色的姓名，以及其中的一个主要用户角色;\n- **A, 应用性(Applicable)**: 设计团队是否能使用用户角色作为一种实用工具进行设计决策。\n\n## 报表开发流程\n\n### 思维导图\n\n![报表开发流程.png](/images/报表开发流程.png)\n\n*注: attachments/xmind/报表开发流程.xmind*\n\n### 开发流程\n\n1. 交流客户报表需求\n2. 定向低保真原型图\n3. 设计报表依赖的数据结构(RDS)\n4. 填充伪业务数据\n5. 报表开发，还原原型图\n6. 与客户确认报表需求\n7. 交流客户 ODS 层业务数据\n8. 设计 ODS 层数据转换至 RDS 的 TDS 中间表\n9. 实现存储过程/事件，同步 ODS -> TDS -> RDS\n10. 维护表结构、存储过程、事件等代码至运维脚本项目\n\n","source":"developer/etl-devops-guide.md","raw":"---\ntitle: ETL 运维\ntype: ETL 运维\n---\n\n## 思维导图\n\n![数据库运维规范.png](/images/数据库运维规范.png)\n\n*注: attachments/xmind/数据库运维规范.xmind*\n\n## 运维流程\n\n- 确认功能需求\n- **本地**开发测试\n- 维护运维 SQL 脚本至[SypModelScript](https://gitlab.idata.mobi/shengyiplus/syp-model-scripts)\n- 提交代码合并审核(*参考[Gitlab 协作](/corporate-culture/teamwork.html#Gitlab-协作)*)\n- 向管理员申请部署至**开发/正式**环境\n\n*注意:*\n- 确认提交的SQL运维脚本语法正确\n- 确认SQL运维脚本可重复执行(不报错)\n\n## 运维范围\n\n包含但不限于以下内容:(*参考[表设计规范](/developer/style-guide/mysql.html#表设计规范)*)\n\n- 数据库: DDL 语句、存储过程、函数、视图、事件\n- 数据表: DDL 语句、触发器、字段更新语句\n- 业务数据: 数据插入语句\n\n## ETL 流规范\n\n### 数据库分层\n\n![ETL流规范](/images/ETL流规范.png)\n\n*注: attachments/xmind/ETL流规范.xmind*\n\n由于当前业务简单（与数据量多少无关），ETL 流程分三段:（其实需要维护是两段）\n\n- **客户数据源**。\n\n  数据类型: **客户的数据库，或提供的 Excel/SQL 等数据。**  \n\n  客户数据源信息、定时提供的Excel/SQL数据备份归档在印象笔记。\n\n- **ODS 层**(操作数据存储 Operational Data Store)。\n\n  数据类型: 1. 业务需要的客户业务表；2. 非RDS层的计算数数据TDS中间表(转换数据存储 Transform Data Store)。\n\n- **RDS 层**(报表数据存储 Report/Result Data Store)。\n\n  报表加载直接使用的数据表；最佳实现方案是单层查询，若无法做到的话则考虑添加TDS数据中间表。\n\n### 表命名规范\n\n- [MySQL 编程规范](/developer/style-guide/mysql.html)\n- 库名/表名/字段名统一小写。\n- 库名/表名/字段名禁止使用 mysql 保留字。\n- ODS 层业务表命名: `ods_业务表名`。若客户数据表名有大写(Oracle/SQLServer), 则按驼峰转下划线规则，比如 `salesA` 对应 `ods_sales_a`。\n- ODS 层中间表命名: `tds_功能描述`。比如聚合汇总后的粉丝用户画像中间表 `tds_fans_personas`，若基于中间表多次计算的中间表在保持原表名后继续追加功能描述，比如基于粉丝用户画像聚合出区域分布表 `tds_fans_personas_regional_distributions`\n- RDS 层数据表命名: `rds_数据表`。原则上 1. RDS 表数据量应该很小；2. RDS 数据只能源自 TDS 中间表。\n\n### 脚本编程规范\n\n*注: 脚本部署路径参考[线上环境规范](/developer/environment-guide.html#线上环境规范)*\n\n1. 脚本第一行[Shebang](https://zh.wikipedia.org/zh-hans/Shebang) `#!/bin/bash`\n2. 脚本注解字段\n  - 开发人员: Jaden\n  - 更新日期: 2019-10-29\n  - 客户名称: Allergan\n  - 业务模块: SalesA-ODS-To-TDS\n  - 对接团队: ETOCRM\n  - 定时任务: `30 00 * * *`\n  - 业务描述: \n  - 代码步骤:\n3. 脚本执行严格模式 `set -e`, 遇错即中止执行\n4. 规范式注释输出(日期+注释说明)函数 `logger`\n4. 脚本代码八股文\n  - `Shebang`\n  - 注解区域\n  - 开启严格模式 `set -e`\n  - 变量、函数声明\n  - 功能代码段\n    - 合理使用 `logger`\n    - 内部脚本输出**不要**重定向到日志，以便统一收集日志\n  - 日志、文档归档\n  - 仪式感退出码(`exit 0`)\n6. 邮件通知\n\n`sypetl` 功能逻辑伪代码\n\n```\n$ find 脚本绝对路径\n$ check 注解字段\n$ bash 脚本 > 日志目录/脚本名称-日期.log\n$ send 邮件\n```\n\n\n`sypetl` 调用示例 \\`sypetl intfocus [example](/developer/etl-script-example.sh.html)\\`\n\n```\n$ sypetl\n操作示例:\n\n$ sypetl 公司名称 模块名称\n$ sypetlcheck 公司名称 模块名称\n\n脚本路径: /data/work/scripts/公司名称/模块名称/tools.sh\n\n$ sypetl intfocus example\n19/10/31 16:01:14 - 脚本路径: /data/work/scripts/intfocus/example/tools.sh\n19/10/31 16:01:14 - 检测必填项:\n19/10/31 16:01:14 - 配置正常 - ^# 开发人员: Aaron\n19/10/31 16:01:14 - 配置正常 - ^# 更新日期: 2019-10-29\n19/10/31 16:01:14 - 配置正常 - ^# 业务模块: SypEtl测试\n19/10/31 16:01:14 - 配置正常 - ^# 定时任务: 30 19 * * *\n19/10/31 16:01:14 - 配置正常 - ^# 代码步骤:\n19/10/31 16:01:14 - 配置正常 - ^# 更新日期: 2019-10-29\n19/10/31 16:01:14 - 配置正常 - ^# 客户名称: 艾尔建\n19/10/31 16:01:14 - 配置正常 - ^# 对接团队: 齐数ETOCRM\n19/10/31 16:01:14 - 配置正常 - ^# 代码步骤:\n19/10/31 16:01:14 - 配置正常 - ^# 业务描述:\n19/10/31 16:01:14 - 配置正常 - `set -e`\n19/10/31 16:01:14 - 日志路径: /data/work/logs/intfocus-example-191031160114.log\n19/10/31 16:01:14 - 邮件配置: /data/work/logs/sendmail.191031160114.json\n19/10/31 16:01:17 - 胜因运维<jaden.li@jaden.tech> => Jaden.Li<jaden.li@jaden.tech>, SypEtl测试, status: 250\n```\n\n### 备份/其他规范\n\n- ODS/RDS 层所有的数据表设计、存储过程、触发器、视图、事件都需要维护在 [SypModelScripts](https://gitlab.idata.mobi/shengyiplus/syp-model-scripts)\n- ODS 层的 ODS 业务表数据需要每日备份，并做人工检查。\n- 存储过程按功能需求设计，禁止不同功能的需求使用同一个存储过程。\n- 定时事件(event) 按功能需求设计，禁止不同功能的需求使用同一个定时事件。\n\n### PERSON 概念\n\n「PERSONA」是 Allen Cooper 提出来的一种通过调研和问卷获得的典型用户模型，用于产品需求挖掘与交互设计的方法。\n\n- **P, 基本性(Primary)**: 指该用户角色是否基于对真实用户的情景访谈;\n- **E, 同理性(Empathy)**: 指用户角色中包含姓名、照片和产品相关的描述，该用户角色是否引同理心;\n- **R, 真实性(Realistic)**: 指对那些每天与顾客打交道的人来说，用户角色是否看起来像真实人物;\n- **S, 独特性(Singular)**: 每个用户是否是独特的，彼此很少有相似性;\n- **O, 目标性(Objectives)**: 该用户角色是否包含与产品相关的高层次目标，是否包含关键词来描述该目标;\n- **N, 数量性(Number)**: 用户角色的数量是否足够少，以便设计团队能记住每个用户角色的姓名，以及其中的一个主要用户角色;\n- **A, 应用性(Applicable)**: 设计团队是否能使用用户角色作为一种实用工具进行设计决策。\n\n## 报表开发流程\n\n### 思维导图\n\n![报表开发流程.png](/images/报表开发流程.png)\n\n*注: attachments/xmind/报表开发流程.xmind*\n\n### 开发流程\n\n1. 交流客户报表需求\n2. 定向低保真原型图\n3. 设计报表依赖的数据结构(RDS)\n4. 填充伪业务数据\n5. 报表开发，还原原型图\n6. 与客户确认报表需求\n7. 交流客户 ODS 层业务数据\n8. 设计 ODS 层数据转换至 RDS 的 TDS 中间表\n9. 实现存储过程/事件，同步 ODS -> TDS -> RDS\n10. 维护表结构、存储过程、事件等代码至运维脚本项目\n\n","date":"2023-06-10T10:49:05.485Z","updated":"2023-06-10T10:49:05.485Z","path":"developer/etl-devops-guide.html","comments":1,"layout":"page","_id":"clipw1dcy000aoix5cbe76s2v","content":"<h2 id=\"思维导图\"><a href=\"#思维导图\" class=\"headerlink\" title=\"思维导图\"></a>思维导图</h2><p><img src=\"/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%90%E7%BB%B4%E8%A7%84%E8%8C%83.png\" alt=\"数据库运维规范.png\"></p>\n<p><em>注: attachments&#x2F;xmind&#x2F;数据库运维规范.xmind</em></p>\n<h2 id=\"运维流程\"><a href=\"#运维流程\" class=\"headerlink\" title=\"运维流程\"></a>运维流程</h2><ul>\n<li>确认功能需求</li>\n<li><strong>本地</strong>开发测试</li>\n<li>维护运维 SQL 脚本至<a href=\"https://gitlab.idata.mobi/shengyiplus/syp-model-scripts\">SypModelScript</a></li>\n<li>提交代码合并审核(<em>参考<a href=\"/corporate-culture/teamwork.html#Gitlab-%E5%8D%8F%E4%BD%9C\">Gitlab 协作</a></em>)</li>\n<li>向管理员申请部署至<strong>开发&#x2F;正式</strong>环境</li>\n</ul>\n<p><em>注意:</em></p>\n<ul>\n<li>确认提交的SQL运维脚本语法正确</li>\n<li>确认SQL运维脚本可重复执行(不报错)</li>\n</ul>\n<h2 id=\"运维范围\"><a href=\"#运维范围\" class=\"headerlink\" title=\"运维范围\"></a>运维范围</h2><p>包含但不限于以下内容:(<em>参考<a href=\"/developer/style-guide/mysql.html#%E8%A1%A8%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83\">表设计规范</a></em>)</p>\n<ul>\n<li>数据库: DDL 语句、存储过程、函数、视图、事件</li>\n<li>数据表: DDL 语句、触发器、字段更新语句</li>\n<li>业务数据: 数据插入语句</li>\n</ul>\n<h2 id=\"ETL-流规范\"><a href=\"#ETL-流规范\" class=\"headerlink\" title=\"ETL 流规范\"></a>ETL 流规范</h2><h3 id=\"数据库分层\"><a href=\"#数据库分层\" class=\"headerlink\" title=\"数据库分层\"></a>数据库分层</h3><p><img src=\"/images/ETL%E6%B5%81%E8%A7%84%E8%8C%83.png\" alt=\"ETL流规范\"></p>\n<p><em>注: attachments&#x2F;xmind&#x2F;ETL流规范.xmind</em></p>\n<p>由于当前业务简单（与数据量多少无关），ETL 流程分三段:（其实需要维护是两段）</p>\n<ul>\n<li><p><strong>客户数据源</strong>。</p>\n<p>数据类型: <strong>客户的数据库，或提供的 Excel&#x2F;SQL 等数据。</strong>  </p>\n<p>客户数据源信息、定时提供的Excel&#x2F;SQL数据备份归档在印象笔记。</p>\n</li>\n<li><p><strong>ODS 层</strong>(操作数据存储 Operational Data Store)。</p>\n<p>数据类型: 1. 业务需要的客户业务表；2. 非RDS层的计算数数据TDS中间表(转换数据存储 Transform Data Store)。</p>\n</li>\n<li><p><strong>RDS 层</strong>(报表数据存储 Report&#x2F;Result Data Store)。</p>\n<p>报表加载直接使用的数据表；最佳实现方案是单层查询，若无法做到的话则考虑添加TDS数据中间表。</p>\n</li>\n</ul>\n<h3 id=\"表命名规范\"><a href=\"#表命名规范\" class=\"headerlink\" title=\"表命名规范\"></a>表命名规范</h3><ul>\n<li><a href=\"/developer/style-guide/mysql.html\">MySQL 编程规范</a></li>\n<li>库名&#x2F;表名&#x2F;字段名统一小写。</li>\n<li>库名&#x2F;表名&#x2F;字段名禁止使用 mysql 保留字。</li>\n<li>ODS 层业务表命名: <code>ods_业务表名</code>。若客户数据表名有大写(Oracle&#x2F;SQLServer), 则按驼峰转下划线规则，比如 <code>salesA</code> 对应 <code>ods_sales_a</code>。</li>\n<li>ODS 层中间表命名: <code>tds_功能描述</code>。比如聚合汇总后的粉丝用户画像中间表 <code>tds_fans_personas</code>，若基于中间表多次计算的中间表在保持原表名后继续追加功能描述，比如基于粉丝用户画像聚合出区域分布表 <code>tds_fans_personas_regional_distributions</code></li>\n<li>RDS 层数据表命名: <code>rds_数据表</code>。原则上 1. RDS 表数据量应该很小；2. RDS 数据只能源自 TDS 中间表。</li>\n</ul>\n<h3 id=\"脚本编程规范\"><a href=\"#脚本编程规范\" class=\"headerlink\" title=\"脚本编程规范\"></a>脚本编程规范</h3><p><em>注: 脚本部署路径参考<a href=\"/developer/environment-guide.html#%E7%BA%BF%E4%B8%8A%E7%8E%AF%E5%A2%83%E8%A7%84%E8%8C%83\">线上环境规范</a></em></p>\n<ol>\n<li>脚本第一行<a href=\"https://zh.wikipedia.org/zh-hans/Shebang\">Shebang</a> <code>#!/bin/bash</code></li>\n<li>脚本注解字段</li>\n</ol>\n<ul>\n<li>开发人员: Jaden</li>\n<li>更新日期: 2019-10-29</li>\n<li>客户名称: Allergan</li>\n<li>业务模块: SalesA-ODS-To-TDS</li>\n<li>对接团队: ETOCRM</li>\n<li>定时任务: <code>30 00 * * *</code></li>\n<li>业务描述: </li>\n<li>代码步骤:</li>\n</ul>\n<ol start=\"3\">\n<li>脚本执行严格模式 <code>set -e</code>, 遇错即中止执行</li>\n<li>规范式注释输出(日期+注释说明)函数 <code>logger</code></li>\n<li>脚本代码八股文</li>\n</ol>\n<ul>\n<li><code>Shebang</code></li>\n<li>注解区域</li>\n<li>开启严格模式 <code>set -e</code></li>\n<li>变量、函数声明</li>\n<li>功能代码段<ul>\n<li>合理使用 <code>logger</code></li>\n<li>内部脚本输出<strong>不要</strong>重定向到日志，以便统一收集日志</li>\n</ul>\n</li>\n<li>日志、文档归档</li>\n<li>仪式感退出码(<code>exit 0</code>)</li>\n</ul>\n<ol start=\"6\">\n<li>邮件通知</li>\n</ol>\n<p><code>sypetl</code> 功能逻辑伪代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">$ find 脚本绝对路径<br>$ check 注解字段<br>$ bash 脚本 &gt; 日志目录/脚本名称-日期.log<br>$ send 邮件<br></code></pre></td></tr></table></figure>\n\n\n<p><code>sypetl</code> 调用示例 `sypetl intfocus <a href=\"/developer/etl-script-example.sh.html\">example</a>`</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">$ sypetl<br>操作示例:<br><br>$ sypetl 公司名称 模块名称<br>$ sypetlcheck 公司名称 模块名称<br><br>脚本路径: /data/work/scripts/公司名称/模块名称/tools.sh<br><br>$ sypetl intfocus example<br>19/10/31 16:01:14 - 脚本路径: /data/work/scripts/intfocus/example/tools.sh<br>19/10/31 16:01:14 - 检测必填项:<br>19/10/31 16:01:14 - 配置正常 - ^# 开发人员: Aaron<br>19/10/31 16:01:14 - 配置正常 - ^# 更新日期: 2019-10-29<br>19/10/31 16:01:14 - 配置正常 - ^# 业务模块: SypEtl测试<br>19/10/31 16:01:14 - 配置正常 - ^# 定时任务: 30 19 * * *<br>19/10/31 16:01:14 - 配置正常 - ^# 代码步骤:<br>19/10/31 16:01:14 - 配置正常 - ^# 更新日期: 2019-10-29<br>19/10/31 16:01:14 - 配置正常 - ^# 客户名称: 艾尔建<br>19/10/31 16:01:14 - 配置正常 - ^# 对接团队: 齐数ETOCRM<br>19/10/31 16:01:14 - 配置正常 - ^# 代码步骤:<br>19/10/31 16:01:14 - 配置正常 - ^# 业务描述:<br>19/10/31 16:01:14 - 配置正常 - `set -e`<br>19/10/31 16:01:14 - 日志路径: /data/work/logs/intfocus-example-191031160114.log<br>19/10/31 16:01:14 - 邮件配置: /data/work/logs/sendmail.191031160114.json<br>19/10/31 16:01:17 - 胜因运维&lt;jaden.li@jaden.tech&gt; =&gt; Jaden.Li&lt;jaden.li@jaden.tech&gt;, SypEtl测试, status: 250<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"备份-x2F-其他规范\"><a href=\"#备份-x2F-其他规范\" class=\"headerlink\" title=\"备份&#x2F;其他规范\"></a>备份&#x2F;其他规范</h3><ul>\n<li>ODS&#x2F;RDS 层所有的数据表设计、存储过程、触发器、视图、事件都需要维护在 <a href=\"https://gitlab.idata.mobi/shengyiplus/syp-model-scripts\">SypModelScripts</a></li>\n<li>ODS 层的 ODS 业务表数据需要每日备份，并做人工检查。</li>\n<li>存储过程按功能需求设计，禁止不同功能的需求使用同一个存储过程。</li>\n<li>定时事件(event) 按功能需求设计，禁止不同功能的需求使用同一个定时事件。</li>\n</ul>\n<h3 id=\"PERSON-概念\"><a href=\"#PERSON-概念\" class=\"headerlink\" title=\"PERSON 概念\"></a>PERSON 概念</h3><p>「PERSONA」是 Allen Cooper 提出来的一种通过调研和问卷获得的典型用户模型，用于产品需求挖掘与交互设计的方法。</p>\n<ul>\n<li><strong>P, 基本性(Primary)</strong>: 指该用户角色是否基于对真实用户的情景访谈;</li>\n<li><strong>E, 同理性(Empathy)</strong>: 指用户角色中包含姓名、照片和产品相关的描述，该用户角色是否引同理心;</li>\n<li><strong>R, 真实性(Realistic)</strong>: 指对那些每天与顾客打交道的人来说，用户角色是否看起来像真实人物;</li>\n<li><strong>S, 独特性(Singular)</strong>: 每个用户是否是独特的，彼此很少有相似性;</li>\n<li><strong>O, 目标性(Objectives)</strong>: 该用户角色是否包含与产品相关的高层次目标，是否包含关键词来描述该目标;</li>\n<li><strong>N, 数量性(Number)</strong>: 用户角色的数量是否足够少，以便设计团队能记住每个用户角色的姓名，以及其中的一个主要用户角色;</li>\n<li><strong>A, 应用性(Applicable)</strong>: 设计团队是否能使用用户角色作为一种实用工具进行设计决策。</li>\n</ul>\n<h2 id=\"报表开发流程\"><a href=\"#报表开发流程\" class=\"headerlink\" title=\"报表开发流程\"></a>报表开发流程</h2><h3 id=\"思维导图-1\"><a href=\"#思维导图-1\" class=\"headerlink\" title=\"思维导图\"></a>思维导图</h3><p><img src=\"/images/%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B.png\" alt=\"报表开发流程.png\"></p>\n<p><em>注: attachments&#x2F;xmind&#x2F;报表开发流程.xmind</em></p>\n<h3 id=\"开发流程\"><a href=\"#开发流程\" class=\"headerlink\" title=\"开发流程\"></a>开发流程</h3><ol>\n<li>交流客户报表需求</li>\n<li>定向低保真原型图</li>\n<li>设计报表依赖的数据结构(RDS)</li>\n<li>填充伪业务数据</li>\n<li>报表开发，还原原型图</li>\n<li>与客户确认报表需求</li>\n<li>交流客户 ODS 层业务数据</li>\n<li>设计 ODS 层数据转换至 RDS 的 TDS 中间表</li>\n<li>实现存储过程&#x2F;事件，同步 ODS -&gt; TDS -&gt; RDS</li>\n<li>维护表结构、存储过程、事件等代码至运维脚本项目</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"思维导图\"><a href=\"#思维导图\" class=\"headerlink\" title=\"思维导图\"></a>思维导图</h2><p><img src=\"/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%90%E7%BB%B4%E8%A7%84%E8%8C%83.png\" alt=\"数据库运维规范.png\"></p>\n<p><em>注: attachments&#x2F;xmind&#x2F;数据库运维规范.xmind</em></p>\n<h2 id=\"运维流程\"><a href=\"#运维流程\" class=\"headerlink\" title=\"运维流程\"></a>运维流程</h2><ul>\n<li>确认功能需求</li>\n<li><strong>本地</strong>开发测试</li>\n<li>维护运维 SQL 脚本至<a href=\"https://gitlab.idata.mobi/shengyiplus/syp-model-scripts\">SypModelScript</a></li>\n<li>提交代码合并审核(<em>参考<a href=\"/corporate-culture/teamwork.html#Gitlab-%E5%8D%8F%E4%BD%9C\">Gitlab 协作</a></em>)</li>\n<li>向管理员申请部署至<strong>开发&#x2F;正式</strong>环境</li>\n</ul>\n<p><em>注意:</em></p>\n<ul>\n<li>确认提交的SQL运维脚本语法正确</li>\n<li>确认SQL运维脚本可重复执行(不报错)</li>\n</ul>\n<h2 id=\"运维范围\"><a href=\"#运维范围\" class=\"headerlink\" title=\"运维范围\"></a>运维范围</h2><p>包含但不限于以下内容:(<em>参考<a href=\"/developer/style-guide/mysql.html#%E8%A1%A8%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83\">表设计规范</a></em>)</p>\n<ul>\n<li>数据库: DDL 语句、存储过程、函数、视图、事件</li>\n<li>数据表: DDL 语句、触发器、字段更新语句</li>\n<li>业务数据: 数据插入语句</li>\n</ul>\n<h2 id=\"ETL-流规范\"><a href=\"#ETL-流规范\" class=\"headerlink\" title=\"ETL 流规范\"></a>ETL 流规范</h2><h3 id=\"数据库分层\"><a href=\"#数据库分层\" class=\"headerlink\" title=\"数据库分层\"></a>数据库分层</h3><p><img src=\"/images/ETL%E6%B5%81%E8%A7%84%E8%8C%83.png\" alt=\"ETL流规范\"></p>\n<p><em>注: attachments&#x2F;xmind&#x2F;ETL流规范.xmind</em></p>\n<p>由于当前业务简单（与数据量多少无关），ETL 流程分三段:（其实需要维护是两段）</p>\n<ul>\n<li><p><strong>客户数据源</strong>。</p>\n<p>数据类型: <strong>客户的数据库，或提供的 Excel&#x2F;SQL 等数据。</strong>  </p>\n<p>客户数据源信息、定时提供的Excel&#x2F;SQL数据备份归档在印象笔记。</p>\n</li>\n<li><p><strong>ODS 层</strong>(操作数据存储 Operational Data Store)。</p>\n<p>数据类型: 1. 业务需要的客户业务表；2. 非RDS层的计算数数据TDS中间表(转换数据存储 Transform Data Store)。</p>\n</li>\n<li><p><strong>RDS 层</strong>(报表数据存储 Report&#x2F;Result Data Store)。</p>\n<p>报表加载直接使用的数据表；最佳实现方案是单层查询，若无法做到的话则考虑添加TDS数据中间表。</p>\n</li>\n</ul>\n<h3 id=\"表命名规范\"><a href=\"#表命名规范\" class=\"headerlink\" title=\"表命名规范\"></a>表命名规范</h3><ul>\n<li><a href=\"/developer/style-guide/mysql.html\">MySQL 编程规范</a></li>\n<li>库名&#x2F;表名&#x2F;字段名统一小写。</li>\n<li>库名&#x2F;表名&#x2F;字段名禁止使用 mysql 保留字。</li>\n<li>ODS 层业务表命名: <code>ods_业务表名</code>。若客户数据表名有大写(Oracle&#x2F;SQLServer), 则按驼峰转下划线规则，比如 <code>salesA</code> 对应 <code>ods_sales_a</code>。</li>\n<li>ODS 层中间表命名: <code>tds_功能描述</code>。比如聚合汇总后的粉丝用户画像中间表 <code>tds_fans_personas</code>，若基于中间表多次计算的中间表在保持原表名后继续追加功能描述，比如基于粉丝用户画像聚合出区域分布表 <code>tds_fans_personas_regional_distributions</code></li>\n<li>RDS 层数据表命名: <code>rds_数据表</code>。原则上 1. RDS 表数据量应该很小；2. RDS 数据只能源自 TDS 中间表。</li>\n</ul>\n<h3 id=\"脚本编程规范\"><a href=\"#脚本编程规范\" class=\"headerlink\" title=\"脚本编程规范\"></a>脚本编程规范</h3><p><em>注: 脚本部署路径参考<a href=\"/developer/environment-guide.html#%E7%BA%BF%E4%B8%8A%E7%8E%AF%E5%A2%83%E8%A7%84%E8%8C%83\">线上环境规范</a></em></p>\n<ol>\n<li>脚本第一行<a href=\"https://zh.wikipedia.org/zh-hans/Shebang\">Shebang</a> <code>#!/bin/bash</code></li>\n<li>脚本注解字段</li>\n</ol>\n<ul>\n<li>开发人员: Jaden</li>\n<li>更新日期: 2019-10-29</li>\n<li>客户名称: Allergan</li>\n<li>业务模块: SalesA-ODS-To-TDS</li>\n<li>对接团队: ETOCRM</li>\n<li>定时任务: <code>30 00 * * *</code></li>\n<li>业务描述: </li>\n<li>代码步骤:</li>\n</ul>\n<ol start=\"3\">\n<li>脚本执行严格模式 <code>set -e</code>, 遇错即中止执行</li>\n<li>规范式注释输出(日期+注释说明)函数 <code>logger</code></li>\n<li>脚本代码八股文</li>\n</ol>\n<ul>\n<li><code>Shebang</code></li>\n<li>注解区域</li>\n<li>开启严格模式 <code>set -e</code></li>\n<li>变量、函数声明</li>\n<li>功能代码段<ul>\n<li>合理使用 <code>logger</code></li>\n<li>内部脚本输出<strong>不要</strong>重定向到日志，以便统一收集日志</li>\n</ul>\n</li>\n<li>日志、文档归档</li>\n<li>仪式感退出码(<code>exit 0</code>)</li>\n</ul>\n<ol start=\"6\">\n<li>邮件通知</li>\n</ol>\n<p><code>sypetl</code> 功能逻辑伪代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">$ find 脚本绝对路径<br>$ check 注解字段<br>$ bash 脚本 &gt; 日志目录/脚本名称-日期.log<br>$ send 邮件<br></code></pre></td></tr></table></figure>\n\n\n<p><code>sypetl</code> 调用示例 `sypetl intfocus <a href=\"/developer/etl-script-example.sh.html\">example</a>`</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">$ sypetl<br>操作示例:<br><br>$ sypetl 公司名称 模块名称<br>$ sypetlcheck 公司名称 模块名称<br><br>脚本路径: /data/work/scripts/公司名称/模块名称/tools.sh<br><br>$ sypetl intfocus example<br>19/10/31 16:01:14 - 脚本路径: /data/work/scripts/intfocus/example/tools.sh<br>19/10/31 16:01:14 - 检测必填项:<br>19/10/31 16:01:14 - 配置正常 - ^# 开发人员: Aaron<br>19/10/31 16:01:14 - 配置正常 - ^# 更新日期: 2019-10-29<br>19/10/31 16:01:14 - 配置正常 - ^# 业务模块: SypEtl测试<br>19/10/31 16:01:14 - 配置正常 - ^# 定时任务: 30 19 * * *<br>19/10/31 16:01:14 - 配置正常 - ^# 代码步骤:<br>19/10/31 16:01:14 - 配置正常 - ^# 更新日期: 2019-10-29<br>19/10/31 16:01:14 - 配置正常 - ^# 客户名称: 艾尔建<br>19/10/31 16:01:14 - 配置正常 - ^# 对接团队: 齐数ETOCRM<br>19/10/31 16:01:14 - 配置正常 - ^# 代码步骤:<br>19/10/31 16:01:14 - 配置正常 - ^# 业务描述:<br>19/10/31 16:01:14 - 配置正常 - `set -e`<br>19/10/31 16:01:14 - 日志路径: /data/work/logs/intfocus-example-191031160114.log<br>19/10/31 16:01:14 - 邮件配置: /data/work/logs/sendmail.191031160114.json<br>19/10/31 16:01:17 - 胜因运维&lt;jaden.li@jaden.tech&gt; =&gt; Jaden.Li&lt;jaden.li@jaden.tech&gt;, SypEtl测试, status: 250<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"备份-x2F-其他规范\"><a href=\"#备份-x2F-其他规范\" class=\"headerlink\" title=\"备份&#x2F;其他规范\"></a>备份&#x2F;其他规范</h3><ul>\n<li>ODS&#x2F;RDS 层所有的数据表设计、存储过程、触发器、视图、事件都需要维护在 <a href=\"https://gitlab.idata.mobi/shengyiplus/syp-model-scripts\">SypModelScripts</a></li>\n<li>ODS 层的 ODS 业务表数据需要每日备份，并做人工检查。</li>\n<li>存储过程按功能需求设计，禁止不同功能的需求使用同一个存储过程。</li>\n<li>定时事件(event) 按功能需求设计，禁止不同功能的需求使用同一个定时事件。</li>\n</ul>\n<h3 id=\"PERSON-概念\"><a href=\"#PERSON-概念\" class=\"headerlink\" title=\"PERSON 概念\"></a>PERSON 概念</h3><p>「PERSONA」是 Allen Cooper 提出来的一种通过调研和问卷获得的典型用户模型，用于产品需求挖掘与交互设计的方法。</p>\n<ul>\n<li><strong>P, 基本性(Primary)</strong>: 指该用户角色是否基于对真实用户的情景访谈;</li>\n<li><strong>E, 同理性(Empathy)</strong>: 指用户角色中包含姓名、照片和产品相关的描述，该用户角色是否引同理心;</li>\n<li><strong>R, 真实性(Realistic)</strong>: 指对那些每天与顾客打交道的人来说，用户角色是否看起来像真实人物;</li>\n<li><strong>S, 独特性(Singular)</strong>: 每个用户是否是独特的，彼此很少有相似性;</li>\n<li><strong>O, 目标性(Objectives)</strong>: 该用户角色是否包含与产品相关的高层次目标，是否包含关键词来描述该目标;</li>\n<li><strong>N, 数量性(Number)</strong>: 用户角色的数量是否足够少，以便设计团队能记住每个用户角色的姓名，以及其中的一个主要用户角色;</li>\n<li><strong>A, 应用性(Applicable)</strong>: 设计团队是否能使用用户角色作为一种实用工具进行设计决策。</li>\n</ul>\n<h2 id=\"报表开发流程\"><a href=\"#报表开发流程\" class=\"headerlink\" title=\"报表开发流程\"></a>报表开发流程</h2><h3 id=\"思维导图-1\"><a href=\"#思维导图-1\" class=\"headerlink\" title=\"思维导图\"></a>思维导图</h3><p><img src=\"/images/%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B.png\" alt=\"报表开发流程.png\"></p>\n<p><em>注: attachments&#x2F;xmind&#x2F;报表开发流程.xmind</em></p>\n<h3 id=\"开发流程\"><a href=\"#开发流程\" class=\"headerlink\" title=\"开发流程\"></a>开发流程</h3><ol>\n<li>交流客户报表需求</li>\n<li>定向低保真原型图</li>\n<li>设计报表依赖的数据结构(RDS)</li>\n<li>填充伪业务数据</li>\n<li>报表开发，还原原型图</li>\n<li>与客户确认报表需求</li>\n<li>交流客户 ODS 层业务数据</li>\n<li>设计 ODS 层数据转换至 RDS 的 TDS 中间表</li>\n<li>实现存储过程&#x2F;事件，同步 ODS -&gt; TDS -&gt; RDS</li>\n<li>维护表结构、存储过程、事件等代码至运维脚本项目</li>\n</ol>\n"},{"_content":"```\n#!/bin/bash\n#\n# 开发人员: Aaron\n# 更新日期: 2019-10-29\n# 客户名称: 艾尔建\n# 业务模块: 用户行为数据同步\n# 对接团队: 齐数ETOCRM\n# 定时任务: 30 19 * * *\n# 业务描述: \n# 代码步骤:\n#   1. 通过邮件接收压缩文档的解压密钥\n#   2. 解压压缩文档\n#   3. 移动数据文档至ETL流读取目录\n#   4. 执行 ETL 流\n#   5. 备份归档数据压缩文档、密钥文档\n#   6. 清理解压后的数据\n#\nset -e # 遇错即中止\nfunction logger() { echo \"$(date +'%y/%m/%d %H:%M:%S') - $1\"; }\n\nlogger \"1. 通过邮件接收压缩文档的解压密钥\"\n/bin/ruby /data/work/kettle/scripts/etocrm_encrypt_automator.rb\n\nlogger \"2. 解压压缩文档\"\ndatestr=$(date -d \"0 day ago\" \"+%Y%m%d\")\nentrypt=$(cat ${allergan_members_path}/etocrmdata/encrypt.pw)\necho \"unzip x -P${entrypt} -o ${allergan_members_path}/etocrmdata/${datestr}.zip\"\nunzip -P${entrypt} -o ${allergan_members_path}/etocrmdata/${datestr}.zip\n\nlogger \"3. 移动数据文档至ETL流读取目录\"\nmv ${allergan_members_path}/etocrmdata/${datestr}.csv ${allergan_members_path}/etocrmdata/user_behaviors.csv\n\nlogger \"4. 执行 ETL 流\"\n/bin/kitchen -file=/data/work/kettle/jobs/user_behavior.kjb\n\nlogger \"4. 备份归档数据压缩文档、密钥文档\"\ncp -p ${allergan_members_path}/etocrmdata/encrypt.pw ${allergan_members_path}/executed_file/${datestr}.pw\nmv ${allergan_members_path}/etocrmdata/${datestr}.zip ${allergan_members_path}/executed_file/${datestr}.zip\n\nlogger \"6. 清理解压后的数据\"\nrm -rf ${allergan_members_path}/etocrmdata/user_behaviors.csv\n\nexit 0 # 仪式感退出\n```\n","source":"developer/etl-script-example.sh.md","raw":"```\n#!/bin/bash\n#\n# 开发人员: Aaron\n# 更新日期: 2019-10-29\n# 客户名称: 艾尔建\n# 业务模块: 用户行为数据同步\n# 对接团队: 齐数ETOCRM\n# 定时任务: 30 19 * * *\n# 业务描述: \n# 代码步骤:\n#   1. 通过邮件接收压缩文档的解压密钥\n#   2. 解压压缩文档\n#   3. 移动数据文档至ETL流读取目录\n#   4. 执行 ETL 流\n#   5. 备份归档数据压缩文档、密钥文档\n#   6. 清理解压后的数据\n#\nset -e # 遇错即中止\nfunction logger() { echo \"$(date +'%y/%m/%d %H:%M:%S') - $1\"; }\n\nlogger \"1. 通过邮件接收压缩文档的解压密钥\"\n/bin/ruby /data/work/kettle/scripts/etocrm_encrypt_automator.rb\n\nlogger \"2. 解压压缩文档\"\ndatestr=$(date -d \"0 day ago\" \"+%Y%m%d\")\nentrypt=$(cat ${allergan_members_path}/etocrmdata/encrypt.pw)\necho \"unzip x -P${entrypt} -o ${allergan_members_path}/etocrmdata/${datestr}.zip\"\nunzip -P${entrypt} -o ${allergan_members_path}/etocrmdata/${datestr}.zip\n\nlogger \"3. 移动数据文档至ETL流读取目录\"\nmv ${allergan_members_path}/etocrmdata/${datestr}.csv ${allergan_members_path}/etocrmdata/user_behaviors.csv\n\nlogger \"4. 执行 ETL 流\"\n/bin/kitchen -file=/data/work/kettle/jobs/user_behavior.kjb\n\nlogger \"4. 备份归档数据压缩文档、密钥文档\"\ncp -p ${allergan_members_path}/etocrmdata/encrypt.pw ${allergan_members_path}/executed_file/${datestr}.pw\nmv ${allergan_members_path}/etocrmdata/${datestr}.zip ${allergan_members_path}/executed_file/${datestr}.zip\n\nlogger \"6. 清理解压后的数据\"\nrm -rf ${allergan_members_path}/etocrmdata/user_behaviors.csv\n\nexit 0 # 仪式感退出\n```\n","date":"2023-06-10T10:49:05.486Z","updated":"2023-06-10T10:49:05.486Z","path":"developer/etl-script-example.sh.html","title":"","comments":1,"layout":"page","_id":"clipw1dcy000boix5av2k50xh","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">#!/bin/bash<br>#<br># 开发人员: Aaron<br># 更新日期: 2019-10-29<br># 客户名称: 艾尔建<br># 业务模块: 用户行为数据同步<br># 对接团队: 齐数ETOCRM<br># 定时任务: 30 19 * * *<br># 业务描述: <br># 代码步骤:<br>#   1. 通过邮件接收压缩文档的解压密钥<br>#   2. 解压压缩文档<br>#   3. 移动数据文档至ETL流读取目录<br>#   4. 执行 ETL 流<br>#   5. 备份归档数据压缩文档、密钥文档<br>#   6. 清理解压后的数据<br>#<br>set -e # 遇错即中止<br>function logger() &#123; echo &quot;$(date +&#x27;%y/%m/%d %H:%M:%S&#x27;) - $1&quot;; &#125;<br><br>logger &quot;1. 通过邮件接收压缩文档的解压密钥&quot;<br>/bin/ruby /data/work/kettle/scripts/etocrm_encrypt_automator.rb<br><br>logger &quot;2. 解压压缩文档&quot;<br>datestr=$(date -d &quot;0 day ago&quot; &quot;+%Y%m%d&quot;)<br>entrypt=$(cat $&#123;allergan_members_path&#125;/etocrmdata/encrypt.pw)<br>echo &quot;unzip x -P$&#123;entrypt&#125; -o $&#123;allergan_members_path&#125;/etocrmdata/$&#123;datestr&#125;.zip&quot;<br>unzip -P$&#123;entrypt&#125; -o $&#123;allergan_members_path&#125;/etocrmdata/$&#123;datestr&#125;.zip<br><br>logger &quot;3. 移动数据文档至ETL流读取目录&quot;<br>mv $&#123;allergan_members_path&#125;/etocrmdata/$&#123;datestr&#125;.csv $&#123;allergan_members_path&#125;/etocrmdata/user_behaviors.csv<br><br>logger &quot;4. 执行 ETL 流&quot;<br>/bin/kitchen -file=/data/work/kettle/jobs/user_behavior.kjb<br><br>logger &quot;4. 备份归档数据压缩文档、密钥文档&quot;<br>cp -p $&#123;allergan_members_path&#125;/etocrmdata/encrypt.pw $&#123;allergan_members_path&#125;/executed_file/$&#123;datestr&#125;.pw<br>mv $&#123;allergan_members_path&#125;/etocrmdata/$&#123;datestr&#125;.zip $&#123;allergan_members_path&#125;/executed_file/$&#123;datestr&#125;.zip<br><br>logger &quot;6. 清理解压后的数据&quot;<br>rm -rf $&#123;allergan_members_path&#125;/etocrmdata/user_behaviors.csv<br><br>exit 0 # 仪式感退出<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">#!/bin/bash<br>#<br># 开发人员: Aaron<br># 更新日期: 2019-10-29<br># 客户名称: 艾尔建<br># 业务模块: 用户行为数据同步<br># 对接团队: 齐数ETOCRM<br># 定时任务: 30 19 * * *<br># 业务描述: <br># 代码步骤:<br>#   1. 通过邮件接收压缩文档的解压密钥<br>#   2. 解压压缩文档<br>#   3. 移动数据文档至ETL流读取目录<br>#   4. 执行 ETL 流<br>#   5. 备份归档数据压缩文档、密钥文档<br>#   6. 清理解压后的数据<br>#<br>set -e # 遇错即中止<br>function logger() &#123; echo &quot;$(date +&#x27;%y/%m/%d %H:%M:%S&#x27;) - $1&quot;; &#125;<br><br>logger &quot;1. 通过邮件接收压缩文档的解压密钥&quot;<br>/bin/ruby /data/work/kettle/scripts/etocrm_encrypt_automator.rb<br><br>logger &quot;2. 解压压缩文档&quot;<br>datestr=$(date -d &quot;0 day ago&quot; &quot;+%Y%m%d&quot;)<br>entrypt=$(cat $&#123;allergan_members_path&#125;/etocrmdata/encrypt.pw)<br>echo &quot;unzip x -P$&#123;entrypt&#125; -o $&#123;allergan_members_path&#125;/etocrmdata/$&#123;datestr&#125;.zip&quot;<br>unzip -P$&#123;entrypt&#125; -o $&#123;allergan_members_path&#125;/etocrmdata/$&#123;datestr&#125;.zip<br><br>logger &quot;3. 移动数据文档至ETL流读取目录&quot;<br>mv $&#123;allergan_members_path&#125;/etocrmdata/$&#123;datestr&#125;.csv $&#123;allergan_members_path&#125;/etocrmdata/user_behaviors.csv<br><br>logger &quot;4. 执行 ETL 流&quot;<br>/bin/kitchen -file=/data/work/kettle/jobs/user_behavior.kjb<br><br>logger &quot;4. 备份归档数据压缩文档、密钥文档&quot;<br>cp -p $&#123;allergan_members_path&#125;/etocrmdata/encrypt.pw $&#123;allergan_members_path&#125;/executed_file/$&#123;datestr&#125;.pw<br>mv $&#123;allergan_members_path&#125;/etocrmdata/$&#123;datestr&#125;.zip $&#123;allergan_members_path&#125;/executed_file/$&#123;datestr&#125;.zip<br><br>logger &quot;6. 清理解压后的数据&quot;<br>rm -rf $&#123;allergan_members_path&#125;/etocrmdata/user_behaviors.csv<br><br>exit 0 # 仪式感退出<br></code></pre></td></tr></table></figure>\n"},{"title":"规范指南","type":"规范指南","_content":"\n## 关于空格 & 空行\n\n1. 禁止使用`制表符`缩进，配置编辑器自动替换`制表符`为`空格`(2或4个)。\n2. 赋值符 `=` 两侧各1个 `空格`, 参数、哈希等`逗号`、`冒号` 后跟1个空格，例: `fun(one, two); let hsh = {one: 1, two: 2}`\n3. 多个变量声明时可在一行；多变量赋值时换行，并左对齐。\n4. 单行或多行注释符后跟1个 `空格`。\n5. 所有代码或文本中禁止两个及两个以上的空行。\n6. 业务功能代码段之间使用1个空行\n7. 样式 `css` 类之间默认不需要空行；业务代码间空1行。\n\n## 关于团队协作\n\n1. 申请 [职场共识](/corporate-culture/workplace-ceremony.html) 培训\n2. 申请 [团队协作](/corporate-culture/teamwork.html) 培训\n    - 学习 [交流规范](/corporate-culture/teamwork.html#交流规范)\n    - 学习 [交付规范](/corporate-culture/teamwork.html#交付规范)\n    - 安装 [开发工具](/corporate-culture/teamwork.html#开发工具)\n3. 申请工作日志权限\n    - 学习 [Markdown 语法](/corporate-culture/teamwork.html#Markdown)\n    - 学习 [工作日志规范](/corporate-culture/teamwork.html#工作日志)\n2. 申请 [Gtilab](https://gitlab.idata.mobi/) 账号\n    - 学习 [Gitlab 提交规范](/developer/style-guide/gitlab.html)\n        1. (**禁止提交视频、音频甚至图片等大体积文件，请维护至 CDN**)\n        2. 所有项目都需配置 `Readme.md`\n        3. 项目代码交流前先阅读 `Readme.md`\n    - 学习 [Java 编程规范](/developer/style-guide/java.html)\n    - 学习 [MySQL 协作规范](/developer/style-guide/mysql.html)\n    - 学习 [Javascript 协作规范](/developer/style-guide/javascript.html)\n    - 学习 [CDN 运维规范](/developer/style-guide/cdn.html)\n3. 申请 [Jenkins](https://jenkins.idata.mobi/) 账号\n    - 学习 [Jenkins 部署](/developer/jenkins-deploy.html)\n4. 申请印象笔记项目目录权限\n5. 熟悉[团队源码体系](/developer/project-connections.html)\n\n## 关于开发 & 运维\n\n- [设备环境规范](/developer/environment-guide.html)\n- [ETL 运维](/developer/etl-devops-guide.html)\n- [API 规范](/developer/api-design-guide.html)\n- [RDC 接口规范](/developer/rdc-guide.html)\n- [业务菜单规范](/developer/menu-guide.html)\n\n## 关于调试\n\n1. 提交的代码禁止出现调试代码，例: `console.log`\n2. 前端同事学习使用 `debugger` 的调试技巧\n3. 前端同事学习 Chrome 控制台的基本使用\n\n## 关于测试\n\n1. Java/数据工程师交付接口的 PostMan 测试实例\n2. 前端遇到接口问题时，确认 API 路由、请求头、参数信息\n\n\n\n","source":"developer/guide.md","raw":"---\ntitle: 规范指南\ntype: 规范指南\n---\n\n## 关于空格 & 空行\n\n1. 禁止使用`制表符`缩进，配置编辑器自动替换`制表符`为`空格`(2或4个)。\n2. 赋值符 `=` 两侧各1个 `空格`, 参数、哈希等`逗号`、`冒号` 后跟1个空格，例: `fun(one, two); let hsh = {one: 1, two: 2}`\n3. 多个变量声明时可在一行；多变量赋值时换行，并左对齐。\n4. 单行或多行注释符后跟1个 `空格`。\n5. 所有代码或文本中禁止两个及两个以上的空行。\n6. 业务功能代码段之间使用1个空行\n7. 样式 `css` 类之间默认不需要空行；业务代码间空1行。\n\n## 关于团队协作\n\n1. 申请 [职场共识](/corporate-culture/workplace-ceremony.html) 培训\n2. 申请 [团队协作](/corporate-culture/teamwork.html) 培训\n    - 学习 [交流规范](/corporate-culture/teamwork.html#交流规范)\n    - 学习 [交付规范](/corporate-culture/teamwork.html#交付规范)\n    - 安装 [开发工具](/corporate-culture/teamwork.html#开发工具)\n3. 申请工作日志权限\n    - 学习 [Markdown 语法](/corporate-culture/teamwork.html#Markdown)\n    - 学习 [工作日志规范](/corporate-culture/teamwork.html#工作日志)\n2. 申请 [Gtilab](https://gitlab.idata.mobi/) 账号\n    - 学习 [Gitlab 提交规范](/developer/style-guide/gitlab.html)\n        1. (**禁止提交视频、音频甚至图片等大体积文件，请维护至 CDN**)\n        2. 所有项目都需配置 `Readme.md`\n        3. 项目代码交流前先阅读 `Readme.md`\n    - 学习 [Java 编程规范](/developer/style-guide/java.html)\n    - 学习 [MySQL 协作规范](/developer/style-guide/mysql.html)\n    - 学习 [Javascript 协作规范](/developer/style-guide/javascript.html)\n    - 学习 [CDN 运维规范](/developer/style-guide/cdn.html)\n3. 申请 [Jenkins](https://jenkins.idata.mobi/) 账号\n    - 学习 [Jenkins 部署](/developer/jenkins-deploy.html)\n4. 申请印象笔记项目目录权限\n5. 熟悉[团队源码体系](/developer/project-connections.html)\n\n## 关于开发 & 运维\n\n- [设备环境规范](/developer/environment-guide.html)\n- [ETL 运维](/developer/etl-devops-guide.html)\n- [API 规范](/developer/api-design-guide.html)\n- [RDC 接口规范](/developer/rdc-guide.html)\n- [业务菜单规范](/developer/menu-guide.html)\n\n## 关于调试\n\n1. 提交的代码禁止出现调试代码，例: `console.log`\n2. 前端同事学习使用 `debugger` 的调试技巧\n3. 前端同事学习 Chrome 控制台的基本使用\n\n## 关于测试\n\n1. Java/数据工程师交付接口的 PostMan 测试实例\n2. 前端遇到接口问题时，确认 API 路由、请求头、参数信息\n\n\n\n","date":"2023-06-10T10:49:05.486Z","updated":"2023-06-10T10:49:05.486Z","path":"developer/guide.html","comments":1,"layout":"page","_id":"clipw1dcy000coix58y16h9c7","content":"<h2 id=\"关于空格-amp-空行\"><a href=\"#关于空格-amp-空行\" class=\"headerlink\" title=\"关于空格 &amp; 空行\"></a>关于空格 &amp; 空行</h2><ol>\n<li>禁止使用<code>制表符</code>缩进，配置编辑器自动替换<code>制表符</code>为<code>空格</code>(2或4个)。</li>\n<li>赋值符 <code>=</code> 两侧各1个 <code>空格</code>, 参数、哈希等<code>逗号</code>、<code>冒号</code> 后跟1个空格，例: <code>fun(one, two); let hsh = &#123;one: 1, two: 2&#125;</code></li>\n<li>多个变量声明时可在一行；多变量赋值时换行，并左对齐。</li>\n<li>单行或多行注释符后跟1个 <code>空格</code>。</li>\n<li>所有代码或文本中禁止两个及两个以上的空行。</li>\n<li>业务功能代码段之间使用1个空行</li>\n<li>样式 <code>css</code> 类之间默认不需要空行；业务代码间空1行。</li>\n</ol>\n<h2 id=\"关于团队协作\"><a href=\"#关于团队协作\" class=\"headerlink\" title=\"关于团队协作\"></a>关于团队协作</h2><ol>\n<li>申请 <a href=\"/corporate-culture/workplace-ceremony.html\">职场共识</a> 培训</li>\n<li>申请 <a href=\"/corporate-culture/teamwork.html\">团队协作</a> 培训<ul>\n<li>学习 <a href=\"/corporate-culture/teamwork.html#%E4%BA%A4%E6%B5%81%E8%A7%84%E8%8C%83\">交流规范</a></li>\n<li>学习 <a href=\"/corporate-culture/teamwork.html#%E4%BA%A4%E4%BB%98%E8%A7%84%E8%8C%83\">交付规范</a></li>\n<li>安装 <a href=\"/corporate-culture/teamwork.html#%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7\">开发工具</a></li>\n</ul>\n</li>\n<li>申请工作日志权限<ul>\n<li>学习 <a href=\"/corporate-culture/teamwork.html#Markdown\">Markdown 语法</a></li>\n<li>学习 <a href=\"/corporate-culture/teamwork.html#%E5%B7%A5%E4%BD%9C%E6%97%A5%E5%BF%97\">工作日志规范</a></li>\n</ul>\n</li>\n<li>申请 <a href=\"https://gitlab.idata.mobi/\">Gtilab</a> 账号<ul>\n<li>学习 <a href=\"/developer/style-guide/gitlab.html\">Gitlab 提交规范</a><ol>\n<li>(<strong>禁止提交视频、音频甚至图片等大体积文件，请维护至 CDN</strong>)</li>\n<li>所有项目都需配置 <code>Readme.md</code></li>\n<li>项目代码交流前先阅读 <code>Readme.md</code></li>\n</ol>\n</li>\n<li>学习 <a href=\"/developer/style-guide/java.html\">Java 编程规范</a></li>\n<li>学习 <a href=\"/developer/style-guide/mysql.html\">MySQL 协作规范</a></li>\n<li>学习 <a href=\"/developer/style-guide/javascript.html\">Javascript 协作规范</a></li>\n<li>学习 <a href=\"/developer/style-guide/cdn.html\">CDN 运维规范</a></li>\n</ul>\n</li>\n<li>申请 <a href=\"https://jenkins.idata.mobi/\">Jenkins</a> 账号<ul>\n<li>学习 <a href=\"/developer/jenkins-deploy.html\">Jenkins 部署</a></li>\n</ul>\n</li>\n<li>申请印象笔记项目目录权限</li>\n<li>熟悉<a href=\"/developer/project-connections.html\">团队源码体系</a></li>\n</ol>\n<h2 id=\"关于开发-amp-运维\"><a href=\"#关于开发-amp-运维\" class=\"headerlink\" title=\"关于开发 &amp; 运维\"></a>关于开发 &amp; 运维</h2><ul>\n<li><a href=\"/developer/environment-guide.html\">设备环境规范</a></li>\n<li><a href=\"/developer/etl-devops-guide.html\">ETL 运维</a></li>\n<li><a href=\"/developer/api-design-guide.html\">API 规范</a></li>\n<li><a href=\"/developer/rdc-guide.html\">RDC 接口规范</a></li>\n<li><a href=\"/developer/menu-guide.html\">业务菜单规范</a></li>\n</ul>\n<h2 id=\"关于调试\"><a href=\"#关于调试\" class=\"headerlink\" title=\"关于调试\"></a>关于调试</h2><ol>\n<li>提交的代码禁止出现调试代码，例: <code>console.log</code></li>\n<li>前端同事学习使用 <code>debugger</code> 的调试技巧</li>\n<li>前端同事学习 Chrome 控制台的基本使用</li>\n</ol>\n<h2 id=\"关于测试\"><a href=\"#关于测试\" class=\"headerlink\" title=\"关于测试\"></a>关于测试</h2><ol>\n<li>Java&#x2F;数据工程师交付接口的 PostMan 测试实例</li>\n<li>前端遇到接口问题时，确认 API 路由、请求头、参数信息</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"关于空格-amp-空行\"><a href=\"#关于空格-amp-空行\" class=\"headerlink\" title=\"关于空格 &amp; 空行\"></a>关于空格 &amp; 空行</h2><ol>\n<li>禁止使用<code>制表符</code>缩进，配置编辑器自动替换<code>制表符</code>为<code>空格</code>(2或4个)。</li>\n<li>赋值符 <code>=</code> 两侧各1个 <code>空格</code>, 参数、哈希等<code>逗号</code>、<code>冒号</code> 后跟1个空格，例: <code>fun(one, two); let hsh = &#123;one: 1, two: 2&#125;</code></li>\n<li>多个变量声明时可在一行；多变量赋值时换行，并左对齐。</li>\n<li>单行或多行注释符后跟1个 <code>空格</code>。</li>\n<li>所有代码或文本中禁止两个及两个以上的空行。</li>\n<li>业务功能代码段之间使用1个空行</li>\n<li>样式 <code>css</code> 类之间默认不需要空行；业务代码间空1行。</li>\n</ol>\n<h2 id=\"关于团队协作\"><a href=\"#关于团队协作\" class=\"headerlink\" title=\"关于团队协作\"></a>关于团队协作</h2><ol>\n<li>申请 <a href=\"/corporate-culture/workplace-ceremony.html\">职场共识</a> 培训</li>\n<li>申请 <a href=\"/corporate-culture/teamwork.html\">团队协作</a> 培训<ul>\n<li>学习 <a href=\"/corporate-culture/teamwork.html#%E4%BA%A4%E6%B5%81%E8%A7%84%E8%8C%83\">交流规范</a></li>\n<li>学习 <a href=\"/corporate-culture/teamwork.html#%E4%BA%A4%E4%BB%98%E8%A7%84%E8%8C%83\">交付规范</a></li>\n<li>安装 <a href=\"/corporate-culture/teamwork.html#%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7\">开发工具</a></li>\n</ul>\n</li>\n<li>申请工作日志权限<ul>\n<li>学习 <a href=\"/corporate-culture/teamwork.html#Markdown\">Markdown 语法</a></li>\n<li>学习 <a href=\"/corporate-culture/teamwork.html#%E5%B7%A5%E4%BD%9C%E6%97%A5%E5%BF%97\">工作日志规范</a></li>\n</ul>\n</li>\n<li>申请 <a href=\"https://gitlab.idata.mobi/\">Gtilab</a> 账号<ul>\n<li>学习 <a href=\"/developer/style-guide/gitlab.html\">Gitlab 提交规范</a><ol>\n<li>(<strong>禁止提交视频、音频甚至图片等大体积文件，请维护至 CDN</strong>)</li>\n<li>所有项目都需配置 <code>Readme.md</code></li>\n<li>项目代码交流前先阅读 <code>Readme.md</code></li>\n</ol>\n</li>\n<li>学习 <a href=\"/developer/style-guide/java.html\">Java 编程规范</a></li>\n<li>学习 <a href=\"/developer/style-guide/mysql.html\">MySQL 协作规范</a></li>\n<li>学习 <a href=\"/developer/style-guide/javascript.html\">Javascript 协作规范</a></li>\n<li>学习 <a href=\"/developer/style-guide/cdn.html\">CDN 运维规范</a></li>\n</ul>\n</li>\n<li>申请 <a href=\"https://jenkins.idata.mobi/\">Jenkins</a> 账号<ul>\n<li>学习 <a href=\"/developer/jenkins-deploy.html\">Jenkins 部署</a></li>\n</ul>\n</li>\n<li>申请印象笔记项目目录权限</li>\n<li>熟悉<a href=\"/developer/project-connections.html\">团队源码体系</a></li>\n</ol>\n<h2 id=\"关于开发-amp-运维\"><a href=\"#关于开发-amp-运维\" class=\"headerlink\" title=\"关于开发 &amp; 运维\"></a>关于开发 &amp; 运维</h2><ul>\n<li><a href=\"/developer/environment-guide.html\">设备环境规范</a></li>\n<li><a href=\"/developer/etl-devops-guide.html\">ETL 运维</a></li>\n<li><a href=\"/developer/api-design-guide.html\">API 规范</a></li>\n<li><a href=\"/developer/rdc-guide.html\">RDC 接口规范</a></li>\n<li><a href=\"/developer/menu-guide.html\">业务菜单规范</a></li>\n</ul>\n<h2 id=\"关于调试\"><a href=\"#关于调试\" class=\"headerlink\" title=\"关于调试\"></a>关于调试</h2><ol>\n<li>提交的代码禁止出现调试代码，例: <code>console.log</code></li>\n<li>前端同事学习使用 <code>debugger</code> 的调试技巧</li>\n<li>前端同事学习 Chrome 控制台的基本使用</li>\n</ol>\n<h2 id=\"关于测试\"><a href=\"#关于测试\" class=\"headerlink\" title=\"关于测试\"></a>关于测试</h2><ol>\n<li>Java&#x2F;数据工程师交付接口的 PostMan 测试实例</li>\n<li>前端遇到接口问题时，确认 API 路由、请求头、参数信息</li>\n</ol>\n"},{"title":"Jenkins 部署","type":"Jenkins 部署","_content":"\n## 项目列表\n\n环境名称 | 说明 | 编号\n----|----|----\n胜因学院 | 正式环境 | SypPro\n胜因研发室 | 开发环境 | SypDev\n\n项目名称 | 项目编号\n----|----\nJava 运营平台 | JavaAdmin\nJava API 服务 | JavaApiServer\n报表运营平台 | ReportPortal\n数据字典平台 | DataDictionaryPortal\n胜因在线文档 | Documents\n\n![项目列表](/images/jenkins-deploy/jenkins-projects.png)\n![项目列表](/images/jenkins-deploy/jenkins-deploy-view.png)\n\n## 部署流程\n\n1. 选择要部署的项目\n\n  ![选择要部署的项目](/images/jenkins-deploy/jenkins-deploy-step01.png)\n\n2. 选择【立即构建】\n\n  ![选择【立即构建】](/images/jenkins-deploy/jenkins-deploy-step02.png)\n  \n3. 进入正在构建的 **Build History**\n\n  ![进入正在构建的 Build History](/images/jenkins-deploy/jenkins-deploy-step03.png)\n\n  或在首页左下区域查看正在构建的任务\n\n  ![项目列表](/images/jenkins-deploy/jenkins-deploy-index.png)\n  \n4. 查看部署日志 **Console Output**\n\n  ![查看部署日志 Console Output](/images/jenkins-deploy/jenkins-deploy-step04.png)\n  \n5. **观察日志，若有异常则人工介入，避免应用服务中断！**\n\n  ![观察日志，若有异常则人工部署，避免 Java 服务中断](/images/jenkins-deploy/jenkins-deploy-step05.png)\n  \n## 注意事项\n\n1. 代码一定要在本机测试正常\n2. 确认本机代码已提交至 Gitlab\n3. 确认提交的分支与 Jenkins 部署的分支相同\n  \n  ![确认提交的分支与 Jenkins 部署的分支相同](/images/jenkins-deploy/jenkins-deploy-gitlab-branch01.png)\n  ![确认提交的分支与 Jenkins 部署的分支相同](/images/jenkins-deploy/jenkins-deploy-gitlab-branch02.png)\n\n4. 确认**数据库运维脚本**已在相关数据库中部署\n5. 部署前通知相关业务人员暂时业务操作\n6. 部署完成后，确认新功能服务正常运行\n7. 通知相关业务人员恢复业务操作\n\n## 异常处理思路\n\n无论本地调试还是 Jenkins 部署异常，都要耐心查看 **报错信息**，这是定位问题的源头。\n\n### 项目语法错误\n\n此类问题，本地运行代码即可重现同样的问题，属于低级错误。\n\n![jenkins-部署异常-代码语法错误.png](/images/jenkins-exception/jenkins-部署异常-代码语法错误.png)\n\n### 服务启动失败\n\n部署成功只是代码包部署完成，但服务进程不一定正常启动；若遇到此类问题需要手工重启、调试。\n\n![jenkins-部署异常-服务启动失败.png](/images/jenkins-exception/jenkins-部署异常-服务启动失败.png)","source":"developer/jenkins-deploy.md","raw":"---\ntitle: Jenkins 部署\ntype: Jenkins 部署\n---\n\n## 项目列表\n\n环境名称 | 说明 | 编号\n----|----|----\n胜因学院 | 正式环境 | SypPro\n胜因研发室 | 开发环境 | SypDev\n\n项目名称 | 项目编号\n----|----\nJava 运营平台 | JavaAdmin\nJava API 服务 | JavaApiServer\n报表运营平台 | ReportPortal\n数据字典平台 | DataDictionaryPortal\n胜因在线文档 | Documents\n\n![项目列表](/images/jenkins-deploy/jenkins-projects.png)\n![项目列表](/images/jenkins-deploy/jenkins-deploy-view.png)\n\n## 部署流程\n\n1. 选择要部署的项目\n\n  ![选择要部署的项目](/images/jenkins-deploy/jenkins-deploy-step01.png)\n\n2. 选择【立即构建】\n\n  ![选择【立即构建】](/images/jenkins-deploy/jenkins-deploy-step02.png)\n  \n3. 进入正在构建的 **Build History**\n\n  ![进入正在构建的 Build History](/images/jenkins-deploy/jenkins-deploy-step03.png)\n\n  或在首页左下区域查看正在构建的任务\n\n  ![项目列表](/images/jenkins-deploy/jenkins-deploy-index.png)\n  \n4. 查看部署日志 **Console Output**\n\n  ![查看部署日志 Console Output](/images/jenkins-deploy/jenkins-deploy-step04.png)\n  \n5. **观察日志，若有异常则人工介入，避免应用服务中断！**\n\n  ![观察日志，若有异常则人工部署，避免 Java 服务中断](/images/jenkins-deploy/jenkins-deploy-step05.png)\n  \n## 注意事项\n\n1. 代码一定要在本机测试正常\n2. 确认本机代码已提交至 Gitlab\n3. 确认提交的分支与 Jenkins 部署的分支相同\n  \n  ![确认提交的分支与 Jenkins 部署的分支相同](/images/jenkins-deploy/jenkins-deploy-gitlab-branch01.png)\n  ![确认提交的分支与 Jenkins 部署的分支相同](/images/jenkins-deploy/jenkins-deploy-gitlab-branch02.png)\n\n4. 确认**数据库运维脚本**已在相关数据库中部署\n5. 部署前通知相关业务人员暂时业务操作\n6. 部署完成后，确认新功能服务正常运行\n7. 通知相关业务人员恢复业务操作\n\n## 异常处理思路\n\n无论本地调试还是 Jenkins 部署异常，都要耐心查看 **报错信息**，这是定位问题的源头。\n\n### 项目语法错误\n\n此类问题，本地运行代码即可重现同样的问题，属于低级错误。\n\n![jenkins-部署异常-代码语法错误.png](/images/jenkins-exception/jenkins-部署异常-代码语法错误.png)\n\n### 服务启动失败\n\n部署成功只是代码包部署完成，但服务进程不一定正常启动；若遇到此类问题需要手工重启、调试。\n\n![jenkins-部署异常-服务启动失败.png](/images/jenkins-exception/jenkins-部署异常-服务启动失败.png)","date":"2023-06-10T10:49:05.486Z","updated":"2023-06-10T10:49:05.486Z","path":"developer/jenkins-deploy.html","comments":1,"layout":"page","_id":"clipw1dcy000doix578zmbf06","content":"<h2 id=\"项目列表\"><a href=\"#项目列表\" class=\"headerlink\" title=\"项目列表\"></a>项目列表</h2><table>\n<thead>\n<tr>\n<th>环境名称</th>\n<th>说明</th>\n<th>编号</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>胜因学院</td>\n<td>正式环境</td>\n<td>SypPro</td>\n</tr>\n<tr>\n<td>胜因研发室</td>\n<td>开发环境</td>\n<td>SypDev</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>项目名称</th>\n<th>项目编号</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Java 运营平台</td>\n<td>JavaAdmin</td>\n</tr>\n<tr>\n<td>Java API 服务</td>\n<td>JavaApiServer</td>\n</tr>\n<tr>\n<td>报表运营平台</td>\n<td>ReportPortal</td>\n</tr>\n<tr>\n<td>数据字典平台</td>\n<td>DataDictionaryPortal</td>\n</tr>\n<tr>\n<td>胜因在线文档</td>\n<td>Documents</td>\n</tr>\n</tbody></table>\n<p><img src=\"/images/jenkins-deploy/jenkins-projects.png\" alt=\"项目列表\"><br><img src=\"/images/jenkins-deploy/jenkins-deploy-view.png\" alt=\"项目列表\"></p>\n<h2 id=\"部署流程\"><a href=\"#部署流程\" class=\"headerlink\" title=\"部署流程\"></a>部署流程</h2><ol>\n<li>选择要部署的项目</li>\n</ol>\n<p>  <img src=\"/images/jenkins-deploy/jenkins-deploy-step01.png\" alt=\"选择要部署的项目\"></p>\n<ol start=\"2\">\n<li>选择【立即构建】</li>\n</ol>\n<p>  <img src=\"/images/jenkins-deploy/jenkins-deploy-step02.png\" alt=\"选择【立即构建】\"></p>\n<ol start=\"3\">\n<li>进入正在构建的 <strong>Build History</strong></li>\n</ol>\n<p>  <img src=\"/images/jenkins-deploy/jenkins-deploy-step03.png\" alt=\"进入正在构建的 Build History\"></p>\n<p>  或在首页左下区域查看正在构建的任务</p>\n<p>  <img src=\"/images/jenkins-deploy/jenkins-deploy-index.png\" alt=\"项目列表\"></p>\n<ol start=\"4\">\n<li>查看部署日志 <strong>Console Output</strong></li>\n</ol>\n<p>  <img src=\"/images/jenkins-deploy/jenkins-deploy-step04.png\" alt=\"查看部署日志 Console Output\"></p>\n<ol start=\"5\">\n<li><strong>观察日志，若有异常则人工介入，避免应用服务中断！</strong></li>\n</ol>\n<p>  <img src=\"/images/jenkins-deploy/jenkins-deploy-step05.png\" alt=\"观察日志，若有异常则人工部署，避免 Java 服务中断\"></p>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ol>\n<li>代码一定要在本机测试正常</li>\n<li>确认本机代码已提交至 Gitlab</li>\n<li>确认提交的分支与 Jenkins 部署的分支相同</li>\n</ol>\n<p>  <img src=\"/images/jenkins-deploy/jenkins-deploy-gitlab-branch01.png\" alt=\"确认提交的分支与 Jenkins 部署的分支相同\"><br>  <img src=\"/images/jenkins-deploy/jenkins-deploy-gitlab-branch02.png\" alt=\"确认提交的分支与 Jenkins 部署的分支相同\"></p>\n<ol start=\"4\">\n<li>确认<strong>数据库运维脚本</strong>已在相关数据库中部署</li>\n<li>部署前通知相关业务人员暂时业务操作</li>\n<li>部署完成后，确认新功能服务正常运行</li>\n<li>通知相关业务人员恢复业务操作</li>\n</ol>\n<h2 id=\"异常处理思路\"><a href=\"#异常处理思路\" class=\"headerlink\" title=\"异常处理思路\"></a>异常处理思路</h2><p>无论本地调试还是 Jenkins 部署异常，都要耐心查看 <strong>报错信息</strong>，这是定位问题的源头。</p>\n<h3 id=\"项目语法错误\"><a href=\"#项目语法错误\" class=\"headerlink\" title=\"项目语法错误\"></a>项目语法错误</h3><p>此类问题，本地运行代码即可重现同样的问题，属于低级错误。</p>\n<p><img src=\"/images/jenkins-exception/jenkins-%E9%83%A8%E7%BD%B2%E5%BC%82%E5%B8%B8-%E4%BB%A3%E7%A0%81%E8%AF%AD%E6%B3%95%E9%94%99%E8%AF%AF.png\" alt=\"jenkins-部署异常-代码语法错误.png\"></p>\n<h3 id=\"服务启动失败\"><a href=\"#服务启动失败\" class=\"headerlink\" title=\"服务启动失败\"></a>服务启动失败</h3><p>部署成功只是代码包部署完成，但服务进程不一定正常启动；若遇到此类问题需要手工重启、调试。</p>\n<p><img src=\"/images/jenkins-exception/jenkins-%E9%83%A8%E7%BD%B2%E5%BC%82%E5%B8%B8-%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5.png\" alt=\"jenkins-部署异常-服务启动失败.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"项目列表\"><a href=\"#项目列表\" class=\"headerlink\" title=\"项目列表\"></a>项目列表</h2><table>\n<thead>\n<tr>\n<th>环境名称</th>\n<th>说明</th>\n<th>编号</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>胜因学院</td>\n<td>正式环境</td>\n<td>SypPro</td>\n</tr>\n<tr>\n<td>胜因研发室</td>\n<td>开发环境</td>\n<td>SypDev</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>项目名称</th>\n<th>项目编号</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Java 运营平台</td>\n<td>JavaAdmin</td>\n</tr>\n<tr>\n<td>Java API 服务</td>\n<td>JavaApiServer</td>\n</tr>\n<tr>\n<td>报表运营平台</td>\n<td>ReportPortal</td>\n</tr>\n<tr>\n<td>数据字典平台</td>\n<td>DataDictionaryPortal</td>\n</tr>\n<tr>\n<td>胜因在线文档</td>\n<td>Documents</td>\n</tr>\n</tbody></table>\n<p><img src=\"/images/jenkins-deploy/jenkins-projects.png\" alt=\"项目列表\"><br><img src=\"/images/jenkins-deploy/jenkins-deploy-view.png\" alt=\"项目列表\"></p>\n<h2 id=\"部署流程\"><a href=\"#部署流程\" class=\"headerlink\" title=\"部署流程\"></a>部署流程</h2><ol>\n<li>选择要部署的项目</li>\n</ol>\n<p>  <img src=\"/images/jenkins-deploy/jenkins-deploy-step01.png\" alt=\"选择要部署的项目\"></p>\n<ol start=\"2\">\n<li>选择【立即构建】</li>\n</ol>\n<p>  <img src=\"/images/jenkins-deploy/jenkins-deploy-step02.png\" alt=\"选择【立即构建】\"></p>\n<ol start=\"3\">\n<li>进入正在构建的 <strong>Build History</strong></li>\n</ol>\n<p>  <img src=\"/images/jenkins-deploy/jenkins-deploy-step03.png\" alt=\"进入正在构建的 Build History\"></p>\n<p>  或在首页左下区域查看正在构建的任务</p>\n<p>  <img src=\"/images/jenkins-deploy/jenkins-deploy-index.png\" alt=\"项目列表\"></p>\n<ol start=\"4\">\n<li>查看部署日志 <strong>Console Output</strong></li>\n</ol>\n<p>  <img src=\"/images/jenkins-deploy/jenkins-deploy-step04.png\" alt=\"查看部署日志 Console Output\"></p>\n<ol start=\"5\">\n<li><strong>观察日志，若有异常则人工介入，避免应用服务中断！</strong></li>\n</ol>\n<p>  <img src=\"/images/jenkins-deploy/jenkins-deploy-step05.png\" alt=\"观察日志，若有异常则人工部署，避免 Java 服务中断\"></p>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ol>\n<li>代码一定要在本机测试正常</li>\n<li>确认本机代码已提交至 Gitlab</li>\n<li>确认提交的分支与 Jenkins 部署的分支相同</li>\n</ol>\n<p>  <img src=\"/images/jenkins-deploy/jenkins-deploy-gitlab-branch01.png\" alt=\"确认提交的分支与 Jenkins 部署的分支相同\"><br>  <img src=\"/images/jenkins-deploy/jenkins-deploy-gitlab-branch02.png\" alt=\"确认提交的分支与 Jenkins 部署的分支相同\"></p>\n<ol start=\"4\">\n<li>确认<strong>数据库运维脚本</strong>已在相关数据库中部署</li>\n<li>部署前通知相关业务人员暂时业务操作</li>\n<li>部署完成后，确认新功能服务正常运行</li>\n<li>通知相关业务人员恢复业务操作</li>\n</ol>\n<h2 id=\"异常处理思路\"><a href=\"#异常处理思路\" class=\"headerlink\" title=\"异常处理思路\"></a>异常处理思路</h2><p>无论本地调试还是 Jenkins 部署异常，都要耐心查看 <strong>报错信息</strong>，这是定位问题的源头。</p>\n<h3 id=\"项目语法错误\"><a href=\"#项目语法错误\" class=\"headerlink\" title=\"项目语法错误\"></a>项目语法错误</h3><p>此类问题，本地运行代码即可重现同样的问题，属于低级错误。</p>\n<p><img src=\"/images/jenkins-exception/jenkins-%E9%83%A8%E7%BD%B2%E5%BC%82%E5%B8%B8-%E4%BB%A3%E7%A0%81%E8%AF%AD%E6%B3%95%E9%94%99%E8%AF%AF.png\" alt=\"jenkins-部署异常-代码语法错误.png\"></p>\n<h3 id=\"服务启动失败\"><a href=\"#服务启动失败\" class=\"headerlink\" title=\"服务启动失败\"></a>服务启动失败</h3><p>部署成功只是代码包部署完成，但服务进程不一定正常启动；若遇到此类问题需要手工重启、调试。</p>\n<p><img src=\"/images/jenkins-exception/jenkins-%E9%83%A8%E7%BD%B2%E5%BC%82%E5%B8%B8-%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5.png\" alt=\"jenkins-部署异常-服务启动失败.png\"></p>\n"},{"title":"业务菜单规范","type":"业务菜单规范","_content":"\n## 结构示意图\n\n![业务菜单结构图](/images/业务菜单结构图.png)\n\n*注: attachments/xmind/业务菜单结构图.xmind*\n\n## 菜单字段\n\n列名 | 属性 | 备注\n:----|:----|:----\n**id** | `int` | \n**uuid** | `varchar` | 菜单uuid\n**category_name** | `varchar` | 分类名称\n**category_icon** | `varchar` | 分类图标\n**category_order** | `int` | 分类排序\n**group_name** | `varchar` | 分组名称\n**group_icon** | `varchar` | 分组图标\n**group_order** | `int` | 分组排序\n**name** | `varchar` | 菜单标题\n**icon** | `varchar` | 菜单图标\n**order** | `int` | 菜单排序\n**publicly** | `tinyint` | 是否通用\n**delete_status** | `varchar` | 删除状态字段 0未删除 1已删除\n**description** | `varchar` | 描述\n**platform** | `varchar` | 平台: pc/app/wxmp/tv\n**menu_type** | `varchar` | 菜单类型：工具箱/报表项/设置项\n**menu_object** | `varchar` | 菜单对象：wxmp/wxmp#config/report/link\n**menu_object_id** | `varchar` | 菜单关联的对象 当menu_object为report时，menu_object_id为report.id\n**menu_object_type** | `varchar` | 菜单关联的对象类型\n**menu_object_title** | `varchar` | 菜单关联的对象标题\n**menu_object_url** | `varchar` | 菜单关联的对象链接，menu_object为link时，menu_object_url为link，当menu_object为wxmp#config时，menu_object_url为home_path\n**menu_object_extension** | `varchar` | 菜单关联对象的扩展参数\n**menu_object_cdn** | `tinyint` | 是否为 CDN 状态\n**menu_object_version** | `varchar` | cdn版本号，menu_object_url为cdn链接\n**menu_extension** | `varchar` | \n**create_user** | `int` | \n**update_user** | `int` | \n**created_time** | `datetime` | \n**updated_time** | `datetime` | \n\n## 业务菜单层级\n\n三级菜单 + 四维属性:\n- 一级菜单 `category_name`\n- 二级菜单 `group_name`\n- 三级菜单 `name`\n- 一维属性，平台 `platform`\n- 二维属性，板块 `menu_type`\n- 三维属性，对象 `menu_object`\n- 四维属性，类型 `menu_object_type`\n\n仅一级菜单时只使用 `name` 字段；仅二级菜单时只使用 `group_name` `category_name` 字段。\n\n## 四个平台\n\n支持四个平台(`platform`), 每个接口独立 API 域:\n- 小程序端，编号: **wxmp**\n- PC浏览器，编号:**pc**\n- 电视大屏，编号: **tv**\n- 手机应用，编号: **app**\n\n### 1. 小程序端(wxmp)\n\n结论: 使用了两级菜单 `group_name` `name`，板块(`menu_type`)有三种场景：报表项、工具箱、设置项，菜单对象(`menu_object`)支持三种类型: 内嵌模块、配置模块、外部链接。\n\n菜单对象(`menu_object`)：\n- 内嵌模块，编号: **wxmp**，依赖字段: \n    - 模块名称(`menu_object_id`)，手工维护\n- 配置模块，编号: **wxmp#config**, 依赖字段: \n    - 模块名称(`menu_object_id`) 下拉框选择服务端模块列表\n    - 模块根路径(`menu_object_url`)，对应模块表中的 `home_path`\n- 外部链接，编号: **webview**，依赖字段: \n    - Web链接(`menu_object_url`)\n    - 追加参数(`menu_extension`)\n\n### 2. PC浏览器(PC)\n\n结论: 使用了两级菜单 `group_name` `name`，板块(`menu_type`)有一场景：工具箱，菜单对象(`menu_object`): 大屏报表(big-screen-render)、外链大屏报表(big-screen-outer-render)、数据字典(data-dictionary-list)等。\n\n菜单对象(`menu_object`) 依赖字段: \n  - 唯一标识(`menu_object_id`), 数据字典时为模块UUID, 其他情况为随机UUID\n  - Web链接(`menu_object_url`)，大屏报表时为报表链接\n  - 注：业务模块为前端代码路由中的 `name` 字段(该字段在路由配置档中需要唯一)\n\n### 3. 电视大屏\n\n结论: 使用了两级菜单 `group_name` `name`，板块(`menu_type`)有一场景：工具箱，菜单对象(`menu_object`)支持一种类型: 外部链接。\n\n菜单对象(`menu_object`) 依赖字段: \n  - Web链接(`menu_object_url`)\n  - 追加参数(`menu_extension`)\n\n### 4. 手机应用\n\n暂未上线","source":"developer/menu-guide.md","raw":"---\ntitle: 业务菜单规范\ntype: 业务菜单规范\n---\n\n## 结构示意图\n\n![业务菜单结构图](/images/业务菜单结构图.png)\n\n*注: attachments/xmind/业务菜单结构图.xmind*\n\n## 菜单字段\n\n列名 | 属性 | 备注\n:----|:----|:----\n**id** | `int` | \n**uuid** | `varchar` | 菜单uuid\n**category_name** | `varchar` | 分类名称\n**category_icon** | `varchar` | 分类图标\n**category_order** | `int` | 分类排序\n**group_name** | `varchar` | 分组名称\n**group_icon** | `varchar` | 分组图标\n**group_order** | `int` | 分组排序\n**name** | `varchar` | 菜单标题\n**icon** | `varchar` | 菜单图标\n**order** | `int` | 菜单排序\n**publicly** | `tinyint` | 是否通用\n**delete_status** | `varchar` | 删除状态字段 0未删除 1已删除\n**description** | `varchar` | 描述\n**platform** | `varchar` | 平台: pc/app/wxmp/tv\n**menu_type** | `varchar` | 菜单类型：工具箱/报表项/设置项\n**menu_object** | `varchar` | 菜单对象：wxmp/wxmp#config/report/link\n**menu_object_id** | `varchar` | 菜单关联的对象 当menu_object为report时，menu_object_id为report.id\n**menu_object_type** | `varchar` | 菜单关联的对象类型\n**menu_object_title** | `varchar` | 菜单关联的对象标题\n**menu_object_url** | `varchar` | 菜单关联的对象链接，menu_object为link时，menu_object_url为link，当menu_object为wxmp#config时，menu_object_url为home_path\n**menu_object_extension** | `varchar` | 菜单关联对象的扩展参数\n**menu_object_cdn** | `tinyint` | 是否为 CDN 状态\n**menu_object_version** | `varchar` | cdn版本号，menu_object_url为cdn链接\n**menu_extension** | `varchar` | \n**create_user** | `int` | \n**update_user** | `int` | \n**created_time** | `datetime` | \n**updated_time** | `datetime` | \n\n## 业务菜单层级\n\n三级菜单 + 四维属性:\n- 一级菜单 `category_name`\n- 二级菜单 `group_name`\n- 三级菜单 `name`\n- 一维属性，平台 `platform`\n- 二维属性，板块 `menu_type`\n- 三维属性，对象 `menu_object`\n- 四维属性，类型 `menu_object_type`\n\n仅一级菜单时只使用 `name` 字段；仅二级菜单时只使用 `group_name` `category_name` 字段。\n\n## 四个平台\n\n支持四个平台(`platform`), 每个接口独立 API 域:\n- 小程序端，编号: **wxmp**\n- PC浏览器，编号:**pc**\n- 电视大屏，编号: **tv**\n- 手机应用，编号: **app**\n\n### 1. 小程序端(wxmp)\n\n结论: 使用了两级菜单 `group_name` `name`，板块(`menu_type`)有三种场景：报表项、工具箱、设置项，菜单对象(`menu_object`)支持三种类型: 内嵌模块、配置模块、外部链接。\n\n菜单对象(`menu_object`)：\n- 内嵌模块，编号: **wxmp**，依赖字段: \n    - 模块名称(`menu_object_id`)，手工维护\n- 配置模块，编号: **wxmp#config**, 依赖字段: \n    - 模块名称(`menu_object_id`) 下拉框选择服务端模块列表\n    - 模块根路径(`menu_object_url`)，对应模块表中的 `home_path`\n- 外部链接，编号: **webview**，依赖字段: \n    - Web链接(`menu_object_url`)\n    - 追加参数(`menu_extension`)\n\n### 2. PC浏览器(PC)\n\n结论: 使用了两级菜单 `group_name` `name`，板块(`menu_type`)有一场景：工具箱，菜单对象(`menu_object`): 大屏报表(big-screen-render)、外链大屏报表(big-screen-outer-render)、数据字典(data-dictionary-list)等。\n\n菜单对象(`menu_object`) 依赖字段: \n  - 唯一标识(`menu_object_id`), 数据字典时为模块UUID, 其他情况为随机UUID\n  - Web链接(`menu_object_url`)，大屏报表时为报表链接\n  - 注：业务模块为前端代码路由中的 `name` 字段(该字段在路由配置档中需要唯一)\n\n### 3. 电视大屏\n\n结论: 使用了两级菜单 `group_name` `name`，板块(`menu_type`)有一场景：工具箱，菜单对象(`menu_object`)支持一种类型: 外部链接。\n\n菜单对象(`menu_object`) 依赖字段: \n  - Web链接(`menu_object_url`)\n  - 追加参数(`menu_extension`)\n\n### 4. 手机应用\n\n暂未上线","date":"2023-06-10T10:49:05.486Z","updated":"2023-06-10T10:49:05.486Z","path":"developer/menu-guide.html","comments":1,"layout":"page","_id":"clipw1dcz000eoix59qls61fp","content":"<h2 id=\"结构示意图\"><a href=\"#结构示意图\" class=\"headerlink\" title=\"结构示意图\"></a>结构示意图</h2><p><img src=\"/images/%E4%B8%9A%E5%8A%A1%E8%8F%9C%E5%8D%95%E7%BB%93%E6%9E%84%E5%9B%BE.png\" alt=\"业务菜单结构图\"></p>\n<p><em>注: attachments&#x2F;xmind&#x2F;业务菜单结构图.xmind</em></p>\n<h2 id=\"菜单字段\"><a href=\"#菜单字段\" class=\"headerlink\" title=\"菜单字段\"></a>菜单字段</h2><table>\n<thead>\n<tr>\n<th align=\"left\">列名</th>\n<th align=\"left\">属性</th>\n<th align=\"left\">备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><strong>id</strong></td>\n<td align=\"left\"><code>int</code></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><strong>uuid</strong></td>\n<td align=\"left\"><code>varchar</code></td>\n<td align=\"left\">菜单uuid</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>category_name</strong></td>\n<td align=\"left\"><code>varchar</code></td>\n<td align=\"left\">分类名称</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>category_icon</strong></td>\n<td align=\"left\"><code>varchar</code></td>\n<td align=\"left\">分类图标</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>category_order</strong></td>\n<td align=\"left\"><code>int</code></td>\n<td align=\"left\">分类排序</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>group_name</strong></td>\n<td align=\"left\"><code>varchar</code></td>\n<td align=\"left\">分组名称</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>group_icon</strong></td>\n<td align=\"left\"><code>varchar</code></td>\n<td align=\"left\">分组图标</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>group_order</strong></td>\n<td align=\"left\"><code>int</code></td>\n<td align=\"left\">分组排序</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>name</strong></td>\n<td align=\"left\"><code>varchar</code></td>\n<td align=\"left\">菜单标题</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>icon</strong></td>\n<td align=\"left\"><code>varchar</code></td>\n<td align=\"left\">菜单图标</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>order</strong></td>\n<td align=\"left\"><code>int</code></td>\n<td align=\"left\">菜单排序</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>publicly</strong></td>\n<td align=\"left\"><code>tinyint</code></td>\n<td align=\"left\">是否通用</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>delete_status</strong></td>\n<td align=\"left\"><code>varchar</code></td>\n<td align=\"left\">删除状态字段 0未删除 1已删除</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>description</strong></td>\n<td align=\"left\"><code>varchar</code></td>\n<td align=\"left\">描述</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>platform</strong></td>\n<td align=\"left\"><code>varchar</code></td>\n<td align=\"left\">平台: pc&#x2F;app&#x2F;wxmp&#x2F;tv</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>menu_type</strong></td>\n<td align=\"left\"><code>varchar</code></td>\n<td align=\"left\">菜单类型：工具箱&#x2F;报表项&#x2F;设置项</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>menu_object</strong></td>\n<td align=\"left\"><code>varchar</code></td>\n<td align=\"left\">菜单对象：wxmp&#x2F;wxmp#config&#x2F;report&#x2F;link</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>menu_object_id</strong></td>\n<td align=\"left\"><code>varchar</code></td>\n<td align=\"left\">菜单关联的对象 当menu_object为report时，menu_object_id为report.id</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>menu_object_type</strong></td>\n<td align=\"left\"><code>varchar</code></td>\n<td align=\"left\">菜单关联的对象类型</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>menu_object_title</strong></td>\n<td align=\"left\"><code>varchar</code></td>\n<td align=\"left\">菜单关联的对象标题</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>menu_object_url</strong></td>\n<td align=\"left\"><code>varchar</code></td>\n<td align=\"left\">菜单关联的对象链接，menu_object为link时，menu_object_url为link，当menu_object为wxmp#config时，menu_object_url为home_path</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>menu_object_extension</strong></td>\n<td align=\"left\"><code>varchar</code></td>\n<td align=\"left\">菜单关联对象的扩展参数</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>menu_object_cdn</strong></td>\n<td align=\"left\"><code>tinyint</code></td>\n<td align=\"left\">是否为 CDN 状态</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>menu_object_version</strong></td>\n<td align=\"left\"><code>varchar</code></td>\n<td align=\"left\">cdn版本号，menu_object_url为cdn链接</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>menu_extension</strong></td>\n<td align=\"left\"><code>varchar</code></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><strong>create_user</strong></td>\n<td align=\"left\"><code>int</code></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><strong>update_user</strong></td>\n<td align=\"left\"><code>int</code></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><strong>created_time</strong></td>\n<td align=\"left\"><code>datetime</code></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><strong>updated_time</strong></td>\n<td align=\"left\"><code>datetime</code></td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<h2 id=\"业务菜单层级\"><a href=\"#业务菜单层级\" class=\"headerlink\" title=\"业务菜单层级\"></a>业务菜单层级</h2><p>三级菜单 + 四维属性:</p>\n<ul>\n<li>一级菜单 <code>category_name</code></li>\n<li>二级菜单 <code>group_name</code></li>\n<li>三级菜单 <code>name</code></li>\n<li>一维属性，平台 <code>platform</code></li>\n<li>二维属性，板块 <code>menu_type</code></li>\n<li>三维属性，对象 <code>menu_object</code></li>\n<li>四维属性，类型 <code>menu_object_type</code></li>\n</ul>\n<p>仅一级菜单时只使用 <code>name</code> 字段；仅二级菜单时只使用 <code>group_name</code> <code>category_name</code> 字段。</p>\n<h2 id=\"四个平台\"><a href=\"#四个平台\" class=\"headerlink\" title=\"四个平台\"></a>四个平台</h2><p>支持四个平台(<code>platform</code>), 每个接口独立 API 域:</p>\n<ul>\n<li>小程序端，编号: <strong>wxmp</strong></li>\n<li>PC浏览器，编号:<strong>pc</strong></li>\n<li>电视大屏，编号: <strong>tv</strong></li>\n<li>手机应用，编号: <strong>app</strong></li>\n</ul>\n<h3 id=\"1-小程序端-wxmp\"><a href=\"#1-小程序端-wxmp\" class=\"headerlink\" title=\"1. 小程序端(wxmp)\"></a>1. 小程序端(wxmp)</h3><p>结论: 使用了两级菜单 <code>group_name</code> <code>name</code>，板块(<code>menu_type</code>)有三种场景：报表项、工具箱、设置项，菜单对象(<code>menu_object</code>)支持三种类型: 内嵌模块、配置模块、外部链接。</p>\n<p>菜单对象(<code>menu_object</code>)：</p>\n<ul>\n<li>内嵌模块，编号: <strong>wxmp</strong>，依赖字段: <ul>\n<li>模块名称(<code>menu_object_id</code>)，手工维护</li>\n</ul>\n</li>\n<li>配置模块，编号: <strong>wxmp#config</strong>, 依赖字段: <ul>\n<li>模块名称(<code>menu_object_id</code>) 下拉框选择服务端模块列表</li>\n<li>模块根路径(<code>menu_object_url</code>)，对应模块表中的 <code>home_path</code></li>\n</ul>\n</li>\n<li>外部链接，编号: <strong>webview</strong>，依赖字段: <ul>\n<li>Web链接(<code>menu_object_url</code>)</li>\n<li>追加参数(<code>menu_extension</code>)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-PC浏览器-PC\"><a href=\"#2-PC浏览器-PC\" class=\"headerlink\" title=\"2. PC浏览器(PC)\"></a>2. PC浏览器(PC)</h3><p>结论: 使用了两级菜单 <code>group_name</code> <code>name</code>，板块(<code>menu_type</code>)有一场景：工具箱，菜单对象(<code>menu_object</code>): 大屏报表(big-screen-render)、外链大屏报表(big-screen-outer-render)、数据字典(data-dictionary-list)等。</p>\n<p>菜单对象(<code>menu_object</code>) 依赖字段: </p>\n<ul>\n<li>唯一标识(<code>menu_object_id</code>), 数据字典时为模块UUID, 其他情况为随机UUID</li>\n<li>Web链接(<code>menu_object_url</code>)，大屏报表时为报表链接</li>\n<li>注：业务模块为前端代码路由中的 <code>name</code> 字段(该字段在路由配置档中需要唯一)</li>\n</ul>\n<h3 id=\"3-电视大屏\"><a href=\"#3-电视大屏\" class=\"headerlink\" title=\"3. 电视大屏\"></a>3. 电视大屏</h3><p>结论: 使用了两级菜单 <code>group_name</code> <code>name</code>，板块(<code>menu_type</code>)有一场景：工具箱，菜单对象(<code>menu_object</code>)支持一种类型: 外部链接。</p>\n<p>菜单对象(<code>menu_object</code>) 依赖字段: </p>\n<ul>\n<li>Web链接(<code>menu_object_url</code>)</li>\n<li>追加参数(<code>menu_extension</code>)</li>\n</ul>\n<h3 id=\"4-手机应用\"><a href=\"#4-手机应用\" class=\"headerlink\" title=\"4. 手机应用\"></a>4. 手机应用</h3><p>暂未上线</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"结构示意图\"><a href=\"#结构示意图\" class=\"headerlink\" title=\"结构示意图\"></a>结构示意图</h2><p><img src=\"/images/%E4%B8%9A%E5%8A%A1%E8%8F%9C%E5%8D%95%E7%BB%93%E6%9E%84%E5%9B%BE.png\" alt=\"业务菜单结构图\"></p>\n<p><em>注: attachments&#x2F;xmind&#x2F;业务菜单结构图.xmind</em></p>\n<h2 id=\"菜单字段\"><a href=\"#菜单字段\" class=\"headerlink\" title=\"菜单字段\"></a>菜单字段</h2><table>\n<thead>\n<tr>\n<th align=\"left\">列名</th>\n<th align=\"left\">属性</th>\n<th align=\"left\">备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><strong>id</strong></td>\n<td align=\"left\"><code>int</code></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><strong>uuid</strong></td>\n<td align=\"left\"><code>varchar</code></td>\n<td align=\"left\">菜单uuid</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>category_name</strong></td>\n<td align=\"left\"><code>varchar</code></td>\n<td align=\"left\">分类名称</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>category_icon</strong></td>\n<td align=\"left\"><code>varchar</code></td>\n<td align=\"left\">分类图标</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>category_order</strong></td>\n<td align=\"left\"><code>int</code></td>\n<td align=\"left\">分类排序</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>group_name</strong></td>\n<td align=\"left\"><code>varchar</code></td>\n<td align=\"left\">分组名称</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>group_icon</strong></td>\n<td align=\"left\"><code>varchar</code></td>\n<td align=\"left\">分组图标</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>group_order</strong></td>\n<td align=\"left\"><code>int</code></td>\n<td align=\"left\">分组排序</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>name</strong></td>\n<td align=\"left\"><code>varchar</code></td>\n<td align=\"left\">菜单标题</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>icon</strong></td>\n<td align=\"left\"><code>varchar</code></td>\n<td align=\"left\">菜单图标</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>order</strong></td>\n<td align=\"left\"><code>int</code></td>\n<td align=\"left\">菜单排序</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>publicly</strong></td>\n<td align=\"left\"><code>tinyint</code></td>\n<td align=\"left\">是否通用</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>delete_status</strong></td>\n<td align=\"left\"><code>varchar</code></td>\n<td align=\"left\">删除状态字段 0未删除 1已删除</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>description</strong></td>\n<td align=\"left\"><code>varchar</code></td>\n<td align=\"left\">描述</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>platform</strong></td>\n<td align=\"left\"><code>varchar</code></td>\n<td align=\"left\">平台: pc&#x2F;app&#x2F;wxmp&#x2F;tv</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>menu_type</strong></td>\n<td align=\"left\"><code>varchar</code></td>\n<td align=\"left\">菜单类型：工具箱&#x2F;报表项&#x2F;设置项</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>menu_object</strong></td>\n<td align=\"left\"><code>varchar</code></td>\n<td align=\"left\">菜单对象：wxmp&#x2F;wxmp#config&#x2F;report&#x2F;link</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>menu_object_id</strong></td>\n<td align=\"left\"><code>varchar</code></td>\n<td align=\"left\">菜单关联的对象 当menu_object为report时，menu_object_id为report.id</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>menu_object_type</strong></td>\n<td align=\"left\"><code>varchar</code></td>\n<td align=\"left\">菜单关联的对象类型</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>menu_object_title</strong></td>\n<td align=\"left\"><code>varchar</code></td>\n<td align=\"left\">菜单关联的对象标题</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>menu_object_url</strong></td>\n<td align=\"left\"><code>varchar</code></td>\n<td align=\"left\">菜单关联的对象链接，menu_object为link时，menu_object_url为link，当menu_object为wxmp#config时，menu_object_url为home_path</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>menu_object_extension</strong></td>\n<td align=\"left\"><code>varchar</code></td>\n<td align=\"left\">菜单关联对象的扩展参数</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>menu_object_cdn</strong></td>\n<td align=\"left\"><code>tinyint</code></td>\n<td align=\"left\">是否为 CDN 状态</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>menu_object_version</strong></td>\n<td align=\"left\"><code>varchar</code></td>\n<td align=\"left\">cdn版本号，menu_object_url为cdn链接</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>menu_extension</strong></td>\n<td align=\"left\"><code>varchar</code></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><strong>create_user</strong></td>\n<td align=\"left\"><code>int</code></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><strong>update_user</strong></td>\n<td align=\"left\"><code>int</code></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><strong>created_time</strong></td>\n<td align=\"left\"><code>datetime</code></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><strong>updated_time</strong></td>\n<td align=\"left\"><code>datetime</code></td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<h2 id=\"业务菜单层级\"><a href=\"#业务菜单层级\" class=\"headerlink\" title=\"业务菜单层级\"></a>业务菜单层级</h2><p>三级菜单 + 四维属性:</p>\n<ul>\n<li>一级菜单 <code>category_name</code></li>\n<li>二级菜单 <code>group_name</code></li>\n<li>三级菜单 <code>name</code></li>\n<li>一维属性，平台 <code>platform</code></li>\n<li>二维属性，板块 <code>menu_type</code></li>\n<li>三维属性，对象 <code>menu_object</code></li>\n<li>四维属性，类型 <code>menu_object_type</code></li>\n</ul>\n<p>仅一级菜单时只使用 <code>name</code> 字段；仅二级菜单时只使用 <code>group_name</code> <code>category_name</code> 字段。</p>\n<h2 id=\"四个平台\"><a href=\"#四个平台\" class=\"headerlink\" title=\"四个平台\"></a>四个平台</h2><p>支持四个平台(<code>platform</code>), 每个接口独立 API 域:</p>\n<ul>\n<li>小程序端，编号: <strong>wxmp</strong></li>\n<li>PC浏览器，编号:<strong>pc</strong></li>\n<li>电视大屏，编号: <strong>tv</strong></li>\n<li>手机应用，编号: <strong>app</strong></li>\n</ul>\n<h3 id=\"1-小程序端-wxmp\"><a href=\"#1-小程序端-wxmp\" class=\"headerlink\" title=\"1. 小程序端(wxmp)\"></a>1. 小程序端(wxmp)</h3><p>结论: 使用了两级菜单 <code>group_name</code> <code>name</code>，板块(<code>menu_type</code>)有三种场景：报表项、工具箱、设置项，菜单对象(<code>menu_object</code>)支持三种类型: 内嵌模块、配置模块、外部链接。</p>\n<p>菜单对象(<code>menu_object</code>)：</p>\n<ul>\n<li>内嵌模块，编号: <strong>wxmp</strong>，依赖字段: <ul>\n<li>模块名称(<code>menu_object_id</code>)，手工维护</li>\n</ul>\n</li>\n<li>配置模块，编号: <strong>wxmp#config</strong>, 依赖字段: <ul>\n<li>模块名称(<code>menu_object_id</code>) 下拉框选择服务端模块列表</li>\n<li>模块根路径(<code>menu_object_url</code>)，对应模块表中的 <code>home_path</code></li>\n</ul>\n</li>\n<li>外部链接，编号: <strong>webview</strong>，依赖字段: <ul>\n<li>Web链接(<code>menu_object_url</code>)</li>\n<li>追加参数(<code>menu_extension</code>)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-PC浏览器-PC\"><a href=\"#2-PC浏览器-PC\" class=\"headerlink\" title=\"2. PC浏览器(PC)\"></a>2. PC浏览器(PC)</h3><p>结论: 使用了两级菜单 <code>group_name</code> <code>name</code>，板块(<code>menu_type</code>)有一场景：工具箱，菜单对象(<code>menu_object</code>): 大屏报表(big-screen-render)、外链大屏报表(big-screen-outer-render)、数据字典(data-dictionary-list)等。</p>\n<p>菜单对象(<code>menu_object</code>) 依赖字段: </p>\n<ul>\n<li>唯一标识(<code>menu_object_id</code>), 数据字典时为模块UUID, 其他情况为随机UUID</li>\n<li>Web链接(<code>menu_object_url</code>)，大屏报表时为报表链接</li>\n<li>注：业务模块为前端代码路由中的 <code>name</code> 字段(该字段在路由配置档中需要唯一)</li>\n</ul>\n<h3 id=\"3-电视大屏\"><a href=\"#3-电视大屏\" class=\"headerlink\" title=\"3. 电视大屏\"></a>3. 电视大屏</h3><p>结论: 使用了两级菜单 <code>group_name</code> <code>name</code>，板块(<code>menu_type</code>)有一场景：工具箱，菜单对象(<code>menu_object</code>)支持一种类型: 外部链接。</p>\n<p>菜单对象(<code>menu_object</code>) 依赖字段: </p>\n<ul>\n<li>Web链接(<code>menu_object_url</code>)</li>\n<li>追加参数(<code>menu_extension</code>)</li>\n</ul>\n<h3 id=\"4-手机应用\"><a href=\"#4-手机应用\" class=\"headerlink\" title=\"4. 手机应用\"></a>4. 手机应用</h3><p>暂未上线</p>\n"},{"title":"源码体系","type":"源码体系","_content":"\n## 思维导图\n\n![源码体系](/images/源码体系.png)\n\n*注: attachments/xmind/源码体系.xmind*\n\n## 数据库运维\n\n运维流程:\n\n0. 项目源码 [ModelScripts](https://gitlab.idata.mobi/shengyiplus/syp-model-scripts)\n1. 定位模块对应的运维脚本，若没有请联系管理员\n2. 在业务数据库测试确认功能运行正常\n3. 运维到脚本中的**代码可重复被执行**，即运维脚本可重复执行\n4. 运维脚本中**不允许出现业务数据库名称**，若有疑惑请联系管理员\n5. 使用 [GAP 规范](/developer/style-guide/gitlab.html) 提交代码\n6. 在 [Gitlab发起请求合并](/developer/style-guide/gitlab.html#Gitlab-请求合并)\n\n## 业务项目\n\n**注意:** 需要开发团队成员了解业务项目源码之间的关联、本地启动等操作，具备各项目基本的源码阅读能力。\n\n- [JavaAdmin](https://gitlab.idata.mobi/shengyiplus/syp-java-admin)\n- [JavaAPI](https://gitlab.idata.mobi/shengyiplus/syp-api-server)\n- [ModelScript](https://gitlab.idata.mobi/shengyiplus/syp-model-scripts)\n- [WXMP](https://gitlab.idata.mobi/shengyiplus/syp-wxmp)\n- [WebPortal](https://gitlab.idata.mobi/shengyiplus/syp-web-portal)\n- [ReportPortal](https://gitlab.idata.mobi/shengyiplus/syp-report-portal)(过期)\n- [DataDictionaryPortal](https://gitlab.idata.mobi/shengyiplus/syp-data-dictionary-portal)(过期)\n- [AndroidTv](https://gitlab.idata.mobi/shengyiplus/syp-android-tv)\n- [allerganScripts](https://gitlab.idata.mobi/allergan/allerganScripts)\n\n*项目`README.md`中会说明开发分支、访问域名等信息。*\n\n![readme-domain-guides](/images/readme-domain-guides.png)\n\n## 辅助项目\n\n- [SypCtl](https://gitlab.idata.mobi/syp-apps/sypctl)\n- [SypUtils](https://gitlab.idata.mobi/shengyiplus/syp-utils)\n- [GitAutoPush](https://gitlab.idata.mobi/shengyiplus/GitAutoPush)\n- [SypDocument](https://gitlab.idata.mobi/shengyiplus/syp-documents)\n- [SypWebassets](https://gitlab.idata.mobi/shengyiplus/syp-webassets)\n- [DdpScript](https://gitlab.idata.mobi/shengyiplus/DdpScript)\n\n## 域名/API\n\n1. 所有域名均为 `*.idata.mobi` 二级域名\n2. 所有域名均使用 `https` 协议\n3. 域名分配规范\n  1. CDN 域名 `cdn.idata.mobi`，过期域名<del>syp-cdn.idata.mobi</del>\n  2. API 域名 `api.idata.mobi`，过期域名<del>syp.idata.mobi</del>\n  3. Admin 域名 `admin.idata.mobi`, 过期域名<del>syp.idata.mobi</del>\n  4. Portal 域名 `portal.idata.mobi`, 过期域名<del>syp-cdn.idata.mobi</del>\n  5. 开发环境追加 `-dev`，例 `api-dev.idata.mobi`\n4. API 开发规范\n  1. API 路由禁止出现项目`工程名称`\n  2. API 路由使用**横线命名**规范\n  3. [更多 API 设计规范](/developer/api-design-guide.html)\n\n## 菜单字段\n\n[业务菜单规范](/developer/menu-guide.html)\n\n\n\n","source":"developer/project-connections.md","raw":"---\ntitle: 源码体系\ntype: 源码体系\n---\n\n## 思维导图\n\n![源码体系](/images/源码体系.png)\n\n*注: attachments/xmind/源码体系.xmind*\n\n## 数据库运维\n\n运维流程:\n\n0. 项目源码 [ModelScripts](https://gitlab.idata.mobi/shengyiplus/syp-model-scripts)\n1. 定位模块对应的运维脚本，若没有请联系管理员\n2. 在业务数据库测试确认功能运行正常\n3. 运维到脚本中的**代码可重复被执行**，即运维脚本可重复执行\n4. 运维脚本中**不允许出现业务数据库名称**，若有疑惑请联系管理员\n5. 使用 [GAP 规范](/developer/style-guide/gitlab.html) 提交代码\n6. 在 [Gitlab发起请求合并](/developer/style-guide/gitlab.html#Gitlab-请求合并)\n\n## 业务项目\n\n**注意:** 需要开发团队成员了解业务项目源码之间的关联、本地启动等操作，具备各项目基本的源码阅读能力。\n\n- [JavaAdmin](https://gitlab.idata.mobi/shengyiplus/syp-java-admin)\n- [JavaAPI](https://gitlab.idata.mobi/shengyiplus/syp-api-server)\n- [ModelScript](https://gitlab.idata.mobi/shengyiplus/syp-model-scripts)\n- [WXMP](https://gitlab.idata.mobi/shengyiplus/syp-wxmp)\n- [WebPortal](https://gitlab.idata.mobi/shengyiplus/syp-web-portal)\n- [ReportPortal](https://gitlab.idata.mobi/shengyiplus/syp-report-portal)(过期)\n- [DataDictionaryPortal](https://gitlab.idata.mobi/shengyiplus/syp-data-dictionary-portal)(过期)\n- [AndroidTv](https://gitlab.idata.mobi/shengyiplus/syp-android-tv)\n- [allerganScripts](https://gitlab.idata.mobi/allergan/allerganScripts)\n\n*项目`README.md`中会说明开发分支、访问域名等信息。*\n\n![readme-domain-guides](/images/readme-domain-guides.png)\n\n## 辅助项目\n\n- [SypCtl](https://gitlab.idata.mobi/syp-apps/sypctl)\n- [SypUtils](https://gitlab.idata.mobi/shengyiplus/syp-utils)\n- [GitAutoPush](https://gitlab.idata.mobi/shengyiplus/GitAutoPush)\n- [SypDocument](https://gitlab.idata.mobi/shengyiplus/syp-documents)\n- [SypWebassets](https://gitlab.idata.mobi/shengyiplus/syp-webassets)\n- [DdpScript](https://gitlab.idata.mobi/shengyiplus/DdpScript)\n\n## 域名/API\n\n1. 所有域名均为 `*.idata.mobi` 二级域名\n2. 所有域名均使用 `https` 协议\n3. 域名分配规范\n  1. CDN 域名 `cdn.idata.mobi`，过期域名<del>syp-cdn.idata.mobi</del>\n  2. API 域名 `api.idata.mobi`，过期域名<del>syp.idata.mobi</del>\n  3. Admin 域名 `admin.idata.mobi`, 过期域名<del>syp.idata.mobi</del>\n  4. Portal 域名 `portal.idata.mobi`, 过期域名<del>syp-cdn.idata.mobi</del>\n  5. 开发环境追加 `-dev`，例 `api-dev.idata.mobi`\n4. API 开发规范\n  1. API 路由禁止出现项目`工程名称`\n  2. API 路由使用**横线命名**规范\n  3. [更多 API 设计规范](/developer/api-design-guide.html)\n\n## 菜单字段\n\n[业务菜单规范](/developer/menu-guide.html)\n\n\n\n","date":"2023-06-10T10:49:05.486Z","updated":"2023-06-10T10:49:05.486Z","path":"developer/project-connections.html","comments":1,"layout":"page","_id":"clipw1dcz000foix56k3t5rtg","content":"<h2 id=\"思维导图\"><a href=\"#思维导图\" class=\"headerlink\" title=\"思维导图\"></a>思维导图</h2><p><img src=\"/images/%E6%BA%90%E7%A0%81%E4%BD%93%E7%B3%BB.png\" alt=\"源码体系\"></p>\n<p><em>注: attachments&#x2F;xmind&#x2F;源码体系.xmind</em></p>\n<h2 id=\"数据库运维\"><a href=\"#数据库运维\" class=\"headerlink\" title=\"数据库运维\"></a>数据库运维</h2><p>运维流程:</p>\n<ol start=\"0\">\n<li>项目源码 <a href=\"https://gitlab.idata.mobi/shengyiplus/syp-model-scripts\">ModelScripts</a></li>\n<li>定位模块对应的运维脚本，若没有请联系管理员</li>\n<li>在业务数据库测试确认功能运行正常</li>\n<li>运维到脚本中的<strong>代码可重复被执行</strong>，即运维脚本可重复执行</li>\n<li>运维脚本中<strong>不允许出现业务数据库名称</strong>，若有疑惑请联系管理员</li>\n<li>使用 <a href=\"/developer/style-guide/gitlab.html\">GAP 规范</a> 提交代码</li>\n<li>在 <a href=\"/developer/style-guide/gitlab.html#Gitlab-%E8%AF%B7%E6%B1%82%E5%90%88%E5%B9%B6\">Gitlab发起请求合并</a></li>\n</ol>\n<h2 id=\"业务项目\"><a href=\"#业务项目\" class=\"headerlink\" title=\"业务项目\"></a>业务项目</h2><p><strong>注意:</strong> 需要开发团队成员了解业务项目源码之间的关联、本地启动等操作，具备各项目基本的源码阅读能力。</p>\n<ul>\n<li><a href=\"https://gitlab.idata.mobi/shengyiplus/syp-java-admin\">JavaAdmin</a></li>\n<li><a href=\"https://gitlab.idata.mobi/shengyiplus/syp-api-server\">JavaAPI</a></li>\n<li><a href=\"https://gitlab.idata.mobi/shengyiplus/syp-model-scripts\">ModelScript</a></li>\n<li><a href=\"https://gitlab.idata.mobi/shengyiplus/syp-wxmp\">WXMP</a></li>\n<li><a href=\"https://gitlab.idata.mobi/shengyiplus/syp-web-portal\">WebPortal</a></li>\n<li><a href=\"https://gitlab.idata.mobi/shengyiplus/syp-report-portal\">ReportPortal</a>(过期)</li>\n<li><a href=\"https://gitlab.idata.mobi/shengyiplus/syp-data-dictionary-portal\">DataDictionaryPortal</a>(过期)</li>\n<li><a href=\"https://gitlab.idata.mobi/shengyiplus/syp-android-tv\">AndroidTv</a></li>\n<li><a href=\"https://gitlab.idata.mobi/allergan/allerganScripts\">allerganScripts</a></li>\n</ul>\n<p><em>项目<code>README.md</code>中会说明开发分支、访问域名等信息。</em></p>\n<p><img src=\"/images/readme-domain-guides.png\" alt=\"readme-domain-guides\"></p>\n<h2 id=\"辅助项目\"><a href=\"#辅助项目\" class=\"headerlink\" title=\"辅助项目\"></a>辅助项目</h2><ul>\n<li><a href=\"https://gitlab.idata.mobi/syp-apps/sypctl\">SypCtl</a></li>\n<li><a href=\"https://gitlab.idata.mobi/shengyiplus/syp-utils\">SypUtils</a></li>\n<li><a href=\"https://gitlab.idata.mobi/shengyiplus/GitAutoPush\">GitAutoPush</a></li>\n<li><a href=\"https://gitlab.idata.mobi/shengyiplus/syp-documents\">SypDocument</a></li>\n<li><a href=\"https://gitlab.idata.mobi/shengyiplus/syp-webassets\">SypWebassets</a></li>\n<li><a href=\"https://gitlab.idata.mobi/shengyiplus/DdpScript\">DdpScript</a></li>\n</ul>\n<h2 id=\"域名-x2F-API\"><a href=\"#域名-x2F-API\" class=\"headerlink\" title=\"域名&#x2F;API\"></a>域名&#x2F;API</h2><ol>\n<li>所有域名均为 <code>*.idata.mobi</code> 二级域名</li>\n<li>所有域名均使用 <code>https</code> 协议</li>\n<li>域名分配规范</li>\n<li>CDN 域名 <code>cdn.idata.mobi</code>，过期域名<del>syp-cdn.idata.mobi</del></li>\n<li>API 域名 <code>api.idata.mobi</code>，过期域名<del>syp.idata.mobi</del></li>\n<li>Admin 域名 <code>admin.idata.mobi</code>, 过期域名<del>syp.idata.mobi</del></li>\n<li>Portal 域名 <code>portal.idata.mobi</code>, 过期域名<del>syp-cdn.idata.mobi</del></li>\n<li>开发环境追加 <code>-dev</code>，例 <code>api-dev.idata.mobi</code></li>\n<li>API 开发规范</li>\n<li>API 路由禁止出现项目<code>工程名称</code></li>\n<li>API 路由使用<strong>横线命名</strong>规范</li>\n<li><a href=\"/developer/api-design-guide.html\">更多 API 设计规范</a></li>\n</ol>\n<h2 id=\"菜单字段\"><a href=\"#菜单字段\" class=\"headerlink\" title=\"菜单字段\"></a>菜单字段</h2><p><a href=\"/developer/menu-guide.html\">业务菜单规范</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"思维导图\"><a href=\"#思维导图\" class=\"headerlink\" title=\"思维导图\"></a>思维导图</h2><p><img src=\"/images/%E6%BA%90%E7%A0%81%E4%BD%93%E7%B3%BB.png\" alt=\"源码体系\"></p>\n<p><em>注: attachments&#x2F;xmind&#x2F;源码体系.xmind</em></p>\n<h2 id=\"数据库运维\"><a href=\"#数据库运维\" class=\"headerlink\" title=\"数据库运维\"></a>数据库运维</h2><p>运维流程:</p>\n<ol start=\"0\">\n<li>项目源码 <a href=\"https://gitlab.idata.mobi/shengyiplus/syp-model-scripts\">ModelScripts</a></li>\n<li>定位模块对应的运维脚本，若没有请联系管理员</li>\n<li>在业务数据库测试确认功能运行正常</li>\n<li>运维到脚本中的<strong>代码可重复被执行</strong>，即运维脚本可重复执行</li>\n<li>运维脚本中<strong>不允许出现业务数据库名称</strong>，若有疑惑请联系管理员</li>\n<li>使用 <a href=\"/developer/style-guide/gitlab.html\">GAP 规范</a> 提交代码</li>\n<li>在 <a href=\"/developer/style-guide/gitlab.html#Gitlab-%E8%AF%B7%E6%B1%82%E5%90%88%E5%B9%B6\">Gitlab发起请求合并</a></li>\n</ol>\n<h2 id=\"业务项目\"><a href=\"#业务项目\" class=\"headerlink\" title=\"业务项目\"></a>业务项目</h2><p><strong>注意:</strong> 需要开发团队成员了解业务项目源码之间的关联、本地启动等操作，具备各项目基本的源码阅读能力。</p>\n<ul>\n<li><a href=\"https://gitlab.idata.mobi/shengyiplus/syp-java-admin\">JavaAdmin</a></li>\n<li><a href=\"https://gitlab.idata.mobi/shengyiplus/syp-api-server\">JavaAPI</a></li>\n<li><a href=\"https://gitlab.idata.mobi/shengyiplus/syp-model-scripts\">ModelScript</a></li>\n<li><a href=\"https://gitlab.idata.mobi/shengyiplus/syp-wxmp\">WXMP</a></li>\n<li><a href=\"https://gitlab.idata.mobi/shengyiplus/syp-web-portal\">WebPortal</a></li>\n<li><a href=\"https://gitlab.idata.mobi/shengyiplus/syp-report-portal\">ReportPortal</a>(过期)</li>\n<li><a href=\"https://gitlab.idata.mobi/shengyiplus/syp-data-dictionary-portal\">DataDictionaryPortal</a>(过期)</li>\n<li><a href=\"https://gitlab.idata.mobi/shengyiplus/syp-android-tv\">AndroidTv</a></li>\n<li><a href=\"https://gitlab.idata.mobi/allergan/allerganScripts\">allerganScripts</a></li>\n</ul>\n<p><em>项目<code>README.md</code>中会说明开发分支、访问域名等信息。</em></p>\n<p><img src=\"/images/readme-domain-guides.png\" alt=\"readme-domain-guides\"></p>\n<h2 id=\"辅助项目\"><a href=\"#辅助项目\" class=\"headerlink\" title=\"辅助项目\"></a>辅助项目</h2><ul>\n<li><a href=\"https://gitlab.idata.mobi/syp-apps/sypctl\">SypCtl</a></li>\n<li><a href=\"https://gitlab.idata.mobi/shengyiplus/syp-utils\">SypUtils</a></li>\n<li><a href=\"https://gitlab.idata.mobi/shengyiplus/GitAutoPush\">GitAutoPush</a></li>\n<li><a href=\"https://gitlab.idata.mobi/shengyiplus/syp-documents\">SypDocument</a></li>\n<li><a href=\"https://gitlab.idata.mobi/shengyiplus/syp-webassets\">SypWebassets</a></li>\n<li><a href=\"https://gitlab.idata.mobi/shengyiplus/DdpScript\">DdpScript</a></li>\n</ul>\n<h2 id=\"域名-x2F-API\"><a href=\"#域名-x2F-API\" class=\"headerlink\" title=\"域名&#x2F;API\"></a>域名&#x2F;API</h2><ol>\n<li>所有域名均为 <code>*.idata.mobi</code> 二级域名</li>\n<li>所有域名均使用 <code>https</code> 协议</li>\n<li>域名分配规范</li>\n<li>CDN 域名 <code>cdn.idata.mobi</code>，过期域名<del>syp-cdn.idata.mobi</del></li>\n<li>API 域名 <code>api.idata.mobi</code>，过期域名<del>syp.idata.mobi</del></li>\n<li>Admin 域名 <code>admin.idata.mobi</code>, 过期域名<del>syp.idata.mobi</del></li>\n<li>Portal 域名 <code>portal.idata.mobi</code>, 过期域名<del>syp-cdn.idata.mobi</del></li>\n<li>开发环境追加 <code>-dev</code>，例 <code>api-dev.idata.mobi</code></li>\n<li>API 开发规范</li>\n<li>API 路由禁止出现项目<code>工程名称</code></li>\n<li>API 路由使用<strong>横线命名</strong>规范</li>\n<li><a href=\"/developer/api-design-guide.html\">更多 API 设计规范</a></li>\n</ol>\n<h2 id=\"菜单字段\"><a href=\"#菜单字段\" class=\"headerlink\" title=\"菜单字段\"></a>菜单字段</h2><p><a href=\"/developer/menu-guide.html\">业务菜单规范</a></p>\n"},{"title":"RDC 接口","type":"RDC 接口","_content":"\n## 功能流程\n\n**RDC**(Remote Data Call) 接口是动态 API 的一种实现方式。\n\n![RDC功能流程图](/images/RDC功能流程图.png)\n\n*注: attachments/xmind/RDC功能流程图.xmind*\n\n## 请求流程\n\n![RDC请求流程图](/images/RDC请求流程图.png)\n\n*注: attachments/xmind/RDC请求流程图.xmind*\n\n## 开发规范\n\n### RDC 测试规范\n\n1. 业务相同问题，按正常 RDC 规划配置，开发过程即调试过程\n2. 练习、演示时，请创建**测试命名**的 RDC 分组，在该分组内练习\n\n### RDC 实例迁移\n\n在开发环境(D)、正式环境(P)迁移 RDC 用例时：(D->P)\n1. 注意**备份被迁移覆盖的 RDC 用例**(P)\n2. 在开发环境(D)选择要迁移的**RDC分组**, **导出** RDC 实例、SQL、存储过程\n3. 在正式环境(P)选择被覆盖的**RDC分组**, **导入** RDC 实例、SQL、存储过程导出包\n\n## 接口文档规范\n\n```\n## 接口业务描述\n\n- Method: get/post\n- RDC分组: ljhk1cte56b684c5vmjf24\n- RDC实例: RDC_0000001\n- RDC参数: \n    - params1: 类型，用途说明，示例\n    - params2: 类型，用途说明，示例\n\n- RDC响应体:\n\n  \\`\\`\\`\n  [\n    {\n      \"分类数\": 2867,\n      \"x\": \"乔雅登\",\n      \"总数\": 6929,\n      \"y\": 41.38\n    }\n  ]\n  \\`\\`\\`\n```\n\n## 常见问题\n\n### SQL 执行正常，但RDC 接口报错\n\n此时说明 RDC 单例配置的数据源有误，确认**执行SQL正常的数据源**与RDC 单例配置的数据源是否相同。\n- 若不相同，则配置为正确的数据源\n- 若数据源不存在则在【数据源管理】菜单中添加，然后选择该项","source":"developer/rdc-guide.md","raw":"---\ntitle: RDC 接口\ntype: RDC 接口\n---\n\n## 功能流程\n\n**RDC**(Remote Data Call) 接口是动态 API 的一种实现方式。\n\n![RDC功能流程图](/images/RDC功能流程图.png)\n\n*注: attachments/xmind/RDC功能流程图.xmind*\n\n## 请求流程\n\n![RDC请求流程图](/images/RDC请求流程图.png)\n\n*注: attachments/xmind/RDC请求流程图.xmind*\n\n## 开发规范\n\n### RDC 测试规范\n\n1. 业务相同问题，按正常 RDC 规划配置，开发过程即调试过程\n2. 练习、演示时，请创建**测试命名**的 RDC 分组，在该分组内练习\n\n### RDC 实例迁移\n\n在开发环境(D)、正式环境(P)迁移 RDC 用例时：(D->P)\n1. 注意**备份被迁移覆盖的 RDC 用例**(P)\n2. 在开发环境(D)选择要迁移的**RDC分组**, **导出** RDC 实例、SQL、存储过程\n3. 在正式环境(P)选择被覆盖的**RDC分组**, **导入** RDC 实例、SQL、存储过程导出包\n\n## 接口文档规范\n\n```\n## 接口业务描述\n\n- Method: get/post\n- RDC分组: ljhk1cte56b684c5vmjf24\n- RDC实例: RDC_0000001\n- RDC参数: \n    - params1: 类型，用途说明，示例\n    - params2: 类型，用途说明，示例\n\n- RDC响应体:\n\n  \\`\\`\\`\n  [\n    {\n      \"分类数\": 2867,\n      \"x\": \"乔雅登\",\n      \"总数\": 6929,\n      \"y\": 41.38\n    }\n  ]\n  \\`\\`\\`\n```\n\n## 常见问题\n\n### SQL 执行正常，但RDC 接口报错\n\n此时说明 RDC 单例配置的数据源有误，确认**执行SQL正常的数据源**与RDC 单例配置的数据源是否相同。\n- 若不相同，则配置为正确的数据源\n- 若数据源不存在则在【数据源管理】菜单中添加，然后选择该项","date":"2023-06-10T10:49:05.486Z","updated":"2023-06-10T10:49:05.486Z","path":"developer/rdc-guide.html","comments":1,"layout":"page","_id":"clipw1dcz000goix530pv8nyd","content":"<h2 id=\"功能流程\"><a href=\"#功能流程\" class=\"headerlink\" title=\"功能流程\"></a>功能流程</h2><p><strong>RDC</strong>(Remote Data Call) 接口是动态 API 的一种实现方式。</p>\n<p><img src=\"/images/RDC%E5%8A%9F%E8%83%BD%E6%B5%81%E7%A8%8B%E5%9B%BE.png\" alt=\"RDC功能流程图\"></p>\n<p><em>注: attachments&#x2F;xmind&#x2F;RDC功能流程图.xmind</em></p>\n<h2 id=\"请求流程\"><a href=\"#请求流程\" class=\"headerlink\" title=\"请求流程\"></a>请求流程</h2><p><img src=\"/images/RDC%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B%E5%9B%BE.png\" alt=\"RDC请求流程图\"></p>\n<p><em>注: attachments&#x2F;xmind&#x2F;RDC请求流程图.xmind</em></p>\n<h2 id=\"开发规范\"><a href=\"#开发规范\" class=\"headerlink\" title=\"开发规范\"></a>开发规范</h2><h3 id=\"RDC-测试规范\"><a href=\"#RDC-测试规范\" class=\"headerlink\" title=\"RDC 测试规范\"></a>RDC 测试规范</h3><ol>\n<li>业务相同问题，按正常 RDC 规划配置，开发过程即调试过程</li>\n<li>练习、演示时，请创建<strong>测试命名</strong>的 RDC 分组，在该分组内练习</li>\n</ol>\n<h3 id=\"RDC-实例迁移\"><a href=\"#RDC-实例迁移\" class=\"headerlink\" title=\"RDC 实例迁移\"></a>RDC 实例迁移</h3><p>在开发环境(D)、正式环境(P)迁移 RDC 用例时：(D-&gt;P)</p>\n<ol>\n<li>注意<strong>备份被迁移覆盖的 RDC 用例</strong>(P)</li>\n<li>在开发环境(D)选择要迁移的<strong>RDC分组</strong>, <strong>导出</strong> RDC 实例、SQL、存储过程</li>\n<li>在正式环境(P)选择被覆盖的<strong>RDC分组</strong>, <strong>导入</strong> RDC 实例、SQL、存储过程导出包</li>\n</ol>\n<h2 id=\"接口文档规范\"><a href=\"#接口文档规范\" class=\"headerlink\" title=\"接口文档规范\"></a>接口文档规范</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">## 接口业务描述<br><br>- Method: get/post<br>- RDC分组: ljhk1cte56b684c5vmjf24<br>- RDC实例: RDC_0000001<br>- RDC参数: <br>    - params1: 类型，用途说明，示例<br>    - params2: 类型，用途说明，示例<br><br>- RDC响应体:<br><br>  \\`\\`\\`<br>  [<br>    &#123;<br>      &quot;分类数&quot;: 2867,<br>      &quot;x&quot;: &quot;乔雅登&quot;,<br>      &quot;总数&quot;: 6929,<br>      &quot;y&quot;: 41.38<br>    &#125;<br>  ]<br>  \\`\\`\\`<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2><h3 id=\"SQL-执行正常，但RDC-接口报错\"><a href=\"#SQL-执行正常，但RDC-接口报错\" class=\"headerlink\" title=\"SQL 执行正常，但RDC 接口报错\"></a>SQL 执行正常，但RDC 接口报错</h3><p>此时说明 RDC 单例配置的数据源有误，确认<strong>执行SQL正常的数据源</strong>与RDC 单例配置的数据源是否相同。</p>\n<ul>\n<li>若不相同，则配置为正确的数据源</li>\n<li>若数据源不存在则在【数据源管理】菜单中添加，然后选择该项</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"功能流程\"><a href=\"#功能流程\" class=\"headerlink\" title=\"功能流程\"></a>功能流程</h2><p><strong>RDC</strong>(Remote Data Call) 接口是动态 API 的一种实现方式。</p>\n<p><img src=\"/images/RDC%E5%8A%9F%E8%83%BD%E6%B5%81%E7%A8%8B%E5%9B%BE.png\" alt=\"RDC功能流程图\"></p>\n<p><em>注: attachments&#x2F;xmind&#x2F;RDC功能流程图.xmind</em></p>\n<h2 id=\"请求流程\"><a href=\"#请求流程\" class=\"headerlink\" title=\"请求流程\"></a>请求流程</h2><p><img src=\"/images/RDC%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B%E5%9B%BE.png\" alt=\"RDC请求流程图\"></p>\n<p><em>注: attachments&#x2F;xmind&#x2F;RDC请求流程图.xmind</em></p>\n<h2 id=\"开发规范\"><a href=\"#开发规范\" class=\"headerlink\" title=\"开发规范\"></a>开发规范</h2><h3 id=\"RDC-测试规范\"><a href=\"#RDC-测试规范\" class=\"headerlink\" title=\"RDC 测试规范\"></a>RDC 测试规范</h3><ol>\n<li>业务相同问题，按正常 RDC 规划配置，开发过程即调试过程</li>\n<li>练习、演示时，请创建<strong>测试命名</strong>的 RDC 分组，在该分组内练习</li>\n</ol>\n<h3 id=\"RDC-实例迁移\"><a href=\"#RDC-实例迁移\" class=\"headerlink\" title=\"RDC 实例迁移\"></a>RDC 实例迁移</h3><p>在开发环境(D)、正式环境(P)迁移 RDC 用例时：(D-&gt;P)</p>\n<ol>\n<li>注意<strong>备份被迁移覆盖的 RDC 用例</strong>(P)</li>\n<li>在开发环境(D)选择要迁移的<strong>RDC分组</strong>, <strong>导出</strong> RDC 实例、SQL、存储过程</li>\n<li>在正式环境(P)选择被覆盖的<strong>RDC分组</strong>, <strong>导入</strong> RDC 实例、SQL、存储过程导出包</li>\n</ol>\n<h2 id=\"接口文档规范\"><a href=\"#接口文档规范\" class=\"headerlink\" title=\"接口文档规范\"></a>接口文档规范</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">## 接口业务描述<br><br>- Method: get/post<br>- RDC分组: ljhk1cte56b684c5vmjf24<br>- RDC实例: RDC_0000001<br>- RDC参数: <br>    - params1: 类型，用途说明，示例<br>    - params2: 类型，用途说明，示例<br><br>- RDC响应体:<br><br>  \\`\\`\\`<br>  [<br>    &#123;<br>      &quot;分类数&quot;: 2867,<br>      &quot;x&quot;: &quot;乔雅登&quot;,<br>      &quot;总数&quot;: 6929,<br>      &quot;y&quot;: 41.38<br>    &#125;<br>  ]<br>  \\`\\`\\`<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2><h3 id=\"SQL-执行正常，但RDC-接口报错\"><a href=\"#SQL-执行正常，但RDC-接口报错\" class=\"headerlink\" title=\"SQL 执行正常，但RDC 接口报错\"></a>SQL 执行正常，但RDC 接口报错</h3><p>此时说明 RDC 单例配置的数据源有误，确认<strong>执行SQL正常的数据源</strong>与RDC 单例配置的数据源是否相同。</p>\n<ul>\n<li>若不相同，则配置为正确的数据源</li>\n<li>若数据源不存在则在【数据源管理】菜单中添加，然后选择该项</li>\n</ul>\n"},{"title":"SypCtl 工具","type":"SypCtl 工具","_content":"\n`SypCtl` 是为了实现对八爪鱼项目及团队其他依赖的技术框架进行环境部署、版本管理、快捷调度、服务守护、日志监控、异常通知、数据备份等一系列围绕提升团队开发效率、加固运维能力、提升服务稳定能力而定制的运维工具。\n\n## 一键部署\n\n- 兼容性：当前版本仅兼容适配 Darwin/CentOS7\n- 编程语言: `ruby`, `Bash Shell`\n\n```\n# Linux\n$ curl -sS http://gitlab.idata.mobi/syp-apps/sypctl/raw/dev-0.1-master/env.sh | bash\n# Darwin\n$ curl -sS http://gitlab.idata.mobi/syp-apps/sypctl/raw/dev-0.1-master/darwin-env.sh | bash\n```\n\n\n## 使用手册\n\n```\n$ sypctl help\nUsage: sypctl <command> [args]\n\n常规操作:\nsypctl help              帮助说明\nsypctl upgrade           更新源码\nsypctl upgrade:force     强制更新\nsypctl deploy            部署服务引导（删除会自动部署）\nsypctl deployed          查看已部署服务\nsypctl report            设备/MySQL状态\nsypctl sync:device       更新重新提交设备信息\n\nsypctl agent   help      #代理# 配置\nsypctl toolkit help      #工具# 箱\nsypctl service help      #服务# 管理\nsypctl backup:file  help #备份文件# 工具\nsypctl backup:mysql help #备份MySQL# 工具\nsypctl sync:mysql   help #迁移MySQL# 工具\n\n命令缩写:\nsypctl service -> syps\nsypctl toolkit -> sypt\n\n\n  mmmm m     m mmmmm    mmm mmmmmmm m\n #\"   \" \"m m\"  #   \"# m\"   \"   #    #\n \"#mmm   \"#\"   #mmm#\" #        #    #\n     \"#   #    #      #        #    #\n \"mmm#\"   #    #       \"mmm\"   #    #mmmmm\n\nCurrent version is 0.2.26/48\nFor full documentation, see: https://gitlab.idata.mobi/syp-apps/sypctl.git\n```\n\n## 备份方案\n\n![SypCtl三级备份方案.png](/images/SypCtl三级备份方案.png)\n\n*注: attachments/xmind/SypCtl三级备份方案.xmind*\n\n## 功能结构\n\n![SypCtl功能结构.png](/images/SypCtl功能结构.png)\n\n*注: attachments/xmind/SypCtl功能结构.xmind*\n\n## SypCtl 体系:\n\n- [sypctl](https://gitlab.idata.mobi/syp-apps/sypctl)\n- [sypctl server](https://gitlab.idata.mobi/syp-apps/sypctl-server)\n- [sypctl sync](https://gitlab.idata.mobi/syp-apps/sypctl/tree/dev-backup-script)\n\n### SypCtl 服务器\n\n配置档备份列表及下载入口：\n![SypCtlServer-BackupFile.png](/images/SypCtlServer-BackupFile.png)\n\n数据库备份列表及下载入口：\n![SypCtlServer-BackupMySQL.png](/images/SypCtlServer-BackupMySQL.png)\n\n服务/进程查看界面：\n![SypCtlServer-ServiceStatus.png](/images/SypCtlServer-ServiceStatus.png)\n\n命令行查看服务状态：\n![SypCtl-ServiceStatus.png](/images/SypCtl-ServiceStatus.png)\n\n代理端日志查看界面：\n![SypCtlServer-AgentLog.png](/images/SypCtlServer-AgentLog.png)\n\n### SypCtl 恢复 GitLab\n\n![SypCtlSync演示.png](/images/SypCtlSync演示.png)\n\n### SypEtl 监控/日志\n\n![SypEtl-MonitorLog.png](/images/SypEtl-MonitorLog.png)\n\n\n\n\n","source":"developer/sypctl-readme.md","raw":"---\ntitle: SypCtl 工具\ntype: SypCtl 工具\n---\n\n`SypCtl` 是为了实现对八爪鱼项目及团队其他依赖的技术框架进行环境部署、版本管理、快捷调度、服务守护、日志监控、异常通知、数据备份等一系列围绕提升团队开发效率、加固运维能力、提升服务稳定能力而定制的运维工具。\n\n## 一键部署\n\n- 兼容性：当前版本仅兼容适配 Darwin/CentOS7\n- 编程语言: `ruby`, `Bash Shell`\n\n```\n# Linux\n$ curl -sS http://gitlab.idata.mobi/syp-apps/sypctl/raw/dev-0.1-master/env.sh | bash\n# Darwin\n$ curl -sS http://gitlab.idata.mobi/syp-apps/sypctl/raw/dev-0.1-master/darwin-env.sh | bash\n```\n\n\n## 使用手册\n\n```\n$ sypctl help\nUsage: sypctl <command> [args]\n\n常规操作:\nsypctl help              帮助说明\nsypctl upgrade           更新源码\nsypctl upgrade:force     强制更新\nsypctl deploy            部署服务引导（删除会自动部署）\nsypctl deployed          查看已部署服务\nsypctl report            设备/MySQL状态\nsypctl sync:device       更新重新提交设备信息\n\nsypctl agent   help      #代理# 配置\nsypctl toolkit help      #工具# 箱\nsypctl service help      #服务# 管理\nsypctl backup:file  help #备份文件# 工具\nsypctl backup:mysql help #备份MySQL# 工具\nsypctl sync:mysql   help #迁移MySQL# 工具\n\n命令缩写:\nsypctl service -> syps\nsypctl toolkit -> sypt\n\n\n  mmmm m     m mmmmm    mmm mmmmmmm m\n #\"   \" \"m m\"  #   \"# m\"   \"   #    #\n \"#mmm   \"#\"   #mmm#\" #        #    #\n     \"#   #    #      #        #    #\n \"mmm#\"   #    #       \"mmm\"   #    #mmmmm\n\nCurrent version is 0.2.26/48\nFor full documentation, see: https://gitlab.idata.mobi/syp-apps/sypctl.git\n```\n\n## 备份方案\n\n![SypCtl三级备份方案.png](/images/SypCtl三级备份方案.png)\n\n*注: attachments/xmind/SypCtl三级备份方案.xmind*\n\n## 功能结构\n\n![SypCtl功能结构.png](/images/SypCtl功能结构.png)\n\n*注: attachments/xmind/SypCtl功能结构.xmind*\n\n## SypCtl 体系:\n\n- [sypctl](https://gitlab.idata.mobi/syp-apps/sypctl)\n- [sypctl server](https://gitlab.idata.mobi/syp-apps/sypctl-server)\n- [sypctl sync](https://gitlab.idata.mobi/syp-apps/sypctl/tree/dev-backup-script)\n\n### SypCtl 服务器\n\n配置档备份列表及下载入口：\n![SypCtlServer-BackupFile.png](/images/SypCtlServer-BackupFile.png)\n\n数据库备份列表及下载入口：\n![SypCtlServer-BackupMySQL.png](/images/SypCtlServer-BackupMySQL.png)\n\n服务/进程查看界面：\n![SypCtlServer-ServiceStatus.png](/images/SypCtlServer-ServiceStatus.png)\n\n命令行查看服务状态：\n![SypCtl-ServiceStatus.png](/images/SypCtl-ServiceStatus.png)\n\n代理端日志查看界面：\n![SypCtlServer-AgentLog.png](/images/SypCtlServer-AgentLog.png)\n\n### SypCtl 恢复 GitLab\n\n![SypCtlSync演示.png](/images/SypCtlSync演示.png)\n\n### SypEtl 监控/日志\n\n![SypEtl-MonitorLog.png](/images/SypEtl-MonitorLog.png)\n\n\n\n\n","date":"2023-06-10T10:49:05.489Z","updated":"2023-06-10T10:49:05.489Z","path":"developer/sypctl-readme.html","comments":1,"layout":"page","_id":"clipw1dd0000hoix5877c9r5f","content":"<p><code>SypCtl</code> 是为了实现对八爪鱼项目及团队其他依赖的技术框架进行环境部署、版本管理、快捷调度、服务守护、日志监控、异常通知、数据备份等一系列围绕提升团队开发效率、加固运维能力、提升服务稳定能力而定制的运维工具。</p>\n<h2 id=\"一键部署\"><a href=\"#一键部署\" class=\"headerlink\" title=\"一键部署\"></a>一键部署</h2><ul>\n<li>兼容性：当前版本仅兼容适配 Darwin&#x2F;CentOS7</li>\n<li>编程语言: <code>ruby</code>, <code>Bash Shell</code></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\"># Linux<br>$ curl -sS http://gitlab.idata.mobi/syp-apps/sypctl/raw/dev-0.1-master/env.sh | bash<br># Darwin<br>$ curl -sS http://gitlab.idata.mobi/syp-apps/sypctl/raw/dev-0.1-master/darwin-env.sh | bash<br></code></pre></td></tr></table></figure>\n\n\n<h2 id=\"使用手册\"><a href=\"#使用手册\" class=\"headerlink\" title=\"使用手册\"></a>使用手册</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">$ sypctl help<br>Usage: sypctl &lt;command&gt; [args]<br><br>常规操作:<br>sypctl help              帮助说明<br>sypctl upgrade           更新源码<br>sypctl upgrade:force     强制更新<br>sypctl deploy            部署服务引导（删除会自动部署）<br>sypctl deployed          查看已部署服务<br>sypctl report            设备/MySQL状态<br>sypctl sync:device       更新重新提交设备信息<br><br>sypctl agent   help      #代理# 配置<br>sypctl toolkit help      #工具# 箱<br>sypctl service help      #服务# 管理<br>sypctl backup:file  help #备份文件# 工具<br>sypctl backup:mysql help #备份MySQL# 工具<br>sypctl sync:mysql   help #迁移MySQL# 工具<br><br>命令缩写:<br>sypctl service -&gt; syps<br>sypctl toolkit -&gt; sypt<br><br><br>  mmmm m     m mmmmm    mmm mmmmmmm m<br> #&quot;   &quot; &quot;m m&quot;  #   &quot;# m&quot;   &quot;   #    #<br> &quot;#mmm   &quot;#&quot;   #mmm#&quot; #        #    #<br>     &quot;#   #    #      #        #    #<br> &quot;mmm#&quot;   #    #       &quot;mmm&quot;   #    #mmmmm<br><br>Current version is 0.2.26/48<br>For full documentation, see: https://gitlab.idata.mobi/syp-apps/sypctl.git<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"备份方案\"><a href=\"#备份方案\" class=\"headerlink\" title=\"备份方案\"></a>备份方案</h2><p><img src=\"/images/SypCtl%E4%B8%89%E7%BA%A7%E5%A4%87%E4%BB%BD%E6%96%B9%E6%A1%88.png\" alt=\"SypCtl三级备份方案.png\"></p>\n<p><em>注: attachments&#x2F;xmind&#x2F;SypCtl三级备份方案.xmind</em></p>\n<h2 id=\"功能结构\"><a href=\"#功能结构\" class=\"headerlink\" title=\"功能结构\"></a>功能结构</h2><p><img src=\"/images/SypCtl%E5%8A%9F%E8%83%BD%E7%BB%93%E6%9E%84.png\" alt=\"SypCtl功能结构.png\"></p>\n<p><em>注: attachments&#x2F;xmind&#x2F;SypCtl功能结构.xmind</em></p>\n<h2 id=\"SypCtl-体系\"><a href=\"#SypCtl-体系\" class=\"headerlink\" title=\"SypCtl 体系:\"></a>SypCtl 体系:</h2><ul>\n<li><a href=\"https://gitlab.idata.mobi/syp-apps/sypctl\">sypctl</a></li>\n<li><a href=\"https://gitlab.idata.mobi/syp-apps/sypctl-server\">sypctl server</a></li>\n<li><a href=\"https://gitlab.idata.mobi/syp-apps/sypctl/tree/dev-backup-script\">sypctl sync</a></li>\n</ul>\n<h3 id=\"SypCtl-服务器\"><a href=\"#SypCtl-服务器\" class=\"headerlink\" title=\"SypCtl 服务器\"></a>SypCtl 服务器</h3><p>配置档备份列表及下载入口：<br><img src=\"/images/SypCtlServer-BackupFile.png\" alt=\"SypCtlServer-BackupFile.png\"></p>\n<p>数据库备份列表及下载入口：<br><img src=\"/images/SypCtlServer-BackupMySQL.png\" alt=\"SypCtlServer-BackupMySQL.png\"></p>\n<p>服务&#x2F;进程查看界面：<br><img src=\"/images/SypCtlServer-ServiceStatus.png\" alt=\"SypCtlServer-ServiceStatus.png\"></p>\n<p>命令行查看服务状态：<br><img src=\"/images/SypCtl-ServiceStatus.png\" alt=\"SypCtl-ServiceStatus.png\"></p>\n<p>代理端日志查看界面：<br><img src=\"/images/SypCtlServer-AgentLog.png\" alt=\"SypCtlServer-AgentLog.png\"></p>\n<h3 id=\"SypCtl-恢复-GitLab\"><a href=\"#SypCtl-恢复-GitLab\" class=\"headerlink\" title=\"SypCtl 恢复 GitLab\"></a>SypCtl 恢复 GitLab</h3><p><img src=\"/images/SypCtlSync%E6%BC%94%E7%A4%BA.png\" alt=\"SypCtlSync演示.png\"></p>\n<h3 id=\"SypEtl-监控-x2F-日志\"><a href=\"#SypEtl-监控-x2F-日志\" class=\"headerlink\" title=\"SypEtl 监控&#x2F;日志\"></a>SypEtl 监控&#x2F;日志</h3><p><img src=\"/images/SypEtl-MonitorLog.png\" alt=\"SypEtl-MonitorLog.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><code>SypCtl</code> 是为了实现对八爪鱼项目及团队其他依赖的技术框架进行环境部署、版本管理、快捷调度、服务守护、日志监控、异常通知、数据备份等一系列围绕提升团队开发效率、加固运维能力、提升服务稳定能力而定制的运维工具。</p>\n<h2 id=\"一键部署\"><a href=\"#一键部署\" class=\"headerlink\" title=\"一键部署\"></a>一键部署</h2><ul>\n<li>兼容性：当前版本仅兼容适配 Darwin&#x2F;CentOS7</li>\n<li>编程语言: <code>ruby</code>, <code>Bash Shell</code></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\"># Linux<br>$ curl -sS http://gitlab.idata.mobi/syp-apps/sypctl/raw/dev-0.1-master/env.sh | bash<br># Darwin<br>$ curl -sS http://gitlab.idata.mobi/syp-apps/sypctl/raw/dev-0.1-master/darwin-env.sh | bash<br></code></pre></td></tr></table></figure>\n\n\n<h2 id=\"使用手册\"><a href=\"#使用手册\" class=\"headerlink\" title=\"使用手册\"></a>使用手册</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">$ sypctl help<br>Usage: sypctl &lt;command&gt; [args]<br><br>常规操作:<br>sypctl help              帮助说明<br>sypctl upgrade           更新源码<br>sypctl upgrade:force     强制更新<br>sypctl deploy            部署服务引导（删除会自动部署）<br>sypctl deployed          查看已部署服务<br>sypctl report            设备/MySQL状态<br>sypctl sync:device       更新重新提交设备信息<br><br>sypctl agent   help      #代理# 配置<br>sypctl toolkit help      #工具# 箱<br>sypctl service help      #服务# 管理<br>sypctl backup:file  help #备份文件# 工具<br>sypctl backup:mysql help #备份MySQL# 工具<br>sypctl sync:mysql   help #迁移MySQL# 工具<br><br>命令缩写:<br>sypctl service -&gt; syps<br>sypctl toolkit -&gt; sypt<br><br><br>  mmmm m     m mmmmm    mmm mmmmmmm m<br> #&quot;   &quot; &quot;m m&quot;  #   &quot;# m&quot;   &quot;   #    #<br> &quot;#mmm   &quot;#&quot;   #mmm#&quot; #        #    #<br>     &quot;#   #    #      #        #    #<br> &quot;mmm#&quot;   #    #       &quot;mmm&quot;   #    #mmmmm<br><br>Current version is 0.2.26/48<br>For full documentation, see: https://gitlab.idata.mobi/syp-apps/sypctl.git<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"备份方案\"><a href=\"#备份方案\" class=\"headerlink\" title=\"备份方案\"></a>备份方案</h2><p><img src=\"/images/SypCtl%E4%B8%89%E7%BA%A7%E5%A4%87%E4%BB%BD%E6%96%B9%E6%A1%88.png\" alt=\"SypCtl三级备份方案.png\"></p>\n<p><em>注: attachments&#x2F;xmind&#x2F;SypCtl三级备份方案.xmind</em></p>\n<h2 id=\"功能结构\"><a href=\"#功能结构\" class=\"headerlink\" title=\"功能结构\"></a>功能结构</h2><p><img src=\"/images/SypCtl%E5%8A%9F%E8%83%BD%E7%BB%93%E6%9E%84.png\" alt=\"SypCtl功能结构.png\"></p>\n<p><em>注: attachments&#x2F;xmind&#x2F;SypCtl功能结构.xmind</em></p>\n<h2 id=\"SypCtl-体系\"><a href=\"#SypCtl-体系\" class=\"headerlink\" title=\"SypCtl 体系:\"></a>SypCtl 体系:</h2><ul>\n<li><a href=\"https://gitlab.idata.mobi/syp-apps/sypctl\">sypctl</a></li>\n<li><a href=\"https://gitlab.idata.mobi/syp-apps/sypctl-server\">sypctl server</a></li>\n<li><a href=\"https://gitlab.idata.mobi/syp-apps/sypctl/tree/dev-backup-script\">sypctl sync</a></li>\n</ul>\n<h3 id=\"SypCtl-服务器\"><a href=\"#SypCtl-服务器\" class=\"headerlink\" title=\"SypCtl 服务器\"></a>SypCtl 服务器</h3><p>配置档备份列表及下载入口：<br><img src=\"/images/SypCtlServer-BackupFile.png\" alt=\"SypCtlServer-BackupFile.png\"></p>\n<p>数据库备份列表及下载入口：<br><img src=\"/images/SypCtlServer-BackupMySQL.png\" alt=\"SypCtlServer-BackupMySQL.png\"></p>\n<p>服务&#x2F;进程查看界面：<br><img src=\"/images/SypCtlServer-ServiceStatus.png\" alt=\"SypCtlServer-ServiceStatus.png\"></p>\n<p>命令行查看服务状态：<br><img src=\"/images/SypCtl-ServiceStatus.png\" alt=\"SypCtl-ServiceStatus.png\"></p>\n<p>代理端日志查看界面：<br><img src=\"/images/SypCtlServer-AgentLog.png\" alt=\"SypCtlServer-AgentLog.png\"></p>\n<h3 id=\"SypCtl-恢复-GitLab\"><a href=\"#SypCtl-恢复-GitLab\" class=\"headerlink\" title=\"SypCtl 恢复 GitLab\"></a>SypCtl 恢复 GitLab</h3><p><img src=\"/images/SypCtlSync%E6%BC%94%E7%A4%BA.png\" alt=\"SypCtlSync演示.png\"></p>\n<h3 id=\"SypEtl-监控-x2F-日志\"><a href=\"#SypEtl-监控-x2F-日志\" class=\"headerlink\" title=\"SypEtl 监控&#x2F;日志\"></a>SypEtl 监控&#x2F;日志</h3><p><img src=\"/images/SypEtl-MonitorLog.png\" alt=\"SypEtl-MonitorLog.png\"></p>\n"},{"title":"在线文档","type":"在线文档","_content":"\n## 文档说明\n\n该站点基于 [Hexo](https://hexo.io) 构建而成。网站内容在 `src` 文件夹内，格式为 Markdown。欢迎 issue 或 pull request。\n\n在线地址：[doc.idata.mobi](https://docs.idata.mobi)\n\n## 贡献内容\n\n- 步骤1: 注册 [团队gitlab](https://gitlab.idata.mobi)\n- 步骤2: 向团队申请[项目 syp-documents](https://gitlab.idata.mobi/shengyiplus/syp-documents) 开发权限\n- 步骤3: 本地生成 sshkey\n- 步骤4: 在 gitlab 账号 ssh 设置项中添加本地 sshkey\n- 步骤5: 拉取 syp-documents 项目源码\n- 步骤6: 贡献内容\n- 步骤7: 使用 [gap 规范](/developer/style-guide/gitlab.html) 提交\n- 步骤8: 申请合并\n- 步骤9: 管理员审核通过、并发布内容\n- 步骤10: 在线文档[doc.idata.mobi](https://docs.idata.mobi) 中查看自己的贡献内容\n\n``` bash\n$ git clone git@gitlab.idata.mobi:shengyiplus/syp-documents.git\n\n$ cd syp-documents\n$ npm install\n$ npm run start # 本地浏览: http://localhost:4000\n\n# 编译文章\n$ npm run build\n\n# 提交代码\n$ npm run gap <type> <module> <message>\n\n# 提交 pull-request\n```\n\n## 图片说明\n\n为了更直观的表述自己的想法、理念，往往一图胜千言，为了保持思维导图的沉淀式更新，需要注意以下几点:\n\n1. 图片存放在本项目内 `src/images/`\n2. 图片名称与业务描述相关，方便维护、清理\n3. 图片原型(xmind/axure/或其他)维护在 `attachments/{xmind,axure}`\n\n示意效果图:\n![图片原型路径说明](/images/图片原型路径说明.png)\n\n## `gap` 命令\n\n1. 所有项目源码根目录下都有版本配置档 `version.json`\n\n```\n{\n    \"name\": \"胜因学院在线文档\",\n    \"major:description\": \"产品版本\",\n    \"minor:description\": \"业务版本\",\n    \"tiny:description\": \"线上版本，每次发布上线时 +1\",\n    \"commit:description\": \"开发版本，每次 commit 时 +1\",\n    \"major\": 0,\n    \"minor\": 1,\n    \"tiny\": 1,\n    \"commit\": 3,\n    \"pro_mini_version\": \"0.1.1\",\n    \"pro_version\": \"0.1.1/3\",\n    \"dev_version\": \"0.1.3\"\n}\n```\n\n2. 使用 `gap` 操作的 commit 行为都会修改 `version.json` 中 `commit` +1\n3. `gap` 命令符合[Gitlab提交规范](/developer/style-guide/gitlab.html), 减少冗余输入","source":"corporate-culture/online-documents.md","raw":"---\ntitle: 在线文档\ntype: 在线文档\n---\n\n## 文档说明\n\n该站点基于 [Hexo](https://hexo.io) 构建而成。网站内容在 `src` 文件夹内，格式为 Markdown。欢迎 issue 或 pull request。\n\n在线地址：[doc.idata.mobi](https://docs.idata.mobi)\n\n## 贡献内容\n\n- 步骤1: 注册 [团队gitlab](https://gitlab.idata.mobi)\n- 步骤2: 向团队申请[项目 syp-documents](https://gitlab.idata.mobi/shengyiplus/syp-documents) 开发权限\n- 步骤3: 本地生成 sshkey\n- 步骤4: 在 gitlab 账号 ssh 设置项中添加本地 sshkey\n- 步骤5: 拉取 syp-documents 项目源码\n- 步骤6: 贡献内容\n- 步骤7: 使用 [gap 规范](/developer/style-guide/gitlab.html) 提交\n- 步骤8: 申请合并\n- 步骤9: 管理员审核通过、并发布内容\n- 步骤10: 在线文档[doc.idata.mobi](https://docs.idata.mobi) 中查看自己的贡献内容\n\n``` bash\n$ git clone git@gitlab.idata.mobi:shengyiplus/syp-documents.git\n\n$ cd syp-documents\n$ npm install\n$ npm run start # 本地浏览: http://localhost:4000\n\n# 编译文章\n$ npm run build\n\n# 提交代码\n$ npm run gap <type> <module> <message>\n\n# 提交 pull-request\n```\n\n## 图片说明\n\n为了更直观的表述自己的想法、理念，往往一图胜千言，为了保持思维导图的沉淀式更新，需要注意以下几点:\n\n1. 图片存放在本项目内 `src/images/`\n2. 图片名称与业务描述相关，方便维护、清理\n3. 图片原型(xmind/axure/或其他)维护在 `attachments/{xmind,axure}`\n\n示意效果图:\n![图片原型路径说明](/images/图片原型路径说明.png)\n\n## `gap` 命令\n\n1. 所有项目源码根目录下都有版本配置档 `version.json`\n\n```\n{\n    \"name\": \"胜因学院在线文档\",\n    \"major:description\": \"产品版本\",\n    \"minor:description\": \"业务版本\",\n    \"tiny:description\": \"线上版本，每次发布上线时 +1\",\n    \"commit:description\": \"开发版本，每次 commit 时 +1\",\n    \"major\": 0,\n    \"minor\": 1,\n    \"tiny\": 1,\n    \"commit\": 3,\n    \"pro_mini_version\": \"0.1.1\",\n    \"pro_version\": \"0.1.1/3\",\n    \"dev_version\": \"0.1.3\"\n}\n```\n\n2. 使用 `gap` 操作的 commit 行为都会修改 `version.json` 中 `commit` +1\n3. `gap` 命令符合[Gitlab提交规范](/developer/style-guide/gitlab.html), 减少冗余输入","date":"2023-06-10T10:49:05.484Z","updated":"2023-06-10T10:49:05.484Z","path":"corporate-culture/online-documents.html","comments":1,"layout":"page","_id":"clipw1dd0000ioix5afgoa5um","content":"<h2 id=\"文档说明\"><a href=\"#文档说明\" class=\"headerlink\" title=\"文档说明\"></a>文档说明</h2><p>该站点基于 <a href=\"https://hexo.io/\">Hexo</a> 构建而成。网站内容在 <code>src</code> 文件夹内，格式为 Markdown。欢迎 issue 或 pull request。</p>\n<p>在线地址：<a href=\"https://docs.idata.mobi/\">doc.idata.mobi</a></p>\n<h2 id=\"贡献内容\"><a href=\"#贡献内容\" class=\"headerlink\" title=\"贡献内容\"></a>贡献内容</h2><ul>\n<li>步骤1: 注册 <a href=\"https://gitlab.idata.mobi/\">团队gitlab</a></li>\n<li>步骤2: 向团队申请<a href=\"https://gitlab.idata.mobi/shengyiplus/syp-documents\">项目 syp-documents</a> 开发权限</li>\n<li>步骤3: 本地生成 sshkey</li>\n<li>步骤4: 在 gitlab 账号 ssh 设置项中添加本地 sshkey</li>\n<li>步骤5: 拉取 syp-documents 项目源码</li>\n<li>步骤6: 贡献内容</li>\n<li>步骤7: 使用 <a href=\"/developer/style-guide/gitlab.html\">gap 规范</a> 提交</li>\n<li>步骤8: 申请合并</li>\n<li>步骤9: 管理员审核通过、并发布内容</li>\n<li>步骤10: 在线文档<a href=\"https://docs.idata.mobi/\">doc.idata.mobi</a> 中查看自己的贡献内容</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">$ git <span class=\"hljs-built_in\">clone</span> git@gitlab.idata.mobi:shengyiplus/syp-documents.git<br><br>$ <span class=\"hljs-built_in\">cd</span> syp-documents<br>$ npm install<br>$ npm run start <span class=\"hljs-comment\"># 本地浏览: http://localhost:4000</span><br><br><span class=\"hljs-comment\"># 编译文章</span><br>$ npm run build<br><br><span class=\"hljs-comment\"># 提交代码</span><br>$ npm run gap &lt;<span class=\"hljs-built_in\">type</span>&gt; &lt;module&gt; &lt;message&gt;<br><br><span class=\"hljs-comment\"># 提交 pull-request</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"图片说明\"><a href=\"#图片说明\" class=\"headerlink\" title=\"图片说明\"></a>图片说明</h2><p>为了更直观的表述自己的想法、理念，往往一图胜千言，为了保持思维导图的沉淀式更新，需要注意以下几点:</p>\n<ol>\n<li>图片存放在本项目内 <code>src/images/</code></li>\n<li>图片名称与业务描述相关，方便维护、清理</li>\n<li>图片原型(xmind&#x2F;axure&#x2F;或其他)维护在 <code>attachments/&#123;xmind,axure&#125;</code></li>\n</ol>\n<p>示意效果图:<br><img src=\"/images/%E5%9B%BE%E7%89%87%E5%8E%9F%E5%9E%8B%E8%B7%AF%E5%BE%84%E8%AF%B4%E6%98%8E.png\" alt=\"图片原型路径说明\"></p>\n<h2 id=\"gap-命令\"><a href=\"#gap-命令\" class=\"headerlink\" title=\"gap 命令\"></a><code>gap</code> 命令</h2><ol>\n<li>所有项目源码根目录下都有版本配置档 <code>version.json</code></li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&#123;<br>    &quot;name&quot;: &quot;胜因学院在线文档&quot;,<br>    &quot;major:description&quot;: &quot;产品版本&quot;,<br>    &quot;minor:description&quot;: &quot;业务版本&quot;,<br>    &quot;tiny:description&quot;: &quot;线上版本，每次发布上线时 +1&quot;,<br>    &quot;commit:description&quot;: &quot;开发版本，每次 commit 时 +1&quot;,<br>    &quot;major&quot;: 0,<br>    &quot;minor&quot;: 1,<br>    &quot;tiny&quot;: 1,<br>    &quot;commit&quot;: 3,<br>    &quot;pro_mini_version&quot;: &quot;0.1.1&quot;,<br>    &quot;pro_version&quot;: &quot;0.1.1/3&quot;,<br>    &quot;dev_version&quot;: &quot;0.1.3&quot;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用 <code>gap</code> 操作的 commit 行为都会修改 <code>version.json</code> 中 <code>commit</code> +1</li>\n<li><code>gap</code> 命令符合<a href=\"/developer/style-guide/gitlab.html\">Gitlab提交规范</a>, 减少冗余输入</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"文档说明\"><a href=\"#文档说明\" class=\"headerlink\" title=\"文档说明\"></a>文档说明</h2><p>该站点基于 <a href=\"https://hexo.io/\">Hexo</a> 构建而成。网站内容在 <code>src</code> 文件夹内，格式为 Markdown。欢迎 issue 或 pull request。</p>\n<p>在线地址：<a href=\"https://docs.idata.mobi/\">doc.idata.mobi</a></p>\n<h2 id=\"贡献内容\"><a href=\"#贡献内容\" class=\"headerlink\" title=\"贡献内容\"></a>贡献内容</h2><ul>\n<li>步骤1: 注册 <a href=\"https://gitlab.idata.mobi/\">团队gitlab</a></li>\n<li>步骤2: 向团队申请<a href=\"https://gitlab.idata.mobi/shengyiplus/syp-documents\">项目 syp-documents</a> 开发权限</li>\n<li>步骤3: 本地生成 sshkey</li>\n<li>步骤4: 在 gitlab 账号 ssh 设置项中添加本地 sshkey</li>\n<li>步骤5: 拉取 syp-documents 项目源码</li>\n<li>步骤6: 贡献内容</li>\n<li>步骤7: 使用 <a href=\"/developer/style-guide/gitlab.html\">gap 规范</a> 提交</li>\n<li>步骤8: 申请合并</li>\n<li>步骤9: 管理员审核通过、并发布内容</li>\n<li>步骤10: 在线文档<a href=\"https://docs.idata.mobi/\">doc.idata.mobi</a> 中查看自己的贡献内容</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">$ git <span class=\"hljs-built_in\">clone</span> git@gitlab.idata.mobi:shengyiplus/syp-documents.git<br><br>$ <span class=\"hljs-built_in\">cd</span> syp-documents<br>$ npm install<br>$ npm run start <span class=\"hljs-comment\"># 本地浏览: http://localhost:4000</span><br><br><span class=\"hljs-comment\"># 编译文章</span><br>$ npm run build<br><br><span class=\"hljs-comment\"># 提交代码</span><br>$ npm run gap &lt;<span class=\"hljs-built_in\">type</span>&gt; &lt;module&gt; &lt;message&gt;<br><br><span class=\"hljs-comment\"># 提交 pull-request</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"图片说明\"><a href=\"#图片说明\" class=\"headerlink\" title=\"图片说明\"></a>图片说明</h2><p>为了更直观的表述自己的想法、理念，往往一图胜千言，为了保持思维导图的沉淀式更新，需要注意以下几点:</p>\n<ol>\n<li>图片存放在本项目内 <code>src/images/</code></li>\n<li>图片名称与业务描述相关，方便维护、清理</li>\n<li>图片原型(xmind&#x2F;axure&#x2F;或其他)维护在 <code>attachments/&#123;xmind,axure&#125;</code></li>\n</ol>\n<p>示意效果图:<br><img src=\"/images/%E5%9B%BE%E7%89%87%E5%8E%9F%E5%9E%8B%E8%B7%AF%E5%BE%84%E8%AF%B4%E6%98%8E.png\" alt=\"图片原型路径说明\"></p>\n<h2 id=\"gap-命令\"><a href=\"#gap-命令\" class=\"headerlink\" title=\"gap 命令\"></a><code>gap</code> 命令</h2><ol>\n<li>所有项目源码根目录下都有版本配置档 <code>version.json</code></li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&#123;<br>    &quot;name&quot;: &quot;胜因学院在线文档&quot;,<br>    &quot;major:description&quot;: &quot;产品版本&quot;,<br>    &quot;minor:description&quot;: &quot;业务版本&quot;,<br>    &quot;tiny:description&quot;: &quot;线上版本，每次发布上线时 +1&quot;,<br>    &quot;commit:description&quot;: &quot;开发版本，每次 commit 时 +1&quot;,<br>    &quot;major&quot;: 0,<br>    &quot;minor&quot;: 1,<br>    &quot;tiny&quot;: 1,<br>    &quot;commit&quot;: 3,<br>    &quot;pro_mini_version&quot;: &quot;0.1.1&quot;,<br>    &quot;pro_version&quot;: &quot;0.1.1/3&quot;,<br>    &quot;dev_version&quot;: &quot;0.1.3&quot;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用 <code>gap</code> 操作的 commit 行为都会修改 <code>version.json</code> 中 <code>commit</code> +1</li>\n<li><code>gap</code> 命令符合<a href=\"/developer/style-guide/gitlab.html\">Gitlab提交规范</a>, 减少冗余输入</li>\n</ol>\n"},{"title":"周三迭代","type":"周三迭代","_content":"","source":"corporate-culture/wednesday-release.md","raw":"---\ntitle: 周三迭代\ntype: 周三迭代 \n---","date":"2023-06-10T10:49:05.484Z","updated":"2023-06-10T10:49:05.484Z","path":"corporate-culture/wednesday-release.html","comments":1,"layout":"page","_id":"clipw1dd0000joix58uxg0zmk","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"团队协作","type":"团队协作","_content":"\n## Mac 工具推荐\n\n### KeyCastr\n\n功能亮点: 实时显示键盘的点击按钮，在外连 Window布局键盘时 预防混淆 `Command` `Ctl` 等按键\n\n下载链接: [github: keycastr/keycastr](https://github.com/keycastr/keycastr/releases)\n\n### CheatSheet\n\n功能亮点: 使用任何工具时，忘记了快捷键**常按 `Command` 键**即可展示该工具的快捷命令图谱\n\n下载链接: [CheatSheet](https://cheatsheet-mac.en.softonic.com/mac)\n\n### Dash\n\n功能亮点: 集成了几乎所有开发语言或工具的说明文档(也支持自主补充说明文档)\n\n下载链接: [Dash for Mac](https://kapeli.com/dash)\n\n## Markdown \n\n### 语法\n\n[Markdown](http://www.markdown.cn/) 是一个 Web 上使用的文本到HTML的转换工具，可以通过简单、易读易写的文本格式生成结构化的HTML文档。目前 github、Stackoverflow 等网站均支持这种格式。\n\nMarkdown 的目标是实现**「易读易写」**。\n\n| 效果                 | Markdown 语法\n| ------------------- | ---------------------   \n| H1                  | # 一级标题            \n| H2                  | ## 二级标题             \n| H3                  | ### 三级标题           \n| [Link](https://doc.idata.mobi/)           | \\[Link\\](https://doc.idata.mobi)    \n| `Inline Code`       | \\`Inline Code\\`              \n| code block          | \\`\\`\\`\n| ![alt](/images/logo-100x50.png)     | \\!\\[alt](/images/logo-100x50.png) \n| **Bold**            | \\*\\*text\\*\\*          \n| *Emphasize*         | \\*text\\*              \n| ~~Strike-through~~  | ~~ text ~~        \n| List without order  | * item               \n| List with order     | 1. item              \n| Blockquote          | > quote               \n| HR                  | -----                 \n\n\n### 规范\n\nMarkdown 语法是对错问题，Markdown 规范是内部协作整理文字时的默认的文字规范。\n\n1. 不同标签间使用空行隔开（空一行即可）。\n2. 代码块独立占一行\n3. 多级列表时，子级结束时使用空行隔开\n\n### 示例\n\n#### 示例四级标题\n\n下面是一段代码块:\n\n```\nputs \"markdown style guide!\"\n```\n\n\n下面是一段列表:\n\n- 列表1\n  - 列表1.1\n  - 列表1.2\n\n- 列表2\n- 列表3\n\n### 源码\n\n```\n#### 示例四级标题\n \n下面是一段代码块:\n\n\\`\\`\\`\nputs \"markdown style guide!\"\n\\`\\`\\`\n\n\n下面是一段列表:\n\n- 列表1\n  - 列表1.1\n  - 列表1.2\n\n- 列表2\n- 列表3\n```\n\n## 工作日志\n\n### 格式\n\n```\n### 2017年3月23日 13 星期四 下午4:45\n\n- DOING\n    - 正做事项二\n\n- TODO\n    - 待做事项三\n        \\`\\`\\`\n        question code block\n        \\`\\`\\`\n- DONE\n    - 完成事项一\n        <完成事项一> 解释说明...\n```\n\n小建议：**日期与时间可以使用快捷键快速插入**\n\n### 规范\n\n- 工作日志按**时间逆序**。\n- Markdown 标签之间**间隔一行**。。\n- 工作日志尽量简洁的**详细描述**。\n- 提交工作日志前，使用 Markdown 编辑器预览，确保语法使用正确。\n- 拷贝内容时使用 `command/ctl + shift + v` 不要带样式。\n- 每天 09:45 晨会、17:45 复盘会，在此之前更新工作日志。\n- 历史工作日志中只应有 `DONE`, 长期 `TODO` 的事项放入近期任务。\n\n## 交流规范\n\n### 印象笔记\n\n1. 家庭作业的交付是 md/pdf 两个文档，具体见[培训交付规范](/corporate-culture/workplace-cognition.html#培训交付规范)\n2. 业务相关的协作交流使用[印象笔记](https://www.yinxiang.com/)\n3. 设置字体类型、大小；取消勾选自动创建列表、直线等功能\n\n    ![印象笔记-工作日志-偏好设置](/images/印象笔记-工作日志-偏好设置.png)\n\n4. 印象笔记的使用最佳配置: 文件夹列表使用[侧列表视图]视野开阔; 文档标题保留[标题][已更新时间]；右键标题栏即可配置；拖动标题栏可调整顺序\n\n    ![印象笔记-工作日志-布局规范](/images/印象笔记-工作日志-布局规范.png)\n    ![印象笔记-工作日志-标题栏规范](/images/印象笔记-工作日志-标题栏规范.png)\n\n### 微信交流\n\n*注: 针对微信/企业微信/QQ等实时交流工具中的交流规范*。\n\n参考: [职场共识 - 协作规范](/corporate-culture/workplace-ceremony.html#协作规范)\n\n### 邮件交流\n\nDear All，\n\n我们用邮件是正式的商务沟通，发送邮件注意基本礼仪规范：\n1. 标题（点明主旨，方便收件人在列表中查看）\n2. 收件人\n  1. 主收件人\n  2. 抄送人（只为通知到）\n  3. 密件抄送（你需要通知的人，又不想让其他收件人知道）\n3. 附件\n4. 正文\n  1. 称呼\n  2. 事项描述，尽量用列表清单，有附件的，也要在正文中说明。\n  3. 签名\n\nThanks.\n\n**Albert Li 李昊**\n[上海胜因软件技术有限公司](http://www.intfocus.com)\n***让人和机器可以合作完成更酷的工作***\n上海市闵行区顾戴路2337号B座6楼 201110\nTel: 86 21 51876038 | Mob: 135 8569 7734\nMail: albert_li@intfocus.com | www.intfocus.com\n\n\n## 功能说明文档\n\n### 业务功能文档\n\n![功能说明文档规范.png](/images/功能说明文档规范.png)\n\n*注: attachments/xmind/功能说明文档规范.xmind*\n\n### 工具说明文档\n\n1. 场景需求说明(为什么写该文档？)\n2. 按序号、步骤整理说明文字\n3. 维护基础的脚本语句(SQL建表语句等)\n4. 完整的可执行Demo实例附件\n5. 必要步骤的特殊说明文字\n\n## 交付规范\n\n### 思维脑图\n\n![培训交付规范](/images/培训总结交付规范-01.png)\n\n*注: attachments/xmind/培训总结交付规范.xmind*\n\n### 注意事项\n\n1. 明确交付主题，创建**主题名称的目录**\n2. 图片文件命名以**主题为前缀**，以**序号为后缀**\n2. 创建 `images` 目录，并把相关图片放在该目录\n3. `markdown` 原稿中使用**相对路径**引用图片\n4. `markdown` 原稿与导出的 PDF 文档放在主题目录\n5. 打包 `zip` 压缩文档作为交付文档\n\n### 交付示例\n\n1. *示例文档*目录结构\n\n  ```\n  $ tree Desktop/\n\n  Desktop/\n  ├── 交付文档示例\n  │   ├── images\n  │   │   ├── 交付文档示例-01.jpeg\n  │   │   └── 交付文档示例-02.png\n  │   ├── 交付文档示例.md\n  │   └── 交付文档示例.pdf\n  └── 交付文档示例.zip // 交付文档\n  ```\n\n2. 图片引用示例\n\n```\n## 交付文档示例\n\n![交付文档示例-01](images/交付文档示例-01.jpeg)\n![交付文档示例-02](images/交付文档示例-02.png)\n```\n\n2. 配置 `.md` 文档默认使用 MacDown 软件打开\n\n  ![培训总结交付规范](/images/培训总结交付规范-02.png)\n\n## Gitlab 协作\n\n### 思维导图\n\n![Gitlab协作规范](/images/Gitlab协作规范.png)\n\n*注: attachments/xmind/Gitlab协作规范.xmind*\n\n### 提交格式\n\n> type@version(scope): subject\n\n示例：`style@0.1.1/1(commit): 声明团队提交规范`\n字段解释：\n- type: 必写，可用下述标签: \n    - feat：新功能（feature） \n    - fix：修补 bug \n    - docs：文档（documentation） \n    - style： 格式（不影响代码运行的变动） \n    - refactor：重构（即不是新增功能，也不是修改 bug 的代码变动） \n    - perf：性能改善（A code change that improves performance）\n    - test：增加测试 \n    - chore：构建过程或辅助工具的变动 \n\n- version: 版本号，例 0.1.2/3\n    - 0: 产品版本，默认 0\n    - 1: 阶段版本，默认 1\n    - 2: 发布版本，默认 1，每次发布 +1\n    - 3: 提交版本，默认1，每次提交 +1\n\n- scope: 模块，本次提交代码关联的模块名称\n- subject: 日志，本次提交的业务说明，多条日志时使用分号 `;` 分隔\n\n### 项目应用\n\n项目根目录下会版本记录文件：`version.js` 或 `version.json`。\n\n- 开发人员每次提交时修改 `提交版本` +1\n- 项目助理每次发布时修改 `发布版本` +1\n\n### `gap`(git-auto-push) 命令\n\n\n1. 所有项目源码根目录下都有版本配置档 `version.json`\n\n```\n{\n    \"name\": \"胜因学院在线文档\",\n    \"major:description\": \"产品版本\",\n    \"minor:description\": \"业务版本\",\n    \"tiny:description\": \"线上版本，每次发布上线时 +1\",\n    \"commit:description\": \"开发版本，每次 commit 时 +1\",\n    \"major\": 0,\n    \"minor\": 1,\n    \"tiny\": 1,\n    \"commit\": 3,\n    \"pro_mini_version\": \"0.1.1\",\n    \"pro_version\": \"0.1.1/3\",\n    \"dev_version\": \"0.1.3\"\n}\n```\n\n2. 使用 `gap` 操作的 commit 行为都会修改 `version.json` 中 `commit` +1\n3. 所有项目都支持 `gap` 命令 `./tool.sh gap <type> <module> <message>`\n4. 若项目中未支持 `gap` 请联系管理员\n\n### 请求合并\n\n- 进入团队Gitlab[项目页面](https://gitlab.idata.mobi/)\n- 创建请求合并(New merge request)\n- 源分支(Source Branch) 选择自己的开发分支\n- 目标分支(Target Branch) 选择项目的主分支(dev-0.\\*-master)\n- 标题(Title) 格式为: `merge@version(scope): message`\n- 描述(Description) 格式为:\n\n  ```\n  XYZ 申请合并:\n  1. 本次提交涉及N份源码文件，M份其他文档，已测试运行成功\n  2. 已检测代码编程规范符合要求\n  3. 已查阅说明文档(readme.md)符合预期\n  ```\n\n- 审核人(Assignee) 选择项目管理员\n- 提交合并审核(Submit merge request)\n\n若提示提交的代码有冲突，则需要**取消合并申请**，在本地合并主分支代码、并测试无误后重新提交代码，再请求合并(merge request)。\n\n**代码冲突**提示如下：*\n![](/images/gitlab-merge-request-conflicts.png)\n\n*本地合并主分支的代码命令:*\n\n```bash\n# 1. 合并主分支代码，根据具体主分支名称调整命令\n$ git pull origin dev-0.1-master\n# 2. 运行代码，测试确认合并后代码 运行正常\n# 3. 本地提交代码\n# 4. 线上提交合并申请\n# 5. 若有代码冲突，说明在1-4步骤期间其他同事有提交代码，继续进入步骤1\n```\n\n## 开发工具\n\n- [印象笔记](https://www.yinxiang.com/)\n- [MacDown](https://macdown.uranusjr.com/)\n- [微信](https://weixin.qq.com)\n- [微信小程序开发工具](https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html)\n- [Google Chrome](https://www.google.cn/chrome/index.html)\n- [RDM - RedisDesktopManager](https://github.com/uglide/RedisDesktopManager/releases)\n- [Navicat](https://www.navicat.com.cn/products)\n- Sublime Text\n- [XMind](https://www.xmind.cn/)\n- [Axure](https://www.axure.com/download)\n- [Iterm2](https://www.iterm2.com/)/[OhMyZsh](https://ohmyz.sh/)\n- [VNC Viewer](https://www.realvnc.com/en/connect/download/viewer/)\n- [IntelliJ IDEA](http://www.jetbrains.com/idea/download/#section=mac)\n- [Android Studio](http://www.android-studio.org/index.php/download)\n- [Kettle/Data-Integration](http://mirror.bit.edu.cn/pentaho/Data%20Integration/7.1/)\n- [PowerBI](http://app.powerbi.com)\n","source":"corporate-culture/teamwork.md","raw":"---\ntitle: 团队协作\ntype: 团队协作\n---\n\n## Mac 工具推荐\n\n### KeyCastr\n\n功能亮点: 实时显示键盘的点击按钮，在外连 Window布局键盘时 预防混淆 `Command` `Ctl` 等按键\n\n下载链接: [github: keycastr/keycastr](https://github.com/keycastr/keycastr/releases)\n\n### CheatSheet\n\n功能亮点: 使用任何工具时，忘记了快捷键**常按 `Command` 键**即可展示该工具的快捷命令图谱\n\n下载链接: [CheatSheet](https://cheatsheet-mac.en.softonic.com/mac)\n\n### Dash\n\n功能亮点: 集成了几乎所有开发语言或工具的说明文档(也支持自主补充说明文档)\n\n下载链接: [Dash for Mac](https://kapeli.com/dash)\n\n## Markdown \n\n### 语法\n\n[Markdown](http://www.markdown.cn/) 是一个 Web 上使用的文本到HTML的转换工具，可以通过简单、易读易写的文本格式生成结构化的HTML文档。目前 github、Stackoverflow 等网站均支持这种格式。\n\nMarkdown 的目标是实现**「易读易写」**。\n\n| 效果                 | Markdown 语法\n| ------------------- | ---------------------   \n| H1                  | # 一级标题            \n| H2                  | ## 二级标题             \n| H3                  | ### 三级标题           \n| [Link](https://doc.idata.mobi/)           | \\[Link\\](https://doc.idata.mobi)    \n| `Inline Code`       | \\`Inline Code\\`              \n| code block          | \\`\\`\\`\n| ![alt](/images/logo-100x50.png)     | \\!\\[alt](/images/logo-100x50.png) \n| **Bold**            | \\*\\*text\\*\\*          \n| *Emphasize*         | \\*text\\*              \n| ~~Strike-through~~  | ~~ text ~~        \n| List without order  | * item               \n| List with order     | 1. item              \n| Blockquote          | > quote               \n| HR                  | -----                 \n\n\n### 规范\n\nMarkdown 语法是对错问题，Markdown 规范是内部协作整理文字时的默认的文字规范。\n\n1. 不同标签间使用空行隔开（空一行即可）。\n2. 代码块独立占一行\n3. 多级列表时，子级结束时使用空行隔开\n\n### 示例\n\n#### 示例四级标题\n\n下面是一段代码块:\n\n```\nputs \"markdown style guide!\"\n```\n\n\n下面是一段列表:\n\n- 列表1\n  - 列表1.1\n  - 列表1.2\n\n- 列表2\n- 列表3\n\n### 源码\n\n```\n#### 示例四级标题\n \n下面是一段代码块:\n\n\\`\\`\\`\nputs \"markdown style guide!\"\n\\`\\`\\`\n\n\n下面是一段列表:\n\n- 列表1\n  - 列表1.1\n  - 列表1.2\n\n- 列表2\n- 列表3\n```\n\n## 工作日志\n\n### 格式\n\n```\n### 2017年3月23日 13 星期四 下午4:45\n\n- DOING\n    - 正做事项二\n\n- TODO\n    - 待做事项三\n        \\`\\`\\`\n        question code block\n        \\`\\`\\`\n- DONE\n    - 完成事项一\n        <完成事项一> 解释说明...\n```\n\n小建议：**日期与时间可以使用快捷键快速插入**\n\n### 规范\n\n- 工作日志按**时间逆序**。\n- Markdown 标签之间**间隔一行**。。\n- 工作日志尽量简洁的**详细描述**。\n- 提交工作日志前，使用 Markdown 编辑器预览，确保语法使用正确。\n- 拷贝内容时使用 `command/ctl + shift + v` 不要带样式。\n- 每天 09:45 晨会、17:45 复盘会，在此之前更新工作日志。\n- 历史工作日志中只应有 `DONE`, 长期 `TODO` 的事项放入近期任务。\n\n## 交流规范\n\n### 印象笔记\n\n1. 家庭作业的交付是 md/pdf 两个文档，具体见[培训交付规范](/corporate-culture/workplace-cognition.html#培训交付规范)\n2. 业务相关的协作交流使用[印象笔记](https://www.yinxiang.com/)\n3. 设置字体类型、大小；取消勾选自动创建列表、直线等功能\n\n    ![印象笔记-工作日志-偏好设置](/images/印象笔记-工作日志-偏好设置.png)\n\n4. 印象笔记的使用最佳配置: 文件夹列表使用[侧列表视图]视野开阔; 文档标题保留[标题][已更新时间]；右键标题栏即可配置；拖动标题栏可调整顺序\n\n    ![印象笔记-工作日志-布局规范](/images/印象笔记-工作日志-布局规范.png)\n    ![印象笔记-工作日志-标题栏规范](/images/印象笔记-工作日志-标题栏规范.png)\n\n### 微信交流\n\n*注: 针对微信/企业微信/QQ等实时交流工具中的交流规范*。\n\n参考: [职场共识 - 协作规范](/corporate-culture/workplace-ceremony.html#协作规范)\n\n### 邮件交流\n\nDear All，\n\n我们用邮件是正式的商务沟通，发送邮件注意基本礼仪规范：\n1. 标题（点明主旨，方便收件人在列表中查看）\n2. 收件人\n  1. 主收件人\n  2. 抄送人（只为通知到）\n  3. 密件抄送（你需要通知的人，又不想让其他收件人知道）\n3. 附件\n4. 正文\n  1. 称呼\n  2. 事项描述，尽量用列表清单，有附件的，也要在正文中说明。\n  3. 签名\n\nThanks.\n\n**Albert Li 李昊**\n[上海胜因软件技术有限公司](http://www.intfocus.com)\n***让人和机器可以合作完成更酷的工作***\n上海市闵行区顾戴路2337号B座6楼 201110\nTel: 86 21 51876038 | Mob: 135 8569 7734\nMail: albert_li@intfocus.com | www.intfocus.com\n\n\n## 功能说明文档\n\n### 业务功能文档\n\n![功能说明文档规范.png](/images/功能说明文档规范.png)\n\n*注: attachments/xmind/功能说明文档规范.xmind*\n\n### 工具说明文档\n\n1. 场景需求说明(为什么写该文档？)\n2. 按序号、步骤整理说明文字\n3. 维护基础的脚本语句(SQL建表语句等)\n4. 完整的可执行Demo实例附件\n5. 必要步骤的特殊说明文字\n\n## 交付规范\n\n### 思维脑图\n\n![培训交付规范](/images/培训总结交付规范-01.png)\n\n*注: attachments/xmind/培训总结交付规范.xmind*\n\n### 注意事项\n\n1. 明确交付主题，创建**主题名称的目录**\n2. 图片文件命名以**主题为前缀**，以**序号为后缀**\n2. 创建 `images` 目录，并把相关图片放在该目录\n3. `markdown` 原稿中使用**相对路径**引用图片\n4. `markdown` 原稿与导出的 PDF 文档放在主题目录\n5. 打包 `zip` 压缩文档作为交付文档\n\n### 交付示例\n\n1. *示例文档*目录结构\n\n  ```\n  $ tree Desktop/\n\n  Desktop/\n  ├── 交付文档示例\n  │   ├── images\n  │   │   ├── 交付文档示例-01.jpeg\n  │   │   └── 交付文档示例-02.png\n  │   ├── 交付文档示例.md\n  │   └── 交付文档示例.pdf\n  └── 交付文档示例.zip // 交付文档\n  ```\n\n2. 图片引用示例\n\n```\n## 交付文档示例\n\n![交付文档示例-01](images/交付文档示例-01.jpeg)\n![交付文档示例-02](images/交付文档示例-02.png)\n```\n\n2. 配置 `.md` 文档默认使用 MacDown 软件打开\n\n  ![培训总结交付规范](/images/培训总结交付规范-02.png)\n\n## Gitlab 协作\n\n### 思维导图\n\n![Gitlab协作规范](/images/Gitlab协作规范.png)\n\n*注: attachments/xmind/Gitlab协作规范.xmind*\n\n### 提交格式\n\n> type@version(scope): subject\n\n示例：`style@0.1.1/1(commit): 声明团队提交规范`\n字段解释：\n- type: 必写，可用下述标签: \n    - feat：新功能（feature） \n    - fix：修补 bug \n    - docs：文档（documentation） \n    - style： 格式（不影响代码运行的变动） \n    - refactor：重构（即不是新增功能，也不是修改 bug 的代码变动） \n    - perf：性能改善（A code change that improves performance）\n    - test：增加测试 \n    - chore：构建过程或辅助工具的变动 \n\n- version: 版本号，例 0.1.2/3\n    - 0: 产品版本，默认 0\n    - 1: 阶段版本，默认 1\n    - 2: 发布版本，默认 1，每次发布 +1\n    - 3: 提交版本，默认1，每次提交 +1\n\n- scope: 模块，本次提交代码关联的模块名称\n- subject: 日志，本次提交的业务说明，多条日志时使用分号 `;` 分隔\n\n### 项目应用\n\n项目根目录下会版本记录文件：`version.js` 或 `version.json`。\n\n- 开发人员每次提交时修改 `提交版本` +1\n- 项目助理每次发布时修改 `发布版本` +1\n\n### `gap`(git-auto-push) 命令\n\n\n1. 所有项目源码根目录下都有版本配置档 `version.json`\n\n```\n{\n    \"name\": \"胜因学院在线文档\",\n    \"major:description\": \"产品版本\",\n    \"minor:description\": \"业务版本\",\n    \"tiny:description\": \"线上版本，每次发布上线时 +1\",\n    \"commit:description\": \"开发版本，每次 commit 时 +1\",\n    \"major\": 0,\n    \"minor\": 1,\n    \"tiny\": 1,\n    \"commit\": 3,\n    \"pro_mini_version\": \"0.1.1\",\n    \"pro_version\": \"0.1.1/3\",\n    \"dev_version\": \"0.1.3\"\n}\n```\n\n2. 使用 `gap` 操作的 commit 行为都会修改 `version.json` 中 `commit` +1\n3. 所有项目都支持 `gap` 命令 `./tool.sh gap <type> <module> <message>`\n4. 若项目中未支持 `gap` 请联系管理员\n\n### 请求合并\n\n- 进入团队Gitlab[项目页面](https://gitlab.idata.mobi/)\n- 创建请求合并(New merge request)\n- 源分支(Source Branch) 选择自己的开发分支\n- 目标分支(Target Branch) 选择项目的主分支(dev-0.\\*-master)\n- 标题(Title) 格式为: `merge@version(scope): message`\n- 描述(Description) 格式为:\n\n  ```\n  XYZ 申请合并:\n  1. 本次提交涉及N份源码文件，M份其他文档，已测试运行成功\n  2. 已检测代码编程规范符合要求\n  3. 已查阅说明文档(readme.md)符合预期\n  ```\n\n- 审核人(Assignee) 选择项目管理员\n- 提交合并审核(Submit merge request)\n\n若提示提交的代码有冲突，则需要**取消合并申请**，在本地合并主分支代码、并测试无误后重新提交代码，再请求合并(merge request)。\n\n**代码冲突**提示如下：*\n![](/images/gitlab-merge-request-conflicts.png)\n\n*本地合并主分支的代码命令:*\n\n```bash\n# 1. 合并主分支代码，根据具体主分支名称调整命令\n$ git pull origin dev-0.1-master\n# 2. 运行代码，测试确认合并后代码 运行正常\n# 3. 本地提交代码\n# 4. 线上提交合并申请\n# 5. 若有代码冲突，说明在1-4步骤期间其他同事有提交代码，继续进入步骤1\n```\n\n## 开发工具\n\n- [印象笔记](https://www.yinxiang.com/)\n- [MacDown](https://macdown.uranusjr.com/)\n- [微信](https://weixin.qq.com)\n- [微信小程序开发工具](https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html)\n- [Google Chrome](https://www.google.cn/chrome/index.html)\n- [RDM - RedisDesktopManager](https://github.com/uglide/RedisDesktopManager/releases)\n- [Navicat](https://www.navicat.com.cn/products)\n- Sublime Text\n- [XMind](https://www.xmind.cn/)\n- [Axure](https://www.axure.com/download)\n- [Iterm2](https://www.iterm2.com/)/[OhMyZsh](https://ohmyz.sh/)\n- [VNC Viewer](https://www.realvnc.com/en/connect/download/viewer/)\n- [IntelliJ IDEA](http://www.jetbrains.com/idea/download/#section=mac)\n- [Android Studio](http://www.android-studio.org/index.php/download)\n- [Kettle/Data-Integration](http://mirror.bit.edu.cn/pentaho/Data%20Integration/7.1/)\n- [PowerBI](http://app.powerbi.com)\n","date":"2023-06-10T10:49:05.484Z","updated":"2023-06-10T10:49:05.484Z","path":"corporate-culture/teamwork.html","comments":1,"layout":"page","_id":"clipw1dd1000koix5emob9a6p","content":"<h2 id=\"Mac-工具推荐\"><a href=\"#Mac-工具推荐\" class=\"headerlink\" title=\"Mac 工具推荐\"></a>Mac 工具推荐</h2><h3 id=\"KeyCastr\"><a href=\"#KeyCastr\" class=\"headerlink\" title=\"KeyCastr\"></a>KeyCastr</h3><p>功能亮点: 实时显示键盘的点击按钮，在外连 Window布局键盘时 预防混淆 <code>Command</code> <code>Ctl</code> 等按键</p>\n<p>下载链接: <a href=\"https://github.com/keycastr/keycastr/releases\">github: keycastr&#x2F;keycastr</a></p>\n<h3 id=\"CheatSheet\"><a href=\"#CheatSheet\" class=\"headerlink\" title=\"CheatSheet\"></a>CheatSheet</h3><p>功能亮点: 使用任何工具时，忘记了快捷键<strong>常按 <code>Command</code> 键</strong>即可展示该工具的快捷命令图谱</p>\n<p>下载链接: <a href=\"https://cheatsheet-mac.en.softonic.com/mac\">CheatSheet</a></p>\n<h3 id=\"Dash\"><a href=\"#Dash\" class=\"headerlink\" title=\"Dash\"></a>Dash</h3><p>功能亮点: 集成了几乎所有开发语言或工具的说明文档(也支持自主补充说明文档)</p>\n<p>下载链接: <a href=\"https://kapeli.com/dash\">Dash for Mac</a></p>\n<h2 id=\"Markdown\"><a href=\"#Markdown\" class=\"headerlink\" title=\"Markdown\"></a>Markdown</h2><h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p><a href=\"http://www.markdown.cn/\">Markdown</a> 是一个 Web 上使用的文本到HTML的转换工具，可以通过简单、易读易写的文本格式生成结构化的HTML文档。目前 github、Stackoverflow 等网站均支持这种格式。</p>\n<p>Markdown 的目标是实现<strong>「易读易写」</strong>。</p>\n<table>\n<thead>\n<tr>\n<th>效果</th>\n<th>Markdown 语法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>H1</td>\n<td># 一级标题</td>\n</tr>\n<tr>\n<td>H2</td>\n<td>## 二级标题</td>\n</tr>\n<tr>\n<td>H3</td>\n<td>### 三级标题</td>\n</tr>\n<tr>\n<td><a href=\"https://doc.idata.mobi/\">Link</a></td>\n<td>[Link](<a href=\"https://doc.idata.mobi/\">https://doc.idata.mobi</a>)</td>\n</tr>\n<tr>\n<td><code>Inline Code</code></td>\n<td>`Inline Code`</td>\n</tr>\n<tr>\n<td>code block</td>\n<td>```</td>\n</tr>\n<tr>\n<td><img src=\"/images/logo-100x50.png\" alt=\"alt\"></td>\n<td>![alt](&#x2F;images&#x2F;logo-100x50.png)</td>\n</tr>\n<tr>\n<td><strong>Bold</strong></td>\n<td>**text**</td>\n</tr>\n<tr>\n<td><em>Emphasize</em></td>\n<td>*text*</td>\n</tr>\n<tr>\n<td><del>Strike-through</del></td>\n<td>~~ text ~~</td>\n</tr>\n<tr>\n<td>List without order</td>\n<td>* item</td>\n</tr>\n<tr>\n<td>List with order</td>\n<td>1. item</td>\n</tr>\n<tr>\n<td>Blockquote</td>\n<td>&gt; quote</td>\n</tr>\n<tr>\n<td>HR</td>\n<td>—–</td>\n</tr>\n</tbody></table>\n<h3 id=\"规范\"><a href=\"#规范\" class=\"headerlink\" title=\"规范\"></a>规范</h3><p>Markdown 语法是对错问题，Markdown 规范是内部协作整理文字时的默认的文字规范。</p>\n<ol>\n<li>不同标签间使用空行隔开（空一行即可）。</li>\n<li>代码块独立占一行</li>\n<li>多级列表时，子级结束时使用空行隔开</li>\n</ol>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><h4 id=\"示例四级标题\"><a href=\"#示例四级标题\" class=\"headerlink\" title=\"示例四级标题\"></a>示例四级标题</h4><p>下面是一段代码块:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">puts &quot;markdown style guide!&quot;<br></code></pre></td></tr></table></figure>\n\n\n<p>下面是一段列表:</p>\n<ul>\n<li><p>列表1</p>\n<ul>\n<li>列表1.1</li>\n<li>列表1.2</li>\n</ul>\n</li>\n<li><p>列表2</p>\n</li>\n<li><p>列表3</p>\n</li>\n</ul>\n<h3 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">#### 示例四级标题<br> <br>下面是一段代码块:<br><br>\\`\\`\\`<br>puts &quot;markdown style guide!&quot;<br>\\`\\`\\`<br><br><br>下面是一段列表:<br><br>- 列表1<br>  - 列表1.1<br>  - 列表1.2<br><br>- 列表2<br>- 列表3<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"工作日志\"><a href=\"#工作日志\" class=\"headerlink\" title=\"工作日志\"></a>工作日志</h2><h3 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a>格式</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">### 2017年3月23日 13 星期四 下午4:45<br><br>- DOING<br>    - 正做事项二<br><br>- TODO<br>    - 待做事项三<br>        \\`\\`\\`<br>        question code block<br>        \\`\\`\\`<br>- DONE<br>    - 完成事项一<br>        &lt;完成事项一&gt; 解释说明...<br></code></pre></td></tr></table></figure>\n\n<p>小建议：<strong>日期与时间可以使用快捷键快速插入</strong></p>\n<h3 id=\"规范-1\"><a href=\"#规范-1\" class=\"headerlink\" title=\"规范\"></a>规范</h3><ul>\n<li>工作日志按<strong>时间逆序</strong>。</li>\n<li>Markdown 标签之间<strong>间隔一行</strong>。。</li>\n<li>工作日志尽量简洁的<strong>详细描述</strong>。</li>\n<li>提交工作日志前，使用 Markdown 编辑器预览，确保语法使用正确。</li>\n<li>拷贝内容时使用 <code>command/ctl + shift + v</code> 不要带样式。</li>\n<li>每天 09:45 晨会、17:45 复盘会，在此之前更新工作日志。</li>\n<li>历史工作日志中只应有 <code>DONE</code>, 长期 <code>TODO</code> 的事项放入近期任务。</li>\n</ul>\n<h2 id=\"交流规范\"><a href=\"#交流规范\" class=\"headerlink\" title=\"交流规范\"></a>交流规范</h2><h3 id=\"印象笔记\"><a href=\"#印象笔记\" class=\"headerlink\" title=\"印象笔记\"></a>印象笔记</h3><ol>\n<li><p>家庭作业的交付是 md&#x2F;pdf 两个文档，具体见<a href=\"/corporate-culture/workplace-cognition.html#%E5%9F%B9%E8%AE%AD%E4%BA%A4%E4%BB%98%E8%A7%84%E8%8C%83\">培训交付规范</a></p>\n</li>\n<li><p>业务相关的协作交流使用<a href=\"https://www.yinxiang.com/\">印象笔记</a></p>\n</li>\n<li><p>设置字体类型、大小；取消勾选自动创建列表、直线等功能</p>\n<p> <img src=\"/images/%E5%8D%B0%E8%B1%A1%E7%AC%94%E8%AE%B0-%E5%B7%A5%E4%BD%9C%E6%97%A5%E5%BF%97-%E5%81%8F%E5%A5%BD%E8%AE%BE%E7%BD%AE.png\" alt=\"印象笔记-工作日志-偏好设置\"></p>\n</li>\n<li><p>印象笔记的使用最佳配置: 文件夹列表使用[侧列表视图]视野开阔; 文档标题保留[标题][已更新时间]；右键标题栏即可配置；拖动标题栏可调整顺序</p>\n<p> <img src=\"/images/%E5%8D%B0%E8%B1%A1%E7%AC%94%E8%AE%B0-%E5%B7%A5%E4%BD%9C%E6%97%A5%E5%BF%97-%E5%B8%83%E5%B1%80%E8%A7%84%E8%8C%83.png\" alt=\"印象笔记-工作日志-布局规范\"><br> <img src=\"/images/%E5%8D%B0%E8%B1%A1%E7%AC%94%E8%AE%B0-%E5%B7%A5%E4%BD%9C%E6%97%A5%E5%BF%97-%E6%A0%87%E9%A2%98%E6%A0%8F%E8%A7%84%E8%8C%83.png\" alt=\"印象笔记-工作日志-标题栏规范\"></p>\n</li>\n</ol>\n<h3 id=\"微信交流\"><a href=\"#微信交流\" class=\"headerlink\" title=\"微信交流\"></a>微信交流</h3><p><em>注: 针对微信&#x2F;企业微信&#x2F;QQ等实时交流工具中的交流规范</em>。</p>\n<p>参考: <a href=\"/corporate-culture/workplace-ceremony.html#%E5%8D%8F%E4%BD%9C%E8%A7%84%E8%8C%83\">职场共识 - 协作规范</a></p>\n<h3 id=\"邮件交流\"><a href=\"#邮件交流\" class=\"headerlink\" title=\"邮件交流\"></a>邮件交流</h3><p>Dear All，</p>\n<p>我们用邮件是正式的商务沟通，发送邮件注意基本礼仪规范：</p>\n<ol>\n<li>标题（点明主旨，方便收件人在列表中查看）</li>\n<li>收件人</li>\n<li>主收件人</li>\n<li>抄送人（只为通知到）</li>\n<li>密件抄送（你需要通知的人，又不想让其他收件人知道）</li>\n<li>附件</li>\n<li>正文</li>\n<li>称呼</li>\n<li>事项描述，尽量用列表清单，有附件的，也要在正文中说明。</li>\n<li>签名</li>\n</ol>\n<p>Thanks.</p>\n<p><strong>Albert Li 李昊</strong><br><a href=\"http://www.intfocus.com/\">上海胜因软件技术有限公司</a><br><em><strong>让人和机器可以合作完成更酷的工作</strong></em><br>上海市闵行区顾戴路2337号B座6楼 201110<br>Tel: 86 21 51876038 | Mob: 135 8569 7734<br>Mail: <a href=\"mailto:&#x61;&#108;&#x62;&#x65;&#114;&#x74;&#x5f;&#x6c;&#x69;&#x40;&#x69;&#110;&#116;&#102;&#x6f;&#99;&#x75;&#x73;&#46;&#99;&#111;&#109;\">&#x61;&#108;&#x62;&#x65;&#114;&#x74;&#x5f;&#x6c;&#x69;&#x40;&#x69;&#110;&#116;&#102;&#x6f;&#99;&#x75;&#x73;&#46;&#99;&#111;&#109;</a> | <a href=\"http://www.intfocus.com/\">www.intfocus.com</a></p>\n<h2 id=\"功能说明文档\"><a href=\"#功能说明文档\" class=\"headerlink\" title=\"功能说明文档\"></a>功能说明文档</h2><h3 id=\"业务功能文档\"><a href=\"#业务功能文档\" class=\"headerlink\" title=\"业务功能文档\"></a>业务功能文档</h3><p><img src=\"/images/%E5%8A%9F%E8%83%BD%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3%E8%A7%84%E8%8C%83.png\" alt=\"功能说明文档规范.png\"></p>\n<p><em>注: attachments&#x2F;xmind&#x2F;功能说明文档规范.xmind</em></p>\n<h3 id=\"工具说明文档\"><a href=\"#工具说明文档\" class=\"headerlink\" title=\"工具说明文档\"></a>工具说明文档</h3><ol>\n<li>场景需求说明(为什么写该文档？)</li>\n<li>按序号、步骤整理说明文字</li>\n<li>维护基础的脚本语句(SQL建表语句等)</li>\n<li>完整的可执行Demo实例附件</li>\n<li>必要步骤的特殊说明文字</li>\n</ol>\n<h2 id=\"交付规范\"><a href=\"#交付规范\" class=\"headerlink\" title=\"交付规范\"></a>交付规范</h2><h3 id=\"思维脑图\"><a href=\"#思维脑图\" class=\"headerlink\" title=\"思维脑图\"></a>思维脑图</h3><p><img src=\"/images/%E5%9F%B9%E8%AE%AD%E6%80%BB%E7%BB%93%E4%BA%A4%E4%BB%98%E8%A7%84%E8%8C%83-01.png\" alt=\"培训交付规范\"></p>\n<p><em>注: attachments&#x2F;xmind&#x2F;培训总结交付规范.xmind</em></p>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ol>\n<li>明确交付主题，创建<strong>主题名称的目录</strong></li>\n<li>图片文件命名以<strong>主题为前缀</strong>，以<strong>序号为后缀</strong></li>\n<li>创建 <code>images</code> 目录，并把相关图片放在该目录</li>\n<li><code>markdown</code> 原稿中使用<strong>相对路径</strong>引用图片</li>\n<li><code>markdown</code> 原稿与导出的 PDF 文档放在主题目录</li>\n<li>打包 <code>zip</code> 压缩文档作为交付文档</li>\n</ol>\n<h3 id=\"交付示例\"><a href=\"#交付示例\" class=\"headerlink\" title=\"交付示例\"></a>交付示例</h3><ol>\n<li><em>示例文档</em>目录结构</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">$ tree Desktop/<br><br>Desktop/<br>├── 交付文档示例<br>│   ├── images<br>│   │   ├── 交付文档示例-01.jpeg<br>│   │   └── 交付文档示例-02.png<br>│   ├── 交付文档示例.md<br>│   └── 交付文档示例.pdf<br>└── 交付文档示例.zip // 交付文档<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>图片引用示例</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">## 交付文档示例<br><br>![交付文档示例-01](images/交付文档示例-01.jpeg)<br>![交付文档示例-02](images/交付文档示例-02.png)<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>配置 <code>.md</code> 文档默认使用 MacDown 软件打开</li>\n</ol>\n<p>  <img src=\"/images/%E5%9F%B9%E8%AE%AD%E6%80%BB%E7%BB%93%E4%BA%A4%E4%BB%98%E8%A7%84%E8%8C%83-02.png\" alt=\"培训总结交付规范\"></p>\n<h2 id=\"Gitlab-协作\"><a href=\"#Gitlab-协作\" class=\"headerlink\" title=\"Gitlab 协作\"></a>Gitlab 协作</h2><h3 id=\"思维导图\"><a href=\"#思维导图\" class=\"headerlink\" title=\"思维导图\"></a>思维导图</h3><p><img src=\"/images/Gitlab%E5%8D%8F%E4%BD%9C%E8%A7%84%E8%8C%83.png\" alt=\"Gitlab协作规范\"></p>\n<p><em>注: attachments&#x2F;xmind&#x2F;Gitlab协作规范.xmind</em></p>\n<h3 id=\"提交格式\"><a href=\"#提交格式\" class=\"headerlink\" title=\"提交格式\"></a>提交格式</h3><blockquote>\n<p>type@version(scope): subject</p>\n</blockquote>\n<p>示例：<code>style@0.1.1/1(commit): 声明团队提交规范</code><br>字段解释：</p>\n<ul>\n<li><p>type: 必写，可用下述标签: </p>\n<ul>\n<li>feat：新功能（feature） </li>\n<li>fix：修补 bug </li>\n<li>docs：文档（documentation） </li>\n<li>style： 格式（不影响代码运行的变动） </li>\n<li>refactor：重构（即不是新增功能，也不是修改 bug 的代码变动） </li>\n<li>perf：性能改善（A code change that improves performance）</li>\n<li>test：增加测试 </li>\n<li>chore：构建过程或辅助工具的变动</li>\n</ul>\n</li>\n<li><p>version: 版本号，例 0.1.2&#x2F;3</p>\n<ul>\n<li>0: 产品版本，默认 0</li>\n<li>1: 阶段版本，默认 1</li>\n<li>2: 发布版本，默认 1，每次发布 +1</li>\n<li>3: 提交版本，默认1，每次提交 +1</li>\n</ul>\n</li>\n<li><p>scope: 模块，本次提交代码关联的模块名称</p>\n</li>\n<li><p>subject: 日志，本次提交的业务说明，多条日志时使用分号 <code>;</code> 分隔</p>\n</li>\n</ul>\n<h3 id=\"项目应用\"><a href=\"#项目应用\" class=\"headerlink\" title=\"项目应用\"></a>项目应用</h3><p>项目根目录下会版本记录文件：<code>version.js</code> 或 <code>version.json</code>。</p>\n<ul>\n<li>开发人员每次提交时修改 <code>提交版本</code> +1</li>\n<li>项目助理每次发布时修改 <code>发布版本</code> +1</li>\n</ul>\n<h3 id=\"gap-git-auto-push-命令\"><a href=\"#gap-git-auto-push-命令\" class=\"headerlink\" title=\"gap(git-auto-push) 命令\"></a><code>gap</code>(git-auto-push) 命令</h3><ol>\n<li>所有项目源码根目录下都有版本配置档 <code>version.json</code></li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&#123;<br>    &quot;name&quot;: &quot;胜因学院在线文档&quot;,<br>    &quot;major:description&quot;: &quot;产品版本&quot;,<br>    &quot;minor:description&quot;: &quot;业务版本&quot;,<br>    &quot;tiny:description&quot;: &quot;线上版本，每次发布上线时 +1&quot;,<br>    &quot;commit:description&quot;: &quot;开发版本，每次 commit 时 +1&quot;,<br>    &quot;major&quot;: 0,<br>    &quot;minor&quot;: 1,<br>    &quot;tiny&quot;: 1,<br>    &quot;commit&quot;: 3,<br>    &quot;pro_mini_version&quot;: &quot;0.1.1&quot;,<br>    &quot;pro_version&quot;: &quot;0.1.1/3&quot;,<br>    &quot;dev_version&quot;: &quot;0.1.3&quot;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用 <code>gap</code> 操作的 commit 行为都会修改 <code>version.json</code> 中 <code>commit</code> +1</li>\n<li>所有项目都支持 <code>gap</code> 命令 <code>./tool.sh gap &lt;type&gt; &lt;module&gt; &lt;message&gt;</code></li>\n<li>若项目中未支持 <code>gap</code> 请联系管理员</li>\n</ol>\n<h3 id=\"请求合并\"><a href=\"#请求合并\" class=\"headerlink\" title=\"请求合并\"></a>请求合并</h3><ul>\n<li><p>进入团队Gitlab<a href=\"https://gitlab.idata.mobi/\">项目页面</a></p>\n</li>\n<li><p>创建请求合并(New merge request)</p>\n</li>\n<li><p>源分支(Source Branch) 选择自己的开发分支</p>\n</li>\n<li><p>目标分支(Target Branch) 选择项目的主分支(dev-0.*-master)</p>\n</li>\n<li><p>标题(Title) 格式为: <code>merge@version(scope): message</code></p>\n</li>\n<li><p>描述(Description) 格式为:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">XYZ 申请合并:<br>1. 本次提交涉及N份源码文件，M份其他文档，已测试运行成功<br>2. 已检测代码编程规范符合要求<br>3. 已查阅说明文档(readme.md)符合预期<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>审核人(Assignee) 选择项目管理员</p>\n</li>\n<li><p>提交合并审核(Submit merge request)</p>\n</li>\n</ul>\n<p>若提示提交的代码有冲突，则需要<strong>取消合并申请</strong>，在本地合并主分支代码、并测试无误后重新提交代码，再请求合并(merge request)。</p>\n<p><strong>代码冲突</strong>提示如下：*<br><img src=\"/images/gitlab-merge-request-conflicts.png\"></p>\n<p><em>本地合并主分支的代码命令:</em></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 1. 合并主分支代码，根据具体主分支名称调整命令</span><br>$ git pull origin dev-0.1-master<br><span class=\"hljs-comment\"># 2. 运行代码，测试确认合并后代码 运行正常</span><br><span class=\"hljs-comment\"># 3. 本地提交代码</span><br><span class=\"hljs-comment\"># 4. 线上提交合并申请</span><br><span class=\"hljs-comment\"># 5. 若有代码冲突，说明在1-4步骤期间其他同事有提交代码，继续进入步骤1</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"开发工具\"><a href=\"#开发工具\" class=\"headerlink\" title=\"开发工具\"></a>开发工具</h2><ul>\n<li><a href=\"https://www.yinxiang.com/\">印象笔记</a></li>\n<li><a href=\"https://macdown.uranusjr.com/\">MacDown</a></li>\n<li><a href=\"https://weixin.qq.com/\">微信</a></li>\n<li><a href=\"https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html\">微信小程序开发工具</a></li>\n<li><a href=\"https://www.google.cn/chrome/index.html\">Google Chrome</a></li>\n<li><a href=\"https://github.com/uglide/RedisDesktopManager/releases\">RDM - RedisDesktopManager</a></li>\n<li><a href=\"https://www.navicat.com.cn/products\">Navicat</a></li>\n<li>Sublime Text</li>\n<li><a href=\"https://www.xmind.cn/\">XMind</a></li>\n<li><a href=\"https://www.axure.com/download\">Axure</a></li>\n<li><a href=\"https://www.iterm2.com/\">Iterm2</a>&#x2F;<a href=\"https://ohmyz.sh/\">OhMyZsh</a></li>\n<li><a href=\"https://www.realvnc.com/en/connect/download/viewer/\">VNC Viewer</a></li>\n<li><a href=\"http://www.jetbrains.com/idea/download/#section=mac\">IntelliJ IDEA</a></li>\n<li><a href=\"http://www.android-studio.org/index.php/download\">Android Studio</a></li>\n<li><a href=\"http://mirror.bit.edu.cn/pentaho/Data%20Integration/7.1/\">Kettle&#x2F;Data-Integration</a></li>\n<li><a href=\"http://app.powerbi.com/\">PowerBI</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Mac-工具推荐\"><a href=\"#Mac-工具推荐\" class=\"headerlink\" title=\"Mac 工具推荐\"></a>Mac 工具推荐</h2><h3 id=\"KeyCastr\"><a href=\"#KeyCastr\" class=\"headerlink\" title=\"KeyCastr\"></a>KeyCastr</h3><p>功能亮点: 实时显示键盘的点击按钮，在外连 Window布局键盘时 预防混淆 <code>Command</code> <code>Ctl</code> 等按键</p>\n<p>下载链接: <a href=\"https://github.com/keycastr/keycastr/releases\">github: keycastr&#x2F;keycastr</a></p>\n<h3 id=\"CheatSheet\"><a href=\"#CheatSheet\" class=\"headerlink\" title=\"CheatSheet\"></a>CheatSheet</h3><p>功能亮点: 使用任何工具时，忘记了快捷键<strong>常按 <code>Command</code> 键</strong>即可展示该工具的快捷命令图谱</p>\n<p>下载链接: <a href=\"https://cheatsheet-mac.en.softonic.com/mac\">CheatSheet</a></p>\n<h3 id=\"Dash\"><a href=\"#Dash\" class=\"headerlink\" title=\"Dash\"></a>Dash</h3><p>功能亮点: 集成了几乎所有开发语言或工具的说明文档(也支持自主补充说明文档)</p>\n<p>下载链接: <a href=\"https://kapeli.com/dash\">Dash for Mac</a></p>\n<h2 id=\"Markdown\"><a href=\"#Markdown\" class=\"headerlink\" title=\"Markdown\"></a>Markdown</h2><h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p><a href=\"http://www.markdown.cn/\">Markdown</a> 是一个 Web 上使用的文本到HTML的转换工具，可以通过简单、易读易写的文本格式生成结构化的HTML文档。目前 github、Stackoverflow 等网站均支持这种格式。</p>\n<p>Markdown 的目标是实现<strong>「易读易写」</strong>。</p>\n<table>\n<thead>\n<tr>\n<th>效果</th>\n<th>Markdown 语法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>H1</td>\n<td># 一级标题</td>\n</tr>\n<tr>\n<td>H2</td>\n<td>## 二级标题</td>\n</tr>\n<tr>\n<td>H3</td>\n<td>### 三级标题</td>\n</tr>\n<tr>\n<td><a href=\"https://doc.idata.mobi/\">Link</a></td>\n<td>[Link](<a href=\"https://doc.idata.mobi/\">https://doc.idata.mobi</a>)</td>\n</tr>\n<tr>\n<td><code>Inline Code</code></td>\n<td>`Inline Code`</td>\n</tr>\n<tr>\n<td>code block</td>\n<td>```</td>\n</tr>\n<tr>\n<td><img src=\"/images/logo-100x50.png\" alt=\"alt\"></td>\n<td>![alt](&#x2F;images&#x2F;logo-100x50.png)</td>\n</tr>\n<tr>\n<td><strong>Bold</strong></td>\n<td>**text**</td>\n</tr>\n<tr>\n<td><em>Emphasize</em></td>\n<td>*text*</td>\n</tr>\n<tr>\n<td><del>Strike-through</del></td>\n<td>~~ text ~~</td>\n</tr>\n<tr>\n<td>List without order</td>\n<td>* item</td>\n</tr>\n<tr>\n<td>List with order</td>\n<td>1. item</td>\n</tr>\n<tr>\n<td>Blockquote</td>\n<td>&gt; quote</td>\n</tr>\n<tr>\n<td>HR</td>\n<td>—–</td>\n</tr>\n</tbody></table>\n<h3 id=\"规范\"><a href=\"#规范\" class=\"headerlink\" title=\"规范\"></a>规范</h3><p>Markdown 语法是对错问题，Markdown 规范是内部协作整理文字时的默认的文字规范。</p>\n<ol>\n<li>不同标签间使用空行隔开（空一行即可）。</li>\n<li>代码块独立占一行</li>\n<li>多级列表时，子级结束时使用空行隔开</li>\n</ol>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><h4 id=\"示例四级标题\"><a href=\"#示例四级标题\" class=\"headerlink\" title=\"示例四级标题\"></a>示例四级标题</h4><p>下面是一段代码块:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">puts &quot;markdown style guide!&quot;<br></code></pre></td></tr></table></figure>\n\n\n<p>下面是一段列表:</p>\n<ul>\n<li><p>列表1</p>\n<ul>\n<li>列表1.1</li>\n<li>列表1.2</li>\n</ul>\n</li>\n<li><p>列表2</p>\n</li>\n<li><p>列表3</p>\n</li>\n</ul>\n<h3 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">#### 示例四级标题<br> <br>下面是一段代码块:<br><br>\\`\\`\\`<br>puts &quot;markdown style guide!&quot;<br>\\`\\`\\`<br><br><br>下面是一段列表:<br><br>- 列表1<br>  - 列表1.1<br>  - 列表1.2<br><br>- 列表2<br>- 列表3<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"工作日志\"><a href=\"#工作日志\" class=\"headerlink\" title=\"工作日志\"></a>工作日志</h2><h3 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a>格式</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">### 2017年3月23日 13 星期四 下午4:45<br><br>- DOING<br>    - 正做事项二<br><br>- TODO<br>    - 待做事项三<br>        \\`\\`\\`<br>        question code block<br>        \\`\\`\\`<br>- DONE<br>    - 完成事项一<br>        &lt;完成事项一&gt; 解释说明...<br></code></pre></td></tr></table></figure>\n\n<p>小建议：<strong>日期与时间可以使用快捷键快速插入</strong></p>\n<h3 id=\"规范-1\"><a href=\"#规范-1\" class=\"headerlink\" title=\"规范\"></a>规范</h3><ul>\n<li>工作日志按<strong>时间逆序</strong>。</li>\n<li>Markdown 标签之间<strong>间隔一行</strong>。。</li>\n<li>工作日志尽量简洁的<strong>详细描述</strong>。</li>\n<li>提交工作日志前，使用 Markdown 编辑器预览，确保语法使用正确。</li>\n<li>拷贝内容时使用 <code>command/ctl + shift + v</code> 不要带样式。</li>\n<li>每天 09:45 晨会、17:45 复盘会，在此之前更新工作日志。</li>\n<li>历史工作日志中只应有 <code>DONE</code>, 长期 <code>TODO</code> 的事项放入近期任务。</li>\n</ul>\n<h2 id=\"交流规范\"><a href=\"#交流规范\" class=\"headerlink\" title=\"交流规范\"></a>交流规范</h2><h3 id=\"印象笔记\"><a href=\"#印象笔记\" class=\"headerlink\" title=\"印象笔记\"></a>印象笔记</h3><ol>\n<li><p>家庭作业的交付是 md&#x2F;pdf 两个文档，具体见<a href=\"/corporate-culture/workplace-cognition.html#%E5%9F%B9%E8%AE%AD%E4%BA%A4%E4%BB%98%E8%A7%84%E8%8C%83\">培训交付规范</a></p>\n</li>\n<li><p>业务相关的协作交流使用<a href=\"https://www.yinxiang.com/\">印象笔记</a></p>\n</li>\n<li><p>设置字体类型、大小；取消勾选自动创建列表、直线等功能</p>\n<p> <img src=\"/images/%E5%8D%B0%E8%B1%A1%E7%AC%94%E8%AE%B0-%E5%B7%A5%E4%BD%9C%E6%97%A5%E5%BF%97-%E5%81%8F%E5%A5%BD%E8%AE%BE%E7%BD%AE.png\" alt=\"印象笔记-工作日志-偏好设置\"></p>\n</li>\n<li><p>印象笔记的使用最佳配置: 文件夹列表使用[侧列表视图]视野开阔; 文档标题保留[标题][已更新时间]；右键标题栏即可配置；拖动标题栏可调整顺序</p>\n<p> <img src=\"/images/%E5%8D%B0%E8%B1%A1%E7%AC%94%E8%AE%B0-%E5%B7%A5%E4%BD%9C%E6%97%A5%E5%BF%97-%E5%B8%83%E5%B1%80%E8%A7%84%E8%8C%83.png\" alt=\"印象笔记-工作日志-布局规范\"><br> <img src=\"/images/%E5%8D%B0%E8%B1%A1%E7%AC%94%E8%AE%B0-%E5%B7%A5%E4%BD%9C%E6%97%A5%E5%BF%97-%E6%A0%87%E9%A2%98%E6%A0%8F%E8%A7%84%E8%8C%83.png\" alt=\"印象笔记-工作日志-标题栏规范\"></p>\n</li>\n</ol>\n<h3 id=\"微信交流\"><a href=\"#微信交流\" class=\"headerlink\" title=\"微信交流\"></a>微信交流</h3><p><em>注: 针对微信&#x2F;企业微信&#x2F;QQ等实时交流工具中的交流规范</em>。</p>\n<p>参考: <a href=\"/corporate-culture/workplace-ceremony.html#%E5%8D%8F%E4%BD%9C%E8%A7%84%E8%8C%83\">职场共识 - 协作规范</a></p>\n<h3 id=\"邮件交流\"><a href=\"#邮件交流\" class=\"headerlink\" title=\"邮件交流\"></a>邮件交流</h3><p>Dear All，</p>\n<p>我们用邮件是正式的商务沟通，发送邮件注意基本礼仪规范：</p>\n<ol>\n<li>标题（点明主旨，方便收件人在列表中查看）</li>\n<li>收件人</li>\n<li>主收件人</li>\n<li>抄送人（只为通知到）</li>\n<li>密件抄送（你需要通知的人，又不想让其他收件人知道）</li>\n<li>附件</li>\n<li>正文</li>\n<li>称呼</li>\n<li>事项描述，尽量用列表清单，有附件的，也要在正文中说明。</li>\n<li>签名</li>\n</ol>\n<p>Thanks.</p>\n<p><strong>Albert Li 李昊</strong><br><a href=\"http://www.intfocus.com/\">上海胜因软件技术有限公司</a><br><em><strong>让人和机器可以合作完成更酷的工作</strong></em><br>上海市闵行区顾戴路2337号B座6楼 201110<br>Tel: 86 21 51876038 | Mob: 135 8569 7734<br>Mail: <a href=\"mailto:&#x61;&#108;&#x62;&#x65;&#114;&#x74;&#x5f;&#x6c;&#x69;&#x40;&#x69;&#110;&#116;&#102;&#x6f;&#99;&#x75;&#x73;&#46;&#99;&#111;&#109;\">&#x61;&#108;&#x62;&#x65;&#114;&#x74;&#x5f;&#x6c;&#x69;&#x40;&#x69;&#110;&#116;&#102;&#x6f;&#99;&#x75;&#x73;&#46;&#99;&#111;&#109;</a> | <a href=\"http://www.intfocus.com/\">www.intfocus.com</a></p>\n<h2 id=\"功能说明文档\"><a href=\"#功能说明文档\" class=\"headerlink\" title=\"功能说明文档\"></a>功能说明文档</h2><h3 id=\"业务功能文档\"><a href=\"#业务功能文档\" class=\"headerlink\" title=\"业务功能文档\"></a>业务功能文档</h3><p><img src=\"/images/%E5%8A%9F%E8%83%BD%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3%E8%A7%84%E8%8C%83.png\" alt=\"功能说明文档规范.png\"></p>\n<p><em>注: attachments&#x2F;xmind&#x2F;功能说明文档规范.xmind</em></p>\n<h3 id=\"工具说明文档\"><a href=\"#工具说明文档\" class=\"headerlink\" title=\"工具说明文档\"></a>工具说明文档</h3><ol>\n<li>场景需求说明(为什么写该文档？)</li>\n<li>按序号、步骤整理说明文字</li>\n<li>维护基础的脚本语句(SQL建表语句等)</li>\n<li>完整的可执行Demo实例附件</li>\n<li>必要步骤的特殊说明文字</li>\n</ol>\n<h2 id=\"交付规范\"><a href=\"#交付规范\" class=\"headerlink\" title=\"交付规范\"></a>交付规范</h2><h3 id=\"思维脑图\"><a href=\"#思维脑图\" class=\"headerlink\" title=\"思维脑图\"></a>思维脑图</h3><p><img src=\"/images/%E5%9F%B9%E8%AE%AD%E6%80%BB%E7%BB%93%E4%BA%A4%E4%BB%98%E8%A7%84%E8%8C%83-01.png\" alt=\"培训交付规范\"></p>\n<p><em>注: attachments&#x2F;xmind&#x2F;培训总结交付规范.xmind</em></p>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ol>\n<li>明确交付主题，创建<strong>主题名称的目录</strong></li>\n<li>图片文件命名以<strong>主题为前缀</strong>，以<strong>序号为后缀</strong></li>\n<li>创建 <code>images</code> 目录，并把相关图片放在该目录</li>\n<li><code>markdown</code> 原稿中使用<strong>相对路径</strong>引用图片</li>\n<li><code>markdown</code> 原稿与导出的 PDF 文档放在主题目录</li>\n<li>打包 <code>zip</code> 压缩文档作为交付文档</li>\n</ol>\n<h3 id=\"交付示例\"><a href=\"#交付示例\" class=\"headerlink\" title=\"交付示例\"></a>交付示例</h3><ol>\n<li><em>示例文档</em>目录结构</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">$ tree Desktop/<br><br>Desktop/<br>├── 交付文档示例<br>│   ├── images<br>│   │   ├── 交付文档示例-01.jpeg<br>│   │   └── 交付文档示例-02.png<br>│   ├── 交付文档示例.md<br>│   └── 交付文档示例.pdf<br>└── 交付文档示例.zip // 交付文档<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>图片引用示例</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">## 交付文档示例<br><br>![交付文档示例-01](images/交付文档示例-01.jpeg)<br>![交付文档示例-02](images/交付文档示例-02.png)<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>配置 <code>.md</code> 文档默认使用 MacDown 软件打开</li>\n</ol>\n<p>  <img src=\"/images/%E5%9F%B9%E8%AE%AD%E6%80%BB%E7%BB%93%E4%BA%A4%E4%BB%98%E8%A7%84%E8%8C%83-02.png\" alt=\"培训总结交付规范\"></p>\n<h2 id=\"Gitlab-协作\"><a href=\"#Gitlab-协作\" class=\"headerlink\" title=\"Gitlab 协作\"></a>Gitlab 协作</h2><h3 id=\"思维导图\"><a href=\"#思维导图\" class=\"headerlink\" title=\"思维导图\"></a>思维导图</h3><p><img src=\"/images/Gitlab%E5%8D%8F%E4%BD%9C%E8%A7%84%E8%8C%83.png\" alt=\"Gitlab协作规范\"></p>\n<p><em>注: attachments&#x2F;xmind&#x2F;Gitlab协作规范.xmind</em></p>\n<h3 id=\"提交格式\"><a href=\"#提交格式\" class=\"headerlink\" title=\"提交格式\"></a>提交格式</h3><blockquote>\n<p>type@version(scope): subject</p>\n</blockquote>\n<p>示例：<code>style@0.1.1/1(commit): 声明团队提交规范</code><br>字段解释：</p>\n<ul>\n<li><p>type: 必写，可用下述标签: </p>\n<ul>\n<li>feat：新功能（feature） </li>\n<li>fix：修补 bug </li>\n<li>docs：文档（documentation） </li>\n<li>style： 格式（不影响代码运行的变动） </li>\n<li>refactor：重构（即不是新增功能，也不是修改 bug 的代码变动） </li>\n<li>perf：性能改善（A code change that improves performance）</li>\n<li>test：增加测试 </li>\n<li>chore：构建过程或辅助工具的变动</li>\n</ul>\n</li>\n<li><p>version: 版本号，例 0.1.2&#x2F;3</p>\n<ul>\n<li>0: 产品版本，默认 0</li>\n<li>1: 阶段版本，默认 1</li>\n<li>2: 发布版本，默认 1，每次发布 +1</li>\n<li>3: 提交版本，默认1，每次提交 +1</li>\n</ul>\n</li>\n<li><p>scope: 模块，本次提交代码关联的模块名称</p>\n</li>\n<li><p>subject: 日志，本次提交的业务说明，多条日志时使用分号 <code>;</code> 分隔</p>\n</li>\n</ul>\n<h3 id=\"项目应用\"><a href=\"#项目应用\" class=\"headerlink\" title=\"项目应用\"></a>项目应用</h3><p>项目根目录下会版本记录文件：<code>version.js</code> 或 <code>version.json</code>。</p>\n<ul>\n<li>开发人员每次提交时修改 <code>提交版本</code> +1</li>\n<li>项目助理每次发布时修改 <code>发布版本</code> +1</li>\n</ul>\n<h3 id=\"gap-git-auto-push-命令\"><a href=\"#gap-git-auto-push-命令\" class=\"headerlink\" title=\"gap(git-auto-push) 命令\"></a><code>gap</code>(git-auto-push) 命令</h3><ol>\n<li>所有项目源码根目录下都有版本配置档 <code>version.json</code></li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&#123;<br>    &quot;name&quot;: &quot;胜因学院在线文档&quot;,<br>    &quot;major:description&quot;: &quot;产品版本&quot;,<br>    &quot;minor:description&quot;: &quot;业务版本&quot;,<br>    &quot;tiny:description&quot;: &quot;线上版本，每次发布上线时 +1&quot;,<br>    &quot;commit:description&quot;: &quot;开发版本，每次 commit 时 +1&quot;,<br>    &quot;major&quot;: 0,<br>    &quot;minor&quot;: 1,<br>    &quot;tiny&quot;: 1,<br>    &quot;commit&quot;: 3,<br>    &quot;pro_mini_version&quot;: &quot;0.1.1&quot;,<br>    &quot;pro_version&quot;: &quot;0.1.1/3&quot;,<br>    &quot;dev_version&quot;: &quot;0.1.3&quot;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用 <code>gap</code> 操作的 commit 行为都会修改 <code>version.json</code> 中 <code>commit</code> +1</li>\n<li>所有项目都支持 <code>gap</code> 命令 <code>./tool.sh gap &lt;type&gt; &lt;module&gt; &lt;message&gt;</code></li>\n<li>若项目中未支持 <code>gap</code> 请联系管理员</li>\n</ol>\n<h3 id=\"请求合并\"><a href=\"#请求合并\" class=\"headerlink\" title=\"请求合并\"></a>请求合并</h3><ul>\n<li><p>进入团队Gitlab<a href=\"https://gitlab.idata.mobi/\">项目页面</a></p>\n</li>\n<li><p>创建请求合并(New merge request)</p>\n</li>\n<li><p>源分支(Source Branch) 选择自己的开发分支</p>\n</li>\n<li><p>目标分支(Target Branch) 选择项目的主分支(dev-0.*-master)</p>\n</li>\n<li><p>标题(Title) 格式为: <code>merge@version(scope): message</code></p>\n</li>\n<li><p>描述(Description) 格式为:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">XYZ 申请合并:<br>1. 本次提交涉及N份源码文件，M份其他文档，已测试运行成功<br>2. 已检测代码编程规范符合要求<br>3. 已查阅说明文档(readme.md)符合预期<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>审核人(Assignee) 选择项目管理员</p>\n</li>\n<li><p>提交合并审核(Submit merge request)</p>\n</li>\n</ul>\n<p>若提示提交的代码有冲突，则需要<strong>取消合并申请</strong>，在本地合并主分支代码、并测试无误后重新提交代码，再请求合并(merge request)。</p>\n<p><strong>代码冲突</strong>提示如下：*<br><img src=\"/images/gitlab-merge-request-conflicts.png\"></p>\n<p><em>本地合并主分支的代码命令:</em></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 1. 合并主分支代码，根据具体主分支名称调整命令</span><br>$ git pull origin dev-0.1-master<br><span class=\"hljs-comment\"># 2. 运行代码，测试确认合并后代码 运行正常</span><br><span class=\"hljs-comment\"># 3. 本地提交代码</span><br><span class=\"hljs-comment\"># 4. 线上提交合并申请</span><br><span class=\"hljs-comment\"># 5. 若有代码冲突，说明在1-4步骤期间其他同事有提交代码，继续进入步骤1</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"开发工具\"><a href=\"#开发工具\" class=\"headerlink\" title=\"开发工具\"></a>开发工具</h2><ul>\n<li><a href=\"https://www.yinxiang.com/\">印象笔记</a></li>\n<li><a href=\"https://macdown.uranusjr.com/\">MacDown</a></li>\n<li><a href=\"https://weixin.qq.com/\">微信</a></li>\n<li><a href=\"https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html\">微信小程序开发工具</a></li>\n<li><a href=\"https://www.google.cn/chrome/index.html\">Google Chrome</a></li>\n<li><a href=\"https://github.com/uglide/RedisDesktopManager/releases\">RDM - RedisDesktopManager</a></li>\n<li><a href=\"https://www.navicat.com.cn/products\">Navicat</a></li>\n<li>Sublime Text</li>\n<li><a href=\"https://www.xmind.cn/\">XMind</a></li>\n<li><a href=\"https://www.axure.com/download\">Axure</a></li>\n<li><a href=\"https://www.iterm2.com/\">Iterm2</a>&#x2F;<a href=\"https://ohmyz.sh/\">OhMyZsh</a></li>\n<li><a href=\"https://www.realvnc.com/en/connect/download/viewer/\">VNC Viewer</a></li>\n<li><a href=\"http://www.jetbrains.com/idea/download/#section=mac\">IntelliJ IDEA</a></li>\n<li><a href=\"http://www.android-studio.org/index.php/download\">Android Studio</a></li>\n<li><a href=\"http://mirror.bit.edu.cn/pentaho/Data%20Integration/7.1/\">Kettle&#x2F;Data-Integration</a></li>\n<li><a href=\"http://app.powerbi.com/\">PowerBI</a></li>\n</ul>\n"},{"title":"胜因周刊","type":"胜因周刊","_content":"\n## 一周事记19/10/17\n\n### 事记\n\n- AEJ 企业数据中台对接 XA 数据尾声；二期需求等启动。\n- MNLJ 企业数据报表项目启动。\n- 广州轨道交通 AI 项目进入 Demo 阶段。\n- VAPE 产品持续迭代，10/18 Shao 从美国到上海交流后续安排。\n- 胜因学院平台 API 重构完成；数据库业务表重构开始。\n- RYT 模块迁移工作不理想。\n\n## 一周事记19/09/04\n\n*每周三为团队迭代发布的日期*\n\n### 人事\n\n- 前端工程师、数据工程师各入职一名\n\n### 产品\n\n- 小程序端业务、接口两配合梳理工作完成\n- PowerBI/DataV/ETL 已上线数据流与新同事梳理完成\n- 小程序端完善用户注册流程中溯源码的处理\n- [在线文档平台](https://doc.idata.mobi/)搭建完成，陆续完善文档\n\n## 一周事记19/08/28\n\n### 产品\n\n- 【鲜路】商标授权完成\n- 梳理胜因学院溶液桶业务流程\n- 跟进溶液桶UI设计进度，整理胜因学院和鲜路UI需求文档\n- 撰写眼镜门店会员服务产品需求调研报告，包括市场分析、竞品分析和用户访谈部分\n\n### 技术\n\n- 胜因盒子TV端发布新版\n- 微信小程序端清理冗余代码\n- 整理在线文档框架，作为开发文档平台\n- 梳理 Allergan 五个数据源业务流及验证方案\n- 内测 Allergan 数据集成 PowerBI 可视化方案\n- 梳理接口中台框架，为清理冗余代码、升级架构作准备\n","source":"corporate-culture/weekly-publication.md","raw":"---\ntitle: 胜因周刊\ntype: 胜因周刊 \n---\n\n## 一周事记19/10/17\n\n### 事记\n\n- AEJ 企业数据中台对接 XA 数据尾声；二期需求等启动。\n- MNLJ 企业数据报表项目启动。\n- 广州轨道交通 AI 项目进入 Demo 阶段。\n- VAPE 产品持续迭代，10/18 Shao 从美国到上海交流后续安排。\n- 胜因学院平台 API 重构完成；数据库业务表重构开始。\n- RYT 模块迁移工作不理想。\n\n## 一周事记19/09/04\n\n*每周三为团队迭代发布的日期*\n\n### 人事\n\n- 前端工程师、数据工程师各入职一名\n\n### 产品\n\n- 小程序端业务、接口两配合梳理工作完成\n- PowerBI/DataV/ETL 已上线数据流与新同事梳理完成\n- 小程序端完善用户注册流程中溯源码的处理\n- [在线文档平台](https://doc.idata.mobi/)搭建完成，陆续完善文档\n\n## 一周事记19/08/28\n\n### 产品\n\n- 【鲜路】商标授权完成\n- 梳理胜因学院溶液桶业务流程\n- 跟进溶液桶UI设计进度，整理胜因学院和鲜路UI需求文档\n- 撰写眼镜门店会员服务产品需求调研报告，包括市场分析、竞品分析和用户访谈部分\n\n### 技术\n\n- 胜因盒子TV端发布新版\n- 微信小程序端清理冗余代码\n- 整理在线文档框架，作为开发文档平台\n- 梳理 Allergan 五个数据源业务流及验证方案\n- 内测 Allergan 数据集成 PowerBI 可视化方案\n- 梳理接口中台框架，为清理冗余代码、升级架构作准备\n","date":"2023-06-10T10:49:05.484Z","updated":"2023-06-10T10:49:05.484Z","path":"corporate-culture/weekly-publication.html","comments":1,"layout":"page","_id":"clipw1dd1000loix53e2u4tcn","content":"<h2 id=\"一周事记19-x2F-10-x2F-17\"><a href=\"#一周事记19-x2F-10-x2F-17\" class=\"headerlink\" title=\"一周事记19&#x2F;10&#x2F;17\"></a>一周事记19&#x2F;10&#x2F;17</h2><h3 id=\"事记\"><a href=\"#事记\" class=\"headerlink\" title=\"事记\"></a>事记</h3><ul>\n<li>AEJ 企业数据中台对接 XA 数据尾声；二期需求等启动。</li>\n<li>MNLJ 企业数据报表项目启动。</li>\n<li>广州轨道交通 AI 项目进入 Demo 阶段。</li>\n<li>VAPE 产品持续迭代，10&#x2F;18 Shao 从美国到上海交流后续安排。</li>\n<li>胜因学院平台 API 重构完成；数据库业务表重构开始。</li>\n<li>RYT 模块迁移工作不理想。</li>\n</ul>\n<h2 id=\"一周事记19-x2F-09-x2F-04\"><a href=\"#一周事记19-x2F-09-x2F-04\" class=\"headerlink\" title=\"一周事记19&#x2F;09&#x2F;04\"></a>一周事记19&#x2F;09&#x2F;04</h2><p><em>每周三为团队迭代发布的日期</em></p>\n<h3 id=\"人事\"><a href=\"#人事\" class=\"headerlink\" title=\"人事\"></a>人事</h3><ul>\n<li>前端工程师、数据工程师各入职一名</li>\n</ul>\n<h3 id=\"产品\"><a href=\"#产品\" class=\"headerlink\" title=\"产品\"></a>产品</h3><ul>\n<li>小程序端业务、接口两配合梳理工作完成</li>\n<li>PowerBI&#x2F;DataV&#x2F;ETL 已上线数据流与新同事梳理完成</li>\n<li>小程序端完善用户注册流程中溯源码的处理</li>\n<li><a href=\"https://doc.idata.mobi/\">在线文档平台</a>搭建完成，陆续完善文档</li>\n</ul>\n<h2 id=\"一周事记19-x2F-08-x2F-28\"><a href=\"#一周事记19-x2F-08-x2F-28\" class=\"headerlink\" title=\"一周事记19&#x2F;08&#x2F;28\"></a>一周事记19&#x2F;08&#x2F;28</h2><h3 id=\"产品-1\"><a href=\"#产品-1\" class=\"headerlink\" title=\"产品\"></a>产品</h3><ul>\n<li>【鲜路】商标授权完成</li>\n<li>梳理胜因学院溶液桶业务流程</li>\n<li>跟进溶液桶UI设计进度，整理胜因学院和鲜路UI需求文档</li>\n<li>撰写眼镜门店会员服务产品需求调研报告，包括市场分析、竞品分析和用户访谈部分</li>\n</ul>\n<h3 id=\"技术\"><a href=\"#技术\" class=\"headerlink\" title=\"技术\"></a>技术</h3><ul>\n<li>胜因盒子TV端发布新版</li>\n<li>微信小程序端清理冗余代码</li>\n<li>整理在线文档框架，作为开发文档平台</li>\n<li>梳理 Allergan 五个数据源业务流及验证方案</li>\n<li>内测 Allergan 数据集成 PowerBI 可视化方案</li>\n<li>梳理接口中台框架，为清理冗余代码、升级架构作准备</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一周事记19-x2F-10-x2F-17\"><a href=\"#一周事记19-x2F-10-x2F-17\" class=\"headerlink\" title=\"一周事记19&#x2F;10&#x2F;17\"></a>一周事记19&#x2F;10&#x2F;17</h2><h3 id=\"事记\"><a href=\"#事记\" class=\"headerlink\" title=\"事记\"></a>事记</h3><ul>\n<li>AEJ 企业数据中台对接 XA 数据尾声；二期需求等启动。</li>\n<li>MNLJ 企业数据报表项目启动。</li>\n<li>广州轨道交通 AI 项目进入 Demo 阶段。</li>\n<li>VAPE 产品持续迭代，10&#x2F;18 Shao 从美国到上海交流后续安排。</li>\n<li>胜因学院平台 API 重构完成；数据库业务表重构开始。</li>\n<li>RYT 模块迁移工作不理想。</li>\n</ul>\n<h2 id=\"一周事记19-x2F-09-x2F-04\"><a href=\"#一周事记19-x2F-09-x2F-04\" class=\"headerlink\" title=\"一周事记19&#x2F;09&#x2F;04\"></a>一周事记19&#x2F;09&#x2F;04</h2><p><em>每周三为团队迭代发布的日期</em></p>\n<h3 id=\"人事\"><a href=\"#人事\" class=\"headerlink\" title=\"人事\"></a>人事</h3><ul>\n<li>前端工程师、数据工程师各入职一名</li>\n</ul>\n<h3 id=\"产品\"><a href=\"#产品\" class=\"headerlink\" title=\"产品\"></a>产品</h3><ul>\n<li>小程序端业务、接口两配合梳理工作完成</li>\n<li>PowerBI&#x2F;DataV&#x2F;ETL 已上线数据流与新同事梳理完成</li>\n<li>小程序端完善用户注册流程中溯源码的处理</li>\n<li><a href=\"https://doc.idata.mobi/\">在线文档平台</a>搭建完成，陆续完善文档</li>\n</ul>\n<h2 id=\"一周事记19-x2F-08-x2F-28\"><a href=\"#一周事记19-x2F-08-x2F-28\" class=\"headerlink\" title=\"一周事记19&#x2F;08&#x2F;28\"></a>一周事记19&#x2F;08&#x2F;28</h2><h3 id=\"产品-1\"><a href=\"#产品-1\" class=\"headerlink\" title=\"产品\"></a>产品</h3><ul>\n<li>【鲜路】商标授权完成</li>\n<li>梳理胜因学院溶液桶业务流程</li>\n<li>跟进溶液桶UI设计进度，整理胜因学院和鲜路UI需求文档</li>\n<li>撰写眼镜门店会员服务产品需求调研报告，包括市场分析、竞品分析和用户访谈部分</li>\n</ul>\n<h3 id=\"技术\"><a href=\"#技术\" class=\"headerlink\" title=\"技术\"></a>技术</h3><ul>\n<li>胜因盒子TV端发布新版</li>\n<li>微信小程序端清理冗余代码</li>\n<li>整理在线文档框架，作为开发文档平台</li>\n<li>梳理 Allergan 五个数据源业务流及验证方案</li>\n<li>内测 Allergan 数据集成 PowerBI 可视化方案</li>\n<li>梳理接口中台框架，为清理冗余代码、升级架构作准备</li>\n</ul>\n"},{"title":"职场共识","type":"职场共识","_content":"\n## 团队协作\n\n![团队协作体系](/images/团队协作体系.png)\n\n*注: attachments/xmind/团队协作体系.xmind*\n\n## 职场认知\n\n![职场认知闭环](/images/职场认知闭环.png)\n\n*注: attachments/xmind/职场认知闭环.xmind*\n\n## 职场仪式感\n\n![职场仪式感](/images/职场仪式感.png)\n\n## 培训交付规范\n\n### 思维脑图\n\n![培训交付规范](/images/培训总结交付规范-01.png)\n\n*注: attachments/xmind/培训总结交付规范.xmind*\n\n### 注意事项\n\n1. 明确交付主题，创建**主题名称的目录**\n2. 图片文件命名以**主题为前缀**，以**序号为后缀**\n2. 创建 `images` 目录，并把相关图片放在该目录\n3. `markdown` 原稿中使用**相对路径**引用图片\n4. `markdown` 原稿与导出的 PDF 文档放在主题目录\n5. 打包 `zip` 压缩文档作为交付文档\n\n### 交付示例\n\n1. *示例文档*目录结构\n\n  ```\n  $ tree Desktop/\n\n  Desktop/\n  ├── 交付文档示例\n  │   ├── images\n  │   │   ├── 交付文档示例-01.jpeg\n  │   │   └── 交付文档示例-02.png\n  │   ├── 交付文档示例.md\n  │   └── 交付文档示例.pdf\n  └── 交付文档示例.zip // 交付文档\n  ```\n\n2. 图片引用示例\n\n```\n## 交付文档示例\n\n![交付文档示例-01](images/交付文档示例-01.jpeg)\n![交付文档示例-02](images/交付文档示例-02.png)\n```\n\n2. 配置 `.md` 文档默认使用 MacDown 软件打开\n\n  ![培训总结交付规范](/images/培训总结交付规范-02.png)\n\n## 团队交流规范\n\n1. 实时交流(工具): 分发任务、需求时下游角色个体必须回应。\n    1. 回复 `!=` 必须立即执行；回复 `==` 态度。\n    2. 非特殊情况实时回复，其他同事相互提醒。\n    3. 若任务紧急但下游角色个体时间不便，主动向其他同事救助或向上游角色解释说明。\n\n2. 正式交流(邮件、交付文档)\n    1. 超出三个说明事项的场景时可考虑文档形式。\n    2. 周报、开发时间计划表、验收文档必须以文档形式，并通过邮件交付。\n    3. 寄出邮件后，在实时交流工具中以邮件截图通知对方查收邮箱。\n\n## 团队执行力\n\n![](/images/团队效率驱动图.png)\n\n*注: attachments/xmind/团队效率驱动图.xmind*\n\n## 协作规范\n\n### 结论式\n\n职场认知中强调工作中的任务行为**必须要交付**，否则会进入被动状态。即**无论任务是否完成，都需要在约定好的时间内把任务状态交付给上游同事**。\n\n### 列表式\n\n团队成员之间协作的事项有许多共性，所以按需求分配出来的的任务应该是列表式的，方便**梳理业务流**、**调整优先级**，当前工作日志格式的规范就源自这个理念。\n\n**重点**，分发任务时是非常清晰的列表方式，那么交付任务的完成状态时也应该是**列表式**的，否则接收人无法完整地理解是在描述哪个任务。\n\n### 报告式\n\n*列表式*针对的是**任务列表**，*报告式*针对的是**单个任务的需求列表**。\n\n每个任务都有需求列表，这是判断任务是否完成的依据，也是工作日志中的重要内容。标注下单个任务的需求列表的完成状态（尤其是部分完成时），在到达任务的截止时间时不得不交付时，把任务列表及任务需求列表的完成状态（工作日志中的内容）作为报告交付会很直观，方便交流继续推进任务的完成。\n\n### 闭环式\n\n若任务已按需求完成，并按**报告式**的形式交付给上游同事，是顺利的状态。\n\n当任务未完成、完成不顺利时，需要描述下未完成的是任务哪个环节，未完成的原因是什么？开发环境问题，同事协作问题，还是时间分配问题？以便上游同事理解任务的完整现状，并做出对应的计划调整。\n\n闭环式地完成自己的**交付使命**，是上游同事继续完成他的交付使命的基础与前提。\n","source":"corporate-culture/workplace-ceremony.md","raw":"---\ntitle: 职场共识\ntype: 职场共识 \n---\n\n## 团队协作\n\n![团队协作体系](/images/团队协作体系.png)\n\n*注: attachments/xmind/团队协作体系.xmind*\n\n## 职场认知\n\n![职场认知闭环](/images/职场认知闭环.png)\n\n*注: attachments/xmind/职场认知闭环.xmind*\n\n## 职场仪式感\n\n![职场仪式感](/images/职场仪式感.png)\n\n## 培训交付规范\n\n### 思维脑图\n\n![培训交付规范](/images/培训总结交付规范-01.png)\n\n*注: attachments/xmind/培训总结交付规范.xmind*\n\n### 注意事项\n\n1. 明确交付主题，创建**主题名称的目录**\n2. 图片文件命名以**主题为前缀**，以**序号为后缀**\n2. 创建 `images` 目录，并把相关图片放在该目录\n3. `markdown` 原稿中使用**相对路径**引用图片\n4. `markdown` 原稿与导出的 PDF 文档放在主题目录\n5. 打包 `zip` 压缩文档作为交付文档\n\n### 交付示例\n\n1. *示例文档*目录结构\n\n  ```\n  $ tree Desktop/\n\n  Desktop/\n  ├── 交付文档示例\n  │   ├── images\n  │   │   ├── 交付文档示例-01.jpeg\n  │   │   └── 交付文档示例-02.png\n  │   ├── 交付文档示例.md\n  │   └── 交付文档示例.pdf\n  └── 交付文档示例.zip // 交付文档\n  ```\n\n2. 图片引用示例\n\n```\n## 交付文档示例\n\n![交付文档示例-01](images/交付文档示例-01.jpeg)\n![交付文档示例-02](images/交付文档示例-02.png)\n```\n\n2. 配置 `.md` 文档默认使用 MacDown 软件打开\n\n  ![培训总结交付规范](/images/培训总结交付规范-02.png)\n\n## 团队交流规范\n\n1. 实时交流(工具): 分发任务、需求时下游角色个体必须回应。\n    1. 回复 `!=` 必须立即执行；回复 `==` 态度。\n    2. 非特殊情况实时回复，其他同事相互提醒。\n    3. 若任务紧急但下游角色个体时间不便，主动向其他同事救助或向上游角色解释说明。\n\n2. 正式交流(邮件、交付文档)\n    1. 超出三个说明事项的场景时可考虑文档形式。\n    2. 周报、开发时间计划表、验收文档必须以文档形式，并通过邮件交付。\n    3. 寄出邮件后，在实时交流工具中以邮件截图通知对方查收邮箱。\n\n## 团队执行力\n\n![](/images/团队效率驱动图.png)\n\n*注: attachments/xmind/团队效率驱动图.xmind*\n\n## 协作规范\n\n### 结论式\n\n职场认知中强调工作中的任务行为**必须要交付**，否则会进入被动状态。即**无论任务是否完成，都需要在约定好的时间内把任务状态交付给上游同事**。\n\n### 列表式\n\n团队成员之间协作的事项有许多共性，所以按需求分配出来的的任务应该是列表式的，方便**梳理业务流**、**调整优先级**，当前工作日志格式的规范就源自这个理念。\n\n**重点**，分发任务时是非常清晰的列表方式，那么交付任务的完成状态时也应该是**列表式**的，否则接收人无法完整地理解是在描述哪个任务。\n\n### 报告式\n\n*列表式*针对的是**任务列表**，*报告式*针对的是**单个任务的需求列表**。\n\n每个任务都有需求列表，这是判断任务是否完成的依据，也是工作日志中的重要内容。标注下单个任务的需求列表的完成状态（尤其是部分完成时），在到达任务的截止时间时不得不交付时，把任务列表及任务需求列表的完成状态（工作日志中的内容）作为报告交付会很直观，方便交流继续推进任务的完成。\n\n### 闭环式\n\n若任务已按需求完成，并按**报告式**的形式交付给上游同事，是顺利的状态。\n\n当任务未完成、完成不顺利时，需要描述下未完成的是任务哪个环节，未完成的原因是什么？开发环境问题，同事协作问题，还是时间分配问题？以便上游同事理解任务的完整现状，并做出对应的计划调整。\n\n闭环式地完成自己的**交付使命**，是上游同事继续完成他的交付使命的基础与前提。\n","date":"2023-06-10T10:49:05.484Z","updated":"2023-06-10T10:49:05.484Z","path":"corporate-culture/workplace-ceremony.html","comments":1,"layout":"page","_id":"clipw1dd2000moix5g38w0llj","content":"<h2 id=\"团队协作\"><a href=\"#团队协作\" class=\"headerlink\" title=\"团队协作\"></a>团队协作</h2><p><img src=\"/images/%E5%9B%A2%E9%98%9F%E5%8D%8F%E4%BD%9C%E4%BD%93%E7%B3%BB.png\" alt=\"团队协作体系\"></p>\n<p><em>注: attachments&#x2F;xmind&#x2F;团队协作体系.xmind</em></p>\n<h2 id=\"职场认知\"><a href=\"#职场认知\" class=\"headerlink\" title=\"职场认知\"></a>职场认知</h2><p><img src=\"/images/%E8%81%8C%E5%9C%BA%E8%AE%A4%E7%9F%A5%E9%97%AD%E7%8E%AF.png\" alt=\"职场认知闭环\"></p>\n<p><em>注: attachments&#x2F;xmind&#x2F;职场认知闭环.xmind</em></p>\n<h2 id=\"职场仪式感\"><a href=\"#职场仪式感\" class=\"headerlink\" title=\"职场仪式感\"></a>职场仪式感</h2><p><img src=\"/images/%E8%81%8C%E5%9C%BA%E4%BB%AA%E5%BC%8F%E6%84%9F.png\" alt=\"职场仪式感\"></p>\n<h2 id=\"培训交付规范\"><a href=\"#培训交付规范\" class=\"headerlink\" title=\"培训交付规范\"></a>培训交付规范</h2><h3 id=\"思维脑图\"><a href=\"#思维脑图\" class=\"headerlink\" title=\"思维脑图\"></a>思维脑图</h3><p><img src=\"/images/%E5%9F%B9%E8%AE%AD%E6%80%BB%E7%BB%93%E4%BA%A4%E4%BB%98%E8%A7%84%E8%8C%83-01.png\" alt=\"培训交付规范\"></p>\n<p><em>注: attachments&#x2F;xmind&#x2F;培训总结交付规范.xmind</em></p>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ol>\n<li>明确交付主题，创建<strong>主题名称的目录</strong></li>\n<li>图片文件命名以<strong>主题为前缀</strong>，以<strong>序号为后缀</strong></li>\n<li>创建 <code>images</code> 目录，并把相关图片放在该目录</li>\n<li><code>markdown</code> 原稿中使用<strong>相对路径</strong>引用图片</li>\n<li><code>markdown</code> 原稿与导出的 PDF 文档放在主题目录</li>\n<li>打包 <code>zip</code> 压缩文档作为交付文档</li>\n</ol>\n<h3 id=\"交付示例\"><a href=\"#交付示例\" class=\"headerlink\" title=\"交付示例\"></a>交付示例</h3><ol>\n<li><em>示例文档</em>目录结构</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">$ tree Desktop/<br><br>Desktop/<br>├── 交付文档示例<br>│   ├── images<br>│   │   ├── 交付文档示例-01.jpeg<br>│   │   └── 交付文档示例-02.png<br>│   ├── 交付文档示例.md<br>│   └── 交付文档示例.pdf<br>└── 交付文档示例.zip // 交付文档<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>图片引用示例</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">## 交付文档示例<br><br>![交付文档示例-01](images/交付文档示例-01.jpeg)<br>![交付文档示例-02](images/交付文档示例-02.png)<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>配置 <code>.md</code> 文档默认使用 MacDown 软件打开</li>\n</ol>\n<p>  <img src=\"/images/%E5%9F%B9%E8%AE%AD%E6%80%BB%E7%BB%93%E4%BA%A4%E4%BB%98%E8%A7%84%E8%8C%83-02.png\" alt=\"培训总结交付规范\"></p>\n<h2 id=\"团队交流规范\"><a href=\"#团队交流规范\" class=\"headerlink\" title=\"团队交流规范\"></a>团队交流规范</h2><ol>\n<li><p>实时交流(工具): 分发任务、需求时下游角色个体必须回应。</p>\n<ol>\n<li>回复 <code>!=</code> 必须立即执行；回复 <code>==</code> 态度。</li>\n<li>非特殊情况实时回复，其他同事相互提醒。</li>\n<li>若任务紧急但下游角色个体时间不便，主动向其他同事救助或向上游角色解释说明。</li>\n</ol>\n</li>\n<li><p>正式交流(邮件、交付文档)</p>\n<ol>\n<li>超出三个说明事项的场景时可考虑文档形式。</li>\n<li>周报、开发时间计划表、验收文档必须以文档形式，并通过邮件交付。</li>\n<li>寄出邮件后，在实时交流工具中以邮件截图通知对方查收邮箱。</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"团队执行力\"><a href=\"#团队执行力\" class=\"headerlink\" title=\"团队执行力\"></a>团队执行力</h2><p><img src=\"/images/%E5%9B%A2%E9%98%9F%E6%95%88%E7%8E%87%E9%A9%B1%E5%8A%A8%E5%9B%BE.png\"></p>\n<p><em>注: attachments&#x2F;xmind&#x2F;团队效率驱动图.xmind</em></p>\n<h2 id=\"协作规范\"><a href=\"#协作规范\" class=\"headerlink\" title=\"协作规范\"></a>协作规范</h2><h3 id=\"结论式\"><a href=\"#结论式\" class=\"headerlink\" title=\"结论式\"></a>结论式</h3><p>职场认知中强调工作中的任务行为<strong>必须要交付</strong>，否则会进入被动状态。即<strong>无论任务是否完成，都需要在约定好的时间内把任务状态交付给上游同事</strong>。</p>\n<h3 id=\"列表式\"><a href=\"#列表式\" class=\"headerlink\" title=\"列表式\"></a>列表式</h3><p>团队成员之间协作的事项有许多共性，所以按需求分配出来的的任务应该是列表式的，方便<strong>梳理业务流</strong>、<strong>调整优先级</strong>，当前工作日志格式的规范就源自这个理念。</p>\n<p><strong>重点</strong>，分发任务时是非常清晰的列表方式，那么交付任务的完成状态时也应该是<strong>列表式</strong>的，否则接收人无法完整地理解是在描述哪个任务。</p>\n<h3 id=\"报告式\"><a href=\"#报告式\" class=\"headerlink\" title=\"报告式\"></a>报告式</h3><p><em>列表式</em>针对的是<strong>任务列表</strong>，<em>报告式</em>针对的是<strong>单个任务的需求列表</strong>。</p>\n<p>每个任务都有需求列表，这是判断任务是否完成的依据，也是工作日志中的重要内容。标注下单个任务的需求列表的完成状态（尤其是部分完成时），在到达任务的截止时间时不得不交付时，把任务列表及任务需求列表的完成状态（工作日志中的内容）作为报告交付会很直观，方便交流继续推进任务的完成。</p>\n<h3 id=\"闭环式\"><a href=\"#闭环式\" class=\"headerlink\" title=\"闭环式\"></a>闭环式</h3><p>若任务已按需求完成，并按<strong>报告式</strong>的形式交付给上游同事，是顺利的状态。</p>\n<p>当任务未完成、完成不顺利时，需要描述下未完成的是任务哪个环节，未完成的原因是什么？开发环境问题，同事协作问题，还是时间分配问题？以便上游同事理解任务的完整现状，并做出对应的计划调整。</p>\n<p>闭环式地完成自己的<strong>交付使命</strong>，是上游同事继续完成他的交付使命的基础与前提。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"团队协作\"><a href=\"#团队协作\" class=\"headerlink\" title=\"团队协作\"></a>团队协作</h2><p><img src=\"/images/%E5%9B%A2%E9%98%9F%E5%8D%8F%E4%BD%9C%E4%BD%93%E7%B3%BB.png\" alt=\"团队协作体系\"></p>\n<p><em>注: attachments&#x2F;xmind&#x2F;团队协作体系.xmind</em></p>\n<h2 id=\"职场认知\"><a href=\"#职场认知\" class=\"headerlink\" title=\"职场认知\"></a>职场认知</h2><p><img src=\"/images/%E8%81%8C%E5%9C%BA%E8%AE%A4%E7%9F%A5%E9%97%AD%E7%8E%AF.png\" alt=\"职场认知闭环\"></p>\n<p><em>注: attachments&#x2F;xmind&#x2F;职场认知闭环.xmind</em></p>\n<h2 id=\"职场仪式感\"><a href=\"#职场仪式感\" class=\"headerlink\" title=\"职场仪式感\"></a>职场仪式感</h2><p><img src=\"/images/%E8%81%8C%E5%9C%BA%E4%BB%AA%E5%BC%8F%E6%84%9F.png\" alt=\"职场仪式感\"></p>\n<h2 id=\"培训交付规范\"><a href=\"#培训交付规范\" class=\"headerlink\" title=\"培训交付规范\"></a>培训交付规范</h2><h3 id=\"思维脑图\"><a href=\"#思维脑图\" class=\"headerlink\" title=\"思维脑图\"></a>思维脑图</h3><p><img src=\"/images/%E5%9F%B9%E8%AE%AD%E6%80%BB%E7%BB%93%E4%BA%A4%E4%BB%98%E8%A7%84%E8%8C%83-01.png\" alt=\"培训交付规范\"></p>\n<p><em>注: attachments&#x2F;xmind&#x2F;培训总结交付规范.xmind</em></p>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ol>\n<li>明确交付主题，创建<strong>主题名称的目录</strong></li>\n<li>图片文件命名以<strong>主题为前缀</strong>，以<strong>序号为后缀</strong></li>\n<li>创建 <code>images</code> 目录，并把相关图片放在该目录</li>\n<li><code>markdown</code> 原稿中使用<strong>相对路径</strong>引用图片</li>\n<li><code>markdown</code> 原稿与导出的 PDF 文档放在主题目录</li>\n<li>打包 <code>zip</code> 压缩文档作为交付文档</li>\n</ol>\n<h3 id=\"交付示例\"><a href=\"#交付示例\" class=\"headerlink\" title=\"交付示例\"></a>交付示例</h3><ol>\n<li><em>示例文档</em>目录结构</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">$ tree Desktop/<br><br>Desktop/<br>├── 交付文档示例<br>│   ├── images<br>│   │   ├── 交付文档示例-01.jpeg<br>│   │   └── 交付文档示例-02.png<br>│   ├── 交付文档示例.md<br>│   └── 交付文档示例.pdf<br>└── 交付文档示例.zip // 交付文档<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>图片引用示例</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">## 交付文档示例<br><br>![交付文档示例-01](images/交付文档示例-01.jpeg)<br>![交付文档示例-02](images/交付文档示例-02.png)<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>配置 <code>.md</code> 文档默认使用 MacDown 软件打开</li>\n</ol>\n<p>  <img src=\"/images/%E5%9F%B9%E8%AE%AD%E6%80%BB%E7%BB%93%E4%BA%A4%E4%BB%98%E8%A7%84%E8%8C%83-02.png\" alt=\"培训总结交付规范\"></p>\n<h2 id=\"团队交流规范\"><a href=\"#团队交流规范\" class=\"headerlink\" title=\"团队交流规范\"></a>团队交流规范</h2><ol>\n<li><p>实时交流(工具): 分发任务、需求时下游角色个体必须回应。</p>\n<ol>\n<li>回复 <code>!=</code> 必须立即执行；回复 <code>==</code> 态度。</li>\n<li>非特殊情况实时回复，其他同事相互提醒。</li>\n<li>若任务紧急但下游角色个体时间不便，主动向其他同事救助或向上游角色解释说明。</li>\n</ol>\n</li>\n<li><p>正式交流(邮件、交付文档)</p>\n<ol>\n<li>超出三个说明事项的场景时可考虑文档形式。</li>\n<li>周报、开发时间计划表、验收文档必须以文档形式，并通过邮件交付。</li>\n<li>寄出邮件后，在实时交流工具中以邮件截图通知对方查收邮箱。</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"团队执行力\"><a href=\"#团队执行力\" class=\"headerlink\" title=\"团队执行力\"></a>团队执行力</h2><p><img src=\"/images/%E5%9B%A2%E9%98%9F%E6%95%88%E7%8E%87%E9%A9%B1%E5%8A%A8%E5%9B%BE.png\"></p>\n<p><em>注: attachments&#x2F;xmind&#x2F;团队效率驱动图.xmind</em></p>\n<h2 id=\"协作规范\"><a href=\"#协作规范\" class=\"headerlink\" title=\"协作规范\"></a>协作规范</h2><h3 id=\"结论式\"><a href=\"#结论式\" class=\"headerlink\" title=\"结论式\"></a>结论式</h3><p>职场认知中强调工作中的任务行为<strong>必须要交付</strong>，否则会进入被动状态。即<strong>无论任务是否完成，都需要在约定好的时间内把任务状态交付给上游同事</strong>。</p>\n<h3 id=\"列表式\"><a href=\"#列表式\" class=\"headerlink\" title=\"列表式\"></a>列表式</h3><p>团队成员之间协作的事项有许多共性，所以按需求分配出来的的任务应该是列表式的，方便<strong>梳理业务流</strong>、<strong>调整优先级</strong>，当前工作日志格式的规范就源自这个理念。</p>\n<p><strong>重点</strong>，分发任务时是非常清晰的列表方式，那么交付任务的完成状态时也应该是<strong>列表式</strong>的，否则接收人无法完整地理解是在描述哪个任务。</p>\n<h3 id=\"报告式\"><a href=\"#报告式\" class=\"headerlink\" title=\"报告式\"></a>报告式</h3><p><em>列表式</em>针对的是<strong>任务列表</strong>，<em>报告式</em>针对的是<strong>单个任务的需求列表</strong>。</p>\n<p>每个任务都有需求列表，这是判断任务是否完成的依据，也是工作日志中的重要内容。标注下单个任务的需求列表的完成状态（尤其是部分完成时），在到达任务的截止时间时不得不交付时，把任务列表及任务需求列表的完成状态（工作日志中的内容）作为报告交付会很直观，方便交流继续推进任务的完成。</p>\n<h3 id=\"闭环式\"><a href=\"#闭环式\" class=\"headerlink\" title=\"闭环式\"></a>闭环式</h3><p>若任务已按需求完成，并按<strong>报告式</strong>的形式交付给上游同事，是顺利的状态。</p>\n<p>当任务未完成、完成不顺利时，需要描述下未完成的是任务哪个环节，未完成的原因是什么？开发环境问题，同事协作问题，还是时间分配问题？以便上游同事理解任务的完整现状，并做出对应的计划调整。</p>\n<p>闭环式地完成自己的<strong>交付使命</strong>，是上游同事继续完成他的交付使命的基础与前提。</p>\n"},{"title":"运营平台添加模块","type":"运营平台添加模块","_content":"\n## 企业朔源码\n\n1. 溯源码是一个独立的模块（后面会详讲），该码会绑定企业信息\n2. 用户注册流程中，就是通过扫描溯源码（与码绑定的业务信息无关，仅需要企业信息）绑定企业信息\n3. 并非所有企业都有溯源码的模块需求，但所有企业的新用户注册流程中都需要扫码\n4. 在运营平台企业管理列表中添加展示溯源码（没有则创建一个）\n5. 业务同事根据用户需求，打印或邮件发该企业的溯源码\n\n## 企业管理菜单\n\n### 添加溯源码列\n\n- 修改 SaasEnterpriseMapper.xml 文件中id为 queryList 的SQL语句，添加查询结果字段 qrCodeUuid 以及添加对应的关联表 \n\n  ```sql\n  SELECT  ae.*, ar.role_name ,\n    ag.group_name ,\n    sqced.uuid AS qrCodeUuid\n  FROM sup_enterprises AS ae\n  LEFT JOIN app_roles AS ar ON ar.id = ae.role_id\n  LEFT JOIN app_groups AS ag ON ag.group_id = ae.group_id\n  LEFT JOIN(\n    SELECT\n      max(uuid) AS uuid ,\n      enterprise_uuid\n    FROM\n      sup_qr_code_business_data\n    GROUP BY\n      enterprise_uuid\n  ) AS sqced ON sqced.enterprise_uuid = ae.uuid\n  WHERE ae.is_delete = 0\n  .....\n  ```\n\n- 在saasenterprise.js中添企业朔源码列\n\n  ```javascript\n  {\n    label: '企业朔源码', name: 'qrCodeUuid', index: 'qrCodeUuid', width: 60,\n  }\n  ```\n\n### 检查朔源码按钮\n\n- 在 SaasEnterpriseMapper.xml 中添加 id 为queryListByNoParams 的SQL，实现无参数获取企业信息\n\n  ```sql\n  SELECT  ae.*, ar.role_name ,\n    ag.group_name ,\n    sqced.uuid AS qrCodeUuid\n  FROM sup_enterprises AS ae\n  LEFT JOIN app_roles AS ar ON ar.id = ae.role_id\n  LEFT JOIN app_groups AS ag ON ag.group_id = ae.group_id\n  LEFT JOIN(\n    SELECT\n      max(uuid) AS uuid ,\n      enterprise_uuid\n    FROM\n      sup_qr_code_business_data\n    GROUP BY\n      enterprise_uuid\n  ) AS sqced ON sqced.enterprise_uuid = ae.uuid\n  WHERE ae.is_delete = 0\n  ```\n\n- 在 SaasEnterpriseMapper.xml 中添加 id 为 insertQrCodeUuid 的SQL，向朔源码信息表 sup_qr_code_business_data 中添加 qrCodeUuid 以及对应的企业信息\n\n  ```sql\n  INSERT INTO sup_qr_code_business_data(\n              uuid ,\n              enterprise_name ,\n              enterprise_code ,\n              enterprise_uuid ,\n              target_url ,\n              data_json ,\n              remark ,\n              create_user ,\n              update_user\n          )\n  VALUES (\n              #{param1} ,\n              #{param2} ,\n              #{param3} ,\n              #{param4} ,\n              null ,\n              #{param5} ,\n              null ,\n              #{param6} ,\n              null\n          )\n  ```\n\n- 在 SaasEnterpriseService、SaasEnterpriseServiceImpl和SaasEnterpriseMapper.java 中添加对应的 queryEnterpriseService 和 insertQrCodeuuid 方法\n\n- 在 SaasEnterpriseController 中添加 createEnterpriseTackingCode(String createUser) 方法\n\n  - 调用 `saasEnterpriseService.queryListByNoParams()` 获得企业信息列表 saasEnterpriseList\n  - 遍历 saasEnterpriseList ，每次遍历单体对象是 saasEnterprise\n  - 判断 saasEnterprise.getQrCodeUuid() 是否为空，为空则生成qrCodeUuid\n    - 调用 `RandomNumString.getCheckUuid(System.currentTimeMillis()) + RandomNumString.randomStringCheck32Uuid(10) + RandomNumString.getRandomNumber(100000)` 生成32位字符串 dataUuid\n    - 将企业信息 saasEnterprise 转为JSON字符串 dataJson\n    - 调用 `saasEnterpriseService.insertQrCodeUuid(dataUuid, saasEnterprise.getName(),saasEnterprise.getCode(), saasEnterprise.getUuid(), dataJson, createUser)` 向朔源码信息表中插入新添加的数据\n\n- saasenterprise.js 中添加 createEnterpriseTackingCode 方法，需要传入参数 createUser ，通过弹窗输入值，方法调用 `../saas-enterprise/tracking-code/createEnterpriseTackingCode` 接口，补全所有企业朔源码，成功后刷新页面列表\n\n  ```javascript\n  methods{\n      createEnterpriseTackingCode: function () {\n              var htmlStr = '<span style=\"color: red; text-align: center;display:block;\">生成企业朔源码，请耐心等待</span>';\n              htmlStr = htmlStr + '<input type=\"text\" id=\"createUser\" style=\"text-align: center; width: 280px;\" placeholder=\"请输入创建人：小明（15200000000）\"/>';\n  \n              var indexConfirm = layer.confirm(htmlStr, {\n                  btn: [\n                      '确认', '取消'\n                  ],\n                  btnAlign: 'c',\n                  title: \"批量添加企业朔源码\"\n              }, function () {\n                  var createUser = $(\"#createUser\").val();\n                      $.ajax({\n                          type: \"GET\",\n                          url: \"../saas-enterprise/tracking-code/createEnterpriseTackingCode\",\n                          data: {\n                              createUser: createUser\n                          },\n                          success: function (r) {\n                              if (r.code == 0) {\n                                  alert('操作成功', function () {   $(\"#jqGrid\").trigger(\"reloadGrid\");\n                                  });\n                                  vm.reload();\n                              } else {\n                                  alert(r.msg);\n                              }\n                          }\n                      });\n                  layer.close(indexConfirm);\n              }, function () {\n                  layer.close(indexConfirm);\n              });\n          },\n  }\n  ```\n\n- 在 saasenterprise.html 中添加一个点击事件\n\n  ```html\n  <a class=\"btn btn-primary\" @click=\"createEnterpriseTackingCode\">补全朔源码</a>\n  ```\n\n\n### 查看朔源码按钮 \n\n- 在 SaasEnterpriseController 中添加 show 方法，需要参数 id ，这个 id 是页面展示的行id\n\n  - 调用 `saasEnterpriseService.queryListByNoParams()` 方法获得企业信息列表 saasEnterpriseList\n  - 遍历 saasEnterpriseList ，每一次遍历单体对象是 saasEnterprise\n  - 判断 saasEnterprise.getId() 是否和参数 id 相等，相等则通过 saasEnterprise.getQrCodeUuid() 获得 qrCodeUuid \n  - 如果 qrCodeUuid 为空\n    - 调用 `RandomNumString.getCheckUuid(System.currentTimeMillis()) + RandomNumString.randomStringCheck32Uuid(10) + RandomNumString.getRandomNumber(100000)` 生成 dataUuid \n    - 将企业信息 saasEnterprise 转为JSON字符串 dataJson\n    - 调用 `saasEnterpriseService.insertQrCodeUuid(dataUuid, saasEnterprise.getName(),saasEnterprise.getCode(), saasEnterprise.getUuid(), dataJson, createUser)` 向朔源码信息表中插入新添加的数据\n    - 将 dataUuid 赋值给 qrCodeUuid\n  - 返回实体信息中封装 qrCodeUuid 并返回\n\n- 在 saasenterprise.js 中添加 showTackingCode 方法，在 data 下 添加参数 qrCodeuuid:\"\"\n\n  ```javascript\n  <!--添加参数变量-->\n  data:{\n    showList: true,\n    show: 1,\n    title: null,\n    saasEnterprise: {},\n    qrCodeUuid: \"\"\n  }\n  \n  <!--添加方法-->\n  methods:{showTackingCode: function () {\n              var id = getSelectedRow();\n              $.get(\"../saas-enterprise/show/\" + id, function (r) {\n                  vm.qrCodeUuid = r.qrCodeUuid;\n                  if (vm.qrCodeUuid == null || \"\"==vm.qrCodeUuid) {\n                      return null;\n                  } else {\n                      alert(\"<img src='http://qr.topscan.com/api.php?&w=300&text=\" + vm.qrCodeUuid + \"'/>\");\n                  }\n              });\n          },\n          }\n  ```\n\n- 在 saasenterprise.html 中添加单击事件\n\n  ```html\n  <a class=\"btn btn-primary\" @click=\"showTackingCode\">查看朔源码</a>\n  ```\n\n  ","source":"developer/api-guide/java-admin-add-module.md","raw":"---\ntitle: 运营平台添加模块\ntype: 运营平台添加模块\n---\n\n## 企业朔源码\n\n1. 溯源码是一个独立的模块（后面会详讲），该码会绑定企业信息\n2. 用户注册流程中，就是通过扫描溯源码（与码绑定的业务信息无关，仅需要企业信息）绑定企业信息\n3. 并非所有企业都有溯源码的模块需求，但所有企业的新用户注册流程中都需要扫码\n4. 在运营平台企业管理列表中添加展示溯源码（没有则创建一个）\n5. 业务同事根据用户需求，打印或邮件发该企业的溯源码\n\n## 企业管理菜单\n\n### 添加溯源码列\n\n- 修改 SaasEnterpriseMapper.xml 文件中id为 queryList 的SQL语句，添加查询结果字段 qrCodeUuid 以及添加对应的关联表 \n\n  ```sql\n  SELECT  ae.*, ar.role_name ,\n    ag.group_name ,\n    sqced.uuid AS qrCodeUuid\n  FROM sup_enterprises AS ae\n  LEFT JOIN app_roles AS ar ON ar.id = ae.role_id\n  LEFT JOIN app_groups AS ag ON ag.group_id = ae.group_id\n  LEFT JOIN(\n    SELECT\n      max(uuid) AS uuid ,\n      enterprise_uuid\n    FROM\n      sup_qr_code_business_data\n    GROUP BY\n      enterprise_uuid\n  ) AS sqced ON sqced.enterprise_uuid = ae.uuid\n  WHERE ae.is_delete = 0\n  .....\n  ```\n\n- 在saasenterprise.js中添企业朔源码列\n\n  ```javascript\n  {\n    label: '企业朔源码', name: 'qrCodeUuid', index: 'qrCodeUuid', width: 60,\n  }\n  ```\n\n### 检查朔源码按钮\n\n- 在 SaasEnterpriseMapper.xml 中添加 id 为queryListByNoParams 的SQL，实现无参数获取企业信息\n\n  ```sql\n  SELECT  ae.*, ar.role_name ,\n    ag.group_name ,\n    sqced.uuid AS qrCodeUuid\n  FROM sup_enterprises AS ae\n  LEFT JOIN app_roles AS ar ON ar.id = ae.role_id\n  LEFT JOIN app_groups AS ag ON ag.group_id = ae.group_id\n  LEFT JOIN(\n    SELECT\n      max(uuid) AS uuid ,\n      enterprise_uuid\n    FROM\n      sup_qr_code_business_data\n    GROUP BY\n      enterprise_uuid\n  ) AS sqced ON sqced.enterprise_uuid = ae.uuid\n  WHERE ae.is_delete = 0\n  ```\n\n- 在 SaasEnterpriseMapper.xml 中添加 id 为 insertQrCodeUuid 的SQL，向朔源码信息表 sup_qr_code_business_data 中添加 qrCodeUuid 以及对应的企业信息\n\n  ```sql\n  INSERT INTO sup_qr_code_business_data(\n              uuid ,\n              enterprise_name ,\n              enterprise_code ,\n              enterprise_uuid ,\n              target_url ,\n              data_json ,\n              remark ,\n              create_user ,\n              update_user\n          )\n  VALUES (\n              #{param1} ,\n              #{param2} ,\n              #{param3} ,\n              #{param4} ,\n              null ,\n              #{param5} ,\n              null ,\n              #{param6} ,\n              null\n          )\n  ```\n\n- 在 SaasEnterpriseService、SaasEnterpriseServiceImpl和SaasEnterpriseMapper.java 中添加对应的 queryEnterpriseService 和 insertQrCodeuuid 方法\n\n- 在 SaasEnterpriseController 中添加 createEnterpriseTackingCode(String createUser) 方法\n\n  - 调用 `saasEnterpriseService.queryListByNoParams()` 获得企业信息列表 saasEnterpriseList\n  - 遍历 saasEnterpriseList ，每次遍历单体对象是 saasEnterprise\n  - 判断 saasEnterprise.getQrCodeUuid() 是否为空，为空则生成qrCodeUuid\n    - 调用 `RandomNumString.getCheckUuid(System.currentTimeMillis()) + RandomNumString.randomStringCheck32Uuid(10) + RandomNumString.getRandomNumber(100000)` 生成32位字符串 dataUuid\n    - 将企业信息 saasEnterprise 转为JSON字符串 dataJson\n    - 调用 `saasEnterpriseService.insertQrCodeUuid(dataUuid, saasEnterprise.getName(),saasEnterprise.getCode(), saasEnterprise.getUuid(), dataJson, createUser)` 向朔源码信息表中插入新添加的数据\n\n- saasenterprise.js 中添加 createEnterpriseTackingCode 方法，需要传入参数 createUser ，通过弹窗输入值，方法调用 `../saas-enterprise/tracking-code/createEnterpriseTackingCode` 接口，补全所有企业朔源码，成功后刷新页面列表\n\n  ```javascript\n  methods{\n      createEnterpriseTackingCode: function () {\n              var htmlStr = '<span style=\"color: red; text-align: center;display:block;\">生成企业朔源码，请耐心等待</span>';\n              htmlStr = htmlStr + '<input type=\"text\" id=\"createUser\" style=\"text-align: center; width: 280px;\" placeholder=\"请输入创建人：小明（15200000000）\"/>';\n  \n              var indexConfirm = layer.confirm(htmlStr, {\n                  btn: [\n                      '确认', '取消'\n                  ],\n                  btnAlign: 'c',\n                  title: \"批量添加企业朔源码\"\n              }, function () {\n                  var createUser = $(\"#createUser\").val();\n                      $.ajax({\n                          type: \"GET\",\n                          url: \"../saas-enterprise/tracking-code/createEnterpriseTackingCode\",\n                          data: {\n                              createUser: createUser\n                          },\n                          success: function (r) {\n                              if (r.code == 0) {\n                                  alert('操作成功', function () {   $(\"#jqGrid\").trigger(\"reloadGrid\");\n                                  });\n                                  vm.reload();\n                              } else {\n                                  alert(r.msg);\n                              }\n                          }\n                      });\n                  layer.close(indexConfirm);\n              }, function () {\n                  layer.close(indexConfirm);\n              });\n          },\n  }\n  ```\n\n- 在 saasenterprise.html 中添加一个点击事件\n\n  ```html\n  <a class=\"btn btn-primary\" @click=\"createEnterpriseTackingCode\">补全朔源码</a>\n  ```\n\n\n### 查看朔源码按钮 \n\n- 在 SaasEnterpriseController 中添加 show 方法，需要参数 id ，这个 id 是页面展示的行id\n\n  - 调用 `saasEnterpriseService.queryListByNoParams()` 方法获得企业信息列表 saasEnterpriseList\n  - 遍历 saasEnterpriseList ，每一次遍历单体对象是 saasEnterprise\n  - 判断 saasEnterprise.getId() 是否和参数 id 相等，相等则通过 saasEnterprise.getQrCodeUuid() 获得 qrCodeUuid \n  - 如果 qrCodeUuid 为空\n    - 调用 `RandomNumString.getCheckUuid(System.currentTimeMillis()) + RandomNumString.randomStringCheck32Uuid(10) + RandomNumString.getRandomNumber(100000)` 生成 dataUuid \n    - 将企业信息 saasEnterprise 转为JSON字符串 dataJson\n    - 调用 `saasEnterpriseService.insertQrCodeUuid(dataUuid, saasEnterprise.getName(),saasEnterprise.getCode(), saasEnterprise.getUuid(), dataJson, createUser)` 向朔源码信息表中插入新添加的数据\n    - 将 dataUuid 赋值给 qrCodeUuid\n  - 返回实体信息中封装 qrCodeUuid 并返回\n\n- 在 saasenterprise.js 中添加 showTackingCode 方法，在 data 下 添加参数 qrCodeuuid:\"\"\n\n  ```javascript\n  <!--添加参数变量-->\n  data:{\n    showList: true,\n    show: 1,\n    title: null,\n    saasEnterprise: {},\n    qrCodeUuid: \"\"\n  }\n  \n  <!--添加方法-->\n  methods:{showTackingCode: function () {\n              var id = getSelectedRow();\n              $.get(\"../saas-enterprise/show/\" + id, function (r) {\n                  vm.qrCodeUuid = r.qrCodeUuid;\n                  if (vm.qrCodeUuid == null || \"\"==vm.qrCodeUuid) {\n                      return null;\n                  } else {\n                      alert(\"<img src='http://qr.topscan.com/api.php?&w=300&text=\" + vm.qrCodeUuid + \"'/>\");\n                  }\n              });\n          },\n          }\n  ```\n\n- 在 saasenterprise.html 中添加单击事件\n\n  ```html\n  <a class=\"btn btn-primary\" @click=\"showTackingCode\">查看朔源码</a>\n  ```\n\n  ","date":"2023-06-10T10:49:05.485Z","updated":"2023-06-10T10:49:05.485Z","path":"developer/api-guide/java-admin-add-module.html","comments":1,"layout":"page","_id":"clipw1dd2000noix53l1a95ra","content":"<h2 id=\"企业朔源码\"><a href=\"#企业朔源码\" class=\"headerlink\" title=\"企业朔源码\"></a>企业朔源码</h2><ol>\n<li>溯源码是一个独立的模块（后面会详讲），该码会绑定企业信息</li>\n<li>用户注册流程中，就是通过扫描溯源码（与码绑定的业务信息无关，仅需要企业信息）绑定企业信息</li>\n<li>并非所有企业都有溯源码的模块需求，但所有企业的新用户注册流程中都需要扫码</li>\n<li>在运营平台企业管理列表中添加展示溯源码（没有则创建一个）</li>\n<li>业务同事根据用户需求，打印或邮件发该企业的溯源码</li>\n</ol>\n<h2 id=\"企业管理菜单\"><a href=\"#企业管理菜单\" class=\"headerlink\" title=\"企业管理菜单\"></a>企业管理菜单</h2><h3 id=\"添加溯源码列\"><a href=\"#添加溯源码列\" class=\"headerlink\" title=\"添加溯源码列\"></a>添加溯源码列</h3><ul>\n<li><p>修改 SaasEnterpriseMapper.xml 文件中id为 queryList 的SQL语句，添加查询结果字段 qrCodeUuid 以及添加对应的关联表 </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span>  ae.<span class=\"hljs-operator\">*</span>, ar.role_name ,<br>  ag.group_name ,<br>  sqced.uuid <span class=\"hljs-keyword\">AS</span> qrCodeUuid<br><span class=\"hljs-keyword\">FROM</span> sup_enterprises <span class=\"hljs-keyword\">AS</span> ae<br><span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">JOIN</span> app_roles <span class=\"hljs-keyword\">AS</span> ar <span class=\"hljs-keyword\">ON</span> ar.id <span class=\"hljs-operator\">=</span> ae.role_id<br><span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">JOIN</span> app_groups <span class=\"hljs-keyword\">AS</span> ag <span class=\"hljs-keyword\">ON</span> ag.group_id <span class=\"hljs-operator\">=</span> ae.group_id<br><span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">JOIN</span>(<br>  <span class=\"hljs-keyword\">SELECT</span><br>    <span class=\"hljs-built_in\">max</span>(uuid) <span class=\"hljs-keyword\">AS</span> uuid ,<br>    enterprise_uuid<br>  <span class=\"hljs-keyword\">FROM</span><br>    sup_qr_code_business_data<br>  <span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span><br>    enterprise_uuid<br>) <span class=\"hljs-keyword\">AS</span> sqced <span class=\"hljs-keyword\">ON</span> sqced.enterprise_uuid <span class=\"hljs-operator\">=</span> ae.uuid<br><span class=\"hljs-keyword\">WHERE</span> ae.is_delete <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span><br>.....<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>在saasenterprise.js中添企业朔源码列</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">&#123;<br>  <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">&#x27;企业朔源码&#x27;</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;qrCodeUuid&#x27;</span>, <span class=\"hljs-attr\">index</span>: <span class=\"hljs-string\">&#x27;qrCodeUuid&#x27;</span>, <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">60</span>,<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"检查朔源码按钮\"><a href=\"#检查朔源码按钮\" class=\"headerlink\" title=\"检查朔源码按钮\"></a>检查朔源码按钮</h3><ul>\n<li><p>在 SaasEnterpriseMapper.xml 中添加 id 为queryListByNoParams 的SQL，实现无参数获取企业信息</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span>  ae.<span class=\"hljs-operator\">*</span>, ar.role_name ,<br>  ag.group_name ,<br>  sqced.uuid <span class=\"hljs-keyword\">AS</span> qrCodeUuid<br><span class=\"hljs-keyword\">FROM</span> sup_enterprises <span class=\"hljs-keyword\">AS</span> ae<br><span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">JOIN</span> app_roles <span class=\"hljs-keyword\">AS</span> ar <span class=\"hljs-keyword\">ON</span> ar.id <span class=\"hljs-operator\">=</span> ae.role_id<br><span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">JOIN</span> app_groups <span class=\"hljs-keyword\">AS</span> ag <span class=\"hljs-keyword\">ON</span> ag.group_id <span class=\"hljs-operator\">=</span> ae.group_id<br><span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">JOIN</span>(<br>  <span class=\"hljs-keyword\">SELECT</span><br>    <span class=\"hljs-built_in\">max</span>(uuid) <span class=\"hljs-keyword\">AS</span> uuid ,<br>    enterprise_uuid<br>  <span class=\"hljs-keyword\">FROM</span><br>    sup_qr_code_business_data<br>  <span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span><br>    enterprise_uuid<br>) <span class=\"hljs-keyword\">AS</span> sqced <span class=\"hljs-keyword\">ON</span> sqced.enterprise_uuid <span class=\"hljs-operator\">=</span> ae.uuid<br><span class=\"hljs-keyword\">WHERE</span> ae.is_delete <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>在 SaasEnterpriseMapper.xml 中添加 id 为 insertQrCodeUuid 的SQL，向朔源码信息表 sup_qr_code_business_data 中添加 qrCodeUuid 以及对应的企业信息</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> sup_qr_code_business_data(<br>            uuid ,<br>            enterprise_name ,<br>            enterprise_code ,<br>            enterprise_uuid ,<br>            target_url ,<br>            data_json ,<br>            remark ,<br>            create_user ,<br>            update_user<br>        )<br><span class=\"hljs-keyword\">VALUES</span> (<br>            #&#123;param1&#125; ,<br>            #&#123;param2&#125; ,<br>            #&#123;param3&#125; ,<br>            #&#123;param4&#125; ,<br>            <span class=\"hljs-keyword\">null</span> ,<br>            #&#123;param5&#125; ,<br>            <span class=\"hljs-keyword\">null</span> ,<br>            #&#123;param6&#125; ,<br>            <span class=\"hljs-keyword\">null</span><br>        )<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>在 SaasEnterpriseService、SaasEnterpriseServiceImpl和SaasEnterpriseMapper.java 中添加对应的 queryEnterpriseService 和 insertQrCodeuuid 方法</p>\n</li>\n<li><p>在 SaasEnterpriseController 中添加 createEnterpriseTackingCode(String createUser) 方法</p>\n<ul>\n<li>调用 <code>saasEnterpriseService.queryListByNoParams()</code> 获得企业信息列表 saasEnterpriseList</li>\n<li>遍历 saasEnterpriseList ，每次遍历单体对象是 saasEnterprise</li>\n<li>判断 saasEnterprise.getQrCodeUuid() 是否为空，为空则生成qrCodeUuid<ul>\n<li>调用 <code>RandomNumString.getCheckUuid(System.currentTimeMillis()) + RandomNumString.randomStringCheck32Uuid(10) + RandomNumString.getRandomNumber(100000)</code> 生成32位字符串 dataUuid</li>\n<li>将企业信息 saasEnterprise 转为JSON字符串 dataJson</li>\n<li>调用 <code>saasEnterpriseService.insertQrCodeUuid(dataUuid, saasEnterprise.getName(),saasEnterprise.getCode(), saasEnterprise.getUuid(), dataJson, createUser)</code> 向朔源码信息表中插入新添加的数据</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>saasenterprise.js 中添加 createEnterpriseTackingCode 方法，需要传入参数 createUser ，通过弹窗输入值，方法调用 <code>../saas-enterprise/tracking-code/createEnterpriseTackingCode</code> 接口，补全所有企业朔源码，成功后刷新页面列表</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">methods&#123;<br>    <span class=\"hljs-attr\">createEnterpriseTackingCode</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>            <span class=\"hljs-keyword\">var</span> htmlStr = <span class=\"hljs-string\">&#x27;&lt;span style=&quot;color: red; text-align: center;display:block;&quot;&gt;生成企业朔源码，请耐心等待&lt;/span&gt;&#x27;</span>;<br>            htmlStr = htmlStr + <span class=\"hljs-string\">&#x27;&lt;input type=&quot;text&quot; id=&quot;createUser&quot; style=&quot;text-align: center; width: 280px;&quot; placeholder=&quot;请输入创建人：小明（15200000000）&quot;/&gt;&#x27;</span>;<br><br>            <span class=\"hljs-keyword\">var</span> indexConfirm = layer.<span class=\"hljs-title function_\">confirm</span>(htmlStr, &#123;<br>                <span class=\"hljs-attr\">btn</span>: [<br>                    <span class=\"hljs-string\">&#x27;确认&#x27;</span>, <span class=\"hljs-string\">&#x27;取消&#x27;</span><br>                ],<br>                <span class=\"hljs-attr\">btnAlign</span>: <span class=\"hljs-string\">&#x27;c&#x27;</span>,<br>                <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&quot;批量添加企业朔源码&quot;</span><br>            &#125;, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>                <span class=\"hljs-keyword\">var</span> createUser = $(<span class=\"hljs-string\">&quot;#createUser&quot;</span>).<span class=\"hljs-title function_\">val</span>();<br>                    $.<span class=\"hljs-title function_\">ajax</span>(&#123;<br>                        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;GET&quot;</span>,<br>                        <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">&quot;../saas-enterprise/tracking-code/createEnterpriseTackingCode&quot;</span>,<br>                        <span class=\"hljs-attr\">data</span>: &#123;<br>                            <span class=\"hljs-attr\">createUser</span>: createUser<br>                        &#125;,<br>                        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">r</span>) &#123;<br>                            <span class=\"hljs-keyword\">if</span> (r.<span class=\"hljs-property\">code</span> == <span class=\"hljs-number\">0</span>) &#123;<br>                                <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&#x27;操作成功&#x27;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;   $(<span class=\"hljs-string\">&quot;#jqGrid&quot;</span>).<span class=\"hljs-title function_\">trigger</span>(<span class=\"hljs-string\">&quot;reloadGrid&quot;</span>);<br>                                &#125;);<br>                                vm.<span class=\"hljs-title function_\">reload</span>();<br>                            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                                <span class=\"hljs-title function_\">alert</span>(r.<span class=\"hljs-property\">msg</span>);<br>                            &#125;<br>                        &#125;<br>                    &#125;);<br>                layer.<span class=\"hljs-title function_\">close</span>(indexConfirm);<br>            &#125;, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>                layer.<span class=\"hljs-title function_\">close</span>(indexConfirm);<br>            &#125;);<br>        &#125;,<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>在 saasenterprise.html 中添加一个点击事件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;btn btn-primary&quot;</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;createEnterpriseTackingCode&quot;</span>&gt;</span>补全朔源码<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"查看朔源码按钮\"><a href=\"#查看朔源码按钮\" class=\"headerlink\" title=\"查看朔源码按钮\"></a>查看朔源码按钮</h3><ul>\n<li><p>在 SaasEnterpriseController 中添加 show 方法，需要参数 id ，这个 id 是页面展示的行id</p>\n<ul>\n<li>调用 <code>saasEnterpriseService.queryListByNoParams()</code> 方法获得企业信息列表 saasEnterpriseList</li>\n<li>遍历 saasEnterpriseList ，每一次遍历单体对象是 saasEnterprise</li>\n<li>判断 saasEnterprise.getId() 是否和参数 id 相等，相等则通过 saasEnterprise.getQrCodeUuid() 获得 qrCodeUuid </li>\n<li>如果 qrCodeUuid 为空<ul>\n<li>调用 <code>RandomNumString.getCheckUuid(System.currentTimeMillis()) + RandomNumString.randomStringCheck32Uuid(10) + RandomNumString.getRandomNumber(100000)</code> 生成 dataUuid </li>\n<li>将企业信息 saasEnterprise 转为JSON字符串 dataJson</li>\n<li>调用 <code>saasEnterpriseService.insertQrCodeUuid(dataUuid, saasEnterprise.getName(),saasEnterprise.getCode(), saasEnterprise.getUuid(), dataJson, createUser)</code> 向朔源码信息表中插入新添加的数据</li>\n<li>将 dataUuid 赋值给 qrCodeUuid</li>\n</ul>\n</li>\n<li>返回实体信息中封装 qrCodeUuid 并返回</li>\n</ul>\n</li>\n<li><p>在 saasenterprise.js 中添加 showTackingCode 方法，在 data 下 添加参数 qrCodeuuid:””</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">&lt;!--添加参数变量--&gt;<br><span class=\"hljs-attr\">data</span>:&#123;<br>  <span class=\"hljs-attr\">showList</span>: <span class=\"hljs-literal\">true</span>,<br>  <span class=\"hljs-attr\">show</span>: <span class=\"hljs-number\">1</span>,<br>  <span class=\"hljs-attr\">title</span>: <span class=\"hljs-literal\">null</span>,<br>  <span class=\"hljs-attr\">saasEnterprise</span>: &#123;&#125;,<br>  <span class=\"hljs-attr\">qrCodeUuid</span>: <span class=\"hljs-string\">&quot;&quot;</span><br>&#125;<br><br>&lt;!--添加方法--&gt;<br><span class=\"hljs-attr\">methods</span>:&#123;<span class=\"hljs-attr\">showTackingCode</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>            <span class=\"hljs-keyword\">var</span> id = <span class=\"hljs-title function_\">getSelectedRow</span>();<br>            $.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&quot;../saas-enterprise/show/&quot;</span> + id, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">r</span>) &#123;<br>                vm.<span class=\"hljs-property\">qrCodeUuid</span> = r.<span class=\"hljs-property\">qrCodeUuid</span>;<br>                <span class=\"hljs-keyword\">if</span> (vm.<span class=\"hljs-property\">qrCodeUuid</span> == <span class=\"hljs-literal\">null</span> || <span class=\"hljs-string\">&quot;&quot;</span>==vm.<span class=\"hljs-property\">qrCodeUuid</span>) &#123;<br>                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>                &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                    <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&quot;&lt;img src=&#x27;http://qr.topscan.com/api.php?&amp;w=300&amp;text=&quot;</span> + vm.<span class=\"hljs-property\">qrCodeUuid</span> + <span class=\"hljs-string\">&quot;&#x27;/&gt;&quot;</span>);<br>                &#125;<br>            &#125;);<br>        &#125;,<br>        &#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>在 saasenterprise.html 中添加单击事件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;btn btn-primary&quot;</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;showTackingCode&quot;</span>&gt;</span>查看朔源码<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"企业朔源码\"><a href=\"#企业朔源码\" class=\"headerlink\" title=\"企业朔源码\"></a>企业朔源码</h2><ol>\n<li>溯源码是一个独立的模块（后面会详讲），该码会绑定企业信息</li>\n<li>用户注册流程中，就是通过扫描溯源码（与码绑定的业务信息无关，仅需要企业信息）绑定企业信息</li>\n<li>并非所有企业都有溯源码的模块需求，但所有企业的新用户注册流程中都需要扫码</li>\n<li>在运营平台企业管理列表中添加展示溯源码（没有则创建一个）</li>\n<li>业务同事根据用户需求，打印或邮件发该企业的溯源码</li>\n</ol>\n<h2 id=\"企业管理菜单\"><a href=\"#企业管理菜单\" class=\"headerlink\" title=\"企业管理菜单\"></a>企业管理菜单</h2><h3 id=\"添加溯源码列\"><a href=\"#添加溯源码列\" class=\"headerlink\" title=\"添加溯源码列\"></a>添加溯源码列</h3><ul>\n<li><p>修改 SaasEnterpriseMapper.xml 文件中id为 queryList 的SQL语句，添加查询结果字段 qrCodeUuid 以及添加对应的关联表 </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span>  ae.<span class=\"hljs-operator\">*</span>, ar.role_name ,<br>  ag.group_name ,<br>  sqced.uuid <span class=\"hljs-keyword\">AS</span> qrCodeUuid<br><span class=\"hljs-keyword\">FROM</span> sup_enterprises <span class=\"hljs-keyword\">AS</span> ae<br><span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">JOIN</span> app_roles <span class=\"hljs-keyword\">AS</span> ar <span class=\"hljs-keyword\">ON</span> ar.id <span class=\"hljs-operator\">=</span> ae.role_id<br><span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">JOIN</span> app_groups <span class=\"hljs-keyword\">AS</span> ag <span class=\"hljs-keyword\">ON</span> ag.group_id <span class=\"hljs-operator\">=</span> ae.group_id<br><span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">JOIN</span>(<br>  <span class=\"hljs-keyword\">SELECT</span><br>    <span class=\"hljs-built_in\">max</span>(uuid) <span class=\"hljs-keyword\">AS</span> uuid ,<br>    enterprise_uuid<br>  <span class=\"hljs-keyword\">FROM</span><br>    sup_qr_code_business_data<br>  <span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span><br>    enterprise_uuid<br>) <span class=\"hljs-keyword\">AS</span> sqced <span class=\"hljs-keyword\">ON</span> sqced.enterprise_uuid <span class=\"hljs-operator\">=</span> ae.uuid<br><span class=\"hljs-keyword\">WHERE</span> ae.is_delete <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span><br>.....<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>在saasenterprise.js中添企业朔源码列</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">&#123;<br>  <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">&#x27;企业朔源码&#x27;</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;qrCodeUuid&#x27;</span>, <span class=\"hljs-attr\">index</span>: <span class=\"hljs-string\">&#x27;qrCodeUuid&#x27;</span>, <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">60</span>,<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"检查朔源码按钮\"><a href=\"#检查朔源码按钮\" class=\"headerlink\" title=\"检查朔源码按钮\"></a>检查朔源码按钮</h3><ul>\n<li><p>在 SaasEnterpriseMapper.xml 中添加 id 为queryListByNoParams 的SQL，实现无参数获取企业信息</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span>  ae.<span class=\"hljs-operator\">*</span>, ar.role_name ,<br>  ag.group_name ,<br>  sqced.uuid <span class=\"hljs-keyword\">AS</span> qrCodeUuid<br><span class=\"hljs-keyword\">FROM</span> sup_enterprises <span class=\"hljs-keyword\">AS</span> ae<br><span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">JOIN</span> app_roles <span class=\"hljs-keyword\">AS</span> ar <span class=\"hljs-keyword\">ON</span> ar.id <span class=\"hljs-operator\">=</span> ae.role_id<br><span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">JOIN</span> app_groups <span class=\"hljs-keyword\">AS</span> ag <span class=\"hljs-keyword\">ON</span> ag.group_id <span class=\"hljs-operator\">=</span> ae.group_id<br><span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">JOIN</span>(<br>  <span class=\"hljs-keyword\">SELECT</span><br>    <span class=\"hljs-built_in\">max</span>(uuid) <span class=\"hljs-keyword\">AS</span> uuid ,<br>    enterprise_uuid<br>  <span class=\"hljs-keyword\">FROM</span><br>    sup_qr_code_business_data<br>  <span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span><br>    enterprise_uuid<br>) <span class=\"hljs-keyword\">AS</span> sqced <span class=\"hljs-keyword\">ON</span> sqced.enterprise_uuid <span class=\"hljs-operator\">=</span> ae.uuid<br><span class=\"hljs-keyword\">WHERE</span> ae.is_delete <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>在 SaasEnterpriseMapper.xml 中添加 id 为 insertQrCodeUuid 的SQL，向朔源码信息表 sup_qr_code_business_data 中添加 qrCodeUuid 以及对应的企业信息</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> sup_qr_code_business_data(<br>            uuid ,<br>            enterprise_name ,<br>            enterprise_code ,<br>            enterprise_uuid ,<br>            target_url ,<br>            data_json ,<br>            remark ,<br>            create_user ,<br>            update_user<br>        )<br><span class=\"hljs-keyword\">VALUES</span> (<br>            #&#123;param1&#125; ,<br>            #&#123;param2&#125; ,<br>            #&#123;param3&#125; ,<br>            #&#123;param4&#125; ,<br>            <span class=\"hljs-keyword\">null</span> ,<br>            #&#123;param5&#125; ,<br>            <span class=\"hljs-keyword\">null</span> ,<br>            #&#123;param6&#125; ,<br>            <span class=\"hljs-keyword\">null</span><br>        )<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>在 SaasEnterpriseService、SaasEnterpriseServiceImpl和SaasEnterpriseMapper.java 中添加对应的 queryEnterpriseService 和 insertQrCodeuuid 方法</p>\n</li>\n<li><p>在 SaasEnterpriseController 中添加 createEnterpriseTackingCode(String createUser) 方法</p>\n<ul>\n<li>调用 <code>saasEnterpriseService.queryListByNoParams()</code> 获得企业信息列表 saasEnterpriseList</li>\n<li>遍历 saasEnterpriseList ，每次遍历单体对象是 saasEnterprise</li>\n<li>判断 saasEnterprise.getQrCodeUuid() 是否为空，为空则生成qrCodeUuid<ul>\n<li>调用 <code>RandomNumString.getCheckUuid(System.currentTimeMillis()) + RandomNumString.randomStringCheck32Uuid(10) + RandomNumString.getRandomNumber(100000)</code> 生成32位字符串 dataUuid</li>\n<li>将企业信息 saasEnterprise 转为JSON字符串 dataJson</li>\n<li>调用 <code>saasEnterpriseService.insertQrCodeUuid(dataUuid, saasEnterprise.getName(),saasEnterprise.getCode(), saasEnterprise.getUuid(), dataJson, createUser)</code> 向朔源码信息表中插入新添加的数据</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>saasenterprise.js 中添加 createEnterpriseTackingCode 方法，需要传入参数 createUser ，通过弹窗输入值，方法调用 <code>../saas-enterprise/tracking-code/createEnterpriseTackingCode</code> 接口，补全所有企业朔源码，成功后刷新页面列表</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">methods&#123;<br>    <span class=\"hljs-attr\">createEnterpriseTackingCode</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>            <span class=\"hljs-keyword\">var</span> htmlStr = <span class=\"hljs-string\">&#x27;&lt;span style=&quot;color: red; text-align: center;display:block;&quot;&gt;生成企业朔源码，请耐心等待&lt;/span&gt;&#x27;</span>;<br>            htmlStr = htmlStr + <span class=\"hljs-string\">&#x27;&lt;input type=&quot;text&quot; id=&quot;createUser&quot; style=&quot;text-align: center; width: 280px;&quot; placeholder=&quot;请输入创建人：小明（15200000000）&quot;/&gt;&#x27;</span>;<br><br>            <span class=\"hljs-keyword\">var</span> indexConfirm = layer.<span class=\"hljs-title function_\">confirm</span>(htmlStr, &#123;<br>                <span class=\"hljs-attr\">btn</span>: [<br>                    <span class=\"hljs-string\">&#x27;确认&#x27;</span>, <span class=\"hljs-string\">&#x27;取消&#x27;</span><br>                ],<br>                <span class=\"hljs-attr\">btnAlign</span>: <span class=\"hljs-string\">&#x27;c&#x27;</span>,<br>                <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&quot;批量添加企业朔源码&quot;</span><br>            &#125;, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>                <span class=\"hljs-keyword\">var</span> createUser = $(<span class=\"hljs-string\">&quot;#createUser&quot;</span>).<span class=\"hljs-title function_\">val</span>();<br>                    $.<span class=\"hljs-title function_\">ajax</span>(&#123;<br>                        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;GET&quot;</span>,<br>                        <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">&quot;../saas-enterprise/tracking-code/createEnterpriseTackingCode&quot;</span>,<br>                        <span class=\"hljs-attr\">data</span>: &#123;<br>                            <span class=\"hljs-attr\">createUser</span>: createUser<br>                        &#125;,<br>                        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">r</span>) &#123;<br>                            <span class=\"hljs-keyword\">if</span> (r.<span class=\"hljs-property\">code</span> == <span class=\"hljs-number\">0</span>) &#123;<br>                                <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&#x27;操作成功&#x27;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;   $(<span class=\"hljs-string\">&quot;#jqGrid&quot;</span>).<span class=\"hljs-title function_\">trigger</span>(<span class=\"hljs-string\">&quot;reloadGrid&quot;</span>);<br>                                &#125;);<br>                                vm.<span class=\"hljs-title function_\">reload</span>();<br>                            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                                <span class=\"hljs-title function_\">alert</span>(r.<span class=\"hljs-property\">msg</span>);<br>                            &#125;<br>                        &#125;<br>                    &#125;);<br>                layer.<span class=\"hljs-title function_\">close</span>(indexConfirm);<br>            &#125;, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>                layer.<span class=\"hljs-title function_\">close</span>(indexConfirm);<br>            &#125;);<br>        &#125;,<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>在 saasenterprise.html 中添加一个点击事件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;btn btn-primary&quot;</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;createEnterpriseTackingCode&quot;</span>&gt;</span>补全朔源码<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"查看朔源码按钮\"><a href=\"#查看朔源码按钮\" class=\"headerlink\" title=\"查看朔源码按钮\"></a>查看朔源码按钮</h3><ul>\n<li><p>在 SaasEnterpriseController 中添加 show 方法，需要参数 id ，这个 id 是页面展示的行id</p>\n<ul>\n<li>调用 <code>saasEnterpriseService.queryListByNoParams()</code> 方法获得企业信息列表 saasEnterpriseList</li>\n<li>遍历 saasEnterpriseList ，每一次遍历单体对象是 saasEnterprise</li>\n<li>判断 saasEnterprise.getId() 是否和参数 id 相等，相等则通过 saasEnterprise.getQrCodeUuid() 获得 qrCodeUuid </li>\n<li>如果 qrCodeUuid 为空<ul>\n<li>调用 <code>RandomNumString.getCheckUuid(System.currentTimeMillis()) + RandomNumString.randomStringCheck32Uuid(10) + RandomNumString.getRandomNumber(100000)</code> 生成 dataUuid </li>\n<li>将企业信息 saasEnterprise 转为JSON字符串 dataJson</li>\n<li>调用 <code>saasEnterpriseService.insertQrCodeUuid(dataUuid, saasEnterprise.getName(),saasEnterprise.getCode(), saasEnterprise.getUuid(), dataJson, createUser)</code> 向朔源码信息表中插入新添加的数据</li>\n<li>将 dataUuid 赋值给 qrCodeUuid</li>\n</ul>\n</li>\n<li>返回实体信息中封装 qrCodeUuid 并返回</li>\n</ul>\n</li>\n<li><p>在 saasenterprise.js 中添加 showTackingCode 方法，在 data 下 添加参数 qrCodeuuid:””</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">&lt;!--添加参数变量--&gt;<br><span class=\"hljs-attr\">data</span>:&#123;<br>  <span class=\"hljs-attr\">showList</span>: <span class=\"hljs-literal\">true</span>,<br>  <span class=\"hljs-attr\">show</span>: <span class=\"hljs-number\">1</span>,<br>  <span class=\"hljs-attr\">title</span>: <span class=\"hljs-literal\">null</span>,<br>  <span class=\"hljs-attr\">saasEnterprise</span>: &#123;&#125;,<br>  <span class=\"hljs-attr\">qrCodeUuid</span>: <span class=\"hljs-string\">&quot;&quot;</span><br>&#125;<br><br>&lt;!--添加方法--&gt;<br><span class=\"hljs-attr\">methods</span>:&#123;<span class=\"hljs-attr\">showTackingCode</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>            <span class=\"hljs-keyword\">var</span> id = <span class=\"hljs-title function_\">getSelectedRow</span>();<br>            $.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&quot;../saas-enterprise/show/&quot;</span> + id, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">r</span>) &#123;<br>                vm.<span class=\"hljs-property\">qrCodeUuid</span> = r.<span class=\"hljs-property\">qrCodeUuid</span>;<br>                <span class=\"hljs-keyword\">if</span> (vm.<span class=\"hljs-property\">qrCodeUuid</span> == <span class=\"hljs-literal\">null</span> || <span class=\"hljs-string\">&quot;&quot;</span>==vm.<span class=\"hljs-property\">qrCodeUuid</span>) &#123;<br>                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>                &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                    <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&quot;&lt;img src=&#x27;http://qr.topscan.com/api.php?&amp;w=300&amp;text=&quot;</span> + vm.<span class=\"hljs-property\">qrCodeUuid</span> + <span class=\"hljs-string\">&quot;&#x27;/&gt;&quot;</span>);<br>                &#125;<br>            &#125;);<br>        &#125;,<br>        &#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>在 saasenterprise.html 中添加单击事件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;btn btn-primary&quot;</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;showTackingCode&quot;</span>&gt;</span>查看朔源码<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"DataV报表流程","type":"DataV报表流程md","_content":"\n## 背景\n\n针对已经发布上线的DataV报表，梳理接口逻辑、对数，达成团队内部运维报表的共识。\n\n## “微整”同比增长流程\n\n### 报表展示\n\n![nVHBB6.png](https://s2.ax1x.com/2019/09/04/nVHBB6.png)\n\n### 点击数据\n\n![nVHhut.png](https://s2.ax1x.com/2019/09/04/nVHhut.png)\n\n### 配置数据源\n\n![nVH4DP.png](https://s2.ax1x.com/2019/09/04/nVH4DP.png)\n\n### 查到repCode 和keyword\n\n![nVHbCQ.png](https://s2.ax1x.com/2019/09/04/nVHbCQ.png)\n\n### 通过repCode找到对应的sql\n\n![nVbSET.png](https://s2.ax1x.com/2019/09/04/nVbSET.png)\n![nVbPC4.png](https://s2.ax1x.com/2019/09/04/nVbPC4.png)\n\n### 将keyword的值填到语句中执行\n\n得到的sql语句是：\n\n```sql\nSELECT round((t1.`value`-t2.`value`)/t2.`value`*100,2) as `value` FROM\n  (SELECT average_year as `value` FROM kpi_baidu_index_month_summary\n  WHERE search_year = year(now()) AND keyword = '微整' \n  GROUP BY keyword ) as t1\nLEFT JOIN \n  (SELECT average_year as `value` FROM kpi_baidu_index_month_summary\n  WHERE search_year = year(now())-1 AND keyword = '微整' \n  GROUP BY keyword) as t2\non 1=1\n```\n\n### 结果\n\n得到-27.04与报表一致\n\n## 与粉毒、衡力、Botox的竞品分析\n\n### 报表展示\n\n![nZSJqH.png](https://s2.ax1x.com/2019/09/04/nZSJqH.png)\n\n### 与上个案例一样找到url\n\n![nZSrQS.png](https://s2.ax1x.com/2019/09/04/nZSrQS.png)\n\n### 根据repCode找到sql语句\n\n![nZSfJ0.png](https://s2.ax1x.com/2019/09/04/nZSfJ0.png)\n\n### 将keyword的值填入sql中执行\n得到的sql语句：\n```sql\nSELECT concat(t1.`month`,'月') as x,ifnull(t2.average_month,0) as y,t1.month_en_short,t3.keyword as s\nFROM (select * from dim_date WHERE time_type = 'month' and `year` = year(now())) AS t1\nLEFT JOIN(SELECT keyword FROM dim_baidu_index_keyword WHERE LOCATE(keyword,'粉毒,衡力,botox') > 0) as t3\non 1=1\nLEFT JOIN (SELECT * from kpi_baidu_index_month_summary WHERE LOCATE(keyword,'粉毒,衡力,botox') > 0) AS t2\n  ON t1.`year` = t2.search_year AND t1.`month` = t2.search_month AND t2.keyword = t3.keyword\nORDER BY t1.`month`;\n```\n\n### 结果\n月份|y轴|月份简写|竞品\n-|:-:|:-:|-:\n1月|121|Jan|衡力\n1月|419|Jan|Botox\n1月|0|Jan|粉毒\n2月|355|Feb|Botox\n2月|0|Feb|粉毒\n2月|121|Feb|衡力\n3月|361|Mar|Botox\n3月|0|Mar|粉毒\n3月|123|Mar|衡力\n4月|0|Apr|Botox\n4月|0|Apr|衡力\n4月|0|Apr|粉毒\n5月|0|May|Botox\n5月|0|May|衡力\n5月|0|May|粉毒\n6月|0|June|Botox\n6月|0|June|衡力\n6月|0|June|粉毒\n7月|0|July|Botox\n7月|0|July|衡力\n7月|0|July|粉毒\n8月|13|Aug|粉毒\n8月|129|Aug|衡力\n8月|361|Aug|Botox\n9月|0|Sept|粉毒\n9月|0|Sept|Botox\n9月|0|Sept|衡力\n10月|0|Oct|粉毒\n10月|0|Oct|Botox\n10月|0|Oct|衡力\n11月|0|Nov|粉毒\n11月|0|Nov|Botox\n11月|0|Nov|衡力\n12月|0|Dec|粉毒\n12月|0|Dec|Botox\n12月|0|Dec|衡力\n\n### 结论\n与报表显示一致","source":"developer/api-guide/datav-report.md","raw":"---\ntitle: DataV报表流程\ntype: DataV报表流程md\n---\n\n## 背景\n\n针对已经发布上线的DataV报表，梳理接口逻辑、对数，达成团队内部运维报表的共识。\n\n## “微整”同比增长流程\n\n### 报表展示\n\n![nVHBB6.png](https://s2.ax1x.com/2019/09/04/nVHBB6.png)\n\n### 点击数据\n\n![nVHhut.png](https://s2.ax1x.com/2019/09/04/nVHhut.png)\n\n### 配置数据源\n\n![nVH4DP.png](https://s2.ax1x.com/2019/09/04/nVH4DP.png)\n\n### 查到repCode 和keyword\n\n![nVHbCQ.png](https://s2.ax1x.com/2019/09/04/nVHbCQ.png)\n\n### 通过repCode找到对应的sql\n\n![nVbSET.png](https://s2.ax1x.com/2019/09/04/nVbSET.png)\n![nVbPC4.png](https://s2.ax1x.com/2019/09/04/nVbPC4.png)\n\n### 将keyword的值填到语句中执行\n\n得到的sql语句是：\n\n```sql\nSELECT round((t1.`value`-t2.`value`)/t2.`value`*100,2) as `value` FROM\n  (SELECT average_year as `value` FROM kpi_baidu_index_month_summary\n  WHERE search_year = year(now()) AND keyword = '微整' \n  GROUP BY keyword ) as t1\nLEFT JOIN \n  (SELECT average_year as `value` FROM kpi_baidu_index_month_summary\n  WHERE search_year = year(now())-1 AND keyword = '微整' \n  GROUP BY keyword) as t2\non 1=1\n```\n\n### 结果\n\n得到-27.04与报表一致\n\n## 与粉毒、衡力、Botox的竞品分析\n\n### 报表展示\n\n![nZSJqH.png](https://s2.ax1x.com/2019/09/04/nZSJqH.png)\n\n### 与上个案例一样找到url\n\n![nZSrQS.png](https://s2.ax1x.com/2019/09/04/nZSrQS.png)\n\n### 根据repCode找到sql语句\n\n![nZSfJ0.png](https://s2.ax1x.com/2019/09/04/nZSfJ0.png)\n\n### 将keyword的值填入sql中执行\n得到的sql语句：\n```sql\nSELECT concat(t1.`month`,'月') as x,ifnull(t2.average_month,0) as y,t1.month_en_short,t3.keyword as s\nFROM (select * from dim_date WHERE time_type = 'month' and `year` = year(now())) AS t1\nLEFT JOIN(SELECT keyword FROM dim_baidu_index_keyword WHERE LOCATE(keyword,'粉毒,衡力,botox') > 0) as t3\non 1=1\nLEFT JOIN (SELECT * from kpi_baidu_index_month_summary WHERE LOCATE(keyword,'粉毒,衡力,botox') > 0) AS t2\n  ON t1.`year` = t2.search_year AND t1.`month` = t2.search_month AND t2.keyword = t3.keyword\nORDER BY t1.`month`;\n```\n\n### 结果\n月份|y轴|月份简写|竞品\n-|:-:|:-:|-:\n1月|121|Jan|衡力\n1月|419|Jan|Botox\n1月|0|Jan|粉毒\n2月|355|Feb|Botox\n2月|0|Feb|粉毒\n2月|121|Feb|衡力\n3月|361|Mar|Botox\n3月|0|Mar|粉毒\n3月|123|Mar|衡力\n4月|0|Apr|Botox\n4月|0|Apr|衡力\n4月|0|Apr|粉毒\n5月|0|May|Botox\n5月|0|May|衡力\n5月|0|May|粉毒\n6月|0|June|Botox\n6月|0|June|衡力\n6月|0|June|粉毒\n7月|0|July|Botox\n7月|0|July|衡力\n7月|0|July|粉毒\n8月|13|Aug|粉毒\n8月|129|Aug|衡力\n8月|361|Aug|Botox\n9月|0|Sept|粉毒\n9月|0|Sept|Botox\n9月|0|Sept|衡力\n10月|0|Oct|粉毒\n10月|0|Oct|Botox\n10月|0|Oct|衡力\n11月|0|Nov|粉毒\n11月|0|Nov|Botox\n11月|0|Nov|衡力\n12月|0|Dec|粉毒\n12月|0|Dec|Botox\n12月|0|Dec|衡力\n\n### 结论\n与报表显示一致","date":"2023-06-10T10:49:05.485Z","updated":"2023-06-10T10:49:05.485Z","path":"developer/api-guide/datav-report.html","comments":1,"layout":"page","_id":"clipw1dd2000ooix54oo500dh","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>针对已经发布上线的DataV报表，梳理接口逻辑、对数，达成团队内部运维报表的共识。</p>\n<h2 id=\"“微整”同比增长流程\"><a href=\"#“微整”同比增长流程\" class=\"headerlink\" title=\"“微整”同比增长流程\"></a>“微整”同比增长流程</h2><h3 id=\"报表展示\"><a href=\"#报表展示\" class=\"headerlink\" title=\"报表展示\"></a>报表展示</h3><p><img src=\"https://s2.ax1x.com/2019/09/04/nVHBB6.png\" alt=\"nVHBB6.png\"></p>\n<h3 id=\"点击数据\"><a href=\"#点击数据\" class=\"headerlink\" title=\"点击数据\"></a>点击数据</h3><p><img src=\"https://s2.ax1x.com/2019/09/04/nVHhut.png\" alt=\"nVHhut.png\"></p>\n<h3 id=\"配置数据源\"><a href=\"#配置数据源\" class=\"headerlink\" title=\"配置数据源\"></a>配置数据源</h3><p><img src=\"https://s2.ax1x.com/2019/09/04/nVH4DP.png\" alt=\"nVH4DP.png\"></p>\n<h3 id=\"查到repCode-和keyword\"><a href=\"#查到repCode-和keyword\" class=\"headerlink\" title=\"查到repCode 和keyword\"></a>查到repCode 和keyword</h3><p><img src=\"https://s2.ax1x.com/2019/09/04/nVHbCQ.png\" alt=\"nVHbCQ.png\"></p>\n<h3 id=\"通过repCode找到对应的sql\"><a href=\"#通过repCode找到对应的sql\" class=\"headerlink\" title=\"通过repCode找到对应的sql\"></a>通过repCode找到对应的sql</h3><p><img src=\"https://s2.ax1x.com/2019/09/04/nVbSET.png\" alt=\"nVbSET.png\"><br><img src=\"https://s2.ax1x.com/2019/09/04/nVbPC4.png\" alt=\"nVbPC4.png\"></p>\n<h3 id=\"将keyword的值填到语句中执行\"><a href=\"#将keyword的值填到语句中执行\" class=\"headerlink\" title=\"将keyword的值填到语句中执行\"></a>将keyword的值填到语句中执行</h3><p>得到的sql语句是：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span> round((t1.`<span class=\"hljs-keyword\">value</span>`<span class=\"hljs-operator\">-</span>t2.`<span class=\"hljs-keyword\">value</span>`)<span class=\"hljs-operator\">/</span>t2.`<span class=\"hljs-keyword\">value</span>`<span class=\"hljs-operator\">*</span><span class=\"hljs-number\">100</span>,<span class=\"hljs-number\">2</span>) <span class=\"hljs-keyword\">as</span> `<span class=\"hljs-keyword\">value</span>` <span class=\"hljs-keyword\">FROM</span><br>  (<span class=\"hljs-keyword\">SELECT</span> average_year <span class=\"hljs-keyword\">as</span> `<span class=\"hljs-keyword\">value</span>` <span class=\"hljs-keyword\">FROM</span> kpi_baidu_index_month_summary<br>  <span class=\"hljs-keyword\">WHERE</span> search_year <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">year</span>(now()) <span class=\"hljs-keyword\">AND</span> keyword <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;微整&#x27;</span> <br>  <span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span> keyword ) <span class=\"hljs-keyword\">as</span> t1<br><span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">JOIN</span> <br>  (<span class=\"hljs-keyword\">SELECT</span> average_year <span class=\"hljs-keyword\">as</span> `<span class=\"hljs-keyword\">value</span>` <span class=\"hljs-keyword\">FROM</span> kpi_baidu_index_month_summary<br>  <span class=\"hljs-keyword\">WHERE</span> search_year <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">year</span>(now())<span class=\"hljs-number\">-1</span> <span class=\"hljs-keyword\">AND</span> keyword <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;微整&#x27;</span> <br>  <span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span> keyword) <span class=\"hljs-keyword\">as</span> t2<br><span class=\"hljs-keyword\">on</span> <span class=\"hljs-number\">1</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">1</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h3><p>得到-27.04与报表一致</p>\n<h2 id=\"与粉毒、衡力、Botox的竞品分析\"><a href=\"#与粉毒、衡力、Botox的竞品分析\" class=\"headerlink\" title=\"与粉毒、衡力、Botox的竞品分析\"></a>与粉毒、衡力、Botox的竞品分析</h2><h3 id=\"报表展示-1\"><a href=\"#报表展示-1\" class=\"headerlink\" title=\"报表展示\"></a>报表展示</h3><p><img src=\"https://s2.ax1x.com/2019/09/04/nZSJqH.png\" alt=\"nZSJqH.png\"></p>\n<h3 id=\"与上个案例一样找到url\"><a href=\"#与上个案例一样找到url\" class=\"headerlink\" title=\"与上个案例一样找到url\"></a>与上个案例一样找到url</h3><p><img src=\"https://s2.ax1x.com/2019/09/04/nZSrQS.png\" alt=\"nZSrQS.png\"></p>\n<h3 id=\"根据repCode找到sql语句\"><a href=\"#根据repCode找到sql语句\" class=\"headerlink\" title=\"根据repCode找到sql语句\"></a>根据repCode找到sql语句</h3><p><img src=\"https://s2.ax1x.com/2019/09/04/nZSfJ0.png\" alt=\"nZSfJ0.png\"></p>\n<h3 id=\"将keyword的值填入sql中执行\"><a href=\"#将keyword的值填入sql中执行\" class=\"headerlink\" title=\"将keyword的值填入sql中执行\"></a>将keyword的值填入sql中执行</h3><p>得到的sql语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span> concat(t1.`<span class=\"hljs-keyword\">month</span>`,<span class=\"hljs-string\">&#x27;月&#x27;</span>) <span class=\"hljs-keyword\">as</span> x,ifnull(t2.average_month,<span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">as</span> y,t1.month_en_short,t3.keyword <span class=\"hljs-keyword\">as</span> s<br><span class=\"hljs-keyword\">FROM</span> (<span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> dim_date <span class=\"hljs-keyword\">WHERE</span> time_type <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;month&#x27;</span> <span class=\"hljs-keyword\">and</span> `<span class=\"hljs-keyword\">year</span>` <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">year</span>(now())) <span class=\"hljs-keyword\">AS</span> t1<br><span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">JOIN</span>(<span class=\"hljs-keyword\">SELECT</span> keyword <span class=\"hljs-keyword\">FROM</span> dim_baidu_index_keyword <span class=\"hljs-keyword\">WHERE</span> LOCATE(keyword,<span class=\"hljs-string\">&#x27;粉毒,衡力,botox&#x27;</span>) <span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">as</span> t3<br><span class=\"hljs-keyword\">on</span> <span class=\"hljs-number\">1</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">1</span><br><span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">JOIN</span> (<span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> kpi_baidu_index_month_summary <span class=\"hljs-keyword\">WHERE</span> LOCATE(keyword,<span class=\"hljs-string\">&#x27;粉毒,衡力,botox&#x27;</span>) <span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">AS</span> t2<br>  <span class=\"hljs-keyword\">ON</span> t1.`<span class=\"hljs-keyword\">year</span>` <span class=\"hljs-operator\">=</span> t2.search_year <span class=\"hljs-keyword\">AND</span> t1.`<span class=\"hljs-keyword\">month</span>` <span class=\"hljs-operator\">=</span> t2.search_month <span class=\"hljs-keyword\">AND</span> t2.keyword <span class=\"hljs-operator\">=</span> t3.keyword<br><span class=\"hljs-keyword\">ORDER</span> <span class=\"hljs-keyword\">BY</span> t1.`<span class=\"hljs-keyword\">month</span>`;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"结果-1\"><a href=\"#结果-1\" class=\"headerlink\" title=\"结果\"></a>结果</h3><table>\n<thead>\n<tr>\n<th>月份</th>\n<th align=\"center\">y轴</th>\n<th align=\"center\">月份简写</th>\n<th align=\"right\">竞品</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1月</td>\n<td align=\"center\">121</td>\n<td align=\"center\">Jan</td>\n<td align=\"right\">衡力</td>\n</tr>\n<tr>\n<td>1月</td>\n<td align=\"center\">419</td>\n<td align=\"center\">Jan</td>\n<td align=\"right\">Botox</td>\n</tr>\n<tr>\n<td>1月</td>\n<td align=\"center\">0</td>\n<td align=\"center\">Jan</td>\n<td align=\"right\">粉毒</td>\n</tr>\n<tr>\n<td>2月</td>\n<td align=\"center\">355</td>\n<td align=\"center\">Feb</td>\n<td align=\"right\">Botox</td>\n</tr>\n<tr>\n<td>2月</td>\n<td align=\"center\">0</td>\n<td align=\"center\">Feb</td>\n<td align=\"right\">粉毒</td>\n</tr>\n<tr>\n<td>2月</td>\n<td align=\"center\">121</td>\n<td align=\"center\">Feb</td>\n<td align=\"right\">衡力</td>\n</tr>\n<tr>\n<td>3月</td>\n<td align=\"center\">361</td>\n<td align=\"center\">Mar</td>\n<td align=\"right\">Botox</td>\n</tr>\n<tr>\n<td>3月</td>\n<td align=\"center\">0</td>\n<td align=\"center\">Mar</td>\n<td align=\"right\">粉毒</td>\n</tr>\n<tr>\n<td>3月</td>\n<td align=\"center\">123</td>\n<td align=\"center\">Mar</td>\n<td align=\"right\">衡力</td>\n</tr>\n<tr>\n<td>4月</td>\n<td align=\"center\">0</td>\n<td align=\"center\">Apr</td>\n<td align=\"right\">Botox</td>\n</tr>\n<tr>\n<td>4月</td>\n<td align=\"center\">0</td>\n<td align=\"center\">Apr</td>\n<td align=\"right\">衡力</td>\n</tr>\n<tr>\n<td>4月</td>\n<td align=\"center\">0</td>\n<td align=\"center\">Apr</td>\n<td align=\"right\">粉毒</td>\n</tr>\n<tr>\n<td>5月</td>\n<td align=\"center\">0</td>\n<td align=\"center\">May</td>\n<td align=\"right\">Botox</td>\n</tr>\n<tr>\n<td>5月</td>\n<td align=\"center\">0</td>\n<td align=\"center\">May</td>\n<td align=\"right\">衡力</td>\n</tr>\n<tr>\n<td>5月</td>\n<td align=\"center\">0</td>\n<td align=\"center\">May</td>\n<td align=\"right\">粉毒</td>\n</tr>\n<tr>\n<td>6月</td>\n<td align=\"center\">0</td>\n<td align=\"center\">June</td>\n<td align=\"right\">Botox</td>\n</tr>\n<tr>\n<td>6月</td>\n<td align=\"center\">0</td>\n<td align=\"center\">June</td>\n<td align=\"right\">衡力</td>\n</tr>\n<tr>\n<td>6月</td>\n<td align=\"center\">0</td>\n<td align=\"center\">June</td>\n<td align=\"right\">粉毒</td>\n</tr>\n<tr>\n<td>7月</td>\n<td align=\"center\">0</td>\n<td align=\"center\">July</td>\n<td align=\"right\">Botox</td>\n</tr>\n<tr>\n<td>7月</td>\n<td align=\"center\">0</td>\n<td align=\"center\">July</td>\n<td align=\"right\">衡力</td>\n</tr>\n<tr>\n<td>7月</td>\n<td align=\"center\">0</td>\n<td align=\"center\">July</td>\n<td align=\"right\">粉毒</td>\n</tr>\n<tr>\n<td>8月</td>\n<td align=\"center\">13</td>\n<td align=\"center\">Aug</td>\n<td align=\"right\">粉毒</td>\n</tr>\n<tr>\n<td>8月</td>\n<td align=\"center\">129</td>\n<td align=\"center\">Aug</td>\n<td align=\"right\">衡力</td>\n</tr>\n<tr>\n<td>8月</td>\n<td align=\"center\">361</td>\n<td align=\"center\">Aug</td>\n<td align=\"right\">Botox</td>\n</tr>\n<tr>\n<td>9月</td>\n<td align=\"center\">0</td>\n<td align=\"center\">Sept</td>\n<td align=\"right\">粉毒</td>\n</tr>\n<tr>\n<td>9月</td>\n<td align=\"center\">0</td>\n<td align=\"center\">Sept</td>\n<td align=\"right\">Botox</td>\n</tr>\n<tr>\n<td>9月</td>\n<td align=\"center\">0</td>\n<td align=\"center\">Sept</td>\n<td align=\"right\">衡力</td>\n</tr>\n<tr>\n<td>10月</td>\n<td align=\"center\">0</td>\n<td align=\"center\">Oct</td>\n<td align=\"right\">粉毒</td>\n</tr>\n<tr>\n<td>10月</td>\n<td align=\"center\">0</td>\n<td align=\"center\">Oct</td>\n<td align=\"right\">Botox</td>\n</tr>\n<tr>\n<td>10月</td>\n<td align=\"center\">0</td>\n<td align=\"center\">Oct</td>\n<td align=\"right\">衡力</td>\n</tr>\n<tr>\n<td>11月</td>\n<td align=\"center\">0</td>\n<td align=\"center\">Nov</td>\n<td align=\"right\">粉毒</td>\n</tr>\n<tr>\n<td>11月</td>\n<td align=\"center\">0</td>\n<td align=\"center\">Nov</td>\n<td align=\"right\">Botox</td>\n</tr>\n<tr>\n<td>11月</td>\n<td align=\"center\">0</td>\n<td align=\"center\">Nov</td>\n<td align=\"right\">衡力</td>\n</tr>\n<tr>\n<td>12月</td>\n<td align=\"center\">0</td>\n<td align=\"center\">Dec</td>\n<td align=\"right\">粉毒</td>\n</tr>\n<tr>\n<td>12月</td>\n<td align=\"center\">0</td>\n<td align=\"center\">Dec</td>\n<td align=\"right\">Botox</td>\n</tr>\n<tr>\n<td>12月</td>\n<td align=\"center\">0</td>\n<td align=\"center\">Dec</td>\n<td align=\"right\">衡力</td>\n</tr>\n</tbody></table>\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p>与报表显示一致</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>针对已经发布上线的DataV报表，梳理接口逻辑、对数，达成团队内部运维报表的共识。</p>\n<h2 id=\"“微整”同比增长流程\"><a href=\"#“微整”同比增长流程\" class=\"headerlink\" title=\"“微整”同比增长流程\"></a>“微整”同比增长流程</h2><h3 id=\"报表展示\"><a href=\"#报表展示\" class=\"headerlink\" title=\"报表展示\"></a>报表展示</h3><p><img src=\"https://s2.ax1x.com/2019/09/04/nVHBB6.png\" alt=\"nVHBB6.png\"></p>\n<h3 id=\"点击数据\"><a href=\"#点击数据\" class=\"headerlink\" title=\"点击数据\"></a>点击数据</h3><p><img src=\"https://s2.ax1x.com/2019/09/04/nVHhut.png\" alt=\"nVHhut.png\"></p>\n<h3 id=\"配置数据源\"><a href=\"#配置数据源\" class=\"headerlink\" title=\"配置数据源\"></a>配置数据源</h3><p><img src=\"https://s2.ax1x.com/2019/09/04/nVH4DP.png\" alt=\"nVH4DP.png\"></p>\n<h3 id=\"查到repCode-和keyword\"><a href=\"#查到repCode-和keyword\" class=\"headerlink\" title=\"查到repCode 和keyword\"></a>查到repCode 和keyword</h3><p><img src=\"https://s2.ax1x.com/2019/09/04/nVHbCQ.png\" alt=\"nVHbCQ.png\"></p>\n<h3 id=\"通过repCode找到对应的sql\"><a href=\"#通过repCode找到对应的sql\" class=\"headerlink\" title=\"通过repCode找到对应的sql\"></a>通过repCode找到对应的sql</h3><p><img src=\"https://s2.ax1x.com/2019/09/04/nVbSET.png\" alt=\"nVbSET.png\"><br><img src=\"https://s2.ax1x.com/2019/09/04/nVbPC4.png\" alt=\"nVbPC4.png\"></p>\n<h3 id=\"将keyword的值填到语句中执行\"><a href=\"#将keyword的值填到语句中执行\" class=\"headerlink\" title=\"将keyword的值填到语句中执行\"></a>将keyword的值填到语句中执行</h3><p>得到的sql语句是：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span> round((t1.`<span class=\"hljs-keyword\">value</span>`<span class=\"hljs-operator\">-</span>t2.`<span class=\"hljs-keyword\">value</span>`)<span class=\"hljs-operator\">/</span>t2.`<span class=\"hljs-keyword\">value</span>`<span class=\"hljs-operator\">*</span><span class=\"hljs-number\">100</span>,<span class=\"hljs-number\">2</span>) <span class=\"hljs-keyword\">as</span> `<span class=\"hljs-keyword\">value</span>` <span class=\"hljs-keyword\">FROM</span><br>  (<span class=\"hljs-keyword\">SELECT</span> average_year <span class=\"hljs-keyword\">as</span> `<span class=\"hljs-keyword\">value</span>` <span class=\"hljs-keyword\">FROM</span> kpi_baidu_index_month_summary<br>  <span class=\"hljs-keyword\">WHERE</span> search_year <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">year</span>(now()) <span class=\"hljs-keyword\">AND</span> keyword <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;微整&#x27;</span> <br>  <span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span> keyword ) <span class=\"hljs-keyword\">as</span> t1<br><span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">JOIN</span> <br>  (<span class=\"hljs-keyword\">SELECT</span> average_year <span class=\"hljs-keyword\">as</span> `<span class=\"hljs-keyword\">value</span>` <span class=\"hljs-keyword\">FROM</span> kpi_baidu_index_month_summary<br>  <span class=\"hljs-keyword\">WHERE</span> search_year <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">year</span>(now())<span class=\"hljs-number\">-1</span> <span class=\"hljs-keyword\">AND</span> keyword <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;微整&#x27;</span> <br>  <span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span> keyword) <span class=\"hljs-keyword\">as</span> t2<br><span class=\"hljs-keyword\">on</span> <span class=\"hljs-number\">1</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">1</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h3><p>得到-27.04与报表一致</p>\n<h2 id=\"与粉毒、衡力、Botox的竞品分析\"><a href=\"#与粉毒、衡力、Botox的竞品分析\" class=\"headerlink\" title=\"与粉毒、衡力、Botox的竞品分析\"></a>与粉毒、衡力、Botox的竞品分析</h2><h3 id=\"报表展示-1\"><a href=\"#报表展示-1\" class=\"headerlink\" title=\"报表展示\"></a>报表展示</h3><p><img src=\"https://s2.ax1x.com/2019/09/04/nZSJqH.png\" alt=\"nZSJqH.png\"></p>\n<h3 id=\"与上个案例一样找到url\"><a href=\"#与上个案例一样找到url\" class=\"headerlink\" title=\"与上个案例一样找到url\"></a>与上个案例一样找到url</h3><p><img src=\"https://s2.ax1x.com/2019/09/04/nZSrQS.png\" alt=\"nZSrQS.png\"></p>\n<h3 id=\"根据repCode找到sql语句\"><a href=\"#根据repCode找到sql语句\" class=\"headerlink\" title=\"根据repCode找到sql语句\"></a>根据repCode找到sql语句</h3><p><img src=\"https://s2.ax1x.com/2019/09/04/nZSfJ0.png\" alt=\"nZSfJ0.png\"></p>\n<h3 id=\"将keyword的值填入sql中执行\"><a href=\"#将keyword的值填入sql中执行\" class=\"headerlink\" title=\"将keyword的值填入sql中执行\"></a>将keyword的值填入sql中执行</h3><p>得到的sql语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span> concat(t1.`<span class=\"hljs-keyword\">month</span>`,<span class=\"hljs-string\">&#x27;月&#x27;</span>) <span class=\"hljs-keyword\">as</span> x,ifnull(t2.average_month,<span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">as</span> y,t1.month_en_short,t3.keyword <span class=\"hljs-keyword\">as</span> s<br><span class=\"hljs-keyword\">FROM</span> (<span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> dim_date <span class=\"hljs-keyword\">WHERE</span> time_type <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;month&#x27;</span> <span class=\"hljs-keyword\">and</span> `<span class=\"hljs-keyword\">year</span>` <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">year</span>(now())) <span class=\"hljs-keyword\">AS</span> t1<br><span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">JOIN</span>(<span class=\"hljs-keyword\">SELECT</span> keyword <span class=\"hljs-keyword\">FROM</span> dim_baidu_index_keyword <span class=\"hljs-keyword\">WHERE</span> LOCATE(keyword,<span class=\"hljs-string\">&#x27;粉毒,衡力,botox&#x27;</span>) <span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">as</span> t3<br><span class=\"hljs-keyword\">on</span> <span class=\"hljs-number\">1</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">1</span><br><span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">JOIN</span> (<span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> kpi_baidu_index_month_summary <span class=\"hljs-keyword\">WHERE</span> LOCATE(keyword,<span class=\"hljs-string\">&#x27;粉毒,衡力,botox&#x27;</span>) <span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">AS</span> t2<br>  <span class=\"hljs-keyword\">ON</span> t1.`<span class=\"hljs-keyword\">year</span>` <span class=\"hljs-operator\">=</span> t2.search_year <span class=\"hljs-keyword\">AND</span> t1.`<span class=\"hljs-keyword\">month</span>` <span class=\"hljs-operator\">=</span> t2.search_month <span class=\"hljs-keyword\">AND</span> t2.keyword <span class=\"hljs-operator\">=</span> t3.keyword<br><span class=\"hljs-keyword\">ORDER</span> <span class=\"hljs-keyword\">BY</span> t1.`<span class=\"hljs-keyword\">month</span>`;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"结果-1\"><a href=\"#结果-1\" class=\"headerlink\" title=\"结果\"></a>结果</h3><table>\n<thead>\n<tr>\n<th>月份</th>\n<th align=\"center\">y轴</th>\n<th align=\"center\">月份简写</th>\n<th align=\"right\">竞品</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1月</td>\n<td align=\"center\">121</td>\n<td align=\"center\">Jan</td>\n<td align=\"right\">衡力</td>\n</tr>\n<tr>\n<td>1月</td>\n<td align=\"center\">419</td>\n<td align=\"center\">Jan</td>\n<td align=\"right\">Botox</td>\n</tr>\n<tr>\n<td>1月</td>\n<td align=\"center\">0</td>\n<td align=\"center\">Jan</td>\n<td align=\"right\">粉毒</td>\n</tr>\n<tr>\n<td>2月</td>\n<td align=\"center\">355</td>\n<td align=\"center\">Feb</td>\n<td align=\"right\">Botox</td>\n</tr>\n<tr>\n<td>2月</td>\n<td align=\"center\">0</td>\n<td align=\"center\">Feb</td>\n<td align=\"right\">粉毒</td>\n</tr>\n<tr>\n<td>2月</td>\n<td align=\"center\">121</td>\n<td align=\"center\">Feb</td>\n<td align=\"right\">衡力</td>\n</tr>\n<tr>\n<td>3月</td>\n<td align=\"center\">361</td>\n<td align=\"center\">Mar</td>\n<td align=\"right\">Botox</td>\n</tr>\n<tr>\n<td>3月</td>\n<td align=\"center\">0</td>\n<td align=\"center\">Mar</td>\n<td align=\"right\">粉毒</td>\n</tr>\n<tr>\n<td>3月</td>\n<td align=\"center\">123</td>\n<td align=\"center\">Mar</td>\n<td align=\"right\">衡力</td>\n</tr>\n<tr>\n<td>4月</td>\n<td align=\"center\">0</td>\n<td align=\"center\">Apr</td>\n<td align=\"right\">Botox</td>\n</tr>\n<tr>\n<td>4月</td>\n<td align=\"center\">0</td>\n<td align=\"center\">Apr</td>\n<td align=\"right\">衡力</td>\n</tr>\n<tr>\n<td>4月</td>\n<td align=\"center\">0</td>\n<td align=\"center\">Apr</td>\n<td align=\"right\">粉毒</td>\n</tr>\n<tr>\n<td>5月</td>\n<td align=\"center\">0</td>\n<td align=\"center\">May</td>\n<td align=\"right\">Botox</td>\n</tr>\n<tr>\n<td>5月</td>\n<td align=\"center\">0</td>\n<td align=\"center\">May</td>\n<td align=\"right\">衡力</td>\n</tr>\n<tr>\n<td>5月</td>\n<td align=\"center\">0</td>\n<td align=\"center\">May</td>\n<td align=\"right\">粉毒</td>\n</tr>\n<tr>\n<td>6月</td>\n<td align=\"center\">0</td>\n<td align=\"center\">June</td>\n<td align=\"right\">Botox</td>\n</tr>\n<tr>\n<td>6月</td>\n<td align=\"center\">0</td>\n<td align=\"center\">June</td>\n<td align=\"right\">衡力</td>\n</tr>\n<tr>\n<td>6月</td>\n<td align=\"center\">0</td>\n<td align=\"center\">June</td>\n<td align=\"right\">粉毒</td>\n</tr>\n<tr>\n<td>7月</td>\n<td align=\"center\">0</td>\n<td align=\"center\">July</td>\n<td align=\"right\">Botox</td>\n</tr>\n<tr>\n<td>7月</td>\n<td align=\"center\">0</td>\n<td align=\"center\">July</td>\n<td align=\"right\">衡力</td>\n</tr>\n<tr>\n<td>7月</td>\n<td align=\"center\">0</td>\n<td align=\"center\">July</td>\n<td align=\"right\">粉毒</td>\n</tr>\n<tr>\n<td>8月</td>\n<td align=\"center\">13</td>\n<td align=\"center\">Aug</td>\n<td align=\"right\">粉毒</td>\n</tr>\n<tr>\n<td>8月</td>\n<td align=\"center\">129</td>\n<td align=\"center\">Aug</td>\n<td align=\"right\">衡力</td>\n</tr>\n<tr>\n<td>8月</td>\n<td align=\"center\">361</td>\n<td align=\"center\">Aug</td>\n<td align=\"right\">Botox</td>\n</tr>\n<tr>\n<td>9月</td>\n<td align=\"center\">0</td>\n<td align=\"center\">Sept</td>\n<td align=\"right\">粉毒</td>\n</tr>\n<tr>\n<td>9月</td>\n<td align=\"center\">0</td>\n<td align=\"center\">Sept</td>\n<td align=\"right\">Botox</td>\n</tr>\n<tr>\n<td>9月</td>\n<td align=\"center\">0</td>\n<td align=\"center\">Sept</td>\n<td align=\"right\">衡力</td>\n</tr>\n<tr>\n<td>10月</td>\n<td align=\"center\">0</td>\n<td align=\"center\">Oct</td>\n<td align=\"right\">粉毒</td>\n</tr>\n<tr>\n<td>10月</td>\n<td align=\"center\">0</td>\n<td align=\"center\">Oct</td>\n<td align=\"right\">Botox</td>\n</tr>\n<tr>\n<td>10月</td>\n<td align=\"center\">0</td>\n<td align=\"center\">Oct</td>\n<td align=\"right\">衡力</td>\n</tr>\n<tr>\n<td>11月</td>\n<td align=\"center\">0</td>\n<td align=\"center\">Nov</td>\n<td align=\"right\">粉毒</td>\n</tr>\n<tr>\n<td>11月</td>\n<td align=\"center\">0</td>\n<td align=\"center\">Nov</td>\n<td align=\"right\">Botox</td>\n</tr>\n<tr>\n<td>11月</td>\n<td align=\"center\">0</td>\n<td align=\"center\">Nov</td>\n<td align=\"right\">衡力</td>\n</tr>\n<tr>\n<td>12月</td>\n<td align=\"center\">0</td>\n<td align=\"center\">Dec</td>\n<td align=\"right\">粉毒</td>\n</tr>\n<tr>\n<td>12月</td>\n<td align=\"center\">0</td>\n<td align=\"center\">Dec</td>\n<td align=\"right\">Botox</td>\n</tr>\n<tr>\n<td>12月</td>\n<td align=\"center\">0</td>\n<td align=\"center\">Dec</td>\n<td align=\"right\">衡力</td>\n</tr>\n</tbody></table>\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p>与报表显示一致</p>\n"},{"title":"接口文档(小程序)","type":"接口文档","_content":"\n## 登录页\n\n### 业务流程图\n\n[登录模块业务流程](/application/syp-wxmp.html)\n\n### 手机号登录\n\n1. 企业列表展示\n\n  ```\n  get /portal/v2/account-number-login/enterprise-list\n  {\n    mobile: 手机号,\n    password: 密码(MD5加密)\n  }\n  ```\n\n  业务流程：\n\n  - 参数判断（mobile 和 password 进行判空）\n  - 获取数据源 portalDataSource\n  - 判断密码\n    - 调用 `portalV2Service.queryUserInfo(mobile)` 方法查询用户密码\n\n    ```sql\n    select password \n    from sup_user \n    where mobile = #{mobile} and delete_status = 0 limit 1\n    ```\n\n    - 判断userPassword和参数password是否相等，或者根据手机号后六位数(内部排序)经过MD5加密后的字符串是否相等，有一个相等就继续，如果都不相同，返回信息中返回“密码错误”\n\n  - 获取企业列表\n    - 调用 `apiPortalV2Service的queryEnterpriseListWithMobile(mobile, password)` 获取企业列表 result\n\n    ```sql\n    SELECT\n      sue.uuid AS userUuid ,\n      su.user_name AS userName ,\n      sue.mobile AS userMobile ,\n      su.email AS userEmail ,\n      su.user_num AS userNumber ,\n      sue. STATUS AS userStatus ,\n      su. PASSWORD ,\n      su. PASSWORD AS userIdToken ,\n      sue.token AS userToken ,\n      se.group_id AS groupId ,\n      se.role_id AS roleId ,\n      su.is_delete AS userIsDelete ,\n      'todo' AS userGravatar ,\n      'todo' AS groupName ,\n      'todo' AS roleName ,\n      se.uuid AS enterpriseUuid ,\n      se. CODE AS enterpriseCode ,\n      se. NAME AS enterpriseName ,\n      se.data_source_id AS dataSourceCode ,\n      se.role_id AS enterpriseRoleId ,\n      se.group_id AS enterpriseGroupId ,\n      se. LANGUAGE AS enterpriseLanguage\n    FROM\n      sup_user_enterprises AS sue\n    LEFT JOIN sup_enterprises AS se ON se.uuid = sue.data_enterprise_uuid\n    AND sue.data_enterprise_code = se. CODE\n    LEFT JOIN sup_user AS su ON su.mobile = sue.mobile\n    WHERE\n      sue.mobile = #{mobile} and sue.delete_status = '0' and sue.status = 1\n    \n    GROUP BY\n      sue.uuid\n    ```\n\n  - 查询用户角色\n    - 循环遍历企业列表 result ，每次遍历的单体对象是 map ，调用 `apiPortalV2Service.queryUserRoleUuidList(userUuid,portalDataSource)` 查询用户角色uuid得到 roleList\n\n    ```sql\n    SELECT\n      aur.uuid AS roleUuid ,\n      aur.role_name AS roleName\n    FROM\n      sup_user_roles AS sur\n    LEFT JOIN app_user_roles AS aur ON aur.uuid = sur.role_uuid\n    AND sur.data_enterprise_uuid = aur.data_enterprise_uuid\n    WHERE\n      user_uuid = #{userUuid}\n    GROUP BY\n      aur.uuid\n    ```\n\n    - 追加 roleList 给map中的 userUuidList\n    - 遍历 roleList，将每一个 roleUuid 用“，”拼接起来赋值给 roleUuids 字符串，然后追加到map中的 roleUuids 中\n\n  - 封装结果到返回信息实体中并返回信息实体，用户选择企业进行登录\n\n2. 获取微信用户 openid\n\n  ```\n  post /saas-api/api/portal/wx/query-user-openid \n  {\n    code: 用户凭证(wx.login获取),\n    enterpriseUuid: 企业uuid,\n    mobile: 手机号\n  }\n  ```\n\n  业务流程：\n\n  - 参数判断（code 和 mobile 进行判空）\n  - 如果 code 不为空，从数据库中重新获取 openid\n    - 获取微信小程序配置信息\n      - appId：\"weChat.appId\"\n      - secret：\"weChat.secret\"\n      - openIdUrl：\"weChat.openIdUrl\"\n\n    - 替换 openIdUrl 中的参数值\n      - 用appId、secret、code 分别替换原openIdUrl中的 APP_ID、APP_SECRET、JS_CODE ，得到新的 openIdUrl\n\n    - 获取openId返回值\n      - 调用微信官方接口返回值 `HttpMethodUtil.getGetResult(openIdUrl, null)` 得到openIdResult\n      - 判断openIdResult是否是JSON格式，不是则返回 获取用户 openId 接口返回值非JSON格式错误信息\n      - 是JSON格式，则转为JSON对象 json\n\n    - 创建一个字段 isBinding=0，向 json 中put\n    - 如果 json 对象不为空，先获取数据源 portalDataSource\n    - 调用 `apiWeChatService的portalQueryUserOpenId(mobilev, enterpriseUuid, portalDataSource)` 方法查询用户openId 得到结果集 result（Map集合）\n\n    ```sql\n    SELECT\n      wx_unique_token AS openid ,\n      is_binding\n    FROM\n      sup_wx_users\n    WHERE\n      mobile = #{mobile} and is_binding = 1 and delete_status = 0\n    ORDER BY\n      id DESC\n    LIMIT 1\n    ```\n\n    - 将结果 result 的 is_binding 字段追加给 json 中\n    - 在返回实体对象中封装结果 json 对象，并返回\n\n  - 如果 code 为空，则从数据源中取\n    - 获得数据源对象 portalDataSource\n    - 调用 `apiWeChatService.portalQueryUserOpenId(mobile,enterpriseUuid,portalDataSource)` 方法查询用户openId得到结果 result\n    - 在返回实体对象中封装结果 result\n\n3. 推送信息\n\n  ```\n  post /saas-api/api/portal/wx/send-template-message\n  {\n    toUsers: 需要发送的用户的uuid,\n    template_id: 模板id,\n    page: 需要跳转的页面（选填）,\n    data: 微信通知模板数据,\n    enterpriseUuid: 企业uuid,\n    emphasis_keyword： 模板需放大关键字可选填）\n  }\n  ```\n\n  业务流程：\n\n  - 参数判断（param，data，toUsers，template_id 进行判空）\n  - 获取企业信息：根据参数 enterpriseUuid 去查询企业信息得到 portalEnterprise\n  - 获取用户openId：根据参数 toUsers 获取，得到openId数组 toUserArray\n  - 封装查询参数 query，向其中追加参数 enterpriseUuid、toUsers、dataEnterpriseUuid和dataEnterpriseCode\n  - 获取数据源得到 portalDataSource\n  - 调用 `apiWeChatService的queryUserOpenIdWithUuid(query, portalDataSource)` 方法得到openId集合 openIdList\n\n  ```sql\n  SELECT DISTINCT\n    swu.wx_unique_token AS openId\n  FROM\n    sup_user_enterprises AS sue\n  LEFT JOIN sup_wx_users AS swu ON sue.mobile = swu.mobile\n  WHERE\n    sue.delete_status = '0'\n  AND swu.wx_unique_token IS NOT NULL\n  AND swu.wx_unique_token != ''\n  AND sue.data_enterprise_uuid = #{dataEnterpriseUuid} and sue.data_enterprise_code = #{dataEnterpriseCode}\n  \n  AND swu.is_binding = 1\n  AND swu.delete_status = 0\n  AND sue.uuid IN '遍历#{toUsers}'\n  GROUP BY uuid\n  ```\n\n  - 向参数集合 newParam 中追加 appId、secret、fromUrl、ip、templateId、page、data、empahsis_keyword\n  - 循环发送模板信息\n    - 通过 openId 异步获取 formId\n    - 向 newParam 中追加 openId 和 formId 给 toUser 和 formId 两个字段\n    - 调用自身API去得到结果 sendResult\n    - 向结果集合 resultMap 中追加 sendResult\n  - 向返回实体信息中封装 resultMap 并返回\n\n4. 提交用户偏好\n\n  ```\n  get user/v1/preference\n  {\n    enterpriseUuid: 企业UUID,\n    cmobile: 手机号,\n    platform: 平台\n  }\n  ```\n\n  业务流程：\n\n  - 参数判断（对enterpriseUuid、mobile、platform进行判空）\n  - 将 mobile、enterpriseUuid、platform 拼接成一个 hashkey\n  - 大key为 “user：perference”，hashkey为拼接成的 hashkey 去redis中取值 preference\n  - 如果 preference 是空的\n    - 将 mobile、enterpriseUuid、platform 依次放进参数 params 中，params是一个map集合\n    - 获取数据源 portalDataSource\n    - 根据参数 params 和数据源去数据库取 preference\n\n    ```sql\n    SELECT\n      preference\n    FROM\n      sup_user_preferences\n    WHERE\n      enterprise_uuid = '${enterpriseUuid}'\n    AND mobile = '${mobile}'\n    AND platform = '${platform}'\n    LIMIT 1;\n    ```\n\n    - 以 “user：perference” 为大key，拼接的hashkey为 hashksy，preference 为值追加到redis中\n    - 返回实体信息中封装 preference 并返回\n\n  - 如果 preference 非空，返回实体信息中封装 preference 并返回\n\n### 企业号登录\n\n1. 获取企业\n\n  ```\n  get user/v1/enterprise-info\n  {\n    request： 请求\n    enterpriseCode:  企业号\n  }\n  ```\n\n  业务流程：\n\n  - 参数判断（对enterpriseCode进行判空）\n  - 获取数据源portalDataSource\n  - 获取企业信息结果集 result\n    - 调用 `apiUserLoginService.weChatAppletWithEnterpriseInfo(enterpriseCode, portalDataSource)` 方法获取企业信息 result\n\n    ```sql\n    SELECT\n      id AS enterpriseId ,\n      uuid AS enterpriseUuid ,\n      CODE AS enterpriseCode ,\n      `language` ,\n      `name` AS enterpriseName ,\n      role_id AS enterpriseRoleId ,\n      group_id AS enterpriseGroupId ,\n      data_source_id AS enterpriseDataSourceId\n    FROM\n      sup_enterprises\n    WHERE\n      CODE = #{enterpriseCode}\n    LIMIT 1\n    ```\n\n  - result 不为空则向返回信息实体中封装 result 并返回\n\n2. 获取登录用户信息\n\n  ```\n  get user/v1/wx-applet-login\n  {\n    request：请求\n    mobile：手机号码\n    password：MD5机密后的密码\n    enterpriseUuid：企业UUID\n  }\n  ```\n\n  业务流程：\n\n  - 获取请求头中的enterpriseUuid\n    - 调用 `request.getHeader(\"enterpriseUuid\")` 得到企业UUID字符串 enterprise\n\n  - 参数判断（对 mobile、password、enterpriseUuid 进行判空）\n  - 验证 enterprise 和 参数 enterpriseUuid 是否想等，如果不相等则返回请求头与请求参数的企业UUID不一致\n  - 获取企业信息\n    - 异步调用 `asyncUtils.QUERY_ENTERPRISE_INFO(enterprise)` 方法得到企业信息 portalEnterprise\n\n  - 拼接参数集合 param （Map集合）\n    - 向 param 中追加键值对 {\"mobile\":mobile,\"password\":password,\"dataEnterpriseUuid\":portalEnterprise.getEnterpriseUuid();\"dataEnterpriseCode\":portalEnterprise.getEnterpriseCode()}\n\n  - 获取数据源portalDataSource\n  - 查询企业用户信息\n    - 调用 `apiUserLoginService.weChatAppletWithLogin(param,portalDataSource)` 方法得到结果集 result\n\n    ```sql\n    SELECT\n      sue.uuid AS userUuid ,\n      su.user_name AS userName ,\n      su.mobile AS userMobile ,\n      su.email AS userEmail ,\n      su.user_num AS userNumber ,\n      sue. STATUS AS userStatus ,\n      su. PASSWORD ,\n      sue.token AS userToken ,\n      'todo' AS userGravatar ,\n      sen.group_id AS groupId ,\n      'todo' AS groupName ,\n      sen.role_id AS roleId ,\n      'todo' AS roleName ,\n      su.is_delete AS userIsDelete\n    FROM\n      sup_user_enterprises AS sue\n    LEFT JOIN sup_user AS su ON sue.mobile = su.mobile\n    LEFT JOIN sup_enterprises AS sen ON sen.uuid = sue.data_enterprise_uuid\n    WHERE\n      sue.mobile = '${mobile}'\n    AND su. PASSWORD IS NOT NULL\n    AND sue.data_enterprise_uuid = '${dataEnterpriseUuid}'\n    AND sue.data_enterprise_code = '${dataEnterpriseCode}'\n    AND sue.delete_status = '0'\n    GROUP BY\n      sue.uuid\n    LIMIT 1\n    ```\n\n  - 用户信息核对\n    - 判断用户信息结果集 result 中的USER_STATUS是否等于1，不等则返回该账号已被停用\n    - 判断 result 中的PASSWORD 是否等于参数中的 password，不等则返回密码错误\n\n  - 获取用户角色列表\n    - 调用 `apiUserLoginService.queryUserRoleUuidList(result.get(\"userUuid\").toString(), portalDataSource)` 得到 roleList\n\n    ```sql\n    SELECT\n      aur.uuid AS roleUuid ,\n      aur.role_name AS roleName\n    FROM\n      sup_user_roles AS sur\n    LEFT JOIN app_user_roles AS aur ON aur.uuid = sur.role_uuid\n    AND sur.data_enterprise_uuid = aur.data_enterprise_uuid\n    WHERE\n      user_uuid = #{userUuid}\n    GROUP BY\n      aur.uuid\n    ```\n\n    - 向 result 中追加{\"roleUuidList\":roleList,\"roleUuids\":\"\"}\n\n  - 获取角色UUID\n    - 循环遍历 roleList ，将角色列表中的每一个角色的 roleUuid 拼接给 roleUuids ，中间用”，”隔开\n    - 向 result 中追加 roleUuids \n\n  - 返回实体中封装结果集 result 并返回\n\n3. 获取微信用户 openid 、推送消息 、提交用户偏好 三个步骤同 手机号登录 中的3、4、5介绍\n\n### 微信登录\n\n1. 获取企业列表\n\n   ```\n   get api/portal/v2/wx-login/enterprise-list-v2\n   {\n    request: 请求，\n    code: 微信小程序中的code值\n   }\n   ```\n\n  业务流程：\n\n  - 参数判断\n    - 对 code 进行判空\n\n  - 获取 openId\n    - 获取微信小程序配置信息\n      - appId：\"weChat.appId\"\n      - secret：\"weChat.secret\"\n      - openIdUrl：\"weChat.openIdUrl\"\n\n    - 替换 openIdUrl 中的参数值\n      - 用appId、secret、code 分别替换原openIdUrl中的 APP_ID、APP_SECRET、JS_CODE ，得到新的 openIdUrl\n\n    - 获取openId返回值\n      - 调用微信官方接口返回值 `HttpMethodUtil.getGetResult(openIdUrl, null)` 得到openIdResult\n\n    - 判断openIdResult是否是JSON格式\n      - 不是则返回 获取用户 openId 接口返回值非JSON格式错误信息\n      - 是JSON格式，则转为JSON对象 json\n\n    - 从 json 中去字段 OPEN_ID 的值，得到openId\n\n  - 获取企业列表\n    - 获取数据源portalDataSource\n    - 获取企业用户信息结果集\n      - 调用 `apiPortalV2Service.queryEnterpriseListWithWeChatOpenIdV2(openId,portalDataSource)` 方法得到结果集 result （Map集合）\n\n      ```sql\n      SELECT\n        se.uuid AS enterpriseUuid ,\n        se. CODE AS enterpriseCode ,\n        se. NAME AS enterpriseName ,\n        se.data_source_id AS dataSourceCode ,\n        se.role_id AS enterpriseRoleId ,\n        se.group_id AS enterpriseGroupId ,\n        se. LANGUAGE AS enterpriseLanguage ,\n        swu.wx_avatar AS wxAvatar ,\n        swu.wx_name AS wxName ,\n        swu.wx_nick_name AS wxNickName ,\n        sue.uuid AS userUuid ,\n        sue.mobile AS userMobile ,\n        su.user_name AS userName ,\n        su.email AS userEmail ,\n        sue.delete_status AS userIsDelete ,\n        swu.wx_unique_token AS wxUniqueoken ,\n        sue. STATUS AS userStatus ,\n        sue.token AS userToken ,\n        se.group_id AS groupId ,\n        se.role_id AS roleId ,\n        'todo' AS userGravatar ,\n        'todo' AS groupName ,\n        'todo' AS roleName ,\n        su. PASSWORD AS userIdToken\n      FROM\n        sup_wx_users AS swu\n      INNER JOIN sup_user_enterprises AS sue ON sue.mobile = swu.mobile\n      INNER JOIN sup_enterprises AS se ON sue.data_enterprise_uuid = se.uuid\n      INNER JOIN sup_user AS su ON su.mobile = swu.mobile\n      WHERE\n        swu.wx_unique_token = #{openId}\n      AND sue.delete_status = '0'\n      AND swu.is_binding = 1\n      AND swu.delete_status = 0\n      ```\n\n    - 验证结果集数据是否有效\n      - 拿出 result 中 USER_STATUS 字段值， 不等于1则返回该账号已被停用错误信息\n\n    - 获取用户角色UUID\n      - 遍历结果集 result ，每一次遍历的单体是 map \n      - 调用 `apiUserLoginService.queryUserRoleUuidList(map.get(\"userUuid\").toString(), portalDataSource)` 得到 roleList\n\n      ```sql\n      SELECT\n        aur.uuid AS roleUuid ,\n        aur.role_name AS roleName\n      FROM\n        sup_user_roles AS sur\n      LEFT JOIN app_user_roles AS aur ON aur.uuid = sur.role_uuid\n      AND sur.data_enterprise_uuid = aur.data_enterprise_uuid\n      WHERE\n        user_uuid = #{userUuid}\n      GROUP BY\n        aur.uuid\n      ```\n\n      - 向 map 中追加{\"roleUuidList\":roleList,\"roleUuids\":\"\"}\n      - 循环遍历 roleList ，将角色列表中的每一个角色的 roleUuid 拼接给 roleUuids ，中间用”，”隔开\n      - 向 map 中追加 roleUuids \n\n  - 返回信息实体中封装结果集 result 并返回\n\n## 注册页\n\n### 业务流程图\n\n[注册模块业务流程](/application/syp-wxmp.html)\n\n1. 获取企业信息\n\n  ```\n  get user/v1/enterprise-info\n  {\n    enterpriseCode: 企业编码\n  }\n  ```\n\n  业务流程：\n\n  - 参数判断\n    - 对 enterpriseCode  进行判空\n\n  - 获取数据源portalDataSource\n  - 获取企业信息\n    - 调用 `apiUserLoginService.weChatAppletWithEnterpriseInfo` 方法获得企业信息结果集合 result\n\n    ```sql\n    SELECT\n      id AS enterpriseId ,\n      uuid AS enterpriseUuid ,\n      CODE AS enterpriseCode ,\n      `language` ,\n      `name` AS enterpriseName ,\n      role_id AS enterpriseRoleId ,\n      group_id AS enterpriseGroupId ,\n      data_source_id AS enterpriseDataSourceId\n    FROM\n      sup_enterprises\n    WHERE\n      CODE = #{enterpriseCode}\n    LIMIT 1\n    ```\n\n  - 返回信息实体中封装结果集 result 并返回\n\n2. 扫码查询追踪码明细\n\n  ```\n  get api/portal/wx/tracking-code/select-info\n  {\n    qrCodeUuid: 追踪码uuid\n  }\n  ```\n\n  业务流程：\n\n  - 参数判断\n    - 对 qrCodeUuid 进行判空\n    - 判断 qrCodeUuid 的长度是否是32位，不是则返回追踪码UUID长度不符合规则\n\n  - 从redis获取数据\n    - key为 \"portal:qr:code\" ，hashkey为  \"qrCodeUuid\" ，得到字符串值 str\n\n  - 如果 str 不是空的则转为DataQrCode对象 dataQrCodeSelect ，如果是空的则将null赋值给 dataQrCodeSelect\n  - 如果 dataQrCodeSelect 为null\n    - 获取数据源 portalDataSource\n    - 调用 `apiWeChatService.queryDataQrCodeInfoWithUuid(qrCodeUuid, portalDataSource)` 获取结果赋值给 dataQrCodeSelect\n\n    ```sql\n    SELECT\n      id ,\n      uuid ,\n      enterprise_name ,\n      enterprise_code ,\n      enterprise_uuid ,\n      business_uuid ,\n      business_type ,\n      business_name ,\n      target_url ,\n      data_json ,\n      remark ,\n      create_user ,\n      update_user ,\n      created_time ,\n      updated_time\n    FROM\n      sup_qr_code_business_data\n    WHERE\n      uuid = #{uuid}\n    ```\n\n    - 如果 dataQrCodeSelect 不为空，则向redis中追加\n      - key为 \"portal:qr:code\" ，hashkey为 qrCodeUuid，值为 JSONObject.toJSONString(dataQrCodeSelect)\n\n  - 如果 dataQrCodeSelect 不为null\n    - 调用 `dataQrCodeSelect.setDataJson(StringUtils.replace(dataQrCodeSelect.getDataJson(), \"\\\\\", \"\"))` 方法调整dataQrCodeSelect中dataJson数据格式\n\n  - 返回信息实体中封装结果 dataQrCodeSelect 并返回\n\n3. 发送验证码\n\n  ```\n  get user/v1/register-verification-code-v1\n  {\n    mobile: 手机号\n  }\n  ```\n\n  业务流程：\n\n  - 参数判断\n    - 对 mobile 进行判空\n\n  - 生成四位验证码\n    - 调用 `RandomNumberGenerator.generateNumber()` 方法获得 code\n    - 向结果集合 result 中追加 code\n\n  - 发送短信\n    - 调用 `asyncUtils.SEND_SMS_WITH_REGISTER(mobile, SUCCESS_MSG, SUCCESS)` \n\n  - 保存到redis中\n    - key为 (\"portal:user:verificationCode:register:%s\",mobile)，值为 code\n\n  - 返回信息实体中封装结果集 result 并返回\n\n## 报表页\n\n1. 获取报表项菜单\n\n  ```\n  get api/portal/wx/report-menu\n  {\n    enterpriseUuid: 企业uuid，\n    roleUuids: 角色uuid\n  }\n  ```\n\n  ​业务流程：\n\n  - 参数判断\n    - 对roleUuids进行判空\n\n  - 从redis中获取报表项菜单列表\n    - key为 \"portal:role:wx:report-menu\"，hashkey为 \"role-\" + roleUuids，得到JSON字符创 menuListStr\n    - 如果 menuListStr 不为空，将其转为List集合 menuList，如果为空，则给List集合 menuList 赋值 null\n\n  - 如果 menuList 为空\n    - 获取数据源 portalDataSource\n    - 调用 `apiWeChatService.queryReportMenuByUserRoleUuids(roleUuids, portalDataSource)` 获得报表菜单集合 menuList\n\n    ```sql\n    SELECT\n      smr.id ,\n      smr.uuid ,\n      smr.category ,\n      ifnull(smr.category_order , 0) AS category_order ,\n      smr.group_name ,\n      ifnull(smr.group_order , 0) AS group_order ,\n      smr.obj_title AS `name` ,\n      ifnull(smr.item_order , 0) AS item_order ,\n      smr.obj_type ,\n      smr.obj_id ,\n      smr.obj_title ,\n      smr.obj_link ,\n      smr.obj_cdn ,\n      smr.obj_version ,\n      smr.publicly ,\n      smr.menu_type ,\n      smr.option_user_num ,\n      icon AS icon_link ,\n      CASE smr.obj_type\n    WHEN 'wxmp#config' THEN\n      smc.home_path\n    WHEN 'wxmp' THEN\n      smr.home_path\n    ELSE\n      ''\n    END AS home_path ,\n     smr.cdn_module ,\n     smr.cdn_version ,\n     smr.cdn_state ,\n     smr.report_id ,\n     smr.obj_link AS url_path\n    FROM\n      sup_menus AS smr\n    LEFT JOIN sup_module_config AS smc ON smc.module_code = smr.obj_id\n    WHERE\n      smr.platform = 'wxmp'\n    AND menu_category = 1\n    AND smr.uuid IN(\n      SELECT\n        menu_uuid\n      FROM\n        app_user_role_resources\n      WHERE\n        locate(\n          role_uuid ,\n          #{roleUuids}) > 0 and delete_status = '0'\n        )\n    ORDER BY\n      smr.category_order ASC ,\n      smr.group_order ASC ,\n      smr.item_order ASC\n    ```\n\n    - 如果 menuList 不为空，key为 \"portal:role:wx:report-menu\"，hashkey为\"role-\" + roleUuids，向redis中追加值 JSONObject.toJSONString(menuList)\n\n  - 向返回实体信息中封装 menuList 并返回\n\n## 工具箱页\n\n1. 获取工具箱列表\n\n  ```\n  get api/portal/wx/toolbox-menu\n  {\n    request： 请求，\n    roleUuids:  用户角色uuid \n  }\n  ```\n\n  业务流程：\n\n  - 参数判断（ roleUuids 进行判空）\n  - 从redis中获取值 menuListStr\n    - key为 \"portal:role:wx:toolbox-menu\"\n    - hashkey为 \"role-\" + roleUuids\n\n  - 将 menuListStr 转为菜单 menuList 集合\n  - 如果 menuList 是空的\n    - 获取数据源 portalDataSource\n    - 调用 `apiWeChatService.queryToolboxMenuByUserRoleUuids(roleUuids, portalDataSource)` 方法获取工具箱菜单列表 menuList\n\n    ```sql\n    SELECT\n      smt.id ,\n      smt.uuid ,\n      smt.category ,\n      ifnull(smt.category_order , 0) AS category_order ,\n      smt.group_name ,\n      ifnull(smt.group_order , 0) AS group_order ,\n      smt.obj_title AS `name` ,\n      ifnull(smt.item_order , 0) AS item_order ,\n      smt.obj_title ,\n      smt.menu_type ,\n      smt.obj_type ,\n      smt.obj_id ,\n      smt.obj_link ,\n      smt.obj_cdn ,\n      smt.obj_version ,\n      smt.report_id ,\n      smt.url_path ,\n      smt.icon AS icon_link ,\n      smt.publicly ,\n      smt.option_user_num ,\n      CASE smt.obj_type\n    WHEN 'wxmp#config' THEN\n      smc.home_path\n    WHEN 'wxmp' THEN\n      smt.home_path\n    ELSE\n      ''\n    END AS home_path ,\n     smt.obj_title AS `name` ,\n     smt.cdn_module ,\n     smt.cdn_version ,\n     smt.cdn_state\n    FROM\n      sup_menus AS smt\n    LEFT JOIN sup_module_config AS smc ON smc.module_code = smt.obj_id\n    WHERE\n      smt.platform = 'wxmp'\n    AND menu_category = 0\n    AND smt.uuid IN(\n      SELECT\n        menu_uuid\n      FROM\n        app_user_role_resources\n      WHERE\n        locate(\n          role_uuid ,\n          #{roleUuids}) > 0 and delete_status = '0'\n        )\n    ORDER BY\n      smt.category_order ASC ,\n      smt.group_order ASC ,\n      smt.item_order ASC    \n    ```\n\n    - 解析渲染 menuList 数据\n    - 以key为 \"portal:role:wx:toolbox-menu\" ，hashkey为 \"role-\" + roleUuids ，值为 menuList 向redis中追加\n    - 返回实体信息中封装 menuList 并返回\n\n  - 如果menuList非空，返回实体信息中封装 menuList 并返回\n\n## [我的]\n\n### 查询 formId 数量\n\n```\n  get api/portal/wx/formId-num\n  {\n    enterpriseUuid: 企业UUID，\n    mobile: 手机号\n  }\n```\n\n  业务流程：\n\n  - 参数判断\n    - 对 mobile 进行参数判空\n\n  - 获取用户信息集合\n    - 调用 `apiWeChatService.portalQueryFormIdByMobile(mobile, selectPortalDataSourceUtils.dynamicSelectPortalDataSource(FUNCTION_F10L, DB_TYPE_SLAVE))` 获得用户信息集合 userMap\n\n    ```sql\n    SELECT\n      wx_avatar AS wxAvatar ,\n      wx_name AS wxName ,\n      wx_nick_name AS wxNickName ,\n      wx_unique_token AS wxUniqueToken ,\n      mobile ,\n      enterprise_code AS enterpriseCode ,\n      enterprise_uuid AS enterpriseUuid ,\n      is_binding AS isBinding\n    FROM\n      sup_wx_users\n    WHERE\n      mobile = #{mobile} and is_binding = 1 and delete_status = 0\n    LIMIT 1\n    ```\n\n  - 如果 userMap 不为空\n    - 取 userMap 中的 \"wxuniqueToken\" 赋值给字符串 openId\n    - 以 \"portal:user:wxFormId\" 为key从redis中获取集合 map\n    - 如果 map 不为空\n      - 遍历 map ，每一次的遍历单体对象是 entry\n      - 将 entry.getKey() 赋值给 hashKey ，entry.getValue() 赋值给 value \n      - 将 hashKey 用 \"@\" 切割得到字符串数据 hashKeys\n      - 如果 hashKeys 长度大于1，且数组第一个元素和 openId 相等，获取当前时间毫秒值 nowTime \n      - 如果 nowTime 小于 hashKeys 第二个元素的值或者 value 值不等于 \"the formId is a mock one\" ，计数器 count++ ，formIdArray添加值 value ，否则从redis中移除掉 key为 \"portal:user:wxFormId\" , hashKey为 entry.getKey() 的数据\n\n  - 向 userMap 中 put  (\"userFormIdNum\", count) 和 (\"formIdArray\", formIdArray)\n  - 在返回信息实体中封装 userMap 并返回\n\n### 获取企业管理列表\n\n```\n  get api/portal/wx/enterprise-menu-list\n  {\n    enterpriseUuid：企业UUID，\n    roleUuids: 角色UUID\n  }\n```\n\n  业务流程：\n\n  - 参数判断\n    - 对roleUuids进行判空\n\n  - 获取数据源 portalDataSource\n  - 获取企业管理列表\n    - 调用 `apiWeChatService.queryEnterpriseMenuList(roleUuids, f10lSlaveDataSource)` 获得企业管理列表 menuList\n\n    ```sql\n    SELECT\n      t1.id ,\n      t1.`name` AS title ,\n      t1.description ,\n      t1.group_name ,\n      t1.obj_id ,\n      t1.obj_type ,\n      CASE t1.group_name\n    WHEN '基本信息' THEN\n      'sa'\n    WHEN '业务权限设置' THEN\n      'sb'\n    ELSE\n      'sc'\n    END AS pid ,\n     CASE\n    WHEN t1.group_name = '业务权限设置' THEN\n      t1.parent_menu_uuid\n    ELSE\n      ''\n    END AS uuid ,\n     CASE t1.obj_type\n    WHEN 'wxmp#config' THEN\n      t3.home_path\n    WHEN 'wxmp' THEN\n      t1.home_path\n    ELSE\n      ''\n    END AS home_path\n    FROM\n      sup_menus AS t1\n    LEFT JOIN app_user_role_resources AS t2 ON t1.uuid = t2.menu_uuid\n    AND t2.delete_status = '0'\n    LEFT JOIN sup_module_config AS t3 ON t3.module_code = t1.obj_id\n    WHERE\n      t1.menu_category = '2'\n    AND FIND_IN_SET(\n      t2.role_uuid ,\n      #{roleUuids})\n    \n    GROUP BY\n      t1.group_name ,\n      t1.`name`\n    ORDER BY\n      pid ,\n      t1.id\n    ```\n\n  - 如果 menuList 不为空\n    - 调用 `apiWeChatService.queryModulePageConfigList(f10lSlaveDataSource)` 获得页面设置列表 configList \n\n    ```sql\n    SELECT\n      module_code ,\n      page_code ,\n      page_type ,\n      version\n    FROM\n      sup_module_page_config\n    WHERE\n      module_code IS NOT NULL\n    AND page_code IS NOT NULL\n    AND page_type IS NOT NULL\n    AND version IS NOT NULL\n    ```\n\n    - 遍历 menuList ，每一次遍历单体对象是 data ，如果 data.get(\"obj_id\") 值为空，则向 objId 赋值为空，如果不为空，则将 data.get(\"obj_id)\" 转为字符串赋值给 objId \n    - 如果 configList 不为空，遍历它，每一次遍历单体对象是 ocnfig \n      - 如果 `config.get(\"module_code\").toString().equals(objId)`  ，就像hashMap中put (config.get(\"page_code\").toString(), config.get(\"page_type\") + \":\" + config.get(\"version\")) \n\n    - 向 data 中put (\"obj_config\", hashMap)\n\n  - 向返回实体对象中 封装 menuList 并返回\n","source":"developer/api-guide/syp-wxmp.md","raw":"---\ntitle: 接口文档(小程序)\ntype: 接口文档\n---\n\n## 登录页\n\n### 业务流程图\n\n[登录模块业务流程](/application/syp-wxmp.html)\n\n### 手机号登录\n\n1. 企业列表展示\n\n  ```\n  get /portal/v2/account-number-login/enterprise-list\n  {\n    mobile: 手机号,\n    password: 密码(MD5加密)\n  }\n  ```\n\n  业务流程：\n\n  - 参数判断（mobile 和 password 进行判空）\n  - 获取数据源 portalDataSource\n  - 判断密码\n    - 调用 `portalV2Service.queryUserInfo(mobile)` 方法查询用户密码\n\n    ```sql\n    select password \n    from sup_user \n    where mobile = #{mobile} and delete_status = 0 limit 1\n    ```\n\n    - 判断userPassword和参数password是否相等，或者根据手机号后六位数(内部排序)经过MD5加密后的字符串是否相等，有一个相等就继续，如果都不相同，返回信息中返回“密码错误”\n\n  - 获取企业列表\n    - 调用 `apiPortalV2Service的queryEnterpriseListWithMobile(mobile, password)` 获取企业列表 result\n\n    ```sql\n    SELECT\n      sue.uuid AS userUuid ,\n      su.user_name AS userName ,\n      sue.mobile AS userMobile ,\n      su.email AS userEmail ,\n      su.user_num AS userNumber ,\n      sue. STATUS AS userStatus ,\n      su. PASSWORD ,\n      su. PASSWORD AS userIdToken ,\n      sue.token AS userToken ,\n      se.group_id AS groupId ,\n      se.role_id AS roleId ,\n      su.is_delete AS userIsDelete ,\n      'todo' AS userGravatar ,\n      'todo' AS groupName ,\n      'todo' AS roleName ,\n      se.uuid AS enterpriseUuid ,\n      se. CODE AS enterpriseCode ,\n      se. NAME AS enterpriseName ,\n      se.data_source_id AS dataSourceCode ,\n      se.role_id AS enterpriseRoleId ,\n      se.group_id AS enterpriseGroupId ,\n      se. LANGUAGE AS enterpriseLanguage\n    FROM\n      sup_user_enterprises AS sue\n    LEFT JOIN sup_enterprises AS se ON se.uuid = sue.data_enterprise_uuid\n    AND sue.data_enterprise_code = se. CODE\n    LEFT JOIN sup_user AS su ON su.mobile = sue.mobile\n    WHERE\n      sue.mobile = #{mobile} and sue.delete_status = '0' and sue.status = 1\n    \n    GROUP BY\n      sue.uuid\n    ```\n\n  - 查询用户角色\n    - 循环遍历企业列表 result ，每次遍历的单体对象是 map ，调用 `apiPortalV2Service.queryUserRoleUuidList(userUuid,portalDataSource)` 查询用户角色uuid得到 roleList\n\n    ```sql\n    SELECT\n      aur.uuid AS roleUuid ,\n      aur.role_name AS roleName\n    FROM\n      sup_user_roles AS sur\n    LEFT JOIN app_user_roles AS aur ON aur.uuid = sur.role_uuid\n    AND sur.data_enterprise_uuid = aur.data_enterprise_uuid\n    WHERE\n      user_uuid = #{userUuid}\n    GROUP BY\n      aur.uuid\n    ```\n\n    - 追加 roleList 给map中的 userUuidList\n    - 遍历 roleList，将每一个 roleUuid 用“，”拼接起来赋值给 roleUuids 字符串，然后追加到map中的 roleUuids 中\n\n  - 封装结果到返回信息实体中并返回信息实体，用户选择企业进行登录\n\n2. 获取微信用户 openid\n\n  ```\n  post /saas-api/api/portal/wx/query-user-openid \n  {\n    code: 用户凭证(wx.login获取),\n    enterpriseUuid: 企业uuid,\n    mobile: 手机号\n  }\n  ```\n\n  业务流程：\n\n  - 参数判断（code 和 mobile 进行判空）\n  - 如果 code 不为空，从数据库中重新获取 openid\n    - 获取微信小程序配置信息\n      - appId：\"weChat.appId\"\n      - secret：\"weChat.secret\"\n      - openIdUrl：\"weChat.openIdUrl\"\n\n    - 替换 openIdUrl 中的参数值\n      - 用appId、secret、code 分别替换原openIdUrl中的 APP_ID、APP_SECRET、JS_CODE ，得到新的 openIdUrl\n\n    - 获取openId返回值\n      - 调用微信官方接口返回值 `HttpMethodUtil.getGetResult(openIdUrl, null)` 得到openIdResult\n      - 判断openIdResult是否是JSON格式，不是则返回 获取用户 openId 接口返回值非JSON格式错误信息\n      - 是JSON格式，则转为JSON对象 json\n\n    - 创建一个字段 isBinding=0，向 json 中put\n    - 如果 json 对象不为空，先获取数据源 portalDataSource\n    - 调用 `apiWeChatService的portalQueryUserOpenId(mobilev, enterpriseUuid, portalDataSource)` 方法查询用户openId 得到结果集 result（Map集合）\n\n    ```sql\n    SELECT\n      wx_unique_token AS openid ,\n      is_binding\n    FROM\n      sup_wx_users\n    WHERE\n      mobile = #{mobile} and is_binding = 1 and delete_status = 0\n    ORDER BY\n      id DESC\n    LIMIT 1\n    ```\n\n    - 将结果 result 的 is_binding 字段追加给 json 中\n    - 在返回实体对象中封装结果 json 对象，并返回\n\n  - 如果 code 为空，则从数据源中取\n    - 获得数据源对象 portalDataSource\n    - 调用 `apiWeChatService.portalQueryUserOpenId(mobile,enterpriseUuid,portalDataSource)` 方法查询用户openId得到结果 result\n    - 在返回实体对象中封装结果 result\n\n3. 推送信息\n\n  ```\n  post /saas-api/api/portal/wx/send-template-message\n  {\n    toUsers: 需要发送的用户的uuid,\n    template_id: 模板id,\n    page: 需要跳转的页面（选填）,\n    data: 微信通知模板数据,\n    enterpriseUuid: 企业uuid,\n    emphasis_keyword： 模板需放大关键字可选填）\n  }\n  ```\n\n  业务流程：\n\n  - 参数判断（param，data，toUsers，template_id 进行判空）\n  - 获取企业信息：根据参数 enterpriseUuid 去查询企业信息得到 portalEnterprise\n  - 获取用户openId：根据参数 toUsers 获取，得到openId数组 toUserArray\n  - 封装查询参数 query，向其中追加参数 enterpriseUuid、toUsers、dataEnterpriseUuid和dataEnterpriseCode\n  - 获取数据源得到 portalDataSource\n  - 调用 `apiWeChatService的queryUserOpenIdWithUuid(query, portalDataSource)` 方法得到openId集合 openIdList\n\n  ```sql\n  SELECT DISTINCT\n    swu.wx_unique_token AS openId\n  FROM\n    sup_user_enterprises AS sue\n  LEFT JOIN sup_wx_users AS swu ON sue.mobile = swu.mobile\n  WHERE\n    sue.delete_status = '0'\n  AND swu.wx_unique_token IS NOT NULL\n  AND swu.wx_unique_token != ''\n  AND sue.data_enterprise_uuid = #{dataEnterpriseUuid} and sue.data_enterprise_code = #{dataEnterpriseCode}\n  \n  AND swu.is_binding = 1\n  AND swu.delete_status = 0\n  AND sue.uuid IN '遍历#{toUsers}'\n  GROUP BY uuid\n  ```\n\n  - 向参数集合 newParam 中追加 appId、secret、fromUrl、ip、templateId、page、data、empahsis_keyword\n  - 循环发送模板信息\n    - 通过 openId 异步获取 formId\n    - 向 newParam 中追加 openId 和 formId 给 toUser 和 formId 两个字段\n    - 调用自身API去得到结果 sendResult\n    - 向结果集合 resultMap 中追加 sendResult\n  - 向返回实体信息中封装 resultMap 并返回\n\n4. 提交用户偏好\n\n  ```\n  get user/v1/preference\n  {\n    enterpriseUuid: 企业UUID,\n    cmobile: 手机号,\n    platform: 平台\n  }\n  ```\n\n  业务流程：\n\n  - 参数判断（对enterpriseUuid、mobile、platform进行判空）\n  - 将 mobile、enterpriseUuid、platform 拼接成一个 hashkey\n  - 大key为 “user：perference”，hashkey为拼接成的 hashkey 去redis中取值 preference\n  - 如果 preference 是空的\n    - 将 mobile、enterpriseUuid、platform 依次放进参数 params 中，params是一个map集合\n    - 获取数据源 portalDataSource\n    - 根据参数 params 和数据源去数据库取 preference\n\n    ```sql\n    SELECT\n      preference\n    FROM\n      sup_user_preferences\n    WHERE\n      enterprise_uuid = '${enterpriseUuid}'\n    AND mobile = '${mobile}'\n    AND platform = '${platform}'\n    LIMIT 1;\n    ```\n\n    - 以 “user：perference” 为大key，拼接的hashkey为 hashksy，preference 为值追加到redis中\n    - 返回实体信息中封装 preference 并返回\n\n  - 如果 preference 非空，返回实体信息中封装 preference 并返回\n\n### 企业号登录\n\n1. 获取企业\n\n  ```\n  get user/v1/enterprise-info\n  {\n    request： 请求\n    enterpriseCode:  企业号\n  }\n  ```\n\n  业务流程：\n\n  - 参数判断（对enterpriseCode进行判空）\n  - 获取数据源portalDataSource\n  - 获取企业信息结果集 result\n    - 调用 `apiUserLoginService.weChatAppletWithEnterpriseInfo(enterpriseCode, portalDataSource)` 方法获取企业信息 result\n\n    ```sql\n    SELECT\n      id AS enterpriseId ,\n      uuid AS enterpriseUuid ,\n      CODE AS enterpriseCode ,\n      `language` ,\n      `name` AS enterpriseName ,\n      role_id AS enterpriseRoleId ,\n      group_id AS enterpriseGroupId ,\n      data_source_id AS enterpriseDataSourceId\n    FROM\n      sup_enterprises\n    WHERE\n      CODE = #{enterpriseCode}\n    LIMIT 1\n    ```\n\n  - result 不为空则向返回信息实体中封装 result 并返回\n\n2. 获取登录用户信息\n\n  ```\n  get user/v1/wx-applet-login\n  {\n    request：请求\n    mobile：手机号码\n    password：MD5机密后的密码\n    enterpriseUuid：企业UUID\n  }\n  ```\n\n  业务流程：\n\n  - 获取请求头中的enterpriseUuid\n    - 调用 `request.getHeader(\"enterpriseUuid\")` 得到企业UUID字符串 enterprise\n\n  - 参数判断（对 mobile、password、enterpriseUuid 进行判空）\n  - 验证 enterprise 和 参数 enterpriseUuid 是否想等，如果不相等则返回请求头与请求参数的企业UUID不一致\n  - 获取企业信息\n    - 异步调用 `asyncUtils.QUERY_ENTERPRISE_INFO(enterprise)` 方法得到企业信息 portalEnterprise\n\n  - 拼接参数集合 param （Map集合）\n    - 向 param 中追加键值对 {\"mobile\":mobile,\"password\":password,\"dataEnterpriseUuid\":portalEnterprise.getEnterpriseUuid();\"dataEnterpriseCode\":portalEnterprise.getEnterpriseCode()}\n\n  - 获取数据源portalDataSource\n  - 查询企业用户信息\n    - 调用 `apiUserLoginService.weChatAppletWithLogin(param,portalDataSource)` 方法得到结果集 result\n\n    ```sql\n    SELECT\n      sue.uuid AS userUuid ,\n      su.user_name AS userName ,\n      su.mobile AS userMobile ,\n      su.email AS userEmail ,\n      su.user_num AS userNumber ,\n      sue. STATUS AS userStatus ,\n      su. PASSWORD ,\n      sue.token AS userToken ,\n      'todo' AS userGravatar ,\n      sen.group_id AS groupId ,\n      'todo' AS groupName ,\n      sen.role_id AS roleId ,\n      'todo' AS roleName ,\n      su.is_delete AS userIsDelete\n    FROM\n      sup_user_enterprises AS sue\n    LEFT JOIN sup_user AS su ON sue.mobile = su.mobile\n    LEFT JOIN sup_enterprises AS sen ON sen.uuid = sue.data_enterprise_uuid\n    WHERE\n      sue.mobile = '${mobile}'\n    AND su. PASSWORD IS NOT NULL\n    AND sue.data_enterprise_uuid = '${dataEnterpriseUuid}'\n    AND sue.data_enterprise_code = '${dataEnterpriseCode}'\n    AND sue.delete_status = '0'\n    GROUP BY\n      sue.uuid\n    LIMIT 1\n    ```\n\n  - 用户信息核对\n    - 判断用户信息结果集 result 中的USER_STATUS是否等于1，不等则返回该账号已被停用\n    - 判断 result 中的PASSWORD 是否等于参数中的 password，不等则返回密码错误\n\n  - 获取用户角色列表\n    - 调用 `apiUserLoginService.queryUserRoleUuidList(result.get(\"userUuid\").toString(), portalDataSource)` 得到 roleList\n\n    ```sql\n    SELECT\n      aur.uuid AS roleUuid ,\n      aur.role_name AS roleName\n    FROM\n      sup_user_roles AS sur\n    LEFT JOIN app_user_roles AS aur ON aur.uuid = sur.role_uuid\n    AND sur.data_enterprise_uuid = aur.data_enterprise_uuid\n    WHERE\n      user_uuid = #{userUuid}\n    GROUP BY\n      aur.uuid\n    ```\n\n    - 向 result 中追加{\"roleUuidList\":roleList,\"roleUuids\":\"\"}\n\n  - 获取角色UUID\n    - 循环遍历 roleList ，将角色列表中的每一个角色的 roleUuid 拼接给 roleUuids ，中间用”，”隔开\n    - 向 result 中追加 roleUuids \n\n  - 返回实体中封装结果集 result 并返回\n\n3. 获取微信用户 openid 、推送消息 、提交用户偏好 三个步骤同 手机号登录 中的3、4、5介绍\n\n### 微信登录\n\n1. 获取企业列表\n\n   ```\n   get api/portal/v2/wx-login/enterprise-list-v2\n   {\n    request: 请求，\n    code: 微信小程序中的code值\n   }\n   ```\n\n  业务流程：\n\n  - 参数判断\n    - 对 code 进行判空\n\n  - 获取 openId\n    - 获取微信小程序配置信息\n      - appId：\"weChat.appId\"\n      - secret：\"weChat.secret\"\n      - openIdUrl：\"weChat.openIdUrl\"\n\n    - 替换 openIdUrl 中的参数值\n      - 用appId、secret、code 分别替换原openIdUrl中的 APP_ID、APP_SECRET、JS_CODE ，得到新的 openIdUrl\n\n    - 获取openId返回值\n      - 调用微信官方接口返回值 `HttpMethodUtil.getGetResult(openIdUrl, null)` 得到openIdResult\n\n    - 判断openIdResult是否是JSON格式\n      - 不是则返回 获取用户 openId 接口返回值非JSON格式错误信息\n      - 是JSON格式，则转为JSON对象 json\n\n    - 从 json 中去字段 OPEN_ID 的值，得到openId\n\n  - 获取企业列表\n    - 获取数据源portalDataSource\n    - 获取企业用户信息结果集\n      - 调用 `apiPortalV2Service.queryEnterpriseListWithWeChatOpenIdV2(openId,portalDataSource)` 方法得到结果集 result （Map集合）\n\n      ```sql\n      SELECT\n        se.uuid AS enterpriseUuid ,\n        se. CODE AS enterpriseCode ,\n        se. NAME AS enterpriseName ,\n        se.data_source_id AS dataSourceCode ,\n        se.role_id AS enterpriseRoleId ,\n        se.group_id AS enterpriseGroupId ,\n        se. LANGUAGE AS enterpriseLanguage ,\n        swu.wx_avatar AS wxAvatar ,\n        swu.wx_name AS wxName ,\n        swu.wx_nick_name AS wxNickName ,\n        sue.uuid AS userUuid ,\n        sue.mobile AS userMobile ,\n        su.user_name AS userName ,\n        su.email AS userEmail ,\n        sue.delete_status AS userIsDelete ,\n        swu.wx_unique_token AS wxUniqueoken ,\n        sue. STATUS AS userStatus ,\n        sue.token AS userToken ,\n        se.group_id AS groupId ,\n        se.role_id AS roleId ,\n        'todo' AS userGravatar ,\n        'todo' AS groupName ,\n        'todo' AS roleName ,\n        su. PASSWORD AS userIdToken\n      FROM\n        sup_wx_users AS swu\n      INNER JOIN sup_user_enterprises AS sue ON sue.mobile = swu.mobile\n      INNER JOIN sup_enterprises AS se ON sue.data_enterprise_uuid = se.uuid\n      INNER JOIN sup_user AS su ON su.mobile = swu.mobile\n      WHERE\n        swu.wx_unique_token = #{openId}\n      AND sue.delete_status = '0'\n      AND swu.is_binding = 1\n      AND swu.delete_status = 0\n      ```\n\n    - 验证结果集数据是否有效\n      - 拿出 result 中 USER_STATUS 字段值， 不等于1则返回该账号已被停用错误信息\n\n    - 获取用户角色UUID\n      - 遍历结果集 result ，每一次遍历的单体是 map \n      - 调用 `apiUserLoginService.queryUserRoleUuidList(map.get(\"userUuid\").toString(), portalDataSource)` 得到 roleList\n\n      ```sql\n      SELECT\n        aur.uuid AS roleUuid ,\n        aur.role_name AS roleName\n      FROM\n        sup_user_roles AS sur\n      LEFT JOIN app_user_roles AS aur ON aur.uuid = sur.role_uuid\n      AND sur.data_enterprise_uuid = aur.data_enterprise_uuid\n      WHERE\n        user_uuid = #{userUuid}\n      GROUP BY\n        aur.uuid\n      ```\n\n      - 向 map 中追加{\"roleUuidList\":roleList,\"roleUuids\":\"\"}\n      - 循环遍历 roleList ，将角色列表中的每一个角色的 roleUuid 拼接给 roleUuids ，中间用”，”隔开\n      - 向 map 中追加 roleUuids \n\n  - 返回信息实体中封装结果集 result 并返回\n\n## 注册页\n\n### 业务流程图\n\n[注册模块业务流程](/application/syp-wxmp.html)\n\n1. 获取企业信息\n\n  ```\n  get user/v1/enterprise-info\n  {\n    enterpriseCode: 企业编码\n  }\n  ```\n\n  业务流程：\n\n  - 参数判断\n    - 对 enterpriseCode  进行判空\n\n  - 获取数据源portalDataSource\n  - 获取企业信息\n    - 调用 `apiUserLoginService.weChatAppletWithEnterpriseInfo` 方法获得企业信息结果集合 result\n\n    ```sql\n    SELECT\n      id AS enterpriseId ,\n      uuid AS enterpriseUuid ,\n      CODE AS enterpriseCode ,\n      `language` ,\n      `name` AS enterpriseName ,\n      role_id AS enterpriseRoleId ,\n      group_id AS enterpriseGroupId ,\n      data_source_id AS enterpriseDataSourceId\n    FROM\n      sup_enterprises\n    WHERE\n      CODE = #{enterpriseCode}\n    LIMIT 1\n    ```\n\n  - 返回信息实体中封装结果集 result 并返回\n\n2. 扫码查询追踪码明细\n\n  ```\n  get api/portal/wx/tracking-code/select-info\n  {\n    qrCodeUuid: 追踪码uuid\n  }\n  ```\n\n  业务流程：\n\n  - 参数判断\n    - 对 qrCodeUuid 进行判空\n    - 判断 qrCodeUuid 的长度是否是32位，不是则返回追踪码UUID长度不符合规则\n\n  - 从redis获取数据\n    - key为 \"portal:qr:code\" ，hashkey为  \"qrCodeUuid\" ，得到字符串值 str\n\n  - 如果 str 不是空的则转为DataQrCode对象 dataQrCodeSelect ，如果是空的则将null赋值给 dataQrCodeSelect\n  - 如果 dataQrCodeSelect 为null\n    - 获取数据源 portalDataSource\n    - 调用 `apiWeChatService.queryDataQrCodeInfoWithUuid(qrCodeUuid, portalDataSource)` 获取结果赋值给 dataQrCodeSelect\n\n    ```sql\n    SELECT\n      id ,\n      uuid ,\n      enterprise_name ,\n      enterprise_code ,\n      enterprise_uuid ,\n      business_uuid ,\n      business_type ,\n      business_name ,\n      target_url ,\n      data_json ,\n      remark ,\n      create_user ,\n      update_user ,\n      created_time ,\n      updated_time\n    FROM\n      sup_qr_code_business_data\n    WHERE\n      uuid = #{uuid}\n    ```\n\n    - 如果 dataQrCodeSelect 不为空，则向redis中追加\n      - key为 \"portal:qr:code\" ，hashkey为 qrCodeUuid，值为 JSONObject.toJSONString(dataQrCodeSelect)\n\n  - 如果 dataQrCodeSelect 不为null\n    - 调用 `dataQrCodeSelect.setDataJson(StringUtils.replace(dataQrCodeSelect.getDataJson(), \"\\\\\", \"\"))` 方法调整dataQrCodeSelect中dataJson数据格式\n\n  - 返回信息实体中封装结果 dataQrCodeSelect 并返回\n\n3. 发送验证码\n\n  ```\n  get user/v1/register-verification-code-v1\n  {\n    mobile: 手机号\n  }\n  ```\n\n  业务流程：\n\n  - 参数判断\n    - 对 mobile 进行判空\n\n  - 生成四位验证码\n    - 调用 `RandomNumberGenerator.generateNumber()` 方法获得 code\n    - 向结果集合 result 中追加 code\n\n  - 发送短信\n    - 调用 `asyncUtils.SEND_SMS_WITH_REGISTER(mobile, SUCCESS_MSG, SUCCESS)` \n\n  - 保存到redis中\n    - key为 (\"portal:user:verificationCode:register:%s\",mobile)，值为 code\n\n  - 返回信息实体中封装结果集 result 并返回\n\n## 报表页\n\n1. 获取报表项菜单\n\n  ```\n  get api/portal/wx/report-menu\n  {\n    enterpriseUuid: 企业uuid，\n    roleUuids: 角色uuid\n  }\n  ```\n\n  ​业务流程：\n\n  - 参数判断\n    - 对roleUuids进行判空\n\n  - 从redis中获取报表项菜单列表\n    - key为 \"portal:role:wx:report-menu\"，hashkey为 \"role-\" + roleUuids，得到JSON字符创 menuListStr\n    - 如果 menuListStr 不为空，将其转为List集合 menuList，如果为空，则给List集合 menuList 赋值 null\n\n  - 如果 menuList 为空\n    - 获取数据源 portalDataSource\n    - 调用 `apiWeChatService.queryReportMenuByUserRoleUuids(roleUuids, portalDataSource)` 获得报表菜单集合 menuList\n\n    ```sql\n    SELECT\n      smr.id ,\n      smr.uuid ,\n      smr.category ,\n      ifnull(smr.category_order , 0) AS category_order ,\n      smr.group_name ,\n      ifnull(smr.group_order , 0) AS group_order ,\n      smr.obj_title AS `name` ,\n      ifnull(smr.item_order , 0) AS item_order ,\n      smr.obj_type ,\n      smr.obj_id ,\n      smr.obj_title ,\n      smr.obj_link ,\n      smr.obj_cdn ,\n      smr.obj_version ,\n      smr.publicly ,\n      smr.menu_type ,\n      smr.option_user_num ,\n      icon AS icon_link ,\n      CASE smr.obj_type\n    WHEN 'wxmp#config' THEN\n      smc.home_path\n    WHEN 'wxmp' THEN\n      smr.home_path\n    ELSE\n      ''\n    END AS home_path ,\n     smr.cdn_module ,\n     smr.cdn_version ,\n     smr.cdn_state ,\n     smr.report_id ,\n     smr.obj_link AS url_path\n    FROM\n      sup_menus AS smr\n    LEFT JOIN sup_module_config AS smc ON smc.module_code = smr.obj_id\n    WHERE\n      smr.platform = 'wxmp'\n    AND menu_category = 1\n    AND smr.uuid IN(\n      SELECT\n        menu_uuid\n      FROM\n        app_user_role_resources\n      WHERE\n        locate(\n          role_uuid ,\n          #{roleUuids}) > 0 and delete_status = '0'\n        )\n    ORDER BY\n      smr.category_order ASC ,\n      smr.group_order ASC ,\n      smr.item_order ASC\n    ```\n\n    - 如果 menuList 不为空，key为 \"portal:role:wx:report-menu\"，hashkey为\"role-\" + roleUuids，向redis中追加值 JSONObject.toJSONString(menuList)\n\n  - 向返回实体信息中封装 menuList 并返回\n\n## 工具箱页\n\n1. 获取工具箱列表\n\n  ```\n  get api/portal/wx/toolbox-menu\n  {\n    request： 请求，\n    roleUuids:  用户角色uuid \n  }\n  ```\n\n  业务流程：\n\n  - 参数判断（ roleUuids 进行判空）\n  - 从redis中获取值 menuListStr\n    - key为 \"portal:role:wx:toolbox-menu\"\n    - hashkey为 \"role-\" + roleUuids\n\n  - 将 menuListStr 转为菜单 menuList 集合\n  - 如果 menuList 是空的\n    - 获取数据源 portalDataSource\n    - 调用 `apiWeChatService.queryToolboxMenuByUserRoleUuids(roleUuids, portalDataSource)` 方法获取工具箱菜单列表 menuList\n\n    ```sql\n    SELECT\n      smt.id ,\n      smt.uuid ,\n      smt.category ,\n      ifnull(smt.category_order , 0) AS category_order ,\n      smt.group_name ,\n      ifnull(smt.group_order , 0) AS group_order ,\n      smt.obj_title AS `name` ,\n      ifnull(smt.item_order , 0) AS item_order ,\n      smt.obj_title ,\n      smt.menu_type ,\n      smt.obj_type ,\n      smt.obj_id ,\n      smt.obj_link ,\n      smt.obj_cdn ,\n      smt.obj_version ,\n      smt.report_id ,\n      smt.url_path ,\n      smt.icon AS icon_link ,\n      smt.publicly ,\n      smt.option_user_num ,\n      CASE smt.obj_type\n    WHEN 'wxmp#config' THEN\n      smc.home_path\n    WHEN 'wxmp' THEN\n      smt.home_path\n    ELSE\n      ''\n    END AS home_path ,\n     smt.obj_title AS `name` ,\n     smt.cdn_module ,\n     smt.cdn_version ,\n     smt.cdn_state\n    FROM\n      sup_menus AS smt\n    LEFT JOIN sup_module_config AS smc ON smc.module_code = smt.obj_id\n    WHERE\n      smt.platform = 'wxmp'\n    AND menu_category = 0\n    AND smt.uuid IN(\n      SELECT\n        menu_uuid\n      FROM\n        app_user_role_resources\n      WHERE\n        locate(\n          role_uuid ,\n          #{roleUuids}) > 0 and delete_status = '0'\n        )\n    ORDER BY\n      smt.category_order ASC ,\n      smt.group_order ASC ,\n      smt.item_order ASC    \n    ```\n\n    - 解析渲染 menuList 数据\n    - 以key为 \"portal:role:wx:toolbox-menu\" ，hashkey为 \"role-\" + roleUuids ，值为 menuList 向redis中追加\n    - 返回实体信息中封装 menuList 并返回\n\n  - 如果menuList非空，返回实体信息中封装 menuList 并返回\n\n## [我的]\n\n### 查询 formId 数量\n\n```\n  get api/portal/wx/formId-num\n  {\n    enterpriseUuid: 企业UUID，\n    mobile: 手机号\n  }\n```\n\n  业务流程：\n\n  - 参数判断\n    - 对 mobile 进行参数判空\n\n  - 获取用户信息集合\n    - 调用 `apiWeChatService.portalQueryFormIdByMobile(mobile, selectPortalDataSourceUtils.dynamicSelectPortalDataSource(FUNCTION_F10L, DB_TYPE_SLAVE))` 获得用户信息集合 userMap\n\n    ```sql\n    SELECT\n      wx_avatar AS wxAvatar ,\n      wx_name AS wxName ,\n      wx_nick_name AS wxNickName ,\n      wx_unique_token AS wxUniqueToken ,\n      mobile ,\n      enterprise_code AS enterpriseCode ,\n      enterprise_uuid AS enterpriseUuid ,\n      is_binding AS isBinding\n    FROM\n      sup_wx_users\n    WHERE\n      mobile = #{mobile} and is_binding = 1 and delete_status = 0\n    LIMIT 1\n    ```\n\n  - 如果 userMap 不为空\n    - 取 userMap 中的 \"wxuniqueToken\" 赋值给字符串 openId\n    - 以 \"portal:user:wxFormId\" 为key从redis中获取集合 map\n    - 如果 map 不为空\n      - 遍历 map ，每一次的遍历单体对象是 entry\n      - 将 entry.getKey() 赋值给 hashKey ，entry.getValue() 赋值给 value \n      - 将 hashKey 用 \"@\" 切割得到字符串数据 hashKeys\n      - 如果 hashKeys 长度大于1，且数组第一个元素和 openId 相等，获取当前时间毫秒值 nowTime \n      - 如果 nowTime 小于 hashKeys 第二个元素的值或者 value 值不等于 \"the formId is a mock one\" ，计数器 count++ ，formIdArray添加值 value ，否则从redis中移除掉 key为 \"portal:user:wxFormId\" , hashKey为 entry.getKey() 的数据\n\n  - 向 userMap 中 put  (\"userFormIdNum\", count) 和 (\"formIdArray\", formIdArray)\n  - 在返回信息实体中封装 userMap 并返回\n\n### 获取企业管理列表\n\n```\n  get api/portal/wx/enterprise-menu-list\n  {\n    enterpriseUuid：企业UUID，\n    roleUuids: 角色UUID\n  }\n```\n\n  业务流程：\n\n  - 参数判断\n    - 对roleUuids进行判空\n\n  - 获取数据源 portalDataSource\n  - 获取企业管理列表\n    - 调用 `apiWeChatService.queryEnterpriseMenuList(roleUuids, f10lSlaveDataSource)` 获得企业管理列表 menuList\n\n    ```sql\n    SELECT\n      t1.id ,\n      t1.`name` AS title ,\n      t1.description ,\n      t1.group_name ,\n      t1.obj_id ,\n      t1.obj_type ,\n      CASE t1.group_name\n    WHEN '基本信息' THEN\n      'sa'\n    WHEN '业务权限设置' THEN\n      'sb'\n    ELSE\n      'sc'\n    END AS pid ,\n     CASE\n    WHEN t1.group_name = '业务权限设置' THEN\n      t1.parent_menu_uuid\n    ELSE\n      ''\n    END AS uuid ,\n     CASE t1.obj_type\n    WHEN 'wxmp#config' THEN\n      t3.home_path\n    WHEN 'wxmp' THEN\n      t1.home_path\n    ELSE\n      ''\n    END AS home_path\n    FROM\n      sup_menus AS t1\n    LEFT JOIN app_user_role_resources AS t2 ON t1.uuid = t2.menu_uuid\n    AND t2.delete_status = '0'\n    LEFT JOIN sup_module_config AS t3 ON t3.module_code = t1.obj_id\n    WHERE\n      t1.menu_category = '2'\n    AND FIND_IN_SET(\n      t2.role_uuid ,\n      #{roleUuids})\n    \n    GROUP BY\n      t1.group_name ,\n      t1.`name`\n    ORDER BY\n      pid ,\n      t1.id\n    ```\n\n  - 如果 menuList 不为空\n    - 调用 `apiWeChatService.queryModulePageConfigList(f10lSlaveDataSource)` 获得页面设置列表 configList \n\n    ```sql\n    SELECT\n      module_code ,\n      page_code ,\n      page_type ,\n      version\n    FROM\n      sup_module_page_config\n    WHERE\n      module_code IS NOT NULL\n    AND page_code IS NOT NULL\n    AND page_type IS NOT NULL\n    AND version IS NOT NULL\n    ```\n\n    - 遍历 menuList ，每一次遍历单体对象是 data ，如果 data.get(\"obj_id\") 值为空，则向 objId 赋值为空，如果不为空，则将 data.get(\"obj_id)\" 转为字符串赋值给 objId \n    - 如果 configList 不为空，遍历它，每一次遍历单体对象是 ocnfig \n      - 如果 `config.get(\"module_code\").toString().equals(objId)`  ，就像hashMap中put (config.get(\"page_code\").toString(), config.get(\"page_type\") + \":\" + config.get(\"version\")) \n\n    - 向 data 中put (\"obj_config\", hashMap)\n\n  - 向返回实体对象中 封装 menuList 并返回\n","date":"2023-06-10T10:49:05.485Z","updated":"2023-06-10T10:49:05.485Z","path":"developer/api-guide/syp-wxmp.html","comments":1,"layout":"page","_id":"clipw1dd3000poix5guba0g6m","content":"<h2 id=\"登录页\"><a href=\"#登录页\" class=\"headerlink\" title=\"登录页\"></a>登录页</h2><h3 id=\"业务流程图\"><a href=\"#业务流程图\" class=\"headerlink\" title=\"业务流程图\"></a>业务流程图</h3><p><a href=\"/application/syp-wxmp.html\">登录模块业务流程</a></p>\n<h3 id=\"手机号登录\"><a href=\"#手机号登录\" class=\"headerlink\" title=\"手机号登录\"></a>手机号登录</h3><ol>\n<li>企业列表展示</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">get /portal/v2/account-number-login/enterprise-list<br>&#123;<br>  mobile: 手机号,<br>  password: 密码(MD5加密)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>  业务流程：</p>\n<ul>\n<li><p>参数判断（mobile 和 password 进行判空）</p>\n</li>\n<li><p>获取数据源 portalDataSource</p>\n</li>\n<li><p>判断密码</p>\n<ul>\n<li>调用 <code>portalV2Service.queryUserInfo(mobile)</code> 方法查询用户密码</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">select</span> password <br><span class=\"hljs-keyword\">from</span> sup_user <br><span class=\"hljs-keyword\">where</span> mobile <span class=\"hljs-operator\">=</span> #&#123;mobile&#125; <span class=\"hljs-keyword\">and</span> delete_status <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span> limit <span class=\"hljs-number\">1</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>判断userPassword和参数password是否相等，或者根据手机号后六位数(内部排序)经过MD5加密后的字符串是否相等，有一个相等就继续，如果都不相同，返回信息中返回“密码错误”</li>\n</ul>\n</li>\n<li><p>获取企业列表</p>\n<ul>\n<li>调用 <code>apiPortalV2Service的queryEnterpriseListWithMobile(mobile, password)</code> 获取企业列表 result</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span><br>  sue.uuid <span class=\"hljs-keyword\">AS</span> userUuid ,<br>  su.user_name <span class=\"hljs-keyword\">AS</span> userName ,<br>  sue.mobile <span class=\"hljs-keyword\">AS</span> userMobile ,<br>  su.email <span class=\"hljs-keyword\">AS</span> userEmail ,<br>  su.user_num <span class=\"hljs-keyword\">AS</span> userNumber ,<br>  sue. STATUS <span class=\"hljs-keyword\">AS</span> userStatus ,<br>  su. PASSWORD ,<br>  su. PASSWORD <span class=\"hljs-keyword\">AS</span> userIdToken ,<br>  sue.token <span class=\"hljs-keyword\">AS</span> userToken ,<br>  se.group_id <span class=\"hljs-keyword\">AS</span> groupId ,<br>  se.role_id <span class=\"hljs-keyword\">AS</span> roleId ,<br>  su.is_delete <span class=\"hljs-keyword\">AS</span> userIsDelete ,<br>  <span class=\"hljs-string\">&#x27;todo&#x27;</span> <span class=\"hljs-keyword\">AS</span> userGravatar ,<br>  <span class=\"hljs-string\">&#x27;todo&#x27;</span> <span class=\"hljs-keyword\">AS</span> groupName ,<br>  <span class=\"hljs-string\">&#x27;todo&#x27;</span> <span class=\"hljs-keyword\">AS</span> roleName ,<br>  se.uuid <span class=\"hljs-keyword\">AS</span> enterpriseUuid ,<br>  se. CODE <span class=\"hljs-keyword\">AS</span> enterpriseCode ,<br>  se. NAME <span class=\"hljs-keyword\">AS</span> enterpriseName ,<br>  se.data_source_id <span class=\"hljs-keyword\">AS</span> dataSourceCode ,<br>  se.role_id <span class=\"hljs-keyword\">AS</span> enterpriseRoleId ,<br>  se.group_id <span class=\"hljs-keyword\">AS</span> enterpriseGroupId ,<br>  se. <span class=\"hljs-keyword\">LANGUAGE</span> <span class=\"hljs-keyword\">AS</span> enterpriseLanguage<br><span class=\"hljs-keyword\">FROM</span><br>  sup_user_enterprises <span class=\"hljs-keyword\">AS</span> sue<br><span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">JOIN</span> sup_enterprises <span class=\"hljs-keyword\">AS</span> se <span class=\"hljs-keyword\">ON</span> se.uuid <span class=\"hljs-operator\">=</span> sue.data_enterprise_uuid<br><span class=\"hljs-keyword\">AND</span> sue.data_enterprise_code <span class=\"hljs-operator\">=</span> se. CODE<br><span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">JOIN</span> sup_user <span class=\"hljs-keyword\">AS</span> su <span class=\"hljs-keyword\">ON</span> su.mobile <span class=\"hljs-operator\">=</span> sue.mobile<br><span class=\"hljs-keyword\">WHERE</span><br>  sue.mobile <span class=\"hljs-operator\">=</span> #&#123;mobile&#125; <span class=\"hljs-keyword\">and</span> sue.delete_status <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;0&#x27;</span> <span class=\"hljs-keyword\">and</span> sue.status <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span><br><br><span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span><br>  sue.uuid<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>查询用户角色</p>\n<ul>\n<li>循环遍历企业列表 result ，每次遍历的单体对象是 map ，调用 <code>apiPortalV2Service.queryUserRoleUuidList(userUuid,portalDataSource)</code> 查询用户角色uuid得到 roleList</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span><br>  aur.uuid <span class=\"hljs-keyword\">AS</span> roleUuid ,<br>  aur.role_name <span class=\"hljs-keyword\">AS</span> roleName<br><span class=\"hljs-keyword\">FROM</span><br>  sup_user_roles <span class=\"hljs-keyword\">AS</span> sur<br><span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">JOIN</span> app_user_roles <span class=\"hljs-keyword\">AS</span> aur <span class=\"hljs-keyword\">ON</span> aur.uuid <span class=\"hljs-operator\">=</span> sur.role_uuid<br><span class=\"hljs-keyword\">AND</span> sur.data_enterprise_uuid <span class=\"hljs-operator\">=</span> aur.data_enterprise_uuid<br><span class=\"hljs-keyword\">WHERE</span><br>  user_uuid <span class=\"hljs-operator\">=</span> #&#123;userUuid&#125;<br><span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span><br>  aur.uuid<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>追加 roleList 给map中的 userUuidList</li>\n<li>遍历 roleList，将每一个 roleUuid 用“，”拼接起来赋值给 roleUuids 字符串，然后追加到map中的 roleUuids 中</li>\n</ul>\n</li>\n<li><p>封装结果到返回信息实体中并返回信息实体，用户选择企业进行登录</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>获取微信用户 openid</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">post /saas-api/api/portal/wx/query-user-openid <br>&#123;<br>  code: 用户凭证(wx.login获取),<br>  enterpriseUuid: 企业uuid,<br>  mobile: 手机号<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>  业务流程：</p>\n<ul>\n<li><p>参数判断（code 和 mobile 进行判空）</p>\n</li>\n<li><p>如果 code 不为空，从数据库中重新获取 openid</p>\n<ul>\n<li><p>获取微信小程序配置信息</p>\n<ul>\n<li>appId：”weChat.appId”</li>\n<li>secret：”weChat.secret”</li>\n<li>openIdUrl：”weChat.openIdUrl”</li>\n</ul>\n</li>\n<li><p>替换 openIdUrl 中的参数值</p>\n<ul>\n<li>用appId、secret、code 分别替换原openIdUrl中的 APP_ID、APP_SECRET、JS_CODE ，得到新的 openIdUrl</li>\n</ul>\n</li>\n<li><p>获取openId返回值</p>\n<ul>\n<li>调用微信官方接口返回值 <code>HttpMethodUtil.getGetResult(openIdUrl, null)</code> 得到openIdResult</li>\n<li>判断openIdResult是否是JSON格式，不是则返回 获取用户 openId 接口返回值非JSON格式错误信息</li>\n<li>是JSON格式，则转为JSON对象 json</li>\n</ul>\n</li>\n<li><p>创建一个字段 isBinding&#x3D;0，向 json 中put</p>\n</li>\n<li><p>如果 json 对象不为空，先获取数据源 portalDataSource</p>\n</li>\n<li><p>调用 <code>apiWeChatService的portalQueryUserOpenId(mobilev, enterpriseUuid, portalDataSource)</code> 方法查询用户openId 得到结果集 result（Map集合）</p>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span><br>  wx_unique_token <span class=\"hljs-keyword\">AS</span> openid ,<br>  is_binding<br><span class=\"hljs-keyword\">FROM</span><br>  sup_wx_users<br><span class=\"hljs-keyword\">WHERE</span><br>  mobile <span class=\"hljs-operator\">=</span> #&#123;mobile&#125; <span class=\"hljs-keyword\">and</span> is_binding <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> delete_status <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span><br><span class=\"hljs-keyword\">ORDER</span> <span class=\"hljs-keyword\">BY</span><br>  id <span class=\"hljs-keyword\">DESC</span><br>LIMIT <span class=\"hljs-number\">1</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>将结果 result 的 is_binding 字段追加给 json 中</li>\n<li>在返回实体对象中封装结果 json 对象，并返回</li>\n</ul>\n</li>\n<li><p>如果 code 为空，则从数据源中取</p>\n<ul>\n<li>获得数据源对象 portalDataSource</li>\n<li>调用 <code>apiWeChatService.portalQueryUserOpenId(mobile,enterpriseUuid,portalDataSource)</code> 方法查询用户openId得到结果 result</li>\n<li>在返回实体对象中封装结果 result</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>推送信息</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">post /saas-api/api/portal/wx/send-template-message<br>&#123;<br>  toUsers: 需要发送的用户的uuid,<br>  template_id: 模板id,<br>  page: 需要跳转的页面（选填）,<br>  data: 微信通知模板数据,<br>  enterpriseUuid: 企业uuid,<br>  emphasis_keyword： 模板需放大关键字可选填）<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>  业务流程：</p>\n<ul>\n<li>参数判断（param，data，toUsers，template_id 进行判空）</li>\n<li>获取企业信息：根据参数 enterpriseUuid 去查询企业信息得到 portalEnterprise</li>\n<li>获取用户openId：根据参数 toUsers 获取，得到openId数组 toUserArray</li>\n<li>封装查询参数 query，向其中追加参数 enterpriseUuid、toUsers、dataEnterpriseUuid和dataEnterpriseCode</li>\n<li>获取数据源得到 portalDataSource</li>\n<li>调用 <code>apiWeChatService的queryUserOpenIdWithUuid(query, portalDataSource)</code> 方法得到openId集合 openIdList</li>\n</ul>\n  <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-keyword\">DISTINCT</span><br>  swu.wx_unique_token <span class=\"hljs-keyword\">AS</span> openId<br><span class=\"hljs-keyword\">FROM</span><br>  sup_user_enterprises <span class=\"hljs-keyword\">AS</span> sue<br><span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">JOIN</span> sup_wx_users <span class=\"hljs-keyword\">AS</span> swu <span class=\"hljs-keyword\">ON</span> sue.mobile <span class=\"hljs-operator\">=</span> swu.mobile<br><span class=\"hljs-keyword\">WHERE</span><br>  sue.delete_status <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;0&#x27;</span><br><span class=\"hljs-keyword\">AND</span> swu.wx_unique_token <span class=\"hljs-keyword\">IS</span> <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span><br><span class=\"hljs-keyword\">AND</span> swu.wx_unique_token <span class=\"hljs-operator\">!=</span> <span class=\"hljs-string\">&#x27;&#x27;</span><br><span class=\"hljs-keyword\">AND</span> sue.data_enterprise_uuid <span class=\"hljs-operator\">=</span> #&#123;dataEnterpriseUuid&#125; <span class=\"hljs-keyword\">and</span> sue.data_enterprise_code <span class=\"hljs-operator\">=</span> #&#123;dataEnterpriseCode&#125;<br><br><span class=\"hljs-keyword\">AND</span> swu.is_binding <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span><br><span class=\"hljs-keyword\">AND</span> swu.delete_status <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span><br><span class=\"hljs-keyword\">AND</span> sue.uuid <span class=\"hljs-keyword\">IN</span> <span class=\"hljs-string\">&#x27;遍历#&#123;toUsers&#125;&#x27;</span><br><span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span> uuid<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>向参数集合 newParam 中追加 appId、secret、fromUrl、ip、templateId、page、data、empahsis_keyword</li>\n<li>循环发送模板信息<ul>\n<li>通过 openId 异步获取 formId</li>\n<li>向 newParam 中追加 openId 和 formId 给 toUser 和 formId 两个字段</li>\n<li>调用自身API去得到结果 sendResult</li>\n<li>向结果集合 resultMap 中追加 sendResult</li>\n</ul>\n</li>\n<li>向返回实体信息中封装 resultMap 并返回</li>\n</ul>\n<ol start=\"4\">\n<li>提交用户偏好</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">get user/v1/preference<br>&#123;<br>  enterpriseUuid: 企业UUID,<br>  cmobile: 手机号,<br>  platform: 平台<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>  业务流程：</p>\n<ul>\n<li><p>参数判断（对enterpriseUuid、mobile、platform进行判空）</p>\n</li>\n<li><p>将 mobile、enterpriseUuid、platform 拼接成一个 hashkey</p>\n</li>\n<li><p>大key为 “user：perference”，hashkey为拼接成的 hashkey 去redis中取值 preference</p>\n</li>\n<li><p>如果 preference 是空的</p>\n<ul>\n<li>将 mobile、enterpriseUuid、platform 依次放进参数 params 中，params是一个map集合</li>\n<li>获取数据源 portalDataSource</li>\n<li>根据参数 params 和数据源去数据库取 preference</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span><br>  preference<br><span class=\"hljs-keyword\">FROM</span><br>  sup_user_preferences<br><span class=\"hljs-keyword\">WHERE</span><br>  enterprise_uuid <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;$&#123;enterpriseUuid&#125;&#x27;</span><br><span class=\"hljs-keyword\">AND</span> mobile <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;$&#123;mobile&#125;&#x27;</span><br><span class=\"hljs-keyword\">AND</span> platform <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;$&#123;platform&#125;&#x27;</span><br>LIMIT <span class=\"hljs-number\">1</span>;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>以 “user：perference” 为大key，拼接的hashkey为 hashksy，preference 为值追加到redis中</li>\n<li>返回实体信息中封装 preference 并返回</li>\n</ul>\n</li>\n<li><p>如果 preference 非空，返回实体信息中封装 preference 并返回</p>\n</li>\n</ul>\n<h3 id=\"企业号登录\"><a href=\"#企业号登录\" class=\"headerlink\" title=\"企业号登录\"></a>企业号登录</h3><ol>\n<li>获取企业</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">get user/v1/enterprise-info<br>&#123;<br>  request： 请求<br>  enterpriseCode:  企业号<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>  业务流程：</p>\n<ul>\n<li><p>参数判断（对enterpriseCode进行判空）</p>\n</li>\n<li><p>获取数据源portalDataSource</p>\n</li>\n<li><p>获取企业信息结果集 result</p>\n<ul>\n<li>调用 <code>apiUserLoginService.weChatAppletWithEnterpriseInfo(enterpriseCode, portalDataSource)</code> 方法获取企业信息 result</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span><br>  id <span class=\"hljs-keyword\">AS</span> enterpriseId ,<br>  uuid <span class=\"hljs-keyword\">AS</span> enterpriseUuid ,<br>  CODE <span class=\"hljs-keyword\">AS</span> enterpriseCode ,<br>  `<span class=\"hljs-keyword\">language</span>` ,<br>  `name` <span class=\"hljs-keyword\">AS</span> enterpriseName ,<br>  role_id <span class=\"hljs-keyword\">AS</span> enterpriseRoleId ,<br>  group_id <span class=\"hljs-keyword\">AS</span> enterpriseGroupId ,<br>  data_source_id <span class=\"hljs-keyword\">AS</span> enterpriseDataSourceId<br><span class=\"hljs-keyword\">FROM</span><br>  sup_enterprises<br><span class=\"hljs-keyword\">WHERE</span><br>  CODE <span class=\"hljs-operator\">=</span> #&#123;enterpriseCode&#125;<br>LIMIT <span class=\"hljs-number\">1</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>result 不为空则向返回信息实体中封装 result 并返回</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>获取登录用户信息</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">get user/v1/wx-applet-login<br>&#123;<br>  request：请求<br>  mobile：手机号码<br>  password：MD5机密后的密码<br>  enterpriseUuid：企业UUID<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>  业务流程：</p>\n<ul>\n<li><p>获取请求头中的enterpriseUuid</p>\n<ul>\n<li>调用 <code>request.getHeader(&quot;enterpriseUuid&quot;)</code> 得到企业UUID字符串 enterprise</li>\n</ul>\n</li>\n<li><p>参数判断（对 mobile、password、enterpriseUuid 进行判空）</p>\n</li>\n<li><p>验证 enterprise 和 参数 enterpriseUuid 是否想等，如果不相等则返回请求头与请求参数的企业UUID不一致</p>\n</li>\n<li><p>获取企业信息</p>\n<ul>\n<li>异步调用 <code>asyncUtils.QUERY_ENTERPRISE_INFO(enterprise)</code> 方法得到企业信息 portalEnterprise</li>\n</ul>\n</li>\n<li><p>拼接参数集合 param （Map集合）</p>\n<ul>\n<li>向 param 中追加键值对 {“mobile”:mobile,”password”:password,”dataEnterpriseUuid”:portalEnterprise.getEnterpriseUuid();”dataEnterpriseCode”:portalEnterprise.getEnterpriseCode()}</li>\n</ul>\n</li>\n<li><p>获取数据源portalDataSource</p>\n</li>\n<li><p>查询企业用户信息</p>\n<ul>\n<li>调用 <code>apiUserLoginService.weChatAppletWithLogin(param,portalDataSource)</code> 方法得到结果集 result</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span><br>  sue.uuid <span class=\"hljs-keyword\">AS</span> userUuid ,<br>  su.user_name <span class=\"hljs-keyword\">AS</span> userName ,<br>  su.mobile <span class=\"hljs-keyword\">AS</span> userMobile ,<br>  su.email <span class=\"hljs-keyword\">AS</span> userEmail ,<br>  su.user_num <span class=\"hljs-keyword\">AS</span> userNumber ,<br>  sue. STATUS <span class=\"hljs-keyword\">AS</span> userStatus ,<br>  su. PASSWORD ,<br>  sue.token <span class=\"hljs-keyword\">AS</span> userToken ,<br>  <span class=\"hljs-string\">&#x27;todo&#x27;</span> <span class=\"hljs-keyword\">AS</span> userGravatar ,<br>  sen.group_id <span class=\"hljs-keyword\">AS</span> groupId ,<br>  <span class=\"hljs-string\">&#x27;todo&#x27;</span> <span class=\"hljs-keyword\">AS</span> groupName ,<br>  sen.role_id <span class=\"hljs-keyword\">AS</span> roleId ,<br>  <span class=\"hljs-string\">&#x27;todo&#x27;</span> <span class=\"hljs-keyword\">AS</span> roleName ,<br>  su.is_delete <span class=\"hljs-keyword\">AS</span> userIsDelete<br><span class=\"hljs-keyword\">FROM</span><br>  sup_user_enterprises <span class=\"hljs-keyword\">AS</span> sue<br><span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">JOIN</span> sup_user <span class=\"hljs-keyword\">AS</span> su <span class=\"hljs-keyword\">ON</span> sue.mobile <span class=\"hljs-operator\">=</span> su.mobile<br><span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">JOIN</span> sup_enterprises <span class=\"hljs-keyword\">AS</span> sen <span class=\"hljs-keyword\">ON</span> sen.uuid <span class=\"hljs-operator\">=</span> sue.data_enterprise_uuid<br><span class=\"hljs-keyword\">WHERE</span><br>  sue.mobile <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;$&#123;mobile&#125;&#x27;</span><br><span class=\"hljs-keyword\">AND</span> su. PASSWORD <span class=\"hljs-keyword\">IS</span> <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span><br><span class=\"hljs-keyword\">AND</span> sue.data_enterprise_uuid <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;$&#123;dataEnterpriseUuid&#125;&#x27;</span><br><span class=\"hljs-keyword\">AND</span> sue.data_enterprise_code <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;$&#123;dataEnterpriseCode&#125;&#x27;</span><br><span class=\"hljs-keyword\">AND</span> sue.delete_status <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;0&#x27;</span><br><span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span><br>  sue.uuid<br>LIMIT <span class=\"hljs-number\">1</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>用户信息核对</p>\n<ul>\n<li>判断用户信息结果集 result 中的USER_STATUS是否等于1，不等则返回该账号已被停用</li>\n<li>判断 result 中的PASSWORD 是否等于参数中的 password，不等则返回密码错误</li>\n</ul>\n</li>\n<li><p>获取用户角色列表</p>\n<ul>\n<li>调用 <code>apiUserLoginService.queryUserRoleUuidList(result.get(&quot;userUuid&quot;).toString(), portalDataSource)</code> 得到 roleList</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span><br>  aur.uuid <span class=\"hljs-keyword\">AS</span> roleUuid ,<br>  aur.role_name <span class=\"hljs-keyword\">AS</span> roleName<br><span class=\"hljs-keyword\">FROM</span><br>  sup_user_roles <span class=\"hljs-keyword\">AS</span> sur<br><span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">JOIN</span> app_user_roles <span class=\"hljs-keyword\">AS</span> aur <span class=\"hljs-keyword\">ON</span> aur.uuid <span class=\"hljs-operator\">=</span> sur.role_uuid<br><span class=\"hljs-keyword\">AND</span> sur.data_enterprise_uuid <span class=\"hljs-operator\">=</span> aur.data_enterprise_uuid<br><span class=\"hljs-keyword\">WHERE</span><br>  user_uuid <span class=\"hljs-operator\">=</span> #&#123;userUuid&#125;<br><span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span><br>  aur.uuid<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>向 result 中追加{“roleUuidList”:roleList,”roleUuids”:””}</li>\n</ul>\n</li>\n<li><p>获取角色UUID</p>\n<ul>\n<li>循环遍历 roleList ，将角色列表中的每一个角色的 roleUuid 拼接给 roleUuids ，中间用”，”隔开</li>\n<li>向 result 中追加 roleUuids</li>\n</ul>\n</li>\n<li><p>返回实体中封装结果集 result 并返回</p>\n</li>\n</ul>\n<ol start=\"3\">\n<li>获取微信用户 openid 、推送消息 、提交用户偏好 三个步骤同 手机号登录 中的3、4、5介绍</li>\n</ol>\n<h3 id=\"微信登录\"><a href=\"#微信登录\" class=\"headerlink\" title=\"微信登录\"></a>微信登录</h3><ol>\n<li><p>获取企业列表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">get api/portal/v2/wx-login/enterprise-list-v2<br>&#123;<br> request: 请求，<br> code: 微信小程序中的code值<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ol>\n<p>  业务流程：</p>\n<ul>\n<li><p>参数判断</p>\n<ul>\n<li>对 code 进行判空</li>\n</ul>\n</li>\n<li><p>获取 openId</p>\n<ul>\n<li><p>获取微信小程序配置信息</p>\n<ul>\n<li>appId：”weChat.appId”</li>\n<li>secret：”weChat.secret”</li>\n<li>openIdUrl：”weChat.openIdUrl”</li>\n</ul>\n</li>\n<li><p>替换 openIdUrl 中的参数值</p>\n<ul>\n<li>用appId、secret、code 分别替换原openIdUrl中的 APP_ID、APP_SECRET、JS_CODE ，得到新的 openIdUrl</li>\n</ul>\n</li>\n<li><p>获取openId返回值</p>\n<ul>\n<li>调用微信官方接口返回值 <code>HttpMethodUtil.getGetResult(openIdUrl, null)</code> 得到openIdResult</li>\n</ul>\n</li>\n<li><p>判断openIdResult是否是JSON格式</p>\n<ul>\n<li>不是则返回 获取用户 openId 接口返回值非JSON格式错误信息</li>\n<li>是JSON格式，则转为JSON对象 json</li>\n</ul>\n</li>\n<li><p>从 json 中去字段 OPEN_ID 的值，得到openId</p>\n</li>\n</ul>\n</li>\n<li><p>获取企业列表</p>\n<ul>\n<li><p>获取数据源portalDataSource</p>\n</li>\n<li><p>获取企业用户信息结果集</p>\n<ul>\n<li>调用 <code>apiPortalV2Service.queryEnterpriseListWithWeChatOpenIdV2(openId,portalDataSource)</code> 方法得到结果集 result （Map集合）</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span><br>  se.uuid <span class=\"hljs-keyword\">AS</span> enterpriseUuid ,<br>  se. CODE <span class=\"hljs-keyword\">AS</span> enterpriseCode ,<br>  se. NAME <span class=\"hljs-keyword\">AS</span> enterpriseName ,<br>  se.data_source_id <span class=\"hljs-keyword\">AS</span> dataSourceCode ,<br>  se.role_id <span class=\"hljs-keyword\">AS</span> enterpriseRoleId ,<br>  se.group_id <span class=\"hljs-keyword\">AS</span> enterpriseGroupId ,<br>  se. <span class=\"hljs-keyword\">LANGUAGE</span> <span class=\"hljs-keyword\">AS</span> enterpriseLanguage ,<br>  swu.wx_avatar <span class=\"hljs-keyword\">AS</span> wxAvatar ,<br>  swu.wx_name <span class=\"hljs-keyword\">AS</span> wxName ,<br>  swu.wx_nick_name <span class=\"hljs-keyword\">AS</span> wxNickName ,<br>  sue.uuid <span class=\"hljs-keyword\">AS</span> userUuid ,<br>  sue.mobile <span class=\"hljs-keyword\">AS</span> userMobile ,<br>  su.user_name <span class=\"hljs-keyword\">AS</span> userName ,<br>  su.email <span class=\"hljs-keyword\">AS</span> userEmail ,<br>  sue.delete_status <span class=\"hljs-keyword\">AS</span> userIsDelete ,<br>  swu.wx_unique_token <span class=\"hljs-keyword\">AS</span> wxUniqueoken ,<br>  sue. STATUS <span class=\"hljs-keyword\">AS</span> userStatus ,<br>  sue.token <span class=\"hljs-keyword\">AS</span> userToken ,<br>  se.group_id <span class=\"hljs-keyword\">AS</span> groupId ,<br>  se.role_id <span class=\"hljs-keyword\">AS</span> roleId ,<br>  <span class=\"hljs-string\">&#x27;todo&#x27;</span> <span class=\"hljs-keyword\">AS</span> userGravatar ,<br>  <span class=\"hljs-string\">&#x27;todo&#x27;</span> <span class=\"hljs-keyword\">AS</span> groupName ,<br>  <span class=\"hljs-string\">&#x27;todo&#x27;</span> <span class=\"hljs-keyword\">AS</span> roleName ,<br>  su. PASSWORD <span class=\"hljs-keyword\">AS</span> userIdToken<br><span class=\"hljs-keyword\">FROM</span><br>  sup_wx_users <span class=\"hljs-keyword\">AS</span> swu<br><span class=\"hljs-keyword\">INNER</span> <span class=\"hljs-keyword\">JOIN</span> sup_user_enterprises <span class=\"hljs-keyword\">AS</span> sue <span class=\"hljs-keyword\">ON</span> sue.mobile <span class=\"hljs-operator\">=</span> swu.mobile<br><span class=\"hljs-keyword\">INNER</span> <span class=\"hljs-keyword\">JOIN</span> sup_enterprises <span class=\"hljs-keyword\">AS</span> se <span class=\"hljs-keyword\">ON</span> sue.data_enterprise_uuid <span class=\"hljs-operator\">=</span> se.uuid<br><span class=\"hljs-keyword\">INNER</span> <span class=\"hljs-keyword\">JOIN</span> sup_user <span class=\"hljs-keyword\">AS</span> su <span class=\"hljs-keyword\">ON</span> su.mobile <span class=\"hljs-operator\">=</span> swu.mobile<br><span class=\"hljs-keyword\">WHERE</span><br>  swu.wx_unique_token <span class=\"hljs-operator\">=</span> #&#123;openId&#125;<br><span class=\"hljs-keyword\">AND</span> sue.delete_status <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;0&#x27;</span><br><span class=\"hljs-keyword\">AND</span> swu.is_binding <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span><br><span class=\"hljs-keyword\">AND</span> swu.delete_status <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>验证结果集数据是否有效</p>\n<ul>\n<li>拿出 result 中 USER_STATUS 字段值， 不等于1则返回该账号已被停用错误信息</li>\n</ul>\n</li>\n<li><p>获取用户角色UUID</p>\n<ul>\n<li>遍历结果集 result ，每一次遍历的单体是 map </li>\n<li>调用 <code>apiUserLoginService.queryUserRoleUuidList(map.get(&quot;userUuid&quot;).toString(), portalDataSource)</code> 得到 roleList</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span><br>  aur.uuid <span class=\"hljs-keyword\">AS</span> roleUuid ,<br>  aur.role_name <span class=\"hljs-keyword\">AS</span> roleName<br><span class=\"hljs-keyword\">FROM</span><br>  sup_user_roles <span class=\"hljs-keyword\">AS</span> sur<br><span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">JOIN</span> app_user_roles <span class=\"hljs-keyword\">AS</span> aur <span class=\"hljs-keyword\">ON</span> aur.uuid <span class=\"hljs-operator\">=</span> sur.role_uuid<br><span class=\"hljs-keyword\">AND</span> sur.data_enterprise_uuid <span class=\"hljs-operator\">=</span> aur.data_enterprise_uuid<br><span class=\"hljs-keyword\">WHERE</span><br>  user_uuid <span class=\"hljs-operator\">=</span> #&#123;userUuid&#125;<br><span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span><br>  aur.uuid<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>向 map 中追加{“roleUuidList”:roleList,”roleUuids”:””}</li>\n<li>循环遍历 roleList ，将角色列表中的每一个角色的 roleUuid 拼接给 roleUuids ，中间用”，”隔开</li>\n<li>向 map 中追加 roleUuids</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>返回信息实体中封装结果集 result 并返回</p>\n</li>\n</ul>\n<h2 id=\"注册页\"><a href=\"#注册页\" class=\"headerlink\" title=\"注册页\"></a>注册页</h2><h3 id=\"业务流程图-1\"><a href=\"#业务流程图-1\" class=\"headerlink\" title=\"业务流程图\"></a>业务流程图</h3><p><a href=\"/application/syp-wxmp.html\">注册模块业务流程</a></p>\n<ol>\n<li>获取企业信息</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">get user/v1/enterprise-info<br>&#123;<br>  enterpriseCode: 企业编码<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>  业务流程：</p>\n<ul>\n<li><p>参数判断</p>\n<ul>\n<li>对 enterpriseCode  进行判空</li>\n</ul>\n</li>\n<li><p>获取数据源portalDataSource</p>\n</li>\n<li><p>获取企业信息</p>\n<ul>\n<li>调用 <code>apiUserLoginService.weChatAppletWithEnterpriseInfo</code> 方法获得企业信息结果集合 result</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span><br>  id <span class=\"hljs-keyword\">AS</span> enterpriseId ,<br>  uuid <span class=\"hljs-keyword\">AS</span> enterpriseUuid ,<br>  CODE <span class=\"hljs-keyword\">AS</span> enterpriseCode ,<br>  `<span class=\"hljs-keyword\">language</span>` ,<br>  `name` <span class=\"hljs-keyword\">AS</span> enterpriseName ,<br>  role_id <span class=\"hljs-keyword\">AS</span> enterpriseRoleId ,<br>  group_id <span class=\"hljs-keyword\">AS</span> enterpriseGroupId ,<br>  data_source_id <span class=\"hljs-keyword\">AS</span> enterpriseDataSourceId<br><span class=\"hljs-keyword\">FROM</span><br>  sup_enterprises<br><span class=\"hljs-keyword\">WHERE</span><br>  CODE <span class=\"hljs-operator\">=</span> #&#123;enterpriseCode&#125;<br>LIMIT <span class=\"hljs-number\">1</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>返回信息实体中封装结果集 result 并返回</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>扫码查询追踪码明细</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">get api/portal/wx/tracking-code/select-info<br>&#123;<br>  qrCodeUuid: 追踪码uuid<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>  业务流程：</p>\n<ul>\n<li><p>参数判断</p>\n<ul>\n<li>对 qrCodeUuid 进行判空</li>\n<li>判断 qrCodeUuid 的长度是否是32位，不是则返回追踪码UUID长度不符合规则</li>\n</ul>\n</li>\n<li><p>从redis获取数据</p>\n<ul>\n<li>key为 “portal:qr:code” ，hashkey为  “qrCodeUuid” ，得到字符串值 str</li>\n</ul>\n</li>\n<li><p>如果 str 不是空的则转为DataQrCode对象 dataQrCodeSelect ，如果是空的则将null赋值给 dataQrCodeSelect</p>\n</li>\n<li><p>如果 dataQrCodeSelect 为null</p>\n<ul>\n<li>获取数据源 portalDataSource</li>\n<li>调用 <code>apiWeChatService.queryDataQrCodeInfoWithUuid(qrCodeUuid, portalDataSource)</code> 获取结果赋值给 dataQrCodeSelect</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span><br>  id ,<br>  uuid ,<br>  enterprise_name ,<br>  enterprise_code ,<br>  enterprise_uuid ,<br>  business_uuid ,<br>  business_type ,<br>  business_name ,<br>  target_url ,<br>  data_json ,<br>  remark ,<br>  create_user ,<br>  update_user ,<br>  created_time ,<br>  updated_time<br><span class=\"hljs-keyword\">FROM</span><br>  sup_qr_code_business_data<br><span class=\"hljs-keyword\">WHERE</span><br>  uuid <span class=\"hljs-operator\">=</span> #&#123;uuid&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>如果 dataQrCodeSelect 不为空，则向redis中追加<ul>\n<li>key为 “portal:qr:code” ，hashkey为 qrCodeUuid，值为 JSONObject.toJSONString(dataQrCodeSelect)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>如果 dataQrCodeSelect 不为null</p>\n<ul>\n<li>调用 <code>dataQrCodeSelect.setDataJson(StringUtils.replace(dataQrCodeSelect.getDataJson(), &quot;\\\\&quot;, &quot;&quot;))</code> 方法调整dataQrCodeSelect中dataJson数据格式</li>\n</ul>\n</li>\n<li><p>返回信息实体中封装结果 dataQrCodeSelect 并返回</p>\n</li>\n</ul>\n<ol start=\"3\">\n<li>发送验证码</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">get user/v1/register-verification-code-v1<br>&#123;<br>  mobile: 手机号<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>  业务流程：</p>\n<ul>\n<li><p>参数判断</p>\n<ul>\n<li>对 mobile 进行判空</li>\n</ul>\n</li>\n<li><p>生成四位验证码</p>\n<ul>\n<li>调用 <code>RandomNumberGenerator.generateNumber()</code> 方法获得 code</li>\n<li>向结果集合 result 中追加 code</li>\n</ul>\n</li>\n<li><p>发送短信</p>\n<ul>\n<li>调用 <code>asyncUtils.SEND_SMS_WITH_REGISTER(mobile, SUCCESS_MSG, SUCCESS)</code></li>\n</ul>\n</li>\n<li><p>保存到redis中</p>\n<ul>\n<li>key为 (“portal:user:verificationCode:register:%s”,mobile)，值为 code</li>\n</ul>\n</li>\n<li><p>返回信息实体中封装结果集 result 并返回</p>\n</li>\n</ul>\n<h2 id=\"报表页\"><a href=\"#报表页\" class=\"headerlink\" title=\"报表页\"></a>报表页</h2><ol>\n<li>获取报表项菜单</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">get api/portal/wx/report-menu<br>&#123;<br>  enterpriseUuid: 企业uuid，<br>  roleUuids: 角色uuid<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>  ​业务流程：</p>\n<ul>\n<li><p>参数判断</p>\n<ul>\n<li>对roleUuids进行判空</li>\n</ul>\n</li>\n<li><p>从redis中获取报表项菜单列表</p>\n<ul>\n<li>key为 “portal:role:wx:report-menu”，hashkey为 “role-“ + roleUuids，得到JSON字符创 menuListStr</li>\n<li>如果 menuListStr 不为空，将其转为List集合 menuList，如果为空，则给List集合 menuList 赋值 null</li>\n</ul>\n</li>\n<li><p>如果 menuList 为空</p>\n<ul>\n<li>获取数据源 portalDataSource</li>\n<li>调用 <code>apiWeChatService.queryReportMenuByUserRoleUuids(roleUuids, portalDataSource)</code> 获得报表菜单集合 menuList</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span><br>  smr.id ,<br>  smr.uuid ,<br>  smr.category ,<br>  ifnull(smr.category_order , <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">AS</span> category_order ,<br>  smr.group_name ,<br>  ifnull(smr.group_order , <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">AS</span> group_order ,<br>  smr.obj_title <span class=\"hljs-keyword\">AS</span> `name` ,<br>  ifnull(smr.item_order , <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">AS</span> item_order ,<br>  smr.obj_type ,<br>  smr.obj_id ,<br>  smr.obj_title ,<br>  smr.obj_link ,<br>  smr.obj_cdn ,<br>  smr.obj_version ,<br>  smr.publicly ,<br>  smr.menu_type ,<br>  smr.option_user_num ,<br>  icon <span class=\"hljs-keyword\">AS</span> icon_link ,<br>  <span class=\"hljs-keyword\">CASE</span> smr.obj_type<br><span class=\"hljs-keyword\">WHEN</span> <span class=\"hljs-string\">&#x27;wxmp#config&#x27;</span> <span class=\"hljs-keyword\">THEN</span><br>  smc.home_path<br><span class=\"hljs-keyword\">WHEN</span> <span class=\"hljs-string\">&#x27;wxmp&#x27;</span> <span class=\"hljs-keyword\">THEN</span><br>  smr.home_path<br><span class=\"hljs-keyword\">ELSE</span><br>  <span class=\"hljs-string\">&#x27;&#x27;</span><br><span class=\"hljs-keyword\">END</span> <span class=\"hljs-keyword\">AS</span> home_path ,<br> smr.cdn_module ,<br> smr.cdn_version ,<br> smr.cdn_state ,<br> smr.report_id ,<br> smr.obj_link <span class=\"hljs-keyword\">AS</span> url_path<br><span class=\"hljs-keyword\">FROM</span><br>  sup_menus <span class=\"hljs-keyword\">AS</span> smr<br><span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">JOIN</span> sup_module_config <span class=\"hljs-keyword\">AS</span> smc <span class=\"hljs-keyword\">ON</span> smc.module_code <span class=\"hljs-operator\">=</span> smr.obj_id<br><span class=\"hljs-keyword\">WHERE</span><br>  smr.platform <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;wxmp&#x27;</span><br><span class=\"hljs-keyword\">AND</span> menu_category <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span><br><span class=\"hljs-keyword\">AND</span> smr.uuid <span class=\"hljs-keyword\">IN</span>(<br>  <span class=\"hljs-keyword\">SELECT</span><br>    menu_uuid<br>  <span class=\"hljs-keyword\">FROM</span><br>    app_user_role_resources<br>  <span class=\"hljs-keyword\">WHERE</span><br>    locate(<br>      role_uuid ,<br>      #&#123;roleUuids&#125;) <span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> delete_status <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;0&#x27;</span><br>    )<br><span class=\"hljs-keyword\">ORDER</span> <span class=\"hljs-keyword\">BY</span><br>  smr.category_order <span class=\"hljs-keyword\">ASC</span> ,<br>  smr.group_order <span class=\"hljs-keyword\">ASC</span> ,<br>  smr.item_order <span class=\"hljs-keyword\">ASC</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>如果 menuList 不为空，key为 “portal:role:wx:report-menu”，hashkey为”role-“ + roleUuids，向redis中追加值 JSONObject.toJSONString(menuList)</li>\n</ul>\n</li>\n<li><p>向返回实体信息中封装 menuList 并返回</p>\n</li>\n</ul>\n<h2 id=\"工具箱页\"><a href=\"#工具箱页\" class=\"headerlink\" title=\"工具箱页\"></a>工具箱页</h2><ol>\n<li>获取工具箱列表</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">get api/portal/wx/toolbox-menu<br>&#123;<br>  request： 请求，<br>  roleUuids:  用户角色uuid <br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>  业务流程：</p>\n<ul>\n<li><p>参数判断（ roleUuids 进行判空）</p>\n</li>\n<li><p>从redis中获取值 menuListStr</p>\n<ul>\n<li>key为 “portal:role:wx:toolbox-menu”</li>\n<li>hashkey为 “role-“ + roleUuids</li>\n</ul>\n</li>\n<li><p>将 menuListStr 转为菜单 menuList 集合</p>\n</li>\n<li><p>如果 menuList 是空的</p>\n<ul>\n<li>获取数据源 portalDataSource</li>\n<li>调用 <code>apiWeChatService.queryToolboxMenuByUserRoleUuids(roleUuids, portalDataSource)</code> 方法获取工具箱菜单列表 menuList</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span><br>  smt.id ,<br>  smt.uuid ,<br>  smt.category ,<br>  ifnull(smt.category_order , <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">AS</span> category_order ,<br>  smt.group_name ,<br>  ifnull(smt.group_order , <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">AS</span> group_order ,<br>  smt.obj_title <span class=\"hljs-keyword\">AS</span> `name` ,<br>  ifnull(smt.item_order , <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">AS</span> item_order ,<br>  smt.obj_title ,<br>  smt.menu_type ,<br>  smt.obj_type ,<br>  smt.obj_id ,<br>  smt.obj_link ,<br>  smt.obj_cdn ,<br>  smt.obj_version ,<br>  smt.report_id ,<br>  smt.url_path ,<br>  smt.icon <span class=\"hljs-keyword\">AS</span> icon_link ,<br>  smt.publicly ,<br>  smt.option_user_num ,<br>  <span class=\"hljs-keyword\">CASE</span> smt.obj_type<br><span class=\"hljs-keyword\">WHEN</span> <span class=\"hljs-string\">&#x27;wxmp#config&#x27;</span> <span class=\"hljs-keyword\">THEN</span><br>  smc.home_path<br><span class=\"hljs-keyword\">WHEN</span> <span class=\"hljs-string\">&#x27;wxmp&#x27;</span> <span class=\"hljs-keyword\">THEN</span><br>  smt.home_path<br><span class=\"hljs-keyword\">ELSE</span><br>  <span class=\"hljs-string\">&#x27;&#x27;</span><br><span class=\"hljs-keyword\">END</span> <span class=\"hljs-keyword\">AS</span> home_path ,<br> smt.obj_title <span class=\"hljs-keyword\">AS</span> `name` ,<br> smt.cdn_module ,<br> smt.cdn_version ,<br> smt.cdn_state<br><span class=\"hljs-keyword\">FROM</span><br>  sup_menus <span class=\"hljs-keyword\">AS</span> smt<br><span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">JOIN</span> sup_module_config <span class=\"hljs-keyword\">AS</span> smc <span class=\"hljs-keyword\">ON</span> smc.module_code <span class=\"hljs-operator\">=</span> smt.obj_id<br><span class=\"hljs-keyword\">WHERE</span><br>  smt.platform <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;wxmp&#x27;</span><br><span class=\"hljs-keyword\">AND</span> menu_category <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span><br><span class=\"hljs-keyword\">AND</span> smt.uuid <span class=\"hljs-keyword\">IN</span>(<br>  <span class=\"hljs-keyword\">SELECT</span><br>    menu_uuid<br>  <span class=\"hljs-keyword\">FROM</span><br>    app_user_role_resources<br>  <span class=\"hljs-keyword\">WHERE</span><br>    locate(<br>      role_uuid ,<br>      #&#123;roleUuids&#125;) <span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> delete_status <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;0&#x27;</span><br>    )<br><span class=\"hljs-keyword\">ORDER</span> <span class=\"hljs-keyword\">BY</span><br>  smt.category_order <span class=\"hljs-keyword\">ASC</span> ,<br>  smt.group_order <span class=\"hljs-keyword\">ASC</span> ,<br>  smt.item_order <span class=\"hljs-keyword\">ASC</span>    <br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>解析渲染 menuList 数据</li>\n<li>以key为 “portal:role:wx:toolbox-menu” ，hashkey为 “role-“ + roleUuids ，值为 menuList 向redis中追加</li>\n<li>返回实体信息中封装 menuList 并返回</li>\n</ul>\n</li>\n<li><p>如果menuList非空，返回实体信息中封装 menuList 并返回</p>\n</li>\n</ul>\n<h2 id=\"我的\"><a href=\"#我的\" class=\"headerlink\" title=\"[我的]\"></a>[我的]</h2><h3 id=\"查询-formId-数量\"><a href=\"#查询-formId-数量\" class=\"headerlink\" title=\"查询 formId 数量\"></a>查询 formId 数量</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">get api/portal/wx/formId-num<br>&#123;<br>  enterpriseUuid: 企业UUID，<br>  mobile: 手机号<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>  业务流程：</p>\n<ul>\n<li><p>参数判断</p>\n<ul>\n<li>对 mobile 进行参数判空</li>\n</ul>\n</li>\n<li><p>获取用户信息集合</p>\n<ul>\n<li>调用 <code>apiWeChatService.portalQueryFormIdByMobile(mobile, selectPortalDataSourceUtils.dynamicSelectPortalDataSource(FUNCTION_F10L, DB_TYPE_SLAVE))</code> 获得用户信息集合 userMap</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span><br>  wx_avatar <span class=\"hljs-keyword\">AS</span> wxAvatar ,<br>  wx_name <span class=\"hljs-keyword\">AS</span> wxName ,<br>  wx_nick_name <span class=\"hljs-keyword\">AS</span> wxNickName ,<br>  wx_unique_token <span class=\"hljs-keyword\">AS</span> wxUniqueToken ,<br>  mobile ,<br>  enterprise_code <span class=\"hljs-keyword\">AS</span> enterpriseCode ,<br>  enterprise_uuid <span class=\"hljs-keyword\">AS</span> enterpriseUuid ,<br>  is_binding <span class=\"hljs-keyword\">AS</span> isBinding<br><span class=\"hljs-keyword\">FROM</span><br>  sup_wx_users<br><span class=\"hljs-keyword\">WHERE</span><br>  mobile <span class=\"hljs-operator\">=</span> #&#123;mobile&#125; <span class=\"hljs-keyword\">and</span> is_binding <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> delete_status <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span><br>LIMIT <span class=\"hljs-number\">1</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>如果 userMap 不为空</p>\n<ul>\n<li>取 userMap 中的 “wxuniqueToken” 赋值给字符串 openId</li>\n<li>以 “portal:user:wxFormId” 为key从redis中获取集合 map</li>\n<li>如果 map 不为空<ul>\n<li>遍历 map ，每一次的遍历单体对象是 entry</li>\n<li>将 entry.getKey() 赋值给 hashKey ，entry.getValue() 赋值给 value </li>\n<li>将 hashKey 用 “@” 切割得到字符串数据 hashKeys</li>\n<li>如果 hashKeys 长度大于1，且数组第一个元素和 openId 相等，获取当前时间毫秒值 nowTime </li>\n<li>如果 nowTime 小于 hashKeys 第二个元素的值或者 value 值不等于 “the formId is a mock one” ，计数器 count++ ，formIdArray添加值 value ，否则从redis中移除掉 key为 “portal:user:wxFormId” , hashKey为 entry.getKey() 的数据</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>向 userMap 中 put  (“userFormIdNum”, count) 和 (“formIdArray”, formIdArray)</p>\n</li>\n<li><p>在返回信息实体中封装 userMap 并返回</p>\n</li>\n</ul>\n<h3 id=\"获取企业管理列表\"><a href=\"#获取企业管理列表\" class=\"headerlink\" title=\"获取企业管理列表\"></a>获取企业管理列表</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">get api/portal/wx/enterprise-menu-list<br>&#123;<br>  enterpriseUuid：企业UUID，<br>  roleUuids: 角色UUID<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>  业务流程：</p>\n<ul>\n<li><p>参数判断</p>\n<ul>\n<li>对roleUuids进行判空</li>\n</ul>\n</li>\n<li><p>获取数据源 portalDataSource</p>\n</li>\n<li><p>获取企业管理列表</p>\n<ul>\n<li>调用 <code>apiWeChatService.queryEnterpriseMenuList(roleUuids, f10lSlaveDataSource)</code> 获得企业管理列表 menuList</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span><br>  t1.id ,<br>  t1.`name` <span class=\"hljs-keyword\">AS</span> title ,<br>  t1.description ,<br>  t1.group_name ,<br>  t1.obj_id ,<br>  t1.obj_type ,<br>  <span class=\"hljs-keyword\">CASE</span> t1.group_name<br><span class=\"hljs-keyword\">WHEN</span> <span class=\"hljs-string\">&#x27;基本信息&#x27;</span> <span class=\"hljs-keyword\">THEN</span><br>  <span class=\"hljs-string\">&#x27;sa&#x27;</span><br><span class=\"hljs-keyword\">WHEN</span> <span class=\"hljs-string\">&#x27;业务权限设置&#x27;</span> <span class=\"hljs-keyword\">THEN</span><br>  <span class=\"hljs-string\">&#x27;sb&#x27;</span><br><span class=\"hljs-keyword\">ELSE</span><br>  <span class=\"hljs-string\">&#x27;sc&#x27;</span><br><span class=\"hljs-keyword\">END</span> <span class=\"hljs-keyword\">AS</span> pid ,<br> <span class=\"hljs-keyword\">CASE</span><br><span class=\"hljs-keyword\">WHEN</span> t1.group_name <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;业务权限设置&#x27;</span> <span class=\"hljs-keyword\">THEN</span><br>  t1.parent_menu_uuid<br><span class=\"hljs-keyword\">ELSE</span><br>  <span class=\"hljs-string\">&#x27;&#x27;</span><br><span class=\"hljs-keyword\">END</span> <span class=\"hljs-keyword\">AS</span> uuid ,<br> <span class=\"hljs-keyword\">CASE</span> t1.obj_type<br><span class=\"hljs-keyword\">WHEN</span> <span class=\"hljs-string\">&#x27;wxmp#config&#x27;</span> <span class=\"hljs-keyword\">THEN</span><br>  t3.home_path<br><span class=\"hljs-keyword\">WHEN</span> <span class=\"hljs-string\">&#x27;wxmp&#x27;</span> <span class=\"hljs-keyword\">THEN</span><br>  t1.home_path<br><span class=\"hljs-keyword\">ELSE</span><br>  <span class=\"hljs-string\">&#x27;&#x27;</span><br><span class=\"hljs-keyword\">END</span> <span class=\"hljs-keyword\">AS</span> home_path<br><span class=\"hljs-keyword\">FROM</span><br>  sup_menus <span class=\"hljs-keyword\">AS</span> t1<br><span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">JOIN</span> app_user_role_resources <span class=\"hljs-keyword\">AS</span> t2 <span class=\"hljs-keyword\">ON</span> t1.uuid <span class=\"hljs-operator\">=</span> t2.menu_uuid<br><span class=\"hljs-keyword\">AND</span> t2.delete_status <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;0&#x27;</span><br><span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">JOIN</span> sup_module_config <span class=\"hljs-keyword\">AS</span> t3 <span class=\"hljs-keyword\">ON</span> t3.module_code <span class=\"hljs-operator\">=</span> t1.obj_id<br><span class=\"hljs-keyword\">WHERE</span><br>  t1.menu_category <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;2&#x27;</span><br><span class=\"hljs-keyword\">AND</span> FIND_IN_SET(<br>  t2.role_uuid ,<br>  #&#123;roleUuids&#125;)<br><br><span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span><br>  t1.group_name ,<br>  t1.`name`<br><span class=\"hljs-keyword\">ORDER</span> <span class=\"hljs-keyword\">BY</span><br>  pid ,<br>  t1.id<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>如果 menuList 不为空</p>\n<ul>\n<li>调用 <code>apiWeChatService.queryModulePageConfigList(f10lSlaveDataSource)</code> 获得页面设置列表 configList</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span><br>  module_code ,<br>  page_code ,<br>  page_type ,<br>  version<br><span class=\"hljs-keyword\">FROM</span><br>  sup_module_page_config<br><span class=\"hljs-keyword\">WHERE</span><br>  module_code <span class=\"hljs-keyword\">IS</span> <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span><br><span class=\"hljs-keyword\">AND</span> page_code <span class=\"hljs-keyword\">IS</span> <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span><br><span class=\"hljs-keyword\">AND</span> page_type <span class=\"hljs-keyword\">IS</span> <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span><br><span class=\"hljs-keyword\">AND</span> version <span class=\"hljs-keyword\">IS</span> <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p>遍历 menuList ，每一次遍历单体对象是 data ，如果 data.get(“obj_id”) 值为空，则向 objId 赋值为空，如果不为空，则将 data.get(“obj_id)” 转为字符串赋值给 objId </p>\n</li>\n<li><p>如果 configList 不为空，遍历它，每一次遍历单体对象是 ocnfig </p>\n<ul>\n<li>如果 <code>config.get(&quot;module_code&quot;).toString().equals(objId)</code>  ，就像hashMap中put (config.get(“page_code”).toString(), config.get(“page_type”) + “:” + config.get(“version”))</li>\n</ul>\n</li>\n<li><p>向 data 中put (“obj_config”, hashMap)</p>\n</li>\n</ul>\n</li>\n<li><p>向返回实体对象中 封装 menuList 并返回</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"登录页\"><a href=\"#登录页\" class=\"headerlink\" title=\"登录页\"></a>登录页</h2><h3 id=\"业务流程图\"><a href=\"#业务流程图\" class=\"headerlink\" title=\"业务流程图\"></a>业务流程图</h3><p><a href=\"/application/syp-wxmp.html\">登录模块业务流程</a></p>\n<h3 id=\"手机号登录\"><a href=\"#手机号登录\" class=\"headerlink\" title=\"手机号登录\"></a>手机号登录</h3><ol>\n<li>企业列表展示</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">get /portal/v2/account-number-login/enterprise-list<br>&#123;<br>  mobile: 手机号,<br>  password: 密码(MD5加密)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>  业务流程：</p>\n<ul>\n<li><p>参数判断（mobile 和 password 进行判空）</p>\n</li>\n<li><p>获取数据源 portalDataSource</p>\n</li>\n<li><p>判断密码</p>\n<ul>\n<li>调用 <code>portalV2Service.queryUserInfo(mobile)</code> 方法查询用户密码</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">select</span> password <br><span class=\"hljs-keyword\">from</span> sup_user <br><span class=\"hljs-keyword\">where</span> mobile <span class=\"hljs-operator\">=</span> #&#123;mobile&#125; <span class=\"hljs-keyword\">and</span> delete_status <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span> limit <span class=\"hljs-number\">1</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>判断userPassword和参数password是否相等，或者根据手机号后六位数(内部排序)经过MD5加密后的字符串是否相等，有一个相等就继续，如果都不相同，返回信息中返回“密码错误”</li>\n</ul>\n</li>\n<li><p>获取企业列表</p>\n<ul>\n<li>调用 <code>apiPortalV2Service的queryEnterpriseListWithMobile(mobile, password)</code> 获取企业列表 result</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span><br>  sue.uuid <span class=\"hljs-keyword\">AS</span> userUuid ,<br>  su.user_name <span class=\"hljs-keyword\">AS</span> userName ,<br>  sue.mobile <span class=\"hljs-keyword\">AS</span> userMobile ,<br>  su.email <span class=\"hljs-keyword\">AS</span> userEmail ,<br>  su.user_num <span class=\"hljs-keyword\">AS</span> userNumber ,<br>  sue. STATUS <span class=\"hljs-keyword\">AS</span> userStatus ,<br>  su. PASSWORD ,<br>  su. PASSWORD <span class=\"hljs-keyword\">AS</span> userIdToken ,<br>  sue.token <span class=\"hljs-keyword\">AS</span> userToken ,<br>  se.group_id <span class=\"hljs-keyword\">AS</span> groupId ,<br>  se.role_id <span class=\"hljs-keyword\">AS</span> roleId ,<br>  su.is_delete <span class=\"hljs-keyword\">AS</span> userIsDelete ,<br>  <span class=\"hljs-string\">&#x27;todo&#x27;</span> <span class=\"hljs-keyword\">AS</span> userGravatar ,<br>  <span class=\"hljs-string\">&#x27;todo&#x27;</span> <span class=\"hljs-keyword\">AS</span> groupName ,<br>  <span class=\"hljs-string\">&#x27;todo&#x27;</span> <span class=\"hljs-keyword\">AS</span> roleName ,<br>  se.uuid <span class=\"hljs-keyword\">AS</span> enterpriseUuid ,<br>  se. CODE <span class=\"hljs-keyword\">AS</span> enterpriseCode ,<br>  se. NAME <span class=\"hljs-keyword\">AS</span> enterpriseName ,<br>  se.data_source_id <span class=\"hljs-keyword\">AS</span> dataSourceCode ,<br>  se.role_id <span class=\"hljs-keyword\">AS</span> enterpriseRoleId ,<br>  se.group_id <span class=\"hljs-keyword\">AS</span> enterpriseGroupId ,<br>  se. <span class=\"hljs-keyword\">LANGUAGE</span> <span class=\"hljs-keyword\">AS</span> enterpriseLanguage<br><span class=\"hljs-keyword\">FROM</span><br>  sup_user_enterprises <span class=\"hljs-keyword\">AS</span> sue<br><span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">JOIN</span> sup_enterprises <span class=\"hljs-keyword\">AS</span> se <span class=\"hljs-keyword\">ON</span> se.uuid <span class=\"hljs-operator\">=</span> sue.data_enterprise_uuid<br><span class=\"hljs-keyword\">AND</span> sue.data_enterprise_code <span class=\"hljs-operator\">=</span> se. CODE<br><span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">JOIN</span> sup_user <span class=\"hljs-keyword\">AS</span> su <span class=\"hljs-keyword\">ON</span> su.mobile <span class=\"hljs-operator\">=</span> sue.mobile<br><span class=\"hljs-keyword\">WHERE</span><br>  sue.mobile <span class=\"hljs-operator\">=</span> #&#123;mobile&#125; <span class=\"hljs-keyword\">and</span> sue.delete_status <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;0&#x27;</span> <span class=\"hljs-keyword\">and</span> sue.status <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span><br><br><span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span><br>  sue.uuid<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>查询用户角色</p>\n<ul>\n<li>循环遍历企业列表 result ，每次遍历的单体对象是 map ，调用 <code>apiPortalV2Service.queryUserRoleUuidList(userUuid,portalDataSource)</code> 查询用户角色uuid得到 roleList</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span><br>  aur.uuid <span class=\"hljs-keyword\">AS</span> roleUuid ,<br>  aur.role_name <span class=\"hljs-keyword\">AS</span> roleName<br><span class=\"hljs-keyword\">FROM</span><br>  sup_user_roles <span class=\"hljs-keyword\">AS</span> sur<br><span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">JOIN</span> app_user_roles <span class=\"hljs-keyword\">AS</span> aur <span class=\"hljs-keyword\">ON</span> aur.uuid <span class=\"hljs-operator\">=</span> sur.role_uuid<br><span class=\"hljs-keyword\">AND</span> sur.data_enterprise_uuid <span class=\"hljs-operator\">=</span> aur.data_enterprise_uuid<br><span class=\"hljs-keyword\">WHERE</span><br>  user_uuid <span class=\"hljs-operator\">=</span> #&#123;userUuid&#125;<br><span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span><br>  aur.uuid<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>追加 roleList 给map中的 userUuidList</li>\n<li>遍历 roleList，将每一个 roleUuid 用“，”拼接起来赋值给 roleUuids 字符串，然后追加到map中的 roleUuids 中</li>\n</ul>\n</li>\n<li><p>封装结果到返回信息实体中并返回信息实体，用户选择企业进行登录</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>获取微信用户 openid</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">post /saas-api/api/portal/wx/query-user-openid <br>&#123;<br>  code: 用户凭证(wx.login获取),<br>  enterpriseUuid: 企业uuid,<br>  mobile: 手机号<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>  业务流程：</p>\n<ul>\n<li><p>参数判断（code 和 mobile 进行判空）</p>\n</li>\n<li><p>如果 code 不为空，从数据库中重新获取 openid</p>\n<ul>\n<li><p>获取微信小程序配置信息</p>\n<ul>\n<li>appId：”weChat.appId”</li>\n<li>secret：”weChat.secret”</li>\n<li>openIdUrl：”weChat.openIdUrl”</li>\n</ul>\n</li>\n<li><p>替换 openIdUrl 中的参数值</p>\n<ul>\n<li>用appId、secret、code 分别替换原openIdUrl中的 APP_ID、APP_SECRET、JS_CODE ，得到新的 openIdUrl</li>\n</ul>\n</li>\n<li><p>获取openId返回值</p>\n<ul>\n<li>调用微信官方接口返回值 <code>HttpMethodUtil.getGetResult(openIdUrl, null)</code> 得到openIdResult</li>\n<li>判断openIdResult是否是JSON格式，不是则返回 获取用户 openId 接口返回值非JSON格式错误信息</li>\n<li>是JSON格式，则转为JSON对象 json</li>\n</ul>\n</li>\n<li><p>创建一个字段 isBinding&#x3D;0，向 json 中put</p>\n</li>\n<li><p>如果 json 对象不为空，先获取数据源 portalDataSource</p>\n</li>\n<li><p>调用 <code>apiWeChatService的portalQueryUserOpenId(mobilev, enterpriseUuid, portalDataSource)</code> 方法查询用户openId 得到结果集 result（Map集合）</p>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span><br>  wx_unique_token <span class=\"hljs-keyword\">AS</span> openid ,<br>  is_binding<br><span class=\"hljs-keyword\">FROM</span><br>  sup_wx_users<br><span class=\"hljs-keyword\">WHERE</span><br>  mobile <span class=\"hljs-operator\">=</span> #&#123;mobile&#125; <span class=\"hljs-keyword\">and</span> is_binding <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> delete_status <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span><br><span class=\"hljs-keyword\">ORDER</span> <span class=\"hljs-keyword\">BY</span><br>  id <span class=\"hljs-keyword\">DESC</span><br>LIMIT <span class=\"hljs-number\">1</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>将结果 result 的 is_binding 字段追加给 json 中</li>\n<li>在返回实体对象中封装结果 json 对象，并返回</li>\n</ul>\n</li>\n<li><p>如果 code 为空，则从数据源中取</p>\n<ul>\n<li>获得数据源对象 portalDataSource</li>\n<li>调用 <code>apiWeChatService.portalQueryUserOpenId(mobile,enterpriseUuid,portalDataSource)</code> 方法查询用户openId得到结果 result</li>\n<li>在返回实体对象中封装结果 result</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>推送信息</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">post /saas-api/api/portal/wx/send-template-message<br>&#123;<br>  toUsers: 需要发送的用户的uuid,<br>  template_id: 模板id,<br>  page: 需要跳转的页面（选填）,<br>  data: 微信通知模板数据,<br>  enterpriseUuid: 企业uuid,<br>  emphasis_keyword： 模板需放大关键字可选填）<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>  业务流程：</p>\n<ul>\n<li>参数判断（param，data，toUsers，template_id 进行判空）</li>\n<li>获取企业信息：根据参数 enterpriseUuid 去查询企业信息得到 portalEnterprise</li>\n<li>获取用户openId：根据参数 toUsers 获取，得到openId数组 toUserArray</li>\n<li>封装查询参数 query，向其中追加参数 enterpriseUuid、toUsers、dataEnterpriseUuid和dataEnterpriseCode</li>\n<li>获取数据源得到 portalDataSource</li>\n<li>调用 <code>apiWeChatService的queryUserOpenIdWithUuid(query, portalDataSource)</code> 方法得到openId集合 openIdList</li>\n</ul>\n  <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-keyword\">DISTINCT</span><br>  swu.wx_unique_token <span class=\"hljs-keyword\">AS</span> openId<br><span class=\"hljs-keyword\">FROM</span><br>  sup_user_enterprises <span class=\"hljs-keyword\">AS</span> sue<br><span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">JOIN</span> sup_wx_users <span class=\"hljs-keyword\">AS</span> swu <span class=\"hljs-keyword\">ON</span> sue.mobile <span class=\"hljs-operator\">=</span> swu.mobile<br><span class=\"hljs-keyword\">WHERE</span><br>  sue.delete_status <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;0&#x27;</span><br><span class=\"hljs-keyword\">AND</span> swu.wx_unique_token <span class=\"hljs-keyword\">IS</span> <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span><br><span class=\"hljs-keyword\">AND</span> swu.wx_unique_token <span class=\"hljs-operator\">!=</span> <span class=\"hljs-string\">&#x27;&#x27;</span><br><span class=\"hljs-keyword\">AND</span> sue.data_enterprise_uuid <span class=\"hljs-operator\">=</span> #&#123;dataEnterpriseUuid&#125; <span class=\"hljs-keyword\">and</span> sue.data_enterprise_code <span class=\"hljs-operator\">=</span> #&#123;dataEnterpriseCode&#125;<br><br><span class=\"hljs-keyword\">AND</span> swu.is_binding <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span><br><span class=\"hljs-keyword\">AND</span> swu.delete_status <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span><br><span class=\"hljs-keyword\">AND</span> sue.uuid <span class=\"hljs-keyword\">IN</span> <span class=\"hljs-string\">&#x27;遍历#&#123;toUsers&#125;&#x27;</span><br><span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span> uuid<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>向参数集合 newParam 中追加 appId、secret、fromUrl、ip、templateId、page、data、empahsis_keyword</li>\n<li>循环发送模板信息<ul>\n<li>通过 openId 异步获取 formId</li>\n<li>向 newParam 中追加 openId 和 formId 给 toUser 和 formId 两个字段</li>\n<li>调用自身API去得到结果 sendResult</li>\n<li>向结果集合 resultMap 中追加 sendResult</li>\n</ul>\n</li>\n<li>向返回实体信息中封装 resultMap 并返回</li>\n</ul>\n<ol start=\"4\">\n<li>提交用户偏好</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">get user/v1/preference<br>&#123;<br>  enterpriseUuid: 企业UUID,<br>  cmobile: 手机号,<br>  platform: 平台<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>  业务流程：</p>\n<ul>\n<li><p>参数判断（对enterpriseUuid、mobile、platform进行判空）</p>\n</li>\n<li><p>将 mobile、enterpriseUuid、platform 拼接成一个 hashkey</p>\n</li>\n<li><p>大key为 “user：perference”，hashkey为拼接成的 hashkey 去redis中取值 preference</p>\n</li>\n<li><p>如果 preference 是空的</p>\n<ul>\n<li>将 mobile、enterpriseUuid、platform 依次放进参数 params 中，params是一个map集合</li>\n<li>获取数据源 portalDataSource</li>\n<li>根据参数 params 和数据源去数据库取 preference</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span><br>  preference<br><span class=\"hljs-keyword\">FROM</span><br>  sup_user_preferences<br><span class=\"hljs-keyword\">WHERE</span><br>  enterprise_uuid <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;$&#123;enterpriseUuid&#125;&#x27;</span><br><span class=\"hljs-keyword\">AND</span> mobile <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;$&#123;mobile&#125;&#x27;</span><br><span class=\"hljs-keyword\">AND</span> platform <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;$&#123;platform&#125;&#x27;</span><br>LIMIT <span class=\"hljs-number\">1</span>;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>以 “user：perference” 为大key，拼接的hashkey为 hashksy，preference 为值追加到redis中</li>\n<li>返回实体信息中封装 preference 并返回</li>\n</ul>\n</li>\n<li><p>如果 preference 非空，返回实体信息中封装 preference 并返回</p>\n</li>\n</ul>\n<h3 id=\"企业号登录\"><a href=\"#企业号登录\" class=\"headerlink\" title=\"企业号登录\"></a>企业号登录</h3><ol>\n<li>获取企业</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">get user/v1/enterprise-info<br>&#123;<br>  request： 请求<br>  enterpriseCode:  企业号<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>  业务流程：</p>\n<ul>\n<li><p>参数判断（对enterpriseCode进行判空）</p>\n</li>\n<li><p>获取数据源portalDataSource</p>\n</li>\n<li><p>获取企业信息结果集 result</p>\n<ul>\n<li>调用 <code>apiUserLoginService.weChatAppletWithEnterpriseInfo(enterpriseCode, portalDataSource)</code> 方法获取企业信息 result</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span><br>  id <span class=\"hljs-keyword\">AS</span> enterpriseId ,<br>  uuid <span class=\"hljs-keyword\">AS</span> enterpriseUuid ,<br>  CODE <span class=\"hljs-keyword\">AS</span> enterpriseCode ,<br>  `<span class=\"hljs-keyword\">language</span>` ,<br>  `name` <span class=\"hljs-keyword\">AS</span> enterpriseName ,<br>  role_id <span class=\"hljs-keyword\">AS</span> enterpriseRoleId ,<br>  group_id <span class=\"hljs-keyword\">AS</span> enterpriseGroupId ,<br>  data_source_id <span class=\"hljs-keyword\">AS</span> enterpriseDataSourceId<br><span class=\"hljs-keyword\">FROM</span><br>  sup_enterprises<br><span class=\"hljs-keyword\">WHERE</span><br>  CODE <span class=\"hljs-operator\">=</span> #&#123;enterpriseCode&#125;<br>LIMIT <span class=\"hljs-number\">1</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>result 不为空则向返回信息实体中封装 result 并返回</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>获取登录用户信息</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">get user/v1/wx-applet-login<br>&#123;<br>  request：请求<br>  mobile：手机号码<br>  password：MD5机密后的密码<br>  enterpriseUuid：企业UUID<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>  业务流程：</p>\n<ul>\n<li><p>获取请求头中的enterpriseUuid</p>\n<ul>\n<li>调用 <code>request.getHeader(&quot;enterpriseUuid&quot;)</code> 得到企业UUID字符串 enterprise</li>\n</ul>\n</li>\n<li><p>参数判断（对 mobile、password、enterpriseUuid 进行判空）</p>\n</li>\n<li><p>验证 enterprise 和 参数 enterpriseUuid 是否想等，如果不相等则返回请求头与请求参数的企业UUID不一致</p>\n</li>\n<li><p>获取企业信息</p>\n<ul>\n<li>异步调用 <code>asyncUtils.QUERY_ENTERPRISE_INFO(enterprise)</code> 方法得到企业信息 portalEnterprise</li>\n</ul>\n</li>\n<li><p>拼接参数集合 param （Map集合）</p>\n<ul>\n<li>向 param 中追加键值对 {“mobile”:mobile,”password”:password,”dataEnterpriseUuid”:portalEnterprise.getEnterpriseUuid();”dataEnterpriseCode”:portalEnterprise.getEnterpriseCode()}</li>\n</ul>\n</li>\n<li><p>获取数据源portalDataSource</p>\n</li>\n<li><p>查询企业用户信息</p>\n<ul>\n<li>调用 <code>apiUserLoginService.weChatAppletWithLogin(param,portalDataSource)</code> 方法得到结果集 result</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span><br>  sue.uuid <span class=\"hljs-keyword\">AS</span> userUuid ,<br>  su.user_name <span class=\"hljs-keyword\">AS</span> userName ,<br>  su.mobile <span class=\"hljs-keyword\">AS</span> userMobile ,<br>  su.email <span class=\"hljs-keyword\">AS</span> userEmail ,<br>  su.user_num <span class=\"hljs-keyword\">AS</span> userNumber ,<br>  sue. STATUS <span class=\"hljs-keyword\">AS</span> userStatus ,<br>  su. PASSWORD ,<br>  sue.token <span class=\"hljs-keyword\">AS</span> userToken ,<br>  <span class=\"hljs-string\">&#x27;todo&#x27;</span> <span class=\"hljs-keyword\">AS</span> userGravatar ,<br>  sen.group_id <span class=\"hljs-keyword\">AS</span> groupId ,<br>  <span class=\"hljs-string\">&#x27;todo&#x27;</span> <span class=\"hljs-keyword\">AS</span> groupName ,<br>  sen.role_id <span class=\"hljs-keyword\">AS</span> roleId ,<br>  <span class=\"hljs-string\">&#x27;todo&#x27;</span> <span class=\"hljs-keyword\">AS</span> roleName ,<br>  su.is_delete <span class=\"hljs-keyword\">AS</span> userIsDelete<br><span class=\"hljs-keyword\">FROM</span><br>  sup_user_enterprises <span class=\"hljs-keyword\">AS</span> sue<br><span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">JOIN</span> sup_user <span class=\"hljs-keyword\">AS</span> su <span class=\"hljs-keyword\">ON</span> sue.mobile <span class=\"hljs-operator\">=</span> su.mobile<br><span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">JOIN</span> sup_enterprises <span class=\"hljs-keyword\">AS</span> sen <span class=\"hljs-keyword\">ON</span> sen.uuid <span class=\"hljs-operator\">=</span> sue.data_enterprise_uuid<br><span class=\"hljs-keyword\">WHERE</span><br>  sue.mobile <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;$&#123;mobile&#125;&#x27;</span><br><span class=\"hljs-keyword\">AND</span> su. PASSWORD <span class=\"hljs-keyword\">IS</span> <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span><br><span class=\"hljs-keyword\">AND</span> sue.data_enterprise_uuid <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;$&#123;dataEnterpriseUuid&#125;&#x27;</span><br><span class=\"hljs-keyword\">AND</span> sue.data_enterprise_code <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;$&#123;dataEnterpriseCode&#125;&#x27;</span><br><span class=\"hljs-keyword\">AND</span> sue.delete_status <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;0&#x27;</span><br><span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span><br>  sue.uuid<br>LIMIT <span class=\"hljs-number\">1</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>用户信息核对</p>\n<ul>\n<li>判断用户信息结果集 result 中的USER_STATUS是否等于1，不等则返回该账号已被停用</li>\n<li>判断 result 中的PASSWORD 是否等于参数中的 password，不等则返回密码错误</li>\n</ul>\n</li>\n<li><p>获取用户角色列表</p>\n<ul>\n<li>调用 <code>apiUserLoginService.queryUserRoleUuidList(result.get(&quot;userUuid&quot;).toString(), portalDataSource)</code> 得到 roleList</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span><br>  aur.uuid <span class=\"hljs-keyword\">AS</span> roleUuid ,<br>  aur.role_name <span class=\"hljs-keyword\">AS</span> roleName<br><span class=\"hljs-keyword\">FROM</span><br>  sup_user_roles <span class=\"hljs-keyword\">AS</span> sur<br><span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">JOIN</span> app_user_roles <span class=\"hljs-keyword\">AS</span> aur <span class=\"hljs-keyword\">ON</span> aur.uuid <span class=\"hljs-operator\">=</span> sur.role_uuid<br><span class=\"hljs-keyword\">AND</span> sur.data_enterprise_uuid <span class=\"hljs-operator\">=</span> aur.data_enterprise_uuid<br><span class=\"hljs-keyword\">WHERE</span><br>  user_uuid <span class=\"hljs-operator\">=</span> #&#123;userUuid&#125;<br><span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span><br>  aur.uuid<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>向 result 中追加{“roleUuidList”:roleList,”roleUuids”:””}</li>\n</ul>\n</li>\n<li><p>获取角色UUID</p>\n<ul>\n<li>循环遍历 roleList ，将角色列表中的每一个角色的 roleUuid 拼接给 roleUuids ，中间用”，”隔开</li>\n<li>向 result 中追加 roleUuids</li>\n</ul>\n</li>\n<li><p>返回实体中封装结果集 result 并返回</p>\n</li>\n</ul>\n<ol start=\"3\">\n<li>获取微信用户 openid 、推送消息 、提交用户偏好 三个步骤同 手机号登录 中的3、4、5介绍</li>\n</ol>\n<h3 id=\"微信登录\"><a href=\"#微信登录\" class=\"headerlink\" title=\"微信登录\"></a>微信登录</h3><ol>\n<li><p>获取企业列表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">get api/portal/v2/wx-login/enterprise-list-v2<br>&#123;<br> request: 请求，<br> code: 微信小程序中的code值<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ol>\n<p>  业务流程：</p>\n<ul>\n<li><p>参数判断</p>\n<ul>\n<li>对 code 进行判空</li>\n</ul>\n</li>\n<li><p>获取 openId</p>\n<ul>\n<li><p>获取微信小程序配置信息</p>\n<ul>\n<li>appId：”weChat.appId”</li>\n<li>secret：”weChat.secret”</li>\n<li>openIdUrl：”weChat.openIdUrl”</li>\n</ul>\n</li>\n<li><p>替换 openIdUrl 中的参数值</p>\n<ul>\n<li>用appId、secret、code 分别替换原openIdUrl中的 APP_ID、APP_SECRET、JS_CODE ，得到新的 openIdUrl</li>\n</ul>\n</li>\n<li><p>获取openId返回值</p>\n<ul>\n<li>调用微信官方接口返回值 <code>HttpMethodUtil.getGetResult(openIdUrl, null)</code> 得到openIdResult</li>\n</ul>\n</li>\n<li><p>判断openIdResult是否是JSON格式</p>\n<ul>\n<li>不是则返回 获取用户 openId 接口返回值非JSON格式错误信息</li>\n<li>是JSON格式，则转为JSON对象 json</li>\n</ul>\n</li>\n<li><p>从 json 中去字段 OPEN_ID 的值，得到openId</p>\n</li>\n</ul>\n</li>\n<li><p>获取企业列表</p>\n<ul>\n<li><p>获取数据源portalDataSource</p>\n</li>\n<li><p>获取企业用户信息结果集</p>\n<ul>\n<li>调用 <code>apiPortalV2Service.queryEnterpriseListWithWeChatOpenIdV2(openId,portalDataSource)</code> 方法得到结果集 result （Map集合）</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span><br>  se.uuid <span class=\"hljs-keyword\">AS</span> enterpriseUuid ,<br>  se. CODE <span class=\"hljs-keyword\">AS</span> enterpriseCode ,<br>  se. NAME <span class=\"hljs-keyword\">AS</span> enterpriseName ,<br>  se.data_source_id <span class=\"hljs-keyword\">AS</span> dataSourceCode ,<br>  se.role_id <span class=\"hljs-keyword\">AS</span> enterpriseRoleId ,<br>  se.group_id <span class=\"hljs-keyword\">AS</span> enterpriseGroupId ,<br>  se. <span class=\"hljs-keyword\">LANGUAGE</span> <span class=\"hljs-keyword\">AS</span> enterpriseLanguage ,<br>  swu.wx_avatar <span class=\"hljs-keyword\">AS</span> wxAvatar ,<br>  swu.wx_name <span class=\"hljs-keyword\">AS</span> wxName ,<br>  swu.wx_nick_name <span class=\"hljs-keyword\">AS</span> wxNickName ,<br>  sue.uuid <span class=\"hljs-keyword\">AS</span> userUuid ,<br>  sue.mobile <span class=\"hljs-keyword\">AS</span> userMobile ,<br>  su.user_name <span class=\"hljs-keyword\">AS</span> userName ,<br>  su.email <span class=\"hljs-keyword\">AS</span> userEmail ,<br>  sue.delete_status <span class=\"hljs-keyword\">AS</span> userIsDelete ,<br>  swu.wx_unique_token <span class=\"hljs-keyword\">AS</span> wxUniqueoken ,<br>  sue. STATUS <span class=\"hljs-keyword\">AS</span> userStatus ,<br>  sue.token <span class=\"hljs-keyword\">AS</span> userToken ,<br>  se.group_id <span class=\"hljs-keyword\">AS</span> groupId ,<br>  se.role_id <span class=\"hljs-keyword\">AS</span> roleId ,<br>  <span class=\"hljs-string\">&#x27;todo&#x27;</span> <span class=\"hljs-keyword\">AS</span> userGravatar ,<br>  <span class=\"hljs-string\">&#x27;todo&#x27;</span> <span class=\"hljs-keyword\">AS</span> groupName ,<br>  <span class=\"hljs-string\">&#x27;todo&#x27;</span> <span class=\"hljs-keyword\">AS</span> roleName ,<br>  su. PASSWORD <span class=\"hljs-keyword\">AS</span> userIdToken<br><span class=\"hljs-keyword\">FROM</span><br>  sup_wx_users <span class=\"hljs-keyword\">AS</span> swu<br><span class=\"hljs-keyword\">INNER</span> <span class=\"hljs-keyword\">JOIN</span> sup_user_enterprises <span class=\"hljs-keyword\">AS</span> sue <span class=\"hljs-keyword\">ON</span> sue.mobile <span class=\"hljs-operator\">=</span> swu.mobile<br><span class=\"hljs-keyword\">INNER</span> <span class=\"hljs-keyword\">JOIN</span> sup_enterprises <span class=\"hljs-keyword\">AS</span> se <span class=\"hljs-keyword\">ON</span> sue.data_enterprise_uuid <span class=\"hljs-operator\">=</span> se.uuid<br><span class=\"hljs-keyword\">INNER</span> <span class=\"hljs-keyword\">JOIN</span> sup_user <span class=\"hljs-keyword\">AS</span> su <span class=\"hljs-keyword\">ON</span> su.mobile <span class=\"hljs-operator\">=</span> swu.mobile<br><span class=\"hljs-keyword\">WHERE</span><br>  swu.wx_unique_token <span class=\"hljs-operator\">=</span> #&#123;openId&#125;<br><span class=\"hljs-keyword\">AND</span> sue.delete_status <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;0&#x27;</span><br><span class=\"hljs-keyword\">AND</span> swu.is_binding <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span><br><span class=\"hljs-keyword\">AND</span> swu.delete_status <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>验证结果集数据是否有效</p>\n<ul>\n<li>拿出 result 中 USER_STATUS 字段值， 不等于1则返回该账号已被停用错误信息</li>\n</ul>\n</li>\n<li><p>获取用户角色UUID</p>\n<ul>\n<li>遍历结果集 result ，每一次遍历的单体是 map </li>\n<li>调用 <code>apiUserLoginService.queryUserRoleUuidList(map.get(&quot;userUuid&quot;).toString(), portalDataSource)</code> 得到 roleList</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span><br>  aur.uuid <span class=\"hljs-keyword\">AS</span> roleUuid ,<br>  aur.role_name <span class=\"hljs-keyword\">AS</span> roleName<br><span class=\"hljs-keyword\">FROM</span><br>  sup_user_roles <span class=\"hljs-keyword\">AS</span> sur<br><span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">JOIN</span> app_user_roles <span class=\"hljs-keyword\">AS</span> aur <span class=\"hljs-keyword\">ON</span> aur.uuid <span class=\"hljs-operator\">=</span> sur.role_uuid<br><span class=\"hljs-keyword\">AND</span> sur.data_enterprise_uuid <span class=\"hljs-operator\">=</span> aur.data_enterprise_uuid<br><span class=\"hljs-keyword\">WHERE</span><br>  user_uuid <span class=\"hljs-operator\">=</span> #&#123;userUuid&#125;<br><span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span><br>  aur.uuid<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>向 map 中追加{“roleUuidList”:roleList,”roleUuids”:””}</li>\n<li>循环遍历 roleList ，将角色列表中的每一个角色的 roleUuid 拼接给 roleUuids ，中间用”，”隔开</li>\n<li>向 map 中追加 roleUuids</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>返回信息实体中封装结果集 result 并返回</p>\n</li>\n</ul>\n<h2 id=\"注册页\"><a href=\"#注册页\" class=\"headerlink\" title=\"注册页\"></a>注册页</h2><h3 id=\"业务流程图-1\"><a href=\"#业务流程图-1\" class=\"headerlink\" title=\"业务流程图\"></a>业务流程图</h3><p><a href=\"/application/syp-wxmp.html\">注册模块业务流程</a></p>\n<ol>\n<li>获取企业信息</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">get user/v1/enterprise-info<br>&#123;<br>  enterpriseCode: 企业编码<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>  业务流程：</p>\n<ul>\n<li><p>参数判断</p>\n<ul>\n<li>对 enterpriseCode  进行判空</li>\n</ul>\n</li>\n<li><p>获取数据源portalDataSource</p>\n</li>\n<li><p>获取企业信息</p>\n<ul>\n<li>调用 <code>apiUserLoginService.weChatAppletWithEnterpriseInfo</code> 方法获得企业信息结果集合 result</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span><br>  id <span class=\"hljs-keyword\">AS</span> enterpriseId ,<br>  uuid <span class=\"hljs-keyword\">AS</span> enterpriseUuid ,<br>  CODE <span class=\"hljs-keyword\">AS</span> enterpriseCode ,<br>  `<span class=\"hljs-keyword\">language</span>` ,<br>  `name` <span class=\"hljs-keyword\">AS</span> enterpriseName ,<br>  role_id <span class=\"hljs-keyword\">AS</span> enterpriseRoleId ,<br>  group_id <span class=\"hljs-keyword\">AS</span> enterpriseGroupId ,<br>  data_source_id <span class=\"hljs-keyword\">AS</span> enterpriseDataSourceId<br><span class=\"hljs-keyword\">FROM</span><br>  sup_enterprises<br><span class=\"hljs-keyword\">WHERE</span><br>  CODE <span class=\"hljs-operator\">=</span> #&#123;enterpriseCode&#125;<br>LIMIT <span class=\"hljs-number\">1</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>返回信息实体中封装结果集 result 并返回</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>扫码查询追踪码明细</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">get api/portal/wx/tracking-code/select-info<br>&#123;<br>  qrCodeUuid: 追踪码uuid<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>  业务流程：</p>\n<ul>\n<li><p>参数判断</p>\n<ul>\n<li>对 qrCodeUuid 进行判空</li>\n<li>判断 qrCodeUuid 的长度是否是32位，不是则返回追踪码UUID长度不符合规则</li>\n</ul>\n</li>\n<li><p>从redis获取数据</p>\n<ul>\n<li>key为 “portal:qr:code” ，hashkey为  “qrCodeUuid” ，得到字符串值 str</li>\n</ul>\n</li>\n<li><p>如果 str 不是空的则转为DataQrCode对象 dataQrCodeSelect ，如果是空的则将null赋值给 dataQrCodeSelect</p>\n</li>\n<li><p>如果 dataQrCodeSelect 为null</p>\n<ul>\n<li>获取数据源 portalDataSource</li>\n<li>调用 <code>apiWeChatService.queryDataQrCodeInfoWithUuid(qrCodeUuid, portalDataSource)</code> 获取结果赋值给 dataQrCodeSelect</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span><br>  id ,<br>  uuid ,<br>  enterprise_name ,<br>  enterprise_code ,<br>  enterprise_uuid ,<br>  business_uuid ,<br>  business_type ,<br>  business_name ,<br>  target_url ,<br>  data_json ,<br>  remark ,<br>  create_user ,<br>  update_user ,<br>  created_time ,<br>  updated_time<br><span class=\"hljs-keyword\">FROM</span><br>  sup_qr_code_business_data<br><span class=\"hljs-keyword\">WHERE</span><br>  uuid <span class=\"hljs-operator\">=</span> #&#123;uuid&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>如果 dataQrCodeSelect 不为空，则向redis中追加<ul>\n<li>key为 “portal:qr:code” ，hashkey为 qrCodeUuid，值为 JSONObject.toJSONString(dataQrCodeSelect)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>如果 dataQrCodeSelect 不为null</p>\n<ul>\n<li>调用 <code>dataQrCodeSelect.setDataJson(StringUtils.replace(dataQrCodeSelect.getDataJson(), &quot;\\\\&quot;, &quot;&quot;))</code> 方法调整dataQrCodeSelect中dataJson数据格式</li>\n</ul>\n</li>\n<li><p>返回信息实体中封装结果 dataQrCodeSelect 并返回</p>\n</li>\n</ul>\n<ol start=\"3\">\n<li>发送验证码</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">get user/v1/register-verification-code-v1<br>&#123;<br>  mobile: 手机号<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>  业务流程：</p>\n<ul>\n<li><p>参数判断</p>\n<ul>\n<li>对 mobile 进行判空</li>\n</ul>\n</li>\n<li><p>生成四位验证码</p>\n<ul>\n<li>调用 <code>RandomNumberGenerator.generateNumber()</code> 方法获得 code</li>\n<li>向结果集合 result 中追加 code</li>\n</ul>\n</li>\n<li><p>发送短信</p>\n<ul>\n<li>调用 <code>asyncUtils.SEND_SMS_WITH_REGISTER(mobile, SUCCESS_MSG, SUCCESS)</code></li>\n</ul>\n</li>\n<li><p>保存到redis中</p>\n<ul>\n<li>key为 (“portal:user:verificationCode:register:%s”,mobile)，值为 code</li>\n</ul>\n</li>\n<li><p>返回信息实体中封装结果集 result 并返回</p>\n</li>\n</ul>\n<h2 id=\"报表页\"><a href=\"#报表页\" class=\"headerlink\" title=\"报表页\"></a>报表页</h2><ol>\n<li>获取报表项菜单</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">get api/portal/wx/report-menu<br>&#123;<br>  enterpriseUuid: 企业uuid，<br>  roleUuids: 角色uuid<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>  ​业务流程：</p>\n<ul>\n<li><p>参数判断</p>\n<ul>\n<li>对roleUuids进行判空</li>\n</ul>\n</li>\n<li><p>从redis中获取报表项菜单列表</p>\n<ul>\n<li>key为 “portal:role:wx:report-menu”，hashkey为 “role-“ + roleUuids，得到JSON字符创 menuListStr</li>\n<li>如果 menuListStr 不为空，将其转为List集合 menuList，如果为空，则给List集合 menuList 赋值 null</li>\n</ul>\n</li>\n<li><p>如果 menuList 为空</p>\n<ul>\n<li>获取数据源 portalDataSource</li>\n<li>调用 <code>apiWeChatService.queryReportMenuByUserRoleUuids(roleUuids, portalDataSource)</code> 获得报表菜单集合 menuList</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span><br>  smr.id ,<br>  smr.uuid ,<br>  smr.category ,<br>  ifnull(smr.category_order , <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">AS</span> category_order ,<br>  smr.group_name ,<br>  ifnull(smr.group_order , <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">AS</span> group_order ,<br>  smr.obj_title <span class=\"hljs-keyword\">AS</span> `name` ,<br>  ifnull(smr.item_order , <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">AS</span> item_order ,<br>  smr.obj_type ,<br>  smr.obj_id ,<br>  smr.obj_title ,<br>  smr.obj_link ,<br>  smr.obj_cdn ,<br>  smr.obj_version ,<br>  smr.publicly ,<br>  smr.menu_type ,<br>  smr.option_user_num ,<br>  icon <span class=\"hljs-keyword\">AS</span> icon_link ,<br>  <span class=\"hljs-keyword\">CASE</span> smr.obj_type<br><span class=\"hljs-keyword\">WHEN</span> <span class=\"hljs-string\">&#x27;wxmp#config&#x27;</span> <span class=\"hljs-keyword\">THEN</span><br>  smc.home_path<br><span class=\"hljs-keyword\">WHEN</span> <span class=\"hljs-string\">&#x27;wxmp&#x27;</span> <span class=\"hljs-keyword\">THEN</span><br>  smr.home_path<br><span class=\"hljs-keyword\">ELSE</span><br>  <span class=\"hljs-string\">&#x27;&#x27;</span><br><span class=\"hljs-keyword\">END</span> <span class=\"hljs-keyword\">AS</span> home_path ,<br> smr.cdn_module ,<br> smr.cdn_version ,<br> smr.cdn_state ,<br> smr.report_id ,<br> smr.obj_link <span class=\"hljs-keyword\">AS</span> url_path<br><span class=\"hljs-keyword\">FROM</span><br>  sup_menus <span class=\"hljs-keyword\">AS</span> smr<br><span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">JOIN</span> sup_module_config <span class=\"hljs-keyword\">AS</span> smc <span class=\"hljs-keyword\">ON</span> smc.module_code <span class=\"hljs-operator\">=</span> smr.obj_id<br><span class=\"hljs-keyword\">WHERE</span><br>  smr.platform <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;wxmp&#x27;</span><br><span class=\"hljs-keyword\">AND</span> menu_category <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span><br><span class=\"hljs-keyword\">AND</span> smr.uuid <span class=\"hljs-keyword\">IN</span>(<br>  <span class=\"hljs-keyword\">SELECT</span><br>    menu_uuid<br>  <span class=\"hljs-keyword\">FROM</span><br>    app_user_role_resources<br>  <span class=\"hljs-keyword\">WHERE</span><br>    locate(<br>      role_uuid ,<br>      #&#123;roleUuids&#125;) <span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> delete_status <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;0&#x27;</span><br>    )<br><span class=\"hljs-keyword\">ORDER</span> <span class=\"hljs-keyword\">BY</span><br>  smr.category_order <span class=\"hljs-keyword\">ASC</span> ,<br>  smr.group_order <span class=\"hljs-keyword\">ASC</span> ,<br>  smr.item_order <span class=\"hljs-keyword\">ASC</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>如果 menuList 不为空，key为 “portal:role:wx:report-menu”，hashkey为”role-“ + roleUuids，向redis中追加值 JSONObject.toJSONString(menuList)</li>\n</ul>\n</li>\n<li><p>向返回实体信息中封装 menuList 并返回</p>\n</li>\n</ul>\n<h2 id=\"工具箱页\"><a href=\"#工具箱页\" class=\"headerlink\" title=\"工具箱页\"></a>工具箱页</h2><ol>\n<li>获取工具箱列表</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">get api/portal/wx/toolbox-menu<br>&#123;<br>  request： 请求，<br>  roleUuids:  用户角色uuid <br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>  业务流程：</p>\n<ul>\n<li><p>参数判断（ roleUuids 进行判空）</p>\n</li>\n<li><p>从redis中获取值 menuListStr</p>\n<ul>\n<li>key为 “portal:role:wx:toolbox-menu”</li>\n<li>hashkey为 “role-“ + roleUuids</li>\n</ul>\n</li>\n<li><p>将 menuListStr 转为菜单 menuList 集合</p>\n</li>\n<li><p>如果 menuList 是空的</p>\n<ul>\n<li>获取数据源 portalDataSource</li>\n<li>调用 <code>apiWeChatService.queryToolboxMenuByUserRoleUuids(roleUuids, portalDataSource)</code> 方法获取工具箱菜单列表 menuList</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span><br>  smt.id ,<br>  smt.uuid ,<br>  smt.category ,<br>  ifnull(smt.category_order , <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">AS</span> category_order ,<br>  smt.group_name ,<br>  ifnull(smt.group_order , <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">AS</span> group_order ,<br>  smt.obj_title <span class=\"hljs-keyword\">AS</span> `name` ,<br>  ifnull(smt.item_order , <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">AS</span> item_order ,<br>  smt.obj_title ,<br>  smt.menu_type ,<br>  smt.obj_type ,<br>  smt.obj_id ,<br>  smt.obj_link ,<br>  smt.obj_cdn ,<br>  smt.obj_version ,<br>  smt.report_id ,<br>  smt.url_path ,<br>  smt.icon <span class=\"hljs-keyword\">AS</span> icon_link ,<br>  smt.publicly ,<br>  smt.option_user_num ,<br>  <span class=\"hljs-keyword\">CASE</span> smt.obj_type<br><span class=\"hljs-keyword\">WHEN</span> <span class=\"hljs-string\">&#x27;wxmp#config&#x27;</span> <span class=\"hljs-keyword\">THEN</span><br>  smc.home_path<br><span class=\"hljs-keyword\">WHEN</span> <span class=\"hljs-string\">&#x27;wxmp&#x27;</span> <span class=\"hljs-keyword\">THEN</span><br>  smt.home_path<br><span class=\"hljs-keyword\">ELSE</span><br>  <span class=\"hljs-string\">&#x27;&#x27;</span><br><span class=\"hljs-keyword\">END</span> <span class=\"hljs-keyword\">AS</span> home_path ,<br> smt.obj_title <span class=\"hljs-keyword\">AS</span> `name` ,<br> smt.cdn_module ,<br> smt.cdn_version ,<br> smt.cdn_state<br><span class=\"hljs-keyword\">FROM</span><br>  sup_menus <span class=\"hljs-keyword\">AS</span> smt<br><span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">JOIN</span> sup_module_config <span class=\"hljs-keyword\">AS</span> smc <span class=\"hljs-keyword\">ON</span> smc.module_code <span class=\"hljs-operator\">=</span> smt.obj_id<br><span class=\"hljs-keyword\">WHERE</span><br>  smt.platform <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;wxmp&#x27;</span><br><span class=\"hljs-keyword\">AND</span> menu_category <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span><br><span class=\"hljs-keyword\">AND</span> smt.uuid <span class=\"hljs-keyword\">IN</span>(<br>  <span class=\"hljs-keyword\">SELECT</span><br>    menu_uuid<br>  <span class=\"hljs-keyword\">FROM</span><br>    app_user_role_resources<br>  <span class=\"hljs-keyword\">WHERE</span><br>    locate(<br>      role_uuid ,<br>      #&#123;roleUuids&#125;) <span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> delete_status <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;0&#x27;</span><br>    )<br><span class=\"hljs-keyword\">ORDER</span> <span class=\"hljs-keyword\">BY</span><br>  smt.category_order <span class=\"hljs-keyword\">ASC</span> ,<br>  smt.group_order <span class=\"hljs-keyword\">ASC</span> ,<br>  smt.item_order <span class=\"hljs-keyword\">ASC</span>    <br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>解析渲染 menuList 数据</li>\n<li>以key为 “portal:role:wx:toolbox-menu” ，hashkey为 “role-“ + roleUuids ，值为 menuList 向redis中追加</li>\n<li>返回实体信息中封装 menuList 并返回</li>\n</ul>\n</li>\n<li><p>如果menuList非空，返回实体信息中封装 menuList 并返回</p>\n</li>\n</ul>\n<h2 id=\"我的\"><a href=\"#我的\" class=\"headerlink\" title=\"[我的]\"></a>[我的]</h2><h3 id=\"查询-formId-数量\"><a href=\"#查询-formId-数量\" class=\"headerlink\" title=\"查询 formId 数量\"></a>查询 formId 数量</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">get api/portal/wx/formId-num<br>&#123;<br>  enterpriseUuid: 企业UUID，<br>  mobile: 手机号<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>  业务流程：</p>\n<ul>\n<li><p>参数判断</p>\n<ul>\n<li>对 mobile 进行参数判空</li>\n</ul>\n</li>\n<li><p>获取用户信息集合</p>\n<ul>\n<li>调用 <code>apiWeChatService.portalQueryFormIdByMobile(mobile, selectPortalDataSourceUtils.dynamicSelectPortalDataSource(FUNCTION_F10L, DB_TYPE_SLAVE))</code> 获得用户信息集合 userMap</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span><br>  wx_avatar <span class=\"hljs-keyword\">AS</span> wxAvatar ,<br>  wx_name <span class=\"hljs-keyword\">AS</span> wxName ,<br>  wx_nick_name <span class=\"hljs-keyword\">AS</span> wxNickName ,<br>  wx_unique_token <span class=\"hljs-keyword\">AS</span> wxUniqueToken ,<br>  mobile ,<br>  enterprise_code <span class=\"hljs-keyword\">AS</span> enterpriseCode ,<br>  enterprise_uuid <span class=\"hljs-keyword\">AS</span> enterpriseUuid ,<br>  is_binding <span class=\"hljs-keyword\">AS</span> isBinding<br><span class=\"hljs-keyword\">FROM</span><br>  sup_wx_users<br><span class=\"hljs-keyword\">WHERE</span><br>  mobile <span class=\"hljs-operator\">=</span> #&#123;mobile&#125; <span class=\"hljs-keyword\">and</span> is_binding <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> delete_status <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span><br>LIMIT <span class=\"hljs-number\">1</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>如果 userMap 不为空</p>\n<ul>\n<li>取 userMap 中的 “wxuniqueToken” 赋值给字符串 openId</li>\n<li>以 “portal:user:wxFormId” 为key从redis中获取集合 map</li>\n<li>如果 map 不为空<ul>\n<li>遍历 map ，每一次的遍历单体对象是 entry</li>\n<li>将 entry.getKey() 赋值给 hashKey ，entry.getValue() 赋值给 value </li>\n<li>将 hashKey 用 “@” 切割得到字符串数据 hashKeys</li>\n<li>如果 hashKeys 长度大于1，且数组第一个元素和 openId 相等，获取当前时间毫秒值 nowTime </li>\n<li>如果 nowTime 小于 hashKeys 第二个元素的值或者 value 值不等于 “the formId is a mock one” ，计数器 count++ ，formIdArray添加值 value ，否则从redis中移除掉 key为 “portal:user:wxFormId” , hashKey为 entry.getKey() 的数据</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>向 userMap 中 put  (“userFormIdNum”, count) 和 (“formIdArray”, formIdArray)</p>\n</li>\n<li><p>在返回信息实体中封装 userMap 并返回</p>\n</li>\n</ul>\n<h3 id=\"获取企业管理列表\"><a href=\"#获取企业管理列表\" class=\"headerlink\" title=\"获取企业管理列表\"></a>获取企业管理列表</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">get api/portal/wx/enterprise-menu-list<br>&#123;<br>  enterpriseUuid：企业UUID，<br>  roleUuids: 角色UUID<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>  业务流程：</p>\n<ul>\n<li><p>参数判断</p>\n<ul>\n<li>对roleUuids进行判空</li>\n</ul>\n</li>\n<li><p>获取数据源 portalDataSource</p>\n</li>\n<li><p>获取企业管理列表</p>\n<ul>\n<li>调用 <code>apiWeChatService.queryEnterpriseMenuList(roleUuids, f10lSlaveDataSource)</code> 获得企业管理列表 menuList</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span><br>  t1.id ,<br>  t1.`name` <span class=\"hljs-keyword\">AS</span> title ,<br>  t1.description ,<br>  t1.group_name ,<br>  t1.obj_id ,<br>  t1.obj_type ,<br>  <span class=\"hljs-keyword\">CASE</span> t1.group_name<br><span class=\"hljs-keyword\">WHEN</span> <span class=\"hljs-string\">&#x27;基本信息&#x27;</span> <span class=\"hljs-keyword\">THEN</span><br>  <span class=\"hljs-string\">&#x27;sa&#x27;</span><br><span class=\"hljs-keyword\">WHEN</span> <span class=\"hljs-string\">&#x27;业务权限设置&#x27;</span> <span class=\"hljs-keyword\">THEN</span><br>  <span class=\"hljs-string\">&#x27;sb&#x27;</span><br><span class=\"hljs-keyword\">ELSE</span><br>  <span class=\"hljs-string\">&#x27;sc&#x27;</span><br><span class=\"hljs-keyword\">END</span> <span class=\"hljs-keyword\">AS</span> pid ,<br> <span class=\"hljs-keyword\">CASE</span><br><span class=\"hljs-keyword\">WHEN</span> t1.group_name <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;业务权限设置&#x27;</span> <span class=\"hljs-keyword\">THEN</span><br>  t1.parent_menu_uuid<br><span class=\"hljs-keyword\">ELSE</span><br>  <span class=\"hljs-string\">&#x27;&#x27;</span><br><span class=\"hljs-keyword\">END</span> <span class=\"hljs-keyword\">AS</span> uuid ,<br> <span class=\"hljs-keyword\">CASE</span> t1.obj_type<br><span class=\"hljs-keyword\">WHEN</span> <span class=\"hljs-string\">&#x27;wxmp#config&#x27;</span> <span class=\"hljs-keyword\">THEN</span><br>  t3.home_path<br><span class=\"hljs-keyword\">WHEN</span> <span class=\"hljs-string\">&#x27;wxmp&#x27;</span> <span class=\"hljs-keyword\">THEN</span><br>  t1.home_path<br><span class=\"hljs-keyword\">ELSE</span><br>  <span class=\"hljs-string\">&#x27;&#x27;</span><br><span class=\"hljs-keyword\">END</span> <span class=\"hljs-keyword\">AS</span> home_path<br><span class=\"hljs-keyword\">FROM</span><br>  sup_menus <span class=\"hljs-keyword\">AS</span> t1<br><span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">JOIN</span> app_user_role_resources <span class=\"hljs-keyword\">AS</span> t2 <span class=\"hljs-keyword\">ON</span> t1.uuid <span class=\"hljs-operator\">=</span> t2.menu_uuid<br><span class=\"hljs-keyword\">AND</span> t2.delete_status <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;0&#x27;</span><br><span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">JOIN</span> sup_module_config <span class=\"hljs-keyword\">AS</span> t3 <span class=\"hljs-keyword\">ON</span> t3.module_code <span class=\"hljs-operator\">=</span> t1.obj_id<br><span class=\"hljs-keyword\">WHERE</span><br>  t1.menu_category <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;2&#x27;</span><br><span class=\"hljs-keyword\">AND</span> FIND_IN_SET(<br>  t2.role_uuid ,<br>  #&#123;roleUuids&#125;)<br><br><span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span><br>  t1.group_name ,<br>  t1.`name`<br><span class=\"hljs-keyword\">ORDER</span> <span class=\"hljs-keyword\">BY</span><br>  pid ,<br>  t1.id<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>如果 menuList 不为空</p>\n<ul>\n<li>调用 <code>apiWeChatService.queryModulePageConfigList(f10lSlaveDataSource)</code> 获得页面设置列表 configList</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span><br>  module_code ,<br>  page_code ,<br>  page_type ,<br>  version<br><span class=\"hljs-keyword\">FROM</span><br>  sup_module_page_config<br><span class=\"hljs-keyword\">WHERE</span><br>  module_code <span class=\"hljs-keyword\">IS</span> <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span><br><span class=\"hljs-keyword\">AND</span> page_code <span class=\"hljs-keyword\">IS</span> <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span><br><span class=\"hljs-keyword\">AND</span> page_type <span class=\"hljs-keyword\">IS</span> <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span><br><span class=\"hljs-keyword\">AND</span> version <span class=\"hljs-keyword\">IS</span> <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p>遍历 menuList ，每一次遍历单体对象是 data ，如果 data.get(“obj_id”) 值为空，则向 objId 赋值为空，如果不为空，则将 data.get(“obj_id)” 转为字符串赋值给 objId </p>\n</li>\n<li><p>如果 configList 不为空，遍历它，每一次遍历单体对象是 ocnfig </p>\n<ul>\n<li>如果 <code>config.get(&quot;module_code&quot;).toString().equals(objId)</code>  ，就像hashMap中put (config.get(“page_code”).toString(), config.get(“page_type”) + “:” + config.get(“version”))</li>\n</ul>\n</li>\n<li><p>向 data 中put (“obj_config”, hashMap)</p>\n</li>\n</ul>\n</li>\n<li><p>向返回实体对象中 封装 menuList 并返回</p>\n</li>\n</ul>\n"},{"title":"Gitlab提交规范","type":"Gitlab提交规范","_content":"\n## 思维导图\n\n![Gitlab协作规范](/images/Gitlab协作规范.png)\n\n## 提交格式\n\n> type@version(scope): subject\n\n示例：`style@0.1.1/1(commit): 声明团队提交规范`\n字段解释：\n- type: 必写，可用下述标签: \n    - feat：新功能（feature） \n    - fix：修补 bug \n    - docs：文档（documentation） \n    - style： 格式（不影响代码运行的变动） \n    - refactor：重构（即不是新增功能，也不是修改 bug 的代码变动） \n    - perf：性能改善（A code change that improves performance）\n    - test：增加测试 \n    - chore：构建过程或辅助工具的变动 \n\n- version: 版本号，例 0.1.2/3\n    - 0: 产品版本，默认 0\n    - 1: 阶段版本，默认 1\n    - 2: 发布版本，默认 1，每次发布 +1\n    - 3: 提交版本，默认1，每次提交 +1\n\n- scope: 模块，本次提交代码关联的模块名称\n- subject: 日志，本次提交的业务说明，多条日志时使用分号 `;` 分隔\n\n## 项目应用\n\n项目根目录下会版本记录文件：`version.js` 或 `version.json`。\n\n- 开发人员每次提交时修改 `提交版本` +1\n- 项目助理每次发布时修改 `发布版本` +1\n\n## `gap` 命令\n\n\n1. 所有项目源码根目录下都有版本配置档 `version.json`\n\n```\n{\n    \"name\": \"胜因学院在线文档\",\n    \"major:description\": \"产品版本\",\n    \"minor:description\": \"业务版本\",\n    \"tiny:description\": \"线上版本，每次发布上线时 +1\",\n    \"commit:description\": \"开发版本，每次 commit 时 +1\",\n    \"major\": 0,\n    \"minor\": 1,\n    \"tiny\": 1,\n    \"commit\": 3,\n    \"pro_mini_version\": \"0.1.1\",\n    \"pro_version\": \"0.1.1/3\",\n    \"dev_version\": \"0.1.3\"\n}\n```\n\n2. 使用 `gap` 操作的 commit 行为都会修改 `version.json` 中 `commit` +1\n3. 所有项目都支持 `gap` 命令 `./tool.sh gap <type> <module> <message>`\n4. 若项目中未支持 `gap` 请联系管理员\n\n## Gitlab 请求合并\n\n1. 本地代码使用 `gap` 命令提交\n2. 打开并登录 [gitlab.idata.mobi](https://gitlab.idata.mobi)\n3. 点击页面 [Merge Request]，点击按钮 [New Merge Request]\n4. 选择自己的分支及要提交的目标分支\n    - 要提交的源码分支(Source Branch)，一般分支名称是自己名称\n    - 要提交的目标分支(Target Branch), 一般以 master 作为后续\n\n![gitlab-new-merge-request.png](/images/gitlab-new-merge-request.png)\n\n5. 依然按照上述的**提交格式**整理提交描述，`type` 为 `merge`。\n6. 选择该负责项目的代码审核人(Assignee)。\n\n![gitlab-new-merge-request-submit.png](/images/gitlab-new-merge-request-submit.png)\n\n7. 提交后(Submit merge request) 后，微信通知项目负责审核代码。","source":"developer/style-guide/gitlab.md","raw":"---\ntitle: Gitlab提交规范\ntype: Gitlab提交规范\n---\n\n## 思维导图\n\n![Gitlab协作规范](/images/Gitlab协作规范.png)\n\n## 提交格式\n\n> type@version(scope): subject\n\n示例：`style@0.1.1/1(commit): 声明团队提交规范`\n字段解释：\n- type: 必写，可用下述标签: \n    - feat：新功能（feature） \n    - fix：修补 bug \n    - docs：文档（documentation） \n    - style： 格式（不影响代码运行的变动） \n    - refactor：重构（即不是新增功能，也不是修改 bug 的代码变动） \n    - perf：性能改善（A code change that improves performance）\n    - test：增加测试 \n    - chore：构建过程或辅助工具的变动 \n\n- version: 版本号，例 0.1.2/3\n    - 0: 产品版本，默认 0\n    - 1: 阶段版本，默认 1\n    - 2: 发布版本，默认 1，每次发布 +1\n    - 3: 提交版本，默认1，每次提交 +1\n\n- scope: 模块，本次提交代码关联的模块名称\n- subject: 日志，本次提交的业务说明，多条日志时使用分号 `;` 分隔\n\n## 项目应用\n\n项目根目录下会版本记录文件：`version.js` 或 `version.json`。\n\n- 开发人员每次提交时修改 `提交版本` +1\n- 项目助理每次发布时修改 `发布版本` +1\n\n## `gap` 命令\n\n\n1. 所有项目源码根目录下都有版本配置档 `version.json`\n\n```\n{\n    \"name\": \"胜因学院在线文档\",\n    \"major:description\": \"产品版本\",\n    \"minor:description\": \"业务版本\",\n    \"tiny:description\": \"线上版本，每次发布上线时 +1\",\n    \"commit:description\": \"开发版本，每次 commit 时 +1\",\n    \"major\": 0,\n    \"minor\": 1,\n    \"tiny\": 1,\n    \"commit\": 3,\n    \"pro_mini_version\": \"0.1.1\",\n    \"pro_version\": \"0.1.1/3\",\n    \"dev_version\": \"0.1.3\"\n}\n```\n\n2. 使用 `gap` 操作的 commit 行为都会修改 `version.json` 中 `commit` +1\n3. 所有项目都支持 `gap` 命令 `./tool.sh gap <type> <module> <message>`\n4. 若项目中未支持 `gap` 请联系管理员\n\n## Gitlab 请求合并\n\n1. 本地代码使用 `gap` 命令提交\n2. 打开并登录 [gitlab.idata.mobi](https://gitlab.idata.mobi)\n3. 点击页面 [Merge Request]，点击按钮 [New Merge Request]\n4. 选择自己的分支及要提交的目标分支\n    - 要提交的源码分支(Source Branch)，一般分支名称是自己名称\n    - 要提交的目标分支(Target Branch), 一般以 master 作为后续\n\n![gitlab-new-merge-request.png](/images/gitlab-new-merge-request.png)\n\n5. 依然按照上述的**提交格式**整理提交描述，`type` 为 `merge`。\n6. 选择该负责项目的代码审核人(Assignee)。\n\n![gitlab-new-merge-request-submit.png](/images/gitlab-new-merge-request-submit.png)\n\n7. 提交后(Submit merge request) 后，微信通知项目负责审核代码。","date":"2023-06-10T10:49:05.487Z","updated":"2023-06-10T10:49:05.487Z","path":"developer/style-guide/gitlab.html","comments":1,"layout":"page","_id":"clipw1dd3000qoix5fzaf28ux","content":"<h2 id=\"思维导图\"><a href=\"#思维导图\" class=\"headerlink\" title=\"思维导图\"></a>思维导图</h2><p><img src=\"/images/Gitlab%E5%8D%8F%E4%BD%9C%E8%A7%84%E8%8C%83.png\" alt=\"Gitlab协作规范\"></p>\n<h2 id=\"提交格式\"><a href=\"#提交格式\" class=\"headerlink\" title=\"提交格式\"></a>提交格式</h2><blockquote>\n<p>type@version(scope): subject</p>\n</blockquote>\n<p>示例：<code>style@0.1.1/1(commit): 声明团队提交规范</code><br>字段解释：</p>\n<ul>\n<li><p>type: 必写，可用下述标签: </p>\n<ul>\n<li>feat：新功能（feature） </li>\n<li>fix：修补 bug </li>\n<li>docs：文档（documentation） </li>\n<li>style： 格式（不影响代码运行的变动） </li>\n<li>refactor：重构（即不是新增功能，也不是修改 bug 的代码变动） </li>\n<li>perf：性能改善（A code change that improves performance）</li>\n<li>test：增加测试 </li>\n<li>chore：构建过程或辅助工具的变动</li>\n</ul>\n</li>\n<li><p>version: 版本号，例 0.1.2&#x2F;3</p>\n<ul>\n<li>0: 产品版本，默认 0</li>\n<li>1: 阶段版本，默认 1</li>\n<li>2: 发布版本，默认 1，每次发布 +1</li>\n<li>3: 提交版本，默认1，每次提交 +1</li>\n</ul>\n</li>\n<li><p>scope: 模块，本次提交代码关联的模块名称</p>\n</li>\n<li><p>subject: 日志，本次提交的业务说明，多条日志时使用分号 <code>;</code> 分隔</p>\n</li>\n</ul>\n<h2 id=\"项目应用\"><a href=\"#项目应用\" class=\"headerlink\" title=\"项目应用\"></a>项目应用</h2><p>项目根目录下会版本记录文件：<code>version.js</code> 或 <code>version.json</code>。</p>\n<ul>\n<li>开发人员每次提交时修改 <code>提交版本</code> +1</li>\n<li>项目助理每次发布时修改 <code>发布版本</code> +1</li>\n</ul>\n<h2 id=\"gap-命令\"><a href=\"#gap-命令\" class=\"headerlink\" title=\"gap 命令\"></a><code>gap</code> 命令</h2><ol>\n<li>所有项目源码根目录下都有版本配置档 <code>version.json</code></li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&#123;<br>    &quot;name&quot;: &quot;胜因学院在线文档&quot;,<br>    &quot;major:description&quot;: &quot;产品版本&quot;,<br>    &quot;minor:description&quot;: &quot;业务版本&quot;,<br>    &quot;tiny:description&quot;: &quot;线上版本，每次发布上线时 +1&quot;,<br>    &quot;commit:description&quot;: &quot;开发版本，每次 commit 时 +1&quot;,<br>    &quot;major&quot;: 0,<br>    &quot;minor&quot;: 1,<br>    &quot;tiny&quot;: 1,<br>    &quot;commit&quot;: 3,<br>    &quot;pro_mini_version&quot;: &quot;0.1.1&quot;,<br>    &quot;pro_version&quot;: &quot;0.1.1/3&quot;,<br>    &quot;dev_version&quot;: &quot;0.1.3&quot;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用 <code>gap</code> 操作的 commit 行为都会修改 <code>version.json</code> 中 <code>commit</code> +1</li>\n<li>所有项目都支持 <code>gap</code> 命令 <code>./tool.sh gap &lt;type&gt; &lt;module&gt; &lt;message&gt;</code></li>\n<li>若项目中未支持 <code>gap</code> 请联系管理员</li>\n</ol>\n<h2 id=\"Gitlab-请求合并\"><a href=\"#Gitlab-请求合并\" class=\"headerlink\" title=\"Gitlab 请求合并\"></a>Gitlab 请求合并</h2><ol>\n<li>本地代码使用 <code>gap</code> 命令提交</li>\n<li>打开并登录 <a href=\"https://gitlab.idata.mobi/\">gitlab.idata.mobi</a></li>\n<li>点击页面 [Merge Request]，点击按钮 [New Merge Request]</li>\n<li>选择自己的分支及要提交的目标分支<ul>\n<li>要提交的源码分支(Source Branch)，一般分支名称是自己名称</li>\n<li>要提交的目标分支(Target Branch), 一般以 master 作为后续</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"/images/gitlab-new-merge-request.png\" alt=\"gitlab-new-merge-request.png\"></p>\n<ol start=\"5\">\n<li>依然按照上述的<strong>提交格式</strong>整理提交描述，<code>type</code> 为 <code>merge</code>。</li>\n<li>选择该负责项目的代码审核人(Assignee)。</li>\n</ol>\n<p><img src=\"/images/gitlab-new-merge-request-submit.png\" alt=\"gitlab-new-merge-request-submit.png\"></p>\n<ol start=\"7\">\n<li>提交后(Submit merge request) 后，微信通知项目负责审核代码。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"思维导图\"><a href=\"#思维导图\" class=\"headerlink\" title=\"思维导图\"></a>思维导图</h2><p><img src=\"/images/Gitlab%E5%8D%8F%E4%BD%9C%E8%A7%84%E8%8C%83.png\" alt=\"Gitlab协作规范\"></p>\n<h2 id=\"提交格式\"><a href=\"#提交格式\" class=\"headerlink\" title=\"提交格式\"></a>提交格式</h2><blockquote>\n<p>type@version(scope): subject</p>\n</blockquote>\n<p>示例：<code>style@0.1.1/1(commit): 声明团队提交规范</code><br>字段解释：</p>\n<ul>\n<li><p>type: 必写，可用下述标签: </p>\n<ul>\n<li>feat：新功能（feature） </li>\n<li>fix：修补 bug </li>\n<li>docs：文档（documentation） </li>\n<li>style： 格式（不影响代码运行的变动） </li>\n<li>refactor：重构（即不是新增功能，也不是修改 bug 的代码变动） </li>\n<li>perf：性能改善（A code change that improves performance）</li>\n<li>test：增加测试 </li>\n<li>chore：构建过程或辅助工具的变动</li>\n</ul>\n</li>\n<li><p>version: 版本号，例 0.1.2&#x2F;3</p>\n<ul>\n<li>0: 产品版本，默认 0</li>\n<li>1: 阶段版本，默认 1</li>\n<li>2: 发布版本，默认 1，每次发布 +1</li>\n<li>3: 提交版本，默认1，每次提交 +1</li>\n</ul>\n</li>\n<li><p>scope: 模块，本次提交代码关联的模块名称</p>\n</li>\n<li><p>subject: 日志，本次提交的业务说明，多条日志时使用分号 <code>;</code> 分隔</p>\n</li>\n</ul>\n<h2 id=\"项目应用\"><a href=\"#项目应用\" class=\"headerlink\" title=\"项目应用\"></a>项目应用</h2><p>项目根目录下会版本记录文件：<code>version.js</code> 或 <code>version.json</code>。</p>\n<ul>\n<li>开发人员每次提交时修改 <code>提交版本</code> +1</li>\n<li>项目助理每次发布时修改 <code>发布版本</code> +1</li>\n</ul>\n<h2 id=\"gap-命令\"><a href=\"#gap-命令\" class=\"headerlink\" title=\"gap 命令\"></a><code>gap</code> 命令</h2><ol>\n<li>所有项目源码根目录下都有版本配置档 <code>version.json</code></li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&#123;<br>    &quot;name&quot;: &quot;胜因学院在线文档&quot;,<br>    &quot;major:description&quot;: &quot;产品版本&quot;,<br>    &quot;minor:description&quot;: &quot;业务版本&quot;,<br>    &quot;tiny:description&quot;: &quot;线上版本，每次发布上线时 +1&quot;,<br>    &quot;commit:description&quot;: &quot;开发版本，每次 commit 时 +1&quot;,<br>    &quot;major&quot;: 0,<br>    &quot;minor&quot;: 1,<br>    &quot;tiny&quot;: 1,<br>    &quot;commit&quot;: 3,<br>    &quot;pro_mini_version&quot;: &quot;0.1.1&quot;,<br>    &quot;pro_version&quot;: &quot;0.1.1/3&quot;,<br>    &quot;dev_version&quot;: &quot;0.1.3&quot;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用 <code>gap</code> 操作的 commit 行为都会修改 <code>version.json</code> 中 <code>commit</code> +1</li>\n<li>所有项目都支持 <code>gap</code> 命令 <code>./tool.sh gap &lt;type&gt; &lt;module&gt; &lt;message&gt;</code></li>\n<li>若项目中未支持 <code>gap</code> 请联系管理员</li>\n</ol>\n<h2 id=\"Gitlab-请求合并\"><a href=\"#Gitlab-请求合并\" class=\"headerlink\" title=\"Gitlab 请求合并\"></a>Gitlab 请求合并</h2><ol>\n<li>本地代码使用 <code>gap</code> 命令提交</li>\n<li>打开并登录 <a href=\"https://gitlab.idata.mobi/\">gitlab.idata.mobi</a></li>\n<li>点击页面 [Merge Request]，点击按钮 [New Merge Request]</li>\n<li>选择自己的分支及要提交的目标分支<ul>\n<li>要提交的源码分支(Source Branch)，一般分支名称是自己名称</li>\n<li>要提交的目标分支(Target Branch), 一般以 master 作为后续</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"/images/gitlab-new-merge-request.png\" alt=\"gitlab-new-merge-request.png\"></p>\n<ol start=\"5\">\n<li>依然按照上述的<strong>提交格式</strong>整理提交描述，<code>type</code> 为 <code>merge</code>。</li>\n<li>选择该负责项目的代码审核人(Assignee)。</li>\n</ol>\n<p><img src=\"/images/gitlab-new-merge-request-submit.png\" alt=\"gitlab-new-merge-request-submit.png\"></p>\n<ol start=\"7\">\n<li>提交后(Submit merge request) 后，微信通知项目负责审核代码。</li>\n</ol>\n"},{"title":"CDN 运维规范","type":"CDN 运维规范","_content":"\n## 文档大纲\n\n- 域名分配\n- 通用资源-维护方式\n- 非通用资源-维护方式\n\n## 域名分配\n\n- 胜因学院正式环境: https://cdn.idata.mobi\n- 胜因学院开发环境: https://cdn-dev.idata.mobi\n\n## 通用资源-维护方式\n\nWebassets项目链接: https://gitlab.idata.mobi/shengyiplus/syp-webassets\n\n1. 下载静态资源，合规命名(文件名称、版本号)\n2. 维护静态资源至对应目录\n3. 使用CDN链接访问在线资源\n\n### 路由/文件命名规范\n\n路径规范后的目标:\n1. 统一管理、监控、同步、备份\n2. 统一 CDN访问链接\n\n路由/文件命名规范:\n- 目录命名使用复数(数据库业务表命名同理)\n- 路由或文件命名中空格使用横线, 比如 wxmp-icons\n- 组合词不需要分割，比如 `webassets`/`datasource`\n\n路由/路径分类：\n1. 菜单图标统一维护(各平台中访问菜单图标的在线链接)\n2. 小程序/TV/Pc/App应用内图标，分别维护(方便独立升级)\n3. 头像\n\n```\n# 目录分配\n/data/work/www/webassets/\n├── javascripts // javascript 文件\n├── stylesheets // css/fonts 文件\n├── enterprises // 企业命名空间\n├── gravatars // 头像\n├── feedbacks // 问题反馈截图或视频\n├── menu-icons // 菜单图标\n├── app-icons // app 应用图标\n├── pc-icons // pc 应用图标\n├── tv-icons // tv 应用图标\n└── wxmp-icons // 微信小程序图标\n```\n\n### CDN & HTTP/HTTPS\n\n1. 所有服务默认支持 HTTPS, 即使用 HTTPS 线上测试\n2. 禁止使用外部资源，统一维护在本项目内\n\n- [胜因学院-静态资源](https://cdn.idata.mobi/webassets.html)\n- [胜因研发室-静态资源](https://cdn-dev.idata.mobi/webassets.html)\n\n### 代码提交规范\n\n```\n$ ./tool.sh gap -h\n示例:\n$ ./tool.sh gap <type> <module> <message>\n```\n\n## 非通用资源-维护方式\n\n1. `https://cdn.idata.mobi` 对应的根目录: `/data/work/www`\n\n    示例: /data/work/www/webassets/wxmp-icons/btn_inf.png 对应的访问链接: https://cdn.idata.mobi/webassets/wxmp-icons/btn_inf.png\n\n2. 静态资源(图片/字段/javascript/stylesheets) 对应存储目录: `/data/work/www/webassets`\n\n    与 `webassets` 并列的是其他 Web 项目：\n\n    ```\n    $tree -L 1 /data/work/www/\n    /data/work/www/\n    ├── webassets\n    ├── frontend-apps\n    ├── index.html\n    ├── providerAPI\n    ├── tomcatAPI\n    ├── tomcatSuperAdmin\n    ├── vapelab -> /data/work/www/frontend-apps/repository/vapelab@0.1.23\n    └── web-portal -> /data/work/www/frontend-apps/repository/web-portal@0.2.10\n    ````\n\n## 运维规范(webassets)-上传操作\n\n```\n$ tree -L 1 /data/work/www/webassets\n/data/work/www/webassets\n├── enterprises\n├── gravatars\n├── menu-icons\n├── vapelab // VapeLab 平台静态资源\n└── wxmp-icons\n\n$ tree -N -L 1 /data/work/www/webassets/vapelab/\n/data/work/www/webassets/vapelab/\n├── ALD\n├── CERALL-CL6-CL7\n├── DM\n└── EXEEK-XK\n```\n\n1. VapeLab 平台静态资源上传至目录 /data/work/www/webassets/vapelab/\n2. 目录、文件名称间不要有空格、`&|\\` 等特殊符号\n3. 上传命令\n\n    ```\n    # Mac 本机\n    $ rsync --progress -ar CERALL-CL6-CL7 sy-devops-user@syp.idata.mobi:/data/work/www/webassets/vapelab\n    # Syp-Pro\n    $ find  /data/work/www/webassets/vapelab/CERALL-CL6-CL7/ -type f         \n    /data/work/www/webassets/vapelab/CERALL-CL6-CL7/详情图/画板-1.png      \n    /data/work/www/webassets/vapelab/CERALL-CL6-CL7/详情图/画板-2.png  \n    /data/work/www/webassets/vapelab/CERALL-CL6-CL7/详情图/画板-3.png\n    # 访问链接\n    https://cdn.idata.mobi/webassets/vapelab/CERALL-CL6-CL7/详情图/画板-1.png     \n    https://cdn.idata.mobi/webassets/vapelab/CERALL-CL6-CL7/详情图/画板-2.png    \n    https://cdn.idata.mobi/webassets/vapelab/CERALL-CL6-CL7/详情图/画板-3.png  \n    ```","source":"developer/style-guide/cdn.md","raw":"---\ntitle: CDN 运维规范\ntype: CDN 运维规范\n---\n\n## 文档大纲\n\n- 域名分配\n- 通用资源-维护方式\n- 非通用资源-维护方式\n\n## 域名分配\n\n- 胜因学院正式环境: https://cdn.idata.mobi\n- 胜因学院开发环境: https://cdn-dev.idata.mobi\n\n## 通用资源-维护方式\n\nWebassets项目链接: https://gitlab.idata.mobi/shengyiplus/syp-webassets\n\n1. 下载静态资源，合规命名(文件名称、版本号)\n2. 维护静态资源至对应目录\n3. 使用CDN链接访问在线资源\n\n### 路由/文件命名规范\n\n路径规范后的目标:\n1. 统一管理、监控、同步、备份\n2. 统一 CDN访问链接\n\n路由/文件命名规范:\n- 目录命名使用复数(数据库业务表命名同理)\n- 路由或文件命名中空格使用横线, 比如 wxmp-icons\n- 组合词不需要分割，比如 `webassets`/`datasource`\n\n路由/路径分类：\n1. 菜单图标统一维护(各平台中访问菜单图标的在线链接)\n2. 小程序/TV/Pc/App应用内图标，分别维护(方便独立升级)\n3. 头像\n\n```\n# 目录分配\n/data/work/www/webassets/\n├── javascripts // javascript 文件\n├── stylesheets // css/fonts 文件\n├── enterprises // 企业命名空间\n├── gravatars // 头像\n├── feedbacks // 问题反馈截图或视频\n├── menu-icons // 菜单图标\n├── app-icons // app 应用图标\n├── pc-icons // pc 应用图标\n├── tv-icons // tv 应用图标\n└── wxmp-icons // 微信小程序图标\n```\n\n### CDN & HTTP/HTTPS\n\n1. 所有服务默认支持 HTTPS, 即使用 HTTPS 线上测试\n2. 禁止使用外部资源，统一维护在本项目内\n\n- [胜因学院-静态资源](https://cdn.idata.mobi/webassets.html)\n- [胜因研发室-静态资源](https://cdn-dev.idata.mobi/webassets.html)\n\n### 代码提交规范\n\n```\n$ ./tool.sh gap -h\n示例:\n$ ./tool.sh gap <type> <module> <message>\n```\n\n## 非通用资源-维护方式\n\n1. `https://cdn.idata.mobi` 对应的根目录: `/data/work/www`\n\n    示例: /data/work/www/webassets/wxmp-icons/btn_inf.png 对应的访问链接: https://cdn.idata.mobi/webassets/wxmp-icons/btn_inf.png\n\n2. 静态资源(图片/字段/javascript/stylesheets) 对应存储目录: `/data/work/www/webassets`\n\n    与 `webassets` 并列的是其他 Web 项目：\n\n    ```\n    $tree -L 1 /data/work/www/\n    /data/work/www/\n    ├── webassets\n    ├── frontend-apps\n    ├── index.html\n    ├── providerAPI\n    ├── tomcatAPI\n    ├── tomcatSuperAdmin\n    ├── vapelab -> /data/work/www/frontend-apps/repository/vapelab@0.1.23\n    └── web-portal -> /data/work/www/frontend-apps/repository/web-portal@0.2.10\n    ````\n\n## 运维规范(webassets)-上传操作\n\n```\n$ tree -L 1 /data/work/www/webassets\n/data/work/www/webassets\n├── enterprises\n├── gravatars\n├── menu-icons\n├── vapelab // VapeLab 平台静态资源\n└── wxmp-icons\n\n$ tree -N -L 1 /data/work/www/webassets/vapelab/\n/data/work/www/webassets/vapelab/\n├── ALD\n├── CERALL-CL6-CL7\n├── DM\n└── EXEEK-XK\n```\n\n1. VapeLab 平台静态资源上传至目录 /data/work/www/webassets/vapelab/\n2. 目录、文件名称间不要有空格、`&|\\` 等特殊符号\n3. 上传命令\n\n    ```\n    # Mac 本机\n    $ rsync --progress -ar CERALL-CL6-CL7 sy-devops-user@syp.idata.mobi:/data/work/www/webassets/vapelab\n    # Syp-Pro\n    $ find  /data/work/www/webassets/vapelab/CERALL-CL6-CL7/ -type f         \n    /data/work/www/webassets/vapelab/CERALL-CL6-CL7/详情图/画板-1.png      \n    /data/work/www/webassets/vapelab/CERALL-CL6-CL7/详情图/画板-2.png  \n    /data/work/www/webassets/vapelab/CERALL-CL6-CL7/详情图/画板-3.png\n    # 访问链接\n    https://cdn.idata.mobi/webassets/vapelab/CERALL-CL6-CL7/详情图/画板-1.png     \n    https://cdn.idata.mobi/webassets/vapelab/CERALL-CL6-CL7/详情图/画板-2.png    \n    https://cdn.idata.mobi/webassets/vapelab/CERALL-CL6-CL7/详情图/画板-3.png  \n    ```","date":"2023-06-10T10:49:05.487Z","updated":"2023-06-10T10:49:05.487Z","path":"developer/style-guide/cdn.html","comments":1,"layout":"page","_id":"clipw1dd3000roix54qa4f9j2","content":"<h2 id=\"文档大纲\"><a href=\"#文档大纲\" class=\"headerlink\" title=\"文档大纲\"></a>文档大纲</h2><ul>\n<li>域名分配</li>\n<li>通用资源-维护方式</li>\n<li>非通用资源-维护方式</li>\n</ul>\n<h2 id=\"域名分配\"><a href=\"#域名分配\" class=\"headerlink\" title=\"域名分配\"></a>域名分配</h2><ul>\n<li>胜因学院正式环境: <a href=\"https://cdn.idata.mobi/\">https://cdn.idata.mobi</a></li>\n<li>胜因学院开发环境: <a href=\"https://cdn-dev.idata.mobi/\">https://cdn-dev.idata.mobi</a></li>\n</ul>\n<h2 id=\"通用资源-维护方式\"><a href=\"#通用资源-维护方式\" class=\"headerlink\" title=\"通用资源-维护方式\"></a>通用资源-维护方式</h2><p>Webassets项目链接: <a href=\"https://gitlab.idata.mobi/shengyiplus/syp-webassets\">https://gitlab.idata.mobi/shengyiplus/syp-webassets</a></p>\n<ol>\n<li>下载静态资源，合规命名(文件名称、版本号)</li>\n<li>维护静态资源至对应目录</li>\n<li>使用CDN链接访问在线资源</li>\n</ol>\n<h3 id=\"路由-x2F-文件命名规范\"><a href=\"#路由-x2F-文件命名规范\" class=\"headerlink\" title=\"路由&#x2F;文件命名规范\"></a>路由&#x2F;文件命名规范</h3><p>路径规范后的目标:</p>\n<ol>\n<li>统一管理、监控、同步、备份</li>\n<li>统一 CDN访问链接</li>\n</ol>\n<p>路由&#x2F;文件命名规范:</p>\n<ul>\n<li>目录命名使用复数(数据库业务表命名同理)</li>\n<li>路由或文件命名中空格使用横线, 比如 wxmp-icons</li>\n<li>组合词不需要分割，比如 <code>webassets</code>&#x2F;<code>datasource</code></li>\n</ul>\n<p>路由&#x2F;路径分类：</p>\n<ol>\n<li>菜单图标统一维护(各平台中访问菜单图标的在线链接)</li>\n<li>小程序&#x2F;TV&#x2F;Pc&#x2F;App应用内图标，分别维护(方便独立升级)</li>\n<li>头像</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\"># 目录分配<br>/data/work/www/webassets/<br>├── javascripts // javascript 文件<br>├── stylesheets // css/fonts 文件<br>├── enterprises // 企业命名空间<br>├── gravatars // 头像<br>├── feedbacks // 问题反馈截图或视频<br>├── menu-icons // 菜单图标<br>├── app-icons // app 应用图标<br>├── pc-icons // pc 应用图标<br>├── tv-icons // tv 应用图标<br>└── wxmp-icons // 微信小程序图标<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"CDN-amp-HTTP-x2F-HTTPS\"><a href=\"#CDN-amp-HTTP-x2F-HTTPS\" class=\"headerlink\" title=\"CDN &amp; HTTP&#x2F;HTTPS\"></a>CDN &amp; HTTP&#x2F;HTTPS</h3><ol>\n<li>所有服务默认支持 HTTPS, 即使用 HTTPS 线上测试</li>\n<li>禁止使用外部资源，统一维护在本项目内</li>\n</ol>\n<ul>\n<li><a href=\"https://cdn.idata.mobi/webassets.html\">胜因学院-静态资源</a></li>\n<li><a href=\"https://cdn-dev.idata.mobi/webassets.html\">胜因研发室-静态资源</a></li>\n</ul>\n<h3 id=\"代码提交规范\"><a href=\"#代码提交规范\" class=\"headerlink\" title=\"代码提交规范\"></a>代码提交规范</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">$ ./tool.sh gap -h<br>示例:<br>$ ./tool.sh gap &lt;type&gt; &lt;module&gt; &lt;message&gt;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"非通用资源-维护方式\"><a href=\"#非通用资源-维护方式\" class=\"headerlink\" title=\"非通用资源-维护方式\"></a>非通用资源-维护方式</h2><ol>\n<li><p><code>https://cdn.idata.mobi</code> 对应的根目录: <code>/data/work/www</code></p>\n<p> 示例: &#x2F;data&#x2F;work&#x2F;www&#x2F;webassets&#x2F;wxmp-icons&#x2F;btn_inf.png 对应的访问链接: <a href=\"https://cdn.idata.mobi/webassets/wxmp-icons/btn_inf.png\">https://cdn.idata.mobi/webassets/wxmp-icons/btn_inf.png</a></p>\n</li>\n<li><p>静态资源(图片&#x2F;字段&#x2F;javascript&#x2F;stylesheets) 对应存储目录: <code>/data/work/www/webassets</code></p>\n<p> 与 <code>webassets</code> 并列的是其他 Web 项目：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">    $tree -L 1 /data/work/www/<br>    /data/work/www/<br>    ├── webassets<br>    ├── frontend-apps<br>    ├── index.html<br>    ├── providerAPI<br>    ├── tomcatAPI<br>    ├── tomcatSuperAdmin<br>    ├── vapelab -&gt; /data/work/www/frontend-apps/repository/vapelab@0.1.23<br>    └── web-portal -&gt; /data/work/www/frontend-apps/repository/web-portal@0.2.10<br>    ````<br><br>## 运维规范(webassets)-上传操作<br><br></code></pre></td></tr></table></figure></li>\n</ol>\n<p>$ tree -L 1 &#x2F;data&#x2F;work&#x2F;www&#x2F;webassets<br>&#x2F;data&#x2F;work&#x2F;www&#x2F;webassets<br>├── enterprises<br>├── gravatars<br>├── menu-icons<br>├── vapelab &#x2F;&#x2F; VapeLab 平台静态资源<br>└── wxmp-icons</p>\n<p>$ tree -N -L 1 &#x2F;data&#x2F;work&#x2F;www&#x2F;webassets&#x2F;vapelab&#x2F;<br>&#x2F;data&#x2F;work&#x2F;www&#x2F;webassets&#x2F;vapelab&#x2F;<br>├── ALD<br>├── CERALL-CL6-CL7<br>├── DM<br>└── EXEEK-XK</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\"><br>1. VapeLab 平台静态资源上传至目录 /data/work/www/webassets/vapelab/<br>2. 目录、文件名称间不要有空格、`&amp;|\\` 等特殊符号<br>3. 上传命令<br><br></code></pre></td></tr></table></figure>\n<pre><code># Mac 本机\n$ rsync --progress -ar CERALL-CL6-CL7 sy-devops-user@syp.idata.mobi:/data/work/www/webassets/vapelab\n# Syp-Pro\n$ find  /data/work/www/webassets/vapelab/CERALL-CL6-CL7/ -type f         \n/data/work/www/webassets/vapelab/CERALL-CL6-CL7/详情图/画板-1.png      \n/data/work/www/webassets/vapelab/CERALL-CL6-CL7/详情图/画板-2.png  \n/data/work/www/webassets/vapelab/CERALL-CL6-CL7/详情图/画板-3.png\n# 访问链接\nhttps://cdn.idata.mobi/webassets/vapelab/CERALL-CL6-CL7/详情图/画板-1.png     \nhttps://cdn.idata.mobi/webassets/vapelab/CERALL-CL6-CL7/详情图/画板-2.png    \nhttps://cdn.idata.mobi/webassets/vapelab/CERALL-CL6-CL7/详情图/画板-3.png  \n```\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"文档大纲\"><a href=\"#文档大纲\" class=\"headerlink\" title=\"文档大纲\"></a>文档大纲</h2><ul>\n<li>域名分配</li>\n<li>通用资源-维护方式</li>\n<li>非通用资源-维护方式</li>\n</ul>\n<h2 id=\"域名分配\"><a href=\"#域名分配\" class=\"headerlink\" title=\"域名分配\"></a>域名分配</h2><ul>\n<li>胜因学院正式环境: <a href=\"https://cdn.idata.mobi/\">https://cdn.idata.mobi</a></li>\n<li>胜因学院开发环境: <a href=\"https://cdn-dev.idata.mobi/\">https://cdn-dev.idata.mobi</a></li>\n</ul>\n<h2 id=\"通用资源-维护方式\"><a href=\"#通用资源-维护方式\" class=\"headerlink\" title=\"通用资源-维护方式\"></a>通用资源-维护方式</h2><p>Webassets项目链接: <a href=\"https://gitlab.idata.mobi/shengyiplus/syp-webassets\">https://gitlab.idata.mobi/shengyiplus/syp-webassets</a></p>\n<ol>\n<li>下载静态资源，合规命名(文件名称、版本号)</li>\n<li>维护静态资源至对应目录</li>\n<li>使用CDN链接访问在线资源</li>\n</ol>\n<h3 id=\"路由-x2F-文件命名规范\"><a href=\"#路由-x2F-文件命名规范\" class=\"headerlink\" title=\"路由&#x2F;文件命名规范\"></a>路由&#x2F;文件命名规范</h3><p>路径规范后的目标:</p>\n<ol>\n<li>统一管理、监控、同步、备份</li>\n<li>统一 CDN访问链接</li>\n</ol>\n<p>路由&#x2F;文件命名规范:</p>\n<ul>\n<li>目录命名使用复数(数据库业务表命名同理)</li>\n<li>路由或文件命名中空格使用横线, 比如 wxmp-icons</li>\n<li>组合词不需要分割，比如 <code>webassets</code>&#x2F;<code>datasource</code></li>\n</ul>\n<p>路由&#x2F;路径分类：</p>\n<ol>\n<li>菜单图标统一维护(各平台中访问菜单图标的在线链接)</li>\n<li>小程序&#x2F;TV&#x2F;Pc&#x2F;App应用内图标，分别维护(方便独立升级)</li>\n<li>头像</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\"># 目录分配<br>/data/work/www/webassets/<br>├── javascripts // javascript 文件<br>├── stylesheets // css/fonts 文件<br>├── enterprises // 企业命名空间<br>├── gravatars // 头像<br>├── feedbacks // 问题反馈截图或视频<br>├── menu-icons // 菜单图标<br>├── app-icons // app 应用图标<br>├── pc-icons // pc 应用图标<br>├── tv-icons // tv 应用图标<br>└── wxmp-icons // 微信小程序图标<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"CDN-amp-HTTP-x2F-HTTPS\"><a href=\"#CDN-amp-HTTP-x2F-HTTPS\" class=\"headerlink\" title=\"CDN &amp; HTTP&#x2F;HTTPS\"></a>CDN &amp; HTTP&#x2F;HTTPS</h3><ol>\n<li>所有服务默认支持 HTTPS, 即使用 HTTPS 线上测试</li>\n<li>禁止使用外部资源，统一维护在本项目内</li>\n</ol>\n<ul>\n<li><a href=\"https://cdn.idata.mobi/webassets.html\">胜因学院-静态资源</a></li>\n<li><a href=\"https://cdn-dev.idata.mobi/webassets.html\">胜因研发室-静态资源</a></li>\n</ul>\n<h3 id=\"代码提交规范\"><a href=\"#代码提交规范\" class=\"headerlink\" title=\"代码提交规范\"></a>代码提交规范</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">$ ./tool.sh gap -h<br>示例:<br>$ ./tool.sh gap &lt;type&gt; &lt;module&gt; &lt;message&gt;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"非通用资源-维护方式\"><a href=\"#非通用资源-维护方式\" class=\"headerlink\" title=\"非通用资源-维护方式\"></a>非通用资源-维护方式</h2><ol>\n<li><p><code>https://cdn.idata.mobi</code> 对应的根目录: <code>/data/work/www</code></p>\n<p> 示例: &#x2F;data&#x2F;work&#x2F;www&#x2F;webassets&#x2F;wxmp-icons&#x2F;btn_inf.png 对应的访问链接: <a href=\"https://cdn.idata.mobi/webassets/wxmp-icons/btn_inf.png\">https://cdn.idata.mobi/webassets/wxmp-icons/btn_inf.png</a></p>\n</li>\n<li><p>静态资源(图片&#x2F;字段&#x2F;javascript&#x2F;stylesheets) 对应存储目录: <code>/data/work/www/webassets</code></p>\n<p> 与 <code>webassets</code> 并列的是其他 Web 项目：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">    $tree -L 1 /data/work/www/<br>    /data/work/www/<br>    ├── webassets<br>    ├── frontend-apps<br>    ├── index.html<br>    ├── providerAPI<br>    ├── tomcatAPI<br>    ├── tomcatSuperAdmin<br>    ├── vapelab -&gt; /data/work/www/frontend-apps/repository/vapelab@0.1.23<br>    └── web-portal -&gt; /data/work/www/frontend-apps/repository/web-portal@0.2.10<br>    ````<br><br>## 运维规范(webassets)-上传操作<br><br></code></pre></td></tr></table></figure></li>\n</ol>\n<p>$ tree -L 1 &#x2F;data&#x2F;work&#x2F;www&#x2F;webassets<br>&#x2F;data&#x2F;work&#x2F;www&#x2F;webassets<br>├── enterprises<br>├── gravatars<br>├── menu-icons<br>├── vapelab &#x2F;&#x2F; VapeLab 平台静态资源<br>└── wxmp-icons</p>\n<p>$ tree -N -L 1 &#x2F;data&#x2F;work&#x2F;www&#x2F;webassets&#x2F;vapelab&#x2F;<br>&#x2F;data&#x2F;work&#x2F;www&#x2F;webassets&#x2F;vapelab&#x2F;<br>├── ALD<br>├── CERALL-CL6-CL7<br>├── DM<br>└── EXEEK-XK</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\"><br>1. VapeLab 平台静态资源上传至目录 /data/work/www/webassets/vapelab/<br>2. 目录、文件名称间不要有空格、`&amp;|\\` 等特殊符号<br>3. 上传命令<br><br></code></pre></td></tr></table></figure>\n<pre><code># Mac 本机\n$ rsync --progress -ar CERALL-CL6-CL7 sy-devops-user@syp.idata.mobi:/data/work/www/webassets/vapelab\n# Syp-Pro\n$ find  /data/work/www/webassets/vapelab/CERALL-CL6-CL7/ -type f         \n/data/work/www/webassets/vapelab/CERALL-CL6-CL7/详情图/画板-1.png      \n/data/work/www/webassets/vapelab/CERALL-CL6-CL7/详情图/画板-2.png  \n/data/work/www/webassets/vapelab/CERALL-CL6-CL7/详情图/画板-3.png\n# 访问链接\nhttps://cdn.idata.mobi/webassets/vapelab/CERALL-CL6-CL7/详情图/画板-1.png     \nhttps://cdn.idata.mobi/webassets/vapelab/CERALL-CL6-CL7/详情图/画板-2.png    \nhttps://cdn.idata.mobi/webassets/vapelab/CERALL-CL6-CL7/详情图/画板-3.png  \n```\n</code></pre>\n"},{"title":"If-Else 优化方案","type":"If-Else 优化方案","_content":"\n当代码已经复杂到难以维护的程度之后，只能狠下心重构优化。那，有什么方案可以优雅的优化掉这些多余的if/else?\n\n## 1. 提前return\n\n这是判断条件取反的做法，代码在逻辑表达上会更清晰，看下面代码：\n\n```\nif (condition) {\n // do something\n} else {\n  return xxx;\n}\n```\n\n其实，每次看到上面这种代码，心里就抓痒，完全可以先判断`!condition`，干掉`else`。\n\n```\nif (!condition) {\n  return xxx;\n \n} \n// do something\n```\n\n## 2. 策略模式\n\n有这么一种场景，根据不同的参数走不同的逻辑，其实这种场景很常见。最一般的实现：\n\n```\nif (strategy.equals(\"fast\")) {\n  // 快速执行\n} else if (strategy.equals(\"normal\")) {\n  // 正常执行\n} else if (strategy.equals(\"smooth\")) {\n  // 平滑执行\n} else if (strategy.equals(\"slow\")) {\n  // 慢慢执行\n}\n```\n\n看上面代码，有4种策略，有两种优化方案。\n\n### 2.1 多态\n\n```\ninterface Strategy {\n  void run() throws Exception;\n}\n\nclass FastStrategy implements Strategy {\n    @Override\n    void run() throws Exception {\n        // 快速执行逻辑\n    }\n}\n\nclass NormalStrategy implements Strategy {\n    @Override\n    void run() throws Exception {\n        // 正常执行逻辑\n    }\n}\n\nclass SmoothStrategy implements Strategy {\n    @Override\n    void run() throws Exception {\n        // 平滑执行逻辑\n    }\n}\n\nclass SlowStrategy implements Strategy {\n    @Override\n    void run() throws Exception {\n        // 慢速执行逻辑\n    }\n}\n```\n\n具体策略对象存放在一个Map中，优化后的实现\n\n```\nStrategy strategy = map.get(param);\nstrategy.run();\n```\n\n上面这种优化方案有一个弊端，为了能够快速拿到对应的策略实现，需要map对象来保存策略，当添加一个新策略的时候，还需要手动添加到map中，容易被忽略。\n\n### 2.2 枚举\n\n发现很多同学不知道在枚举中可以定义方法，这里定义一个表示状态的枚举，另外可以实现一个run方法。\n\n```\npublic enum Status {\n    NEW(0) {\n      @Override\n      void run() {\n        //do something  \n      }\n    },\n    RUNNABLE(1) {\n      @Override\n       void run() {\n         //do something  \n      }\n    };\n\n    public int statusCode;\n\n    abstract void run();\n\n    Status(int statusCode){\n        this.statusCode = statusCode;\n    }\n}\n```\n\n重新定义策略枚举\n\n```\npublic enum Strategy {\n    FAST {\n      @Override\n      void run() {\n        //do something  \n      }\n    },\n    NORMAL {\n      @Override\n       void run() {\n         //do something  \n      }\n    },\n\n    SMOOTH {\n      @Override\n       void run() {\n         //do something  \n      }\n    },\n\n    SLOW {\n      @Override\n       void run() {\n         //do something  \n      }\n    };\n    abstract void run();\n}\n\nStrategy strategy = Strategy.valueOf(param);\nstrategy.run();\n```\n\n## 3. 学会使用 Optional\n\nOptional主要用于非空判断，由于是jdk8新特性，所以使用的不是特别多，但是用起来真的爽。使用之前：\n\n```\nif (user == null) {\n    //do action 1\n} else {\n    //do action2\n}\n```\n\n如果登录用户为空，执行action1，否则执行action 2，使用Optional优化之后，让非空校验更加优雅，间接的减少if操作\n\n```\nOptional<User> userOptional = Optional.ofNullable(user);\nuserOptional.map(action1).orElse(action2);\n```\n\n## 4. 数组小技巧\n\n来自google解释，这是一种编程模式，叫做表驱动法，本质是从表里查询信息来代替逻辑语句，比如有这么一个场景，通过月份来获取当月的天数，仅作为案例演示，数据并不严谨。一般的实现：\n\n```\nint getDays(int month){\n    if (month == 1)  return 31;\n    if (month == 2)  return 29;\n    if (month == 3)  return 31;\n    if (month == 4)  return 30;\n    if (month == 5)  return 31;\n    if (month == 6)  return 30;\n    if (month == 7)  return 31;\n    if (month == 8)  return 31;\n    if (month == 9)  return 30;\n    if (month == 10)  return 31;\n    if (month == 11)  return 30;\n    if (month == 12)  return 31;\n}\n优化后的代码\n\n```\nint monthDays[12] = {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\nint getDays(int month){\n    return monthDays[--month];\n}\n```\n\n结束if else作为每种编程语言都不可或缺的条件语句，在编程时会大量的用到。一般建议嵌套不要超过三层，如果一段代码存在过多的if else嵌套，代码的可读性就会急速下降，后期维护难度也大大提高。\n\n摘自: [优化代码中大量的if/else，你有什么方案?](https://www.zhihu.com/question/344856665s)","source":"developer/style-guide/if-else-optimize-solutions.md","raw":"---\ntitle: If-Else 优化方案\ntype: If-Else 优化方案\n---\n\n当代码已经复杂到难以维护的程度之后，只能狠下心重构优化。那，有什么方案可以优雅的优化掉这些多余的if/else?\n\n## 1. 提前return\n\n这是判断条件取反的做法，代码在逻辑表达上会更清晰，看下面代码：\n\n```\nif (condition) {\n // do something\n} else {\n  return xxx;\n}\n```\n\n其实，每次看到上面这种代码，心里就抓痒，完全可以先判断`!condition`，干掉`else`。\n\n```\nif (!condition) {\n  return xxx;\n \n} \n// do something\n```\n\n## 2. 策略模式\n\n有这么一种场景，根据不同的参数走不同的逻辑，其实这种场景很常见。最一般的实现：\n\n```\nif (strategy.equals(\"fast\")) {\n  // 快速执行\n} else if (strategy.equals(\"normal\")) {\n  // 正常执行\n} else if (strategy.equals(\"smooth\")) {\n  // 平滑执行\n} else if (strategy.equals(\"slow\")) {\n  // 慢慢执行\n}\n```\n\n看上面代码，有4种策略，有两种优化方案。\n\n### 2.1 多态\n\n```\ninterface Strategy {\n  void run() throws Exception;\n}\n\nclass FastStrategy implements Strategy {\n    @Override\n    void run() throws Exception {\n        // 快速执行逻辑\n    }\n}\n\nclass NormalStrategy implements Strategy {\n    @Override\n    void run() throws Exception {\n        // 正常执行逻辑\n    }\n}\n\nclass SmoothStrategy implements Strategy {\n    @Override\n    void run() throws Exception {\n        // 平滑执行逻辑\n    }\n}\n\nclass SlowStrategy implements Strategy {\n    @Override\n    void run() throws Exception {\n        // 慢速执行逻辑\n    }\n}\n```\n\n具体策略对象存放在一个Map中，优化后的实现\n\n```\nStrategy strategy = map.get(param);\nstrategy.run();\n```\n\n上面这种优化方案有一个弊端，为了能够快速拿到对应的策略实现，需要map对象来保存策略，当添加一个新策略的时候，还需要手动添加到map中，容易被忽略。\n\n### 2.2 枚举\n\n发现很多同学不知道在枚举中可以定义方法，这里定义一个表示状态的枚举，另外可以实现一个run方法。\n\n```\npublic enum Status {\n    NEW(0) {\n      @Override\n      void run() {\n        //do something  \n      }\n    },\n    RUNNABLE(1) {\n      @Override\n       void run() {\n         //do something  \n      }\n    };\n\n    public int statusCode;\n\n    abstract void run();\n\n    Status(int statusCode){\n        this.statusCode = statusCode;\n    }\n}\n```\n\n重新定义策略枚举\n\n```\npublic enum Strategy {\n    FAST {\n      @Override\n      void run() {\n        //do something  \n      }\n    },\n    NORMAL {\n      @Override\n       void run() {\n         //do something  \n      }\n    },\n\n    SMOOTH {\n      @Override\n       void run() {\n         //do something  \n      }\n    },\n\n    SLOW {\n      @Override\n       void run() {\n         //do something  \n      }\n    };\n    abstract void run();\n}\n\nStrategy strategy = Strategy.valueOf(param);\nstrategy.run();\n```\n\n## 3. 学会使用 Optional\n\nOptional主要用于非空判断，由于是jdk8新特性，所以使用的不是特别多，但是用起来真的爽。使用之前：\n\n```\nif (user == null) {\n    //do action 1\n} else {\n    //do action2\n}\n```\n\n如果登录用户为空，执行action1，否则执行action 2，使用Optional优化之后，让非空校验更加优雅，间接的减少if操作\n\n```\nOptional<User> userOptional = Optional.ofNullable(user);\nuserOptional.map(action1).orElse(action2);\n```\n\n## 4. 数组小技巧\n\n来自google解释，这是一种编程模式，叫做表驱动法，本质是从表里查询信息来代替逻辑语句，比如有这么一个场景，通过月份来获取当月的天数，仅作为案例演示，数据并不严谨。一般的实现：\n\n```\nint getDays(int month){\n    if (month == 1)  return 31;\n    if (month == 2)  return 29;\n    if (month == 3)  return 31;\n    if (month == 4)  return 30;\n    if (month == 5)  return 31;\n    if (month == 6)  return 30;\n    if (month == 7)  return 31;\n    if (month == 8)  return 31;\n    if (month == 9)  return 30;\n    if (month == 10)  return 31;\n    if (month == 11)  return 30;\n    if (month == 12)  return 31;\n}\n优化后的代码\n\n```\nint monthDays[12] = {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\nint getDays(int month){\n    return monthDays[--month];\n}\n```\n\n结束if else作为每种编程语言都不可或缺的条件语句，在编程时会大量的用到。一般建议嵌套不要超过三层，如果一段代码存在过多的if else嵌套，代码的可读性就会急速下降，后期维护难度也大大提高。\n\n摘自: [优化代码中大量的if/else，你有什么方案?](https://www.zhihu.com/question/344856665s)","date":"2023-06-10T10:49:05.487Z","updated":"2023-06-10T10:49:05.487Z","path":"developer/style-guide/if-else-optimize-solutions.html","comments":1,"layout":"page","_id":"clipw1dd4000soix59lje7ky2","content":"<p>当代码已经复杂到难以维护的程度之后，只能狠下心重构优化。那，有什么方案可以优雅的优化掉这些多余的if&#x2F;else?</p>\n<h2 id=\"1-提前return\"><a href=\"#1-提前return\" class=\"headerlink\" title=\"1. 提前return\"></a>1. 提前return</h2><p>这是判断条件取反的做法，代码在逻辑表达上会更清晰，看下面代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">if (condition) &#123;<br> // do something<br>&#125; else &#123;<br>  return xxx;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>其实，每次看到上面这种代码，心里就抓痒，完全可以先判断<code>!condition</code>，干掉<code>else</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">if (!condition) &#123;<br>  return xxx;<br> <br>&#125; <br>// do something<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-策略模式\"><a href=\"#2-策略模式\" class=\"headerlink\" title=\"2. 策略模式\"></a>2. 策略模式</h2><p>有这么一种场景，根据不同的参数走不同的逻辑，其实这种场景很常见。最一般的实现：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">if (strategy.equals(&quot;fast&quot;)) &#123;<br>  // 快速执行<br>&#125; else if (strategy.equals(&quot;normal&quot;)) &#123;<br>  // 正常执行<br>&#125; else if (strategy.equals(&quot;smooth&quot;)) &#123;<br>  // 平滑执行<br>&#125; else if (strategy.equals(&quot;slow&quot;)) &#123;<br>  // 慢慢执行<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>看上面代码，有4种策略，有两种优化方案。</p>\n<h3 id=\"2-1-多态\"><a href=\"#2-1-多态\" class=\"headerlink\" title=\"2.1 多态\"></a>2.1 多态</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">interface Strategy &#123;<br>  void run() throws Exception;<br>&#125;<br><br>class FastStrategy implements Strategy &#123;<br>    @Override<br>    void run() throws Exception &#123;<br>        // 快速执行逻辑<br>    &#125;<br>&#125;<br><br>class NormalStrategy implements Strategy &#123;<br>    @Override<br>    void run() throws Exception &#123;<br>        // 正常执行逻辑<br>    &#125;<br>&#125;<br><br>class SmoothStrategy implements Strategy &#123;<br>    @Override<br>    void run() throws Exception &#123;<br>        // 平滑执行逻辑<br>    &#125;<br>&#125;<br><br>class SlowStrategy implements Strategy &#123;<br>    @Override<br>    void run() throws Exception &#123;<br>        // 慢速执行逻辑<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>具体策略对象存放在一个Map中，优化后的实现</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">Strategy strategy = map.get(param);<br>strategy.run();<br></code></pre></td></tr></table></figure>\n\n<p>上面这种优化方案有一个弊端，为了能够快速拿到对应的策略实现，需要map对象来保存策略，当添加一个新策略的时候，还需要手动添加到map中，容易被忽略。</p>\n<h3 id=\"2-2-枚举\"><a href=\"#2-2-枚举\" class=\"headerlink\" title=\"2.2 枚举\"></a>2.2 枚举</h3><p>发现很多同学不知道在枚举中可以定义方法，这里定义一个表示状态的枚举，另外可以实现一个run方法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">public enum Status &#123;<br>    NEW(0) &#123;<br>      @Override<br>      void run() &#123;<br>        //do something  <br>      &#125;<br>    &#125;,<br>    RUNNABLE(1) &#123;<br>      @Override<br>       void run() &#123;<br>         //do something  <br>      &#125;<br>    &#125;;<br><br>    public int statusCode;<br><br>    abstract void run();<br><br>    Status(int statusCode)&#123;<br>        this.statusCode = statusCode;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>重新定义策略枚举</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">public enum Strategy &#123;<br>    FAST &#123;<br>      @Override<br>      void run() &#123;<br>        //do something  <br>      &#125;<br>    &#125;,<br>    NORMAL &#123;<br>      @Override<br>       void run() &#123;<br>         //do something  <br>      &#125;<br>    &#125;,<br><br>    SMOOTH &#123;<br>      @Override<br>       void run() &#123;<br>         //do something  <br>      &#125;<br>    &#125;,<br><br>    SLOW &#123;<br>      @Override<br>       void run() &#123;<br>         //do something  <br>      &#125;<br>    &#125;;<br>    abstract void run();<br>&#125;<br><br>Strategy strategy = Strategy.valueOf(param);<br>strategy.run();<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-学会使用-Optional\"><a href=\"#3-学会使用-Optional\" class=\"headerlink\" title=\"3. 学会使用 Optional\"></a>3. 学会使用 Optional</h2><p>Optional主要用于非空判断，由于是jdk8新特性，所以使用的不是特别多，但是用起来真的爽。使用之前：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">if (user == null) &#123;<br>    //do action 1<br>&#125; else &#123;<br>    //do action2<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>如果登录用户为空，执行action1，否则执行action 2，使用Optional优化之后，让非空校验更加优雅，间接的减少if操作</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">Optional&lt;User&gt; userOptional = Optional.ofNullable(user);<br>userOptional.map(action1).orElse(action2);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"4-数组小技巧\"><a href=\"#4-数组小技巧\" class=\"headerlink\" title=\"4. 数组小技巧\"></a>4. 数组小技巧</h2><p>来自google解释，这是一种编程模式，叫做表驱动法，本质是从表里查询信息来代替逻辑语句，比如有这么一个场景，通过月份来获取当月的天数，仅作为案例演示，数据并不严谨。一般的实现：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">int getDays(int month)&#123;<br>    if (month == 1)  return 31;<br>    if (month == 2)  return 29;<br>    if (month == 3)  return 31;<br>    if (month == 4)  return 30;<br>    if (month == 5)  return 31;<br>    if (month == 6)  return 30;<br>    if (month == 7)  return 31;<br>    if (month == 8)  return 31;<br>    if (month == 9)  return 30;<br>    if (month == 10)  return 31;<br>    if (month == 11)  return 30;<br>    if (month == 12)  return 31;<br>&#125;<br>优化后的代码<br><br></code></pre></td></tr></table></figure>\n<p>int monthDays[12] &#x3D; {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};<br>int getDays(int month){<br>    return monthDays[–month];<br>}</p>\n<pre><code>\n结束if else作为每种编程语言都不可或缺的条件语句，在编程时会大量的用到。一般建议嵌套不要超过三层，如果一段代码存在过多的if else嵌套，代码的可读性就会急速下降，后期维护难度也大大提高。\n\n摘自: [优化代码中大量的if/else，你有什么方案?](https://www.zhihu.com/question/344856665s)\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>当代码已经复杂到难以维护的程度之后，只能狠下心重构优化。那，有什么方案可以优雅的优化掉这些多余的if&#x2F;else?</p>\n<h2 id=\"1-提前return\"><a href=\"#1-提前return\" class=\"headerlink\" title=\"1. 提前return\"></a>1. 提前return</h2><p>这是判断条件取反的做法，代码在逻辑表达上会更清晰，看下面代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">if (condition) &#123;<br> // do something<br>&#125; else &#123;<br>  return xxx;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>其实，每次看到上面这种代码，心里就抓痒，完全可以先判断<code>!condition</code>，干掉<code>else</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">if (!condition) &#123;<br>  return xxx;<br> <br>&#125; <br>// do something<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-策略模式\"><a href=\"#2-策略模式\" class=\"headerlink\" title=\"2. 策略模式\"></a>2. 策略模式</h2><p>有这么一种场景，根据不同的参数走不同的逻辑，其实这种场景很常见。最一般的实现：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">if (strategy.equals(&quot;fast&quot;)) &#123;<br>  // 快速执行<br>&#125; else if (strategy.equals(&quot;normal&quot;)) &#123;<br>  // 正常执行<br>&#125; else if (strategy.equals(&quot;smooth&quot;)) &#123;<br>  // 平滑执行<br>&#125; else if (strategy.equals(&quot;slow&quot;)) &#123;<br>  // 慢慢执行<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>看上面代码，有4种策略，有两种优化方案。</p>\n<h3 id=\"2-1-多态\"><a href=\"#2-1-多态\" class=\"headerlink\" title=\"2.1 多态\"></a>2.1 多态</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">interface Strategy &#123;<br>  void run() throws Exception;<br>&#125;<br><br>class FastStrategy implements Strategy &#123;<br>    @Override<br>    void run() throws Exception &#123;<br>        // 快速执行逻辑<br>    &#125;<br>&#125;<br><br>class NormalStrategy implements Strategy &#123;<br>    @Override<br>    void run() throws Exception &#123;<br>        // 正常执行逻辑<br>    &#125;<br>&#125;<br><br>class SmoothStrategy implements Strategy &#123;<br>    @Override<br>    void run() throws Exception &#123;<br>        // 平滑执行逻辑<br>    &#125;<br>&#125;<br><br>class SlowStrategy implements Strategy &#123;<br>    @Override<br>    void run() throws Exception &#123;<br>        // 慢速执行逻辑<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>具体策略对象存放在一个Map中，优化后的实现</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">Strategy strategy = map.get(param);<br>strategy.run();<br></code></pre></td></tr></table></figure>\n\n<p>上面这种优化方案有一个弊端，为了能够快速拿到对应的策略实现，需要map对象来保存策略，当添加一个新策略的时候，还需要手动添加到map中，容易被忽略。</p>\n<h3 id=\"2-2-枚举\"><a href=\"#2-2-枚举\" class=\"headerlink\" title=\"2.2 枚举\"></a>2.2 枚举</h3><p>发现很多同学不知道在枚举中可以定义方法，这里定义一个表示状态的枚举，另外可以实现一个run方法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">public enum Status &#123;<br>    NEW(0) &#123;<br>      @Override<br>      void run() &#123;<br>        //do something  <br>      &#125;<br>    &#125;,<br>    RUNNABLE(1) &#123;<br>      @Override<br>       void run() &#123;<br>         //do something  <br>      &#125;<br>    &#125;;<br><br>    public int statusCode;<br><br>    abstract void run();<br><br>    Status(int statusCode)&#123;<br>        this.statusCode = statusCode;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>重新定义策略枚举</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">public enum Strategy &#123;<br>    FAST &#123;<br>      @Override<br>      void run() &#123;<br>        //do something  <br>      &#125;<br>    &#125;,<br>    NORMAL &#123;<br>      @Override<br>       void run() &#123;<br>         //do something  <br>      &#125;<br>    &#125;,<br><br>    SMOOTH &#123;<br>      @Override<br>       void run() &#123;<br>         //do something  <br>      &#125;<br>    &#125;,<br><br>    SLOW &#123;<br>      @Override<br>       void run() &#123;<br>         //do something  <br>      &#125;<br>    &#125;;<br>    abstract void run();<br>&#125;<br><br>Strategy strategy = Strategy.valueOf(param);<br>strategy.run();<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-学会使用-Optional\"><a href=\"#3-学会使用-Optional\" class=\"headerlink\" title=\"3. 学会使用 Optional\"></a>3. 学会使用 Optional</h2><p>Optional主要用于非空判断，由于是jdk8新特性，所以使用的不是特别多，但是用起来真的爽。使用之前：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">if (user == null) &#123;<br>    //do action 1<br>&#125; else &#123;<br>    //do action2<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>如果登录用户为空，执行action1，否则执行action 2，使用Optional优化之后，让非空校验更加优雅，间接的减少if操作</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">Optional&lt;User&gt; userOptional = Optional.ofNullable(user);<br>userOptional.map(action1).orElse(action2);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"4-数组小技巧\"><a href=\"#4-数组小技巧\" class=\"headerlink\" title=\"4. 数组小技巧\"></a>4. 数组小技巧</h2><p>来自google解释，这是一种编程模式，叫做表驱动法，本质是从表里查询信息来代替逻辑语句，比如有这么一个场景，通过月份来获取当月的天数，仅作为案例演示，数据并不严谨。一般的实现：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">int getDays(int month)&#123;<br>    if (month == 1)  return 31;<br>    if (month == 2)  return 29;<br>    if (month == 3)  return 31;<br>    if (month == 4)  return 30;<br>    if (month == 5)  return 31;<br>    if (month == 6)  return 30;<br>    if (month == 7)  return 31;<br>    if (month == 8)  return 31;<br>    if (month == 9)  return 30;<br>    if (month == 10)  return 31;<br>    if (month == 11)  return 30;<br>    if (month == 12)  return 31;<br>&#125;<br>优化后的代码<br><br></code></pre></td></tr></table></figure>\n<p>int monthDays[12] &#x3D; {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};<br>int getDays(int month){<br>    return monthDays[–month];<br>}</p>\n<pre><code>\n结束if else作为每种编程语言都不可或缺的条件语句，在编程时会大量的用到。一般建议嵌套不要超过三层，如果一段代码存在过多的if else嵌套，代码的可读性就会急速下降，后期维护难度也大大提高。\n\n摘自: [优化代码中大量的if/else，你有什么方案?](https://www.zhihu.com/question/344856665s)\n</code></pre>\n"},{"title":"Java 编程规范","type":"Java 编程规范","_content":"\n## 命名风格\n\n- 代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。 \n- 类名使用 `UpperCamelCase` 风格。\n- 方法名、参数名、成员变量、局部变量使用 `lowerCamelCase` 风格，遵循驼峰形式。\n- 变量和常量的命名方式：非公有（`private`/`protected`/`default`）变量前面要加上小写`m`；静态变量（`static`）前面加上小写`s`；其它变量以小写字母开头；静态常量（`static final`）全大写。\n- 常量命名全部大写，单词键用下划线隔开，力求语义表达完整，不要嫌名字长。 正例：`MAX_STOCK_COUNT` 反例：`MAX_COUNT`\n- 抽象类命名使用 `Abstract` 或 `Base` 开头；异常类命名使用 `Exception` 结尾；测试类命名以它要测试的类名开始，以 `Test` 结尾。\n- 类型与中括号紧挨相连来定义数组。 正例：定义整形数组 `int[] arrayDemo`; 反例：在 `main` 参数中，使用 `String args []`来定义。\n- `POJO` 类中布尔类型的标量，都不要加`is`前缀，否则部分框架解析会引起序列化错误。反例：定义为基本数据类型 `Boolean isDeleted；`的属性，它的方法也是 `isDeleted()`，RPC框架在反向解析的时候，“误以为”对应的属性名称是 `deleted`，导致属性获取不到，进而抛出异常。\n- 包名统一是用小写，点分隔符之间有且仅有一个自然语义的英语单词。（此规则参考 `spring` 的框架结构）\n- 杜绝完全不规范的缩写，避免忘文不知义。\n- 如果模块、接口、类、方法使用了设计模式，在命名时体现出具体模式。\n\n  ```\n  public class OrderFactory;\n  public class LoginProxy;\n  public class ResourceObserver;\n  ```\n\n- 接口类中的方法和属性不要加任何修饰符号(`public` 也不要加)，保持代码的简洁性，并加上有效的`javadoc`注释。尽量不要在接口里定义变量，如果一定要定义变量，肯定是与接口方法相关，并且是整个应用的基础常量。\n- 如果是形容能力的接口名称，取对应的形容词为接口名（通常是`-able`的形式）。正例：`AbstractTranslator` 实现 `Translatable`。\n- 枚举类名建议带上`Enum`后缀，枚举成员名称需要全部大写，单词间用下划线隔开。\n- 各层命名规约： \n    - `Service/DAO` 层方法命名规约：\n        - 获取单个对象的方法用`get`作前缀。\n        - 获取多个对象的方法用`list`作前缀。\n        - 获取统计值的方法用`count`作前缀。\n        - 插入的方法用`save`/`insert`作前缀。\n        - 删除的方法用`remove`/`delete`作前缀。\n        - 修改的方法用`update`作前缀。\n    - 领域模型命名规约\n        - 数据对象 `xxxDO`，`xxx` 即为数据表名。\n        - 数据传输对象：`xxxDTO`，`xxx` 为业务领域相关的名称。\n        - 展示对象：`xxxVO`，`xxx`一般为网页名称。\n        - `POJO`是`DO/DTO/BO/VO` 的统称，禁止命名成`xxxPOJO`。 \n\n## 常量定义\n\n- 不允许任何魔法值（即未经预先定义的常量）直接出现在代码中。\n\n  ```\n  // 反例：\n  String key = \"Id#taobao_\" + tradeId;\n  cache.put(key, value);\n  ```\n\n  说明：上面的`Id#taobao_`就是魔法值，需要先定义再使用：\n\n  ```\n  // 正例：\n  private static final String NAME_TAOBAO = \"Id#taobao_\";\n  String key = NAME_TAOBAO + tradeId;\n  cache.put(key, value);\n  ```\n\n- `long`或者`Long`初始赋值时，使用大写的`L`，不能小写的`l`，**小写容易跟数字1混淆**，造成误解。\n- 要使用一个常量类维护所有常量，按常量功能进行归类，分开维护。\n- 常量的复用层次有五层：跨应用共享常量、应用内共享常量、子工程内共享常量、包内共存常量、类内共享常量。\n    - 跨应用共享常量：放置在二方库中，通常是 client.jar 中的 `constant` 目录下。\n    - 应用内共享常量：放置在一方库中，通常是子模块中的 `constant` 目录下。\n    - 反例：易懂变量也要统一定义成应用内共享常量，两位攻城师在两个类中分别定义了表示“是”的变量：\n    - 类 A 中：`public static final String YES = “yes”`; \n    - 类 B 中：`public static final String YES = “y”`; \n    - `A.YES.equals(B.YES)`，预期是 true，但实际返回为 false，导致线上问题。\n        - 子工程内部共享常量：即在当前子工程的 constant 目录下。\n        - 包内共享常量：即在当前包下单独的 constant 目录下。\n        - 类内共享常量：直接在类内部 `private static final` 定义。\n\n- 变量值仅在固定范围内变化用`enum`类型来定义。\n\n  ```\n  public enum SeasonEnum {\n      SPRING(1), SUMMER(2), AUTUMN(3), WINTER(4);\n      int seq;\n      SeasonEnum(int seq) {\n          this.seq = seq;\n      }\n  }\n  ```\n\n## 代码格式\n\n- 大括号的使用约定。如果是大括号内为空，则简介地写成 `{}` 即可，不需要换行；\n  如果是非空代码块则：\n\n  - 左大括号前空一格、不换行。\n  - 左大括号后换行。\n  - 右大括号前换行。\n  - 右大括号后还有 `else` 等代码则不换行；表示终止的右大括号后必须换行。\n\n- 左小括号和字符之间不出现空格；\n- `if/for/while/switch/do`等保留字与括号之间都必须加空格。\n- 任何二目、三木运算符的左右两边都需要加一个空格。说明：运算符包括`赋值运算符=`、`逻辑运算符&&`、`加减乘除符号`等。\n- 采用4个空格缩进，禁止使用`tab`字符 \n\n  如果使用 tab 缩进，必须设置 1 个 tab 为 4 个空格。IDEA 设置 tab 为 4 个空格时，请勿勾选 Use tab character；\n  而在 eclipse 中，必须勾选 insert spaces for tabs。 \n\n  ```\n  // 正例：（涉及 1-5 点）\n  public static void main(String[] args) {\n      // 缩进 4 个空格\n      String say = \"hello\";\n      int flag = 0;\n      // 运算符的左右必须有一个空格 \n      // 关键词 if 与括号之间必须有一个空格，括号内的 f 与左括号，0 与右括号不需要空格 \n      if (flag == 0) {\n          System.out.println(say);\n      }\n      // 左大括号前加空格且不换行；左大括号后换行\n      if (flag == 1) {\n          System.out.println(\"world\");\n          // 右大括号前换行，右大括号后有 else，不用换行\n      } else {\n          System.out.println(\"ok\");\n          // 在右大括号后直接结束，则必须换行\n      }\n  }\n  ```\n\n- 注释的双斜线与注释内容之间有且仅有一个空格。\n\n  ```\n  // 正例：\n  // 这是示例注释，请注意在双斜线之后有一个空格\n  String ygb = new String();\n  ```\n\n- 单行字符数限制不超过120个，超出需要换行，换行时遵循如下原则：\n  - 第二行相对第一行缩进 4 个空格，从第三行开始，不再继续缩进，参考示例。\n  - 运算符与下文一起换行。\n  - 方法调用的点符号与下文一起换行。\n  - 方法调用时，多个参数，需要换行时，在逗号后进行。\n\n  ```\n  StringBuffer sb = new StringBuffer();\n  //超过 120 个字符的情况下，换行缩进 4 个空格，点号和方法名称一起换行 \n  sb.append(\"zi\").append(\"xin\")...\n  .append(\"huang\")...\n  .append(\"huang\")...\n  .append(\"huang\");\n  ```\n\n- 方法参数在定义和传入时，多个参数逗号后边必须加空格。\n\n  ```\n  method(\"a\", \"b\", \"c\");\n  ```\n\n- IDE的`text file encoding`设置为`UTF-8`; IDE 中文件的换行符使用 `Unix` 格式，不要使用 Windows 格式。\n- 不同逻辑、不同语义、不同业务的代码之间插入一个空行分割开来以提升可读性。说明：没有必要插入多个空行进行隔开\n- 避免通过一个类的对象引用访问此类的静态变量或静态方法，直接用类名来访问即可。\n- 所有的覆写方法，必须加 `@Override` 注解。\n- 相同参数类型，相同业务含义，才可以使用Java的可变参数，**避免使用Object**。说明：可变参数必须放置在参数列表的最后。\n- 外部正在调第三方库依赖的接口，不允许修改方法签名，避免对接口调用方法产生影响。\n  接口过时必须加`@Deprecated`注解，并清晰地说明采用的新接口或者新服务是什么。\n- 不能使用过时的类和方法。\n  说明：`java.net.URLDecoder` 中的方法 `decode(String encodeStr)` 这个方法已经过时，应该使用双参数 `decode(String source, String encode)`。\n  接口提供方既然明确是过时接口，那么有义务同时提供新的接口；作为调用方来说，有义务去考证过时方法的新实现是什么。\n- `Object`的`equals`方法容易抛空指针异常，应使用常量或确定有值的对象来调用`equals`。 \n  - 正例：`”test”.equals(object)`; \n  - 反例：`object.equals(“test”)`; \n  - 说明：推荐使用 `java.util.Objects#equals`（JDK7 引入的工具类）\n- 所有的相同类型的包装类对象之间值的比较，全部使用`equals`方法比较。\n- 关于基本数据类型与包装数据类型的使用标准如下：\n    - 所有的 `POJO` 类属性必须使用包装数据类型。\n    - `RPC` 方法的返回值和参数必须使用包装数据类型。\n    - 所有的局部变量使用基本数据类型。\n    - 说明：`POJO` 类属性没有初值是提醒使用者在需要使用时，必须自己显式地进行赋值，任何 `NPE` 问题，或者入库检查，都由使用者来保证。 \n    - 正例：数据库的查询结果可能是 `null`，因为自动拆箱，用基本数据类型接收有 `NPE` 风险。\n    - 反例：比如显示成交总额涨跌情况，即正负 x%，x 为基本数据类型，调用的 `RPC` 服务，调用不成功时，返回的是默认值，页面显示为 0%，这是不合理的，应该显示成中划线。所以包装数据类型的 `null` 值，能够表示额外的信息，如：远程调用失败，异常退出。\n\n- 定义 `DO/DTO/VO` 等 `POJO` 类时，不要设定任何属性默认值。 \n  反例：`POJO` 类的 `gmtCreate` 默认值为 `new Date();`但是这个属性在数据提取时并没有置入具体值，在更新其它字段时又附带更新了此字段，导致创建时间被修改成当前时间。\n- 序列化类新增属性时，请不要修改 `serialVersionUID` 字段，避免反序列化失败；\n- 构造方法里面禁止加入任何业务逻辑。使用IDE中的工具，请放在`init`方法中。\n- POJO类必须写`toString`方法。\n    - 使用IDE中的工具：`source` > `generate toString`时，如果继承了另一个 POJO 类，注意在前面加一下 `super.toString`。 \n    - 说明：在方法执行抛出异常时，可以直接调用 `POJO` 的 `toString()`方法打印其属性值，便于排查问题。\n- 使用索引访问String的split方法得到的数组时，需做最后一个分隔符后有无内容的检查，否则会有抛 `IndexOutOfBoundsException` 的风险。 \n\n  ``` \n  String str = \"a,b,c,,\";\n  String[] ary = str.split(\",\");\n  // 预期大于 3，结果是 3 \n  System.out.println(ary.length);\n  ```\n\n- 当一个类有多个构造方法，或者多个同名方法，这些方法应该按顺序放置在一起，便于阅读。\n- 类内方法定义的顺序：公有方法或保护方法>私有方法>`getter/setter`方法。 \n  \n  说明：公有方法是类的调用者和维护者最关心的方法，首屏展示最好；保护方法虽然只是子类关心，也可能是“模板设计模式”下的核心方法；而私有方法外部一般不需要特别关心，是一个黑盒实现；因为承载的信息价值较低，所有 Service 和 DAO 的 getter/setter 方法放在类体最后。\n\n- setter方法中，参数名称与类成员变量名称一致，`this.成员名 = 参数名`。在`getter/setter`方法中，不要增加业务逻辑，增加排查问题的难度。 \n- 循环体内，字符串的连接方法，使用`StringBuilder`的append方法进行扩展。 \n- `final`可以声明类、成员变量、方法、以及本地变量，下列情况使用`final`关键字：\n    - 不允许被继承的类，如：`String` 类。\n    - 不允许修改引用的域对象，如：`POJO` 类的域变量。\n    - 不允许被重写的方法，如：`POJO` 类的 `setter` 方法。\n    - 不允许运行过程中重新赋值的局部变量。\n    - 避免上下文重复使用一个变量，使用 `final` 描述可以强制重新定义一个变量，方便更好地进行重构。\n\n- 慎用`Object`的`clone`方法来拷贝对象。 \n\n  说明：对象的clone方法默认是浅拷贝，若想实现深拷贝需要重写 clone 方法实现属性对象的拷贝。\n\n- 类成员与方法访问控制从严：\n    - 如果不允许外部直接通过 `new` 来创建对象，那么构造方法必须是 `private`。\n    - 工具类不允许有 `public` 或 `default` 构造方法。\n    - 类非 `static` 成员变量并且与子类共享，必须是 `protected`。\n    - 类非 `static` 成员变量并且仅在本类使用，必须是 `private`。\n    - 类 `static` 成员变量如果仅在本类使用，必须是 `private`。\n    - 若是 `static` 成员变量，必须考虑是否为 `final`。\n    - 类成员方法只供类内部调用，必须是 `private`。\n    - 类成员方法只对继承类公开，那么限制为 `protected`。\n    - 说明：任何类、方法、参数、变量，严控访问范围。过于宽泛的访问范围，不利于模块解耦。 \n    - 思考：如果是一个`private`的方法，想删除就删除，可是一个`public`的`service`成员方法或成员变量，删除一下，不得手心冒点汗吗？变量像自己的小孩，尽量在自己的视线内，变量作用域太大，无限制的到处跑，那么你会担心的。\n\n## 集合处理\n\n- 关于`hsahCode`和`equals`的处理，遵循如下规则：\n    - 只要重写 `equals`，就必须重写 `hashCode`。\n    - 因为 `Set` 存储的是不重复的对象，依据 `hashCode` 和 `equals` 进行判断，所以 `Set` 存储的对象必须重写这两个方法。\n    - 如果自定义对象作为 `Map` 的键，那么必须重写 `hashCode` 和 `equals`。\n    - 说明：`String` 重写了 `hashCode` 和 `equals` 方法，可以愉快地使用 `String` 对象作为 `key` 来使用。\n\n- `ArrayList` 的 `subList` 结果不可强转成 `ArrayList`，否则会抛出 `ClassCastException` 异常，即 `java.util.RandomAccessSubList cannot be cast to java.util.ArrayList`。\n  \n  说明：`subList` 返回的是 `ArrayList` 的内部类 `SubList`，并不是 `ArrayList` ，而是 `ArrayList` 的一个视图，对于 `SubList` 子列表的所有操作最终会反映到原列表上。\n\n- 在 `subList` 场景中，高度注意对原集合元素个数的修改，会导致子列表的遍历、增加、删除均会产生 `ConcurrentModificationException` 异常。\n- 使用集合转数组的方法，必须使用集合的 `toArray(T[] array)`，传入的是类型完全一样的数组，大小就是`list.size()`。 \n  \n  说明：使用 `toArray` 带参方法，入参分配的数组空间不够大时，`toArray` 方法内部将重新分配内存空间，并返回新数组地址；\n  如果数组元素个数大于实际所需，下标为[ `list.size()` ] 的数组元素将被置为 `null`，其它数组元素保持原值，因此最好将方法入参数组大小定义与集合元素个数一致。 \n\n  ```\n  List<String> list = new ArrayList<String>(2);\n  list.add(\"guan\");\n  list.add(\"bao\");\n  String[] array = new String[list.size()];\n  array = list.toArray(array);\n  ```\n\n- 使用工具类 `Arrays.asList()`把数组转换成集合时，不能使用其修改集合相关的方法，它的 `add/remove/clear` 方法抛出  `UnsupportedOperationException` 异常。 \n\n  说明：`asList` 的返回对象是一个 `Arrays` 内部类，并没有实现集合的修改方法。`Arrays.asList`体现的是适配器模式，只是转换接口，后台的数据仍是数组。\n\n  ```\n  String[] str = new String[] {\"you\", \"wu\"};\n  List list = Arrays.asList(str);\n  ```\n\n  - 第一种情况：`list.add(“yangguanbao”);` 运行时异常。 \n  - 第二种情况：`str[0] = “gujin”;` 那么 `list.get(0)`也会随之修改。\n\n- 泛型通配符 `<? extends T>` 来接收返回的数据，此写法的泛型集合不能使用 `add` 方法，而`<? super T>`不能使用 `get` 方法，作为接口调用赋值时易出错。 \n\n    说明：扩展说一下 `PECS(Producer Extends Consumer Super)`原则：\n    1. 第一、频繁往外读取内容的，适合用`<? extends T>`。\n    2. 第二、经常往里插入的，适合用`<? super T>`。\n\n- 不要在 `foreach` 循环里进行元素的 `remove/add` 操作。`remove` 元素请使用 `Iterator`方式，如果并发操作，需要对 `Iterator` 对象加锁。 \n  \n  ```\n  // 正例：\n  Iterator<String> iterator = list.iterator();\n  while (iterator.hasNext()) {\n      String item = iterator.next();\n      if (删除元素的条件) {\n          iterator.remove();\n      }\n  }\n\n  // 反例：\n  List<String> list = new ArrayList<String>();\n  list.add(\"1\");\n  list.add(\"2\");\n  for (String item : list) {\n      if (\"1\".equals(item)) {\n          list.remove(item);\n      }\n  }\n  ```\n\n- 在 JDK7 版本及以上，`Comparator` 要满足如下三个条件，不然 `Arrays.sort`，`Collections.sort` 会报 `IllegalArgumentException` 异常。说明：三个条件如下\n    - x，y 的比较结果和 y，x 的比较结果相反。\n    - x > y，y > z，则 x>z。\n    - x = y，则 x，z 比较结果和 y，z 比较结果相同。\n\n    ```\n    // 反例：下例中没有处理相等的情况，实际使用中可能会出现异常：\n    new Comparator<Student>() {\n        @Override\n        public int compare(Student o1, Student o2) {\n            return o1.getId() > o2.getId() ? 1 : -1;\n        }\n    };\n    ```\n\n- 集合初始化时，指定集合初始值大小。 \n    - 说明：`HashMap` 使用 `HashMap(int initialCapacity)` 初始化，\n    - 正例：`initialCapacity` = (需要存储的元素个数 / 负载因子) + 1。注意负载因子（即 `loader factor`）默认为 0.75，如果暂时无法确定初始值大小，请设置为 16（即默认值）。\n    - 反例：`HashMap` 需要放置 1024 个元素，由于没有设置容量初始大小，随着元素不断增加，容量7 次被迫扩大，`resize` 需要重建 hash 表，严重影响性能。\n\n- 使用 `entrySet` 遍历 `Map` 类集合 `KV`，而不是 `keySet` 方式进行遍历。 \n    - 说明：`keySet` 其实是遍历了 2 次，一次是转为 `Iterator` 对象，另一次是从 `hashMap` 中取出 `key` 所对应的 `value`。而 `entrySet` 只是遍历了一次就把 `key` 和 `value` 都放到了 `entry` 中，效率更高。如果是 JDK8，使用 `Map.foreach` 方法。\n    - 正例：`values()`返回的是 V 值集合，是一个 `list` 集合对象；`keySet()`返回的是 K 值集合，是一个 `Set` 集合对象；`entrySet()`返回的是 K-V 值组合集合。\n\n- 高度注意 `Map` 类集合 K/V 能不能存储 null 值的情况，如下表格：\n\n集合类  |  Key | Value | Super | 说明\n:---:|:---:|:---:|:---:|:---:\nHashtable | 禁止为 null | 禁止为 null | Dictionary | 线程安全\nConcurrentHashMap | 禁止为 null  | 禁止为 null | AbstractMap | 锁分段技术（JDK8:CAS）\nTreeMap | 禁止为 null | 允许为 null | AbstractMap | 线程不安全\nHashMap | 允许为 null | 允许为 null | AbstractMap | 线程不安全\n\n  反例： 由于 HashMap 的干扰，很多人认为 `ConcurrentHashMap` 是可以置入 null 值，而事实上，存储 `null` 值时会抛出 `NPE` 异常。\n\n- 合理利用好集合的有序性(`sort`)和稳定性(`order`)，避免集合的无序性(`unsort`)和不稳定性(`unorder`)带来的负面影响。 \n  \n  说明：有序性是指遍历的结果是按某种比较规则依次排列的。稳定性指集合每次遍历的元素次序是一定的。\n  如：`ArrayList` 是 `order/unsort`；`HashMap` 是 `unorder/unsort`；`TreeSet` 是`order/sort`。\n\n- 利用 `Set` 元素唯一的特性，可以快速对一个集合进行去重操作，避免使用 `List` 的 `contains` 方法进行遍历、对比、去重操作。\n\n## 并发处理\n\n- 获取单例对象需要保证线程安全，其中的方法也要保证线程安全。说明：资源驱动类、工具类、单例工厂类都需要注意。\n- 创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。 \n\n    ```\n    // 正例：\n    public class TimerTaskThread extends Thread {\n        public TimerTaskThread() {\n        super.setName(\"TimerTaskThread\");\n        ...\n    }\n    ```\n\n- 线程资源必须通过线程池提供，不允许在应用中自行显示创建线程。 \n\n  说明：使用线程池的好处是减少在创建和销毁线程上所花的时间以及系统资源的开销，解决资源不足的问题。\n  如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。\n\n-  线程池不允许使用 `Executors` 去创建，而是通过 `ThreadPoolExecutor`的方法，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。 \n\n    说明：Executors 返回的线程池对象的弊端如下：\n    - `FixedThreadPool` 和 `SingleThreadPool`: 允许的请求队列长度为 `Integer.MAX_VALUE`，可能会堆积大量的请求，从而导致 `OOM`。\n    - `CachedThreadPool` 和 `ScheduledThreadPool`: 允许的创建线程数量为 `Integer.MAX_VALUE`，可能会创建大量的线程，从而导致 `OOM`。\n\n- `SimpleDateFormat` 是线程不安全的类，一般不要定义为 `static` 变量，如果定义为 `static`，必须加锁，或者使用 `DateUtils` 工具类。 \n\n    ```\n    // 正例：注意线程安全，使用 DateUtils。亦推荐如下处理：\n    private static final ThreadLocal<DateFormat> df = new ThreadLocal<DateFormat>() {\n        @Override\n        protected DateFormat initialValue() {\n            return new SimpleDateFormat(\"yyyy-MM-dd\");\n        }\n    };\n    ```\n\n    说明：如果是 JDK8 的应用，可以使用 `Instant` 代替 `Date`，`LocalDateTime` 代替 `Calendar`，`DateTimeFormatter` 代替 `SimpleDateFormat`，官方给出的解释：`simple beautiful strong immutable thread-safe`。\n\n- 高并发时同步调用应该去考量锁的性能损耗。能用无锁数据结构，就不要用锁；能锁区块，就不要锁整个方法体；能用对象锁，就不要用类锁。 \n    \n    说明:尽可能使加锁的代码块工作量尽可能的小，避免在锁代码块中调用 RPC 方法。\n\n- 对多个资源、数据库表、对象同时加锁时，需要保持一致的加锁顺序，否则可能会造成死锁。 \n\n    说明：线程一需要对表 A、B、C 依次全部加锁后才可以进行更新操作，那么线程二的加锁顺序也必须是 A、B、C，否则可能出现死锁。\n\n- 并发修改同一记录时，避免更新丢失，需要枷锁。要么在应用层加锁，要么在缓存加锁，要么在数据库层使用乐观锁，使用`version`作为更新依据\n。 \n    说明：如果每次访问冲突概率小于 20%，推荐使用乐观锁，否则使用悲观锁。乐观锁的重试次数不得小于 3 次。\n\n- 多线程并发处理定时任务时，`Timer`运行多个`TimeTask`时，只要其中之一没有捕获抛出的异常，其他任务便会自动终止运行，使用`ScheduledExecutorService` 则没有这个问题。\n\n- 使用 `CountDownLatch` 进行异步转同步操作，每个线程退出前必须调用 `countDown` 方法，线程执行代码注意 `catch` 异常，确保 `countDown` 方法被执行到，避免主线程无法执行至 await 方法，直到超时才返回结果。 \n\n    说明：注意，子线程抛出异常堆栈，不能在主线程 `try-catch` 到。\n\n- 避免 Random 实例被多线程使用，虽然共享该实例是线程安全的，但会因竞争同一 `seed` 导致的性能下降。\n\n    说明：Random 实例包括 `java.util.Random` 的实例或者 `Math.random()`的方式。\n\n    正例：在 JDK7 之后，可以直接使用 `API ThreadLocalRandom`，而在 JDK7 之前，需要编码保证每个线程持有一个实例。\n\n- 在并发场景下，通过双重检查锁（`double-checked locking`）实现延迟初始化的优化问题隐患(可参考 The “Double-Checked Locking is Broken” Declaration)，推荐解决方案中较为简单一种（适用于 JDK5 及以上版本），将目标属性声明为 `volatile` 型。 \n\n    ```\n    // 反例：\n    class Singleton {\n        private Helper helper = null;\n        public Helper getHelper() {\n            if (helper == null)\n                synchronized (this) {\n                    if (helper == null)\n                        helper = new Helper();\n                }\n            return helper;\n        }\n        // other methods and fields...\n    }\n    ```\n\n- `volatile` 解决多线程内存不可见问题。对于一写多读，是可以解决变量同步问题，但是如果多写，同样无法解决线程安全问题。如果是 `count++`操作，\n    \n    使用如下类实现： `AtomicInteger count = new AtomicInteger(); count.addAndGet(1); `\n    如果是 JDK8，推荐使用 LongAdder 对象，比 `AtomicLong` 性能更好（减少乐观锁的重试次数）。\n\n- `HashMap` 在容量不够进行 `resize` 时由于高并发可能出现死链，导致 CPU 飙升，在开发过程中可以使用其它数据结构或加锁来规避此风险。\n- `ThreadLocal` 无法解决共享对象的更新问题，`ThreadLocal` 对象建议使用 `static`修饰。这个变量是针对一个线程内所有操作共享的，所以设置为静态变量，所有此类实例共享此静态变量 ，也就是说在类第一次被使用时装载，只分配一块存储空间，所有此类的对象(只要是这个线程内定义的)都可以操控这个变量。\n\n## 控制语句\n\n- 在一个 `switch` 块内，每一个` case` 要么通过 `break/return` 等来终止，要么注释说明程序将继续执行到哪一个`case`为止；在一个`switch`块内，都必须包含一个`default`语句并且放在最后，即使空代码。\n- 在 `if/else/for/while/do` 语句中必须使用大括号。即使只有一行代码，避免采用单行的编码方式：`if (condition) statements;`\n- 在高并发场景中，避免使用”等于”判断作为中断或退出的条件。 \n\n    说明：如果并发控制没有处理好，容易产生等值判断被“击穿”的情况，使用大于或小于的区间判断条件来代替。\n    反例：判断剩余奖品数量等于 0 时，终止发放奖品，但因为并发处理错误导致奖品数量瞬间变成了负数，这样的话，活动无法终止。\n\n- 表达异常的分支时，少用 `if-else` 方式，这种方式可以改写成：\n\n    ```\n    // 反例\n    if (condition) {\n      ...\n      obj = ...\n    } else {\n      obj = ...\n    }\n    return obj;\n\n    // 正例\n    if (condition) {\n        ...\n        return obj;\n    }\n    obj = ...;\n    return obj;\n    ```\n\n    说明：如果非得使用 `if()...else if()...else...` 方式表达逻辑，【强制】避免后续代码维护困难，**请勿超过 3 层**。 \n    \n    正例：超过 3 层的 `if-else` 的逻辑判断代码可以使用卫语句、策略模式、状态模式等来实现，[If-Else优化方案](/developer/style-guide/if-else-optimize-solutions.html)\n    \n\n- 除常用方法（如 `getXxx/isXxx`）等外，不要在条件判断中执行其它复杂的语句，将复杂逻辑判断的结果赋值给一个有意义的布尔变量名，以提高可读性。\n    \n    说明：很多 if 语句内的逻辑相当复杂，阅读者需要分析条件表达式的最终结果，才能明确什么样的条件执行什么样的语句，那么，如果阅读者分析逻辑表达式错误呢？\n\n    ```\n    // 正例：\n    final boolean existed = (file.open(fileName, \"w\") != null) && (...) || (...); \n    if (existed) {\n        ...\n    }\n    \n    // 反例：\n    if ((file.open(fileName, \"w\") != null) && (...) || (...)) {\n        ...\n    }\n    ```\n\n- 循环体中的语句要考量性能，以下操作尽量移至循环体外处理，如定义对象、变量、获取数据库连接，进行不必要的 `try-catch` 操作（这个 `try-catch` 是否可以移至循环体外）。\n- 避免采用取反逻辑运算符。 \n    说明：取反逻辑不利于快速理解，并且取反逻辑写法必然存在对应的正向逻辑写法。 \n    \n    - 正例：使用 if (x < 628) 来表达 x 小于 628。 \n    - 反例：使用 if (!(x >= 628)) 来表达 x 小于 628。\n\n- 接口入参保护，这种场景常见的是用作鼻梁操作的接口。\n\n 下列情形，需要进行参数校验：\n    - 调用频次低的方法。\n    - 执行时间开销很大的方法。此情形中，参数校验时间几乎可以忽略不计，但如果因为参数错误导致中间执行回退，或者错误，那得不偿失。\n    - 需要极高稳定性和可用性的方法。\n    - 对外提供的开放接口，不管是 `RPC`/`API`/`HTTP` 接口。\n    - 敏感权限入口。\n\n  下列情形，不需要进行参数校验：\n    - 极有可能被循环调用的方法。但在方法说明里必须注明外部参数检查要求。\n    - 底层调用频度比较高的方法。毕竟是像纯净水过滤的最后一道，参数错误不太可能到底层才会暴露问题。一般 `DAO` 层与 `Service` \n    - 层都在同一个应用中，部署在同一台服务器中，所以 `DAO` 的参数校验，可以省略。\n    - 被声明成 `private`\n    - 只会被自己代码所调用的方法，如果能够确定调用方法的代码传入参数已经做过检查或者肯定不会有问题，此时可以不校验参数。\n\n## 注释规约\n\n- 类、类属性、类方法的注释必须使用`Javadoc`规约，使用`/** 内容 **/` 格式，不得使用 `//xxx` 方式。 \n    \n    说明：在 IDE 编辑窗口中，Javadoc 方式会提示相关注释，生成 Javadoc 可以正确输出相应注释；\n    在 IDE 中，工程调用方法时，不进入方法即可悬浮提示方法、参数、返回值的意义，提高阅读效率。\n\n- 所有的抽象方法（包括接口中的方法）必须要用javadoc注释、除了返回值、参数、异常说明外，还必须指出该方法做什么事情，实现什么功能。 \n\n  说明：对子类的实现要求，或者调用注意实现，请一并说明。\n\n- 所有类都必须添加创建者和创建日期。\n- 方法内部单行注释，在被注释语句上方另起一行，使用`// Comment`。方法内部多行注释使用`/**/`注释，注意与代码对齐。\n- 所有的枚举类型字段必须要有注释，说明每个数据项的用途。\n- 与其“半吊子”英文注释，不如用中文注释把问题说清楚。专有名词与关键字保持英文原文即可。 \n  \n  反例：“TCP 连接超时”解释成“传输控制协议连接超时”，理解反而费脑筋。\n\n- 代码修改的同时，注释也要进行相应的修改，尤其是参数、返回值、异常、核心逻辑等的修改。 \n\n  说明：代码与注释更新不同步，就像路网与导航软件更新不同步一样，如果导航软件严重滞后，就失去了导航的意义。\n\n- 谨慎注释掉代码。在上方详细说明，而不是简单地注释掉。如果无用，则删除。 \n\n  说明：代码被注释掉有两种可能性：\n    - 后续会恢复此段代码逻辑。\n    - 永久不用。前者如果没有备注信息，难以知晓注释动机。后者建议直接删掉（代码仓库保存了历史代码）。\n\n- [参考]对于注释的要求： \n    - 第一、能够准确反应设计思想和代码逻辑； \n    - 第二、能够描述业务含义，使别的程序员能够迅速了解到代码背后的信息。完全没有注释的大段代码对于阅读者形同天书，注释是给自己看的，即使隔很长时间，也能清晰理解当时的思路；注释也是给继任者看的，使其能够快速接替自己的工作。\n- 好的命名、代码结构是自解释的，注释力求精简准确、表达到位。避免出现注释的一个极端：过多过滥的注释，代码的逻辑一旦修改，修改注释是相当大的负担。\n\n  ```\n  // 反例：\n  // put elephant into fridge \n  put(elephant, fridge);\n  ```\n\n  方法名 put，加上两个有意义的变量名 elephant 和 fridge，已经说明了这是在干什么，语义清晰的代码不需要额外的注释。\n\n\n## 异常日志\n\n### 异常处理\n\n- Java 类库中定义的可以通过预检查方式规避的 `RuntimeException` 异常不应该通过catch 的方式来处理，比如：`NullPointerException`，`IndexOutOfBoundsException` 等等。 \n  \n  说明：无法通过预检查的异常除外，比如，在解析字符串形式的数字时，不得不通过 `catchNumberFormatException` 来实现。 \n\n  正例：`if (obj != null) { ... }`\n  反例：`try { obj.method() } catch (NullPointerException e) { ... }`\n\n- 异常不要用来做流程控制，条件控制。 \n  \n  说明：异常设计的初中是解决程序运行中的各种意外情况，且异常的处理效率比条件判断方式要低很多。\n\n- `catch` 时请分清稳定代码和非稳定代码，稳定代码指的是无论如何不会出错的代码。对于非稳定代码的catch尽可能进行区分异常类型，再做对应的异常处理。 \n    \n    说明：对大段代码进行try-catch，是程序无法根据不同的异常做出正确的应急反应，也不利于定位问题，这是一种不负责任的表现。 \n    \n    正例：用户注册的场景中，如果用户输入非法字符，或用户名称已存在，或用户输入密码过于简单，在程序上作出分门别类的判断，并提示给用户。\n\n- 捕获异常是为了处理它，不要捕获了却什么都不处理而抛弃之，如果不想处理它，请将该异常抛给它的调用者。最外层的业务使用者，必须处理异常，将其转化为用户可以理解的内容。\n- 有 `try` 块放到了事务代码中，`catch` 异常后，如果需要回滚事务，一定要注意手动回滚事务。\n- `finally` 块必须对资源对象、流对象进行关闭，有异常也要做 `try-catch`。 \n- 不要在 `finally` 块中使用 `return`。 \n\n  说明：finally 块中的 return 返回后方法结束执行，不会再执行 try 块中的 return 语句。\n\n- 捕获异常与抛异常，必须是完全匹配，或者捕获异常是抛异常的父类。 \n  \n  说明：如果预期对方抛的是绣球，实际接到的是铅球，就会产生意外情况。\n\n- 方法的返回值可以为 `null`，不强制返回空集合，或者空对象等，必须添加注释充分说明什么情况下会返回 `null` 值。 \n\n  说明：本手册明确防止 NPE 是调用者的责任。即使被调用方法返回空集合或者空对象，对调用者来说，也并非高枕无忧，必须考虑到远程调用失败、序列化失败、运行时异常等场景返回null 的情况。\n\n- 防止 `NPE`(NullPointerException)，是程序员的基本修养，注意 `NPE` 产生的场景：\n\n    - 返回类型为基本数据类型，`return` 包装数据类型的对象时，自动拆箱有可能产生 `NPE`。\n    - 反例：`public int f() { return Integer 对象}`， 如果为 null，自动解箱抛 NPE。\n        - 数据库的查询结果可能为 null。\n        - 集合里的元素即使 isNotEmpty，取出的数据元素也可能为 null。\n        - 远程调用返回对象时，一律要求进行空指针判断，防止 NPE。\n        - 对于 Session 中获取的数据，建议 NPE 检查，避免空指针。\n        - 级联调用 obj.getA().getB().getC()；一连串调用，易产生 NPE。\n\n    - 正例：使用 `JDK8` 的 `Optional` 类来防止 `NPE` 问题。\n\n- 定义时区分 `unchecked/checked` 异常，避免直接抛出 `new RuntimeException()`，更不允许抛出 `Exception` 或者 `Throwable`，应使用有业务含义的自定义异常。推荐业界已定义过的自定义异常，如：`DAOException`/`ServiceException` 等。\n- 对于公司外的 http/api 开放接口必须使用“错误码”；而应用内部推荐异常抛出；跨应用间 `RPC` 调用优先考虑使用 `Result` 方式，封装 `isSuccess()`方法、“错误码”、“错误简短信息”。 \n\n  说明：关于 RPC 方法返回方式使用 Result 方式的理由：\n  - 使用抛异常返回方式，调用方如果没有捕获到就会产生运行时错误。\n  - 如果不加栈信息，只是 new 自定义异常，加入自己的理解的 error message，对于调用端解决问题的帮助不会太多。如果加了栈信息，在频繁调用出错的情况下，数据序列化和传输的性能损耗也是问题。\n\n- 避免出现重复的代码（Don’t Repeat Yourself），即 DRY 原则。 \n\n    说明：随意复制和粘贴代码，必然会导致代码的重复，在以后需要修改时，需要修改所有的副本，容易遗漏。必要时抽取共性方法，或者抽象公共类，甚至是组件化。\n\n    ```    \n    // 正例：\n    // 一个类中有多个 public 方法，都需要进行数行相同的参数校验操作，这个时候请抽取：\n    private boolean checkParam(DTO dto) {...}\n    ```\n\n## 整洁代码\n\n[整洁代码的建议列表](/developer/style-guide/tips-to-keep-java-code-clean.html)","source":"developer/style-guide/java.md","raw":"---\ntitle: Java 编程规范\ntype: Java 编程规范\n---\n\n## 命名风格\n\n- 代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。 \n- 类名使用 `UpperCamelCase` 风格。\n- 方法名、参数名、成员变量、局部变量使用 `lowerCamelCase` 风格，遵循驼峰形式。\n- 变量和常量的命名方式：非公有（`private`/`protected`/`default`）变量前面要加上小写`m`；静态变量（`static`）前面加上小写`s`；其它变量以小写字母开头；静态常量（`static final`）全大写。\n- 常量命名全部大写，单词键用下划线隔开，力求语义表达完整，不要嫌名字长。 正例：`MAX_STOCK_COUNT` 反例：`MAX_COUNT`\n- 抽象类命名使用 `Abstract` 或 `Base` 开头；异常类命名使用 `Exception` 结尾；测试类命名以它要测试的类名开始，以 `Test` 结尾。\n- 类型与中括号紧挨相连来定义数组。 正例：定义整形数组 `int[] arrayDemo`; 反例：在 `main` 参数中，使用 `String args []`来定义。\n- `POJO` 类中布尔类型的标量，都不要加`is`前缀，否则部分框架解析会引起序列化错误。反例：定义为基本数据类型 `Boolean isDeleted；`的属性，它的方法也是 `isDeleted()`，RPC框架在反向解析的时候，“误以为”对应的属性名称是 `deleted`，导致属性获取不到，进而抛出异常。\n- 包名统一是用小写，点分隔符之间有且仅有一个自然语义的英语单词。（此规则参考 `spring` 的框架结构）\n- 杜绝完全不规范的缩写，避免忘文不知义。\n- 如果模块、接口、类、方法使用了设计模式，在命名时体现出具体模式。\n\n  ```\n  public class OrderFactory;\n  public class LoginProxy;\n  public class ResourceObserver;\n  ```\n\n- 接口类中的方法和属性不要加任何修饰符号(`public` 也不要加)，保持代码的简洁性，并加上有效的`javadoc`注释。尽量不要在接口里定义变量，如果一定要定义变量，肯定是与接口方法相关，并且是整个应用的基础常量。\n- 如果是形容能力的接口名称，取对应的形容词为接口名（通常是`-able`的形式）。正例：`AbstractTranslator` 实现 `Translatable`。\n- 枚举类名建议带上`Enum`后缀，枚举成员名称需要全部大写，单词间用下划线隔开。\n- 各层命名规约： \n    - `Service/DAO` 层方法命名规约：\n        - 获取单个对象的方法用`get`作前缀。\n        - 获取多个对象的方法用`list`作前缀。\n        - 获取统计值的方法用`count`作前缀。\n        - 插入的方法用`save`/`insert`作前缀。\n        - 删除的方法用`remove`/`delete`作前缀。\n        - 修改的方法用`update`作前缀。\n    - 领域模型命名规约\n        - 数据对象 `xxxDO`，`xxx` 即为数据表名。\n        - 数据传输对象：`xxxDTO`，`xxx` 为业务领域相关的名称。\n        - 展示对象：`xxxVO`，`xxx`一般为网页名称。\n        - `POJO`是`DO/DTO/BO/VO` 的统称，禁止命名成`xxxPOJO`。 \n\n## 常量定义\n\n- 不允许任何魔法值（即未经预先定义的常量）直接出现在代码中。\n\n  ```\n  // 反例：\n  String key = \"Id#taobao_\" + tradeId;\n  cache.put(key, value);\n  ```\n\n  说明：上面的`Id#taobao_`就是魔法值，需要先定义再使用：\n\n  ```\n  // 正例：\n  private static final String NAME_TAOBAO = \"Id#taobao_\";\n  String key = NAME_TAOBAO + tradeId;\n  cache.put(key, value);\n  ```\n\n- `long`或者`Long`初始赋值时，使用大写的`L`，不能小写的`l`，**小写容易跟数字1混淆**，造成误解。\n- 要使用一个常量类维护所有常量，按常量功能进行归类，分开维护。\n- 常量的复用层次有五层：跨应用共享常量、应用内共享常量、子工程内共享常量、包内共存常量、类内共享常量。\n    - 跨应用共享常量：放置在二方库中，通常是 client.jar 中的 `constant` 目录下。\n    - 应用内共享常量：放置在一方库中，通常是子模块中的 `constant` 目录下。\n    - 反例：易懂变量也要统一定义成应用内共享常量，两位攻城师在两个类中分别定义了表示“是”的变量：\n    - 类 A 中：`public static final String YES = “yes”`; \n    - 类 B 中：`public static final String YES = “y”`; \n    - `A.YES.equals(B.YES)`，预期是 true，但实际返回为 false，导致线上问题。\n        - 子工程内部共享常量：即在当前子工程的 constant 目录下。\n        - 包内共享常量：即在当前包下单独的 constant 目录下。\n        - 类内共享常量：直接在类内部 `private static final` 定义。\n\n- 变量值仅在固定范围内变化用`enum`类型来定义。\n\n  ```\n  public enum SeasonEnum {\n      SPRING(1), SUMMER(2), AUTUMN(3), WINTER(4);\n      int seq;\n      SeasonEnum(int seq) {\n          this.seq = seq;\n      }\n  }\n  ```\n\n## 代码格式\n\n- 大括号的使用约定。如果是大括号内为空，则简介地写成 `{}` 即可，不需要换行；\n  如果是非空代码块则：\n\n  - 左大括号前空一格、不换行。\n  - 左大括号后换行。\n  - 右大括号前换行。\n  - 右大括号后还有 `else` 等代码则不换行；表示终止的右大括号后必须换行。\n\n- 左小括号和字符之间不出现空格；\n- `if/for/while/switch/do`等保留字与括号之间都必须加空格。\n- 任何二目、三木运算符的左右两边都需要加一个空格。说明：运算符包括`赋值运算符=`、`逻辑运算符&&`、`加减乘除符号`等。\n- 采用4个空格缩进，禁止使用`tab`字符 \n\n  如果使用 tab 缩进，必须设置 1 个 tab 为 4 个空格。IDEA 设置 tab 为 4 个空格时，请勿勾选 Use tab character；\n  而在 eclipse 中，必须勾选 insert spaces for tabs。 \n\n  ```\n  // 正例：（涉及 1-5 点）\n  public static void main(String[] args) {\n      // 缩进 4 个空格\n      String say = \"hello\";\n      int flag = 0;\n      // 运算符的左右必须有一个空格 \n      // 关键词 if 与括号之间必须有一个空格，括号内的 f 与左括号，0 与右括号不需要空格 \n      if (flag == 0) {\n          System.out.println(say);\n      }\n      // 左大括号前加空格且不换行；左大括号后换行\n      if (flag == 1) {\n          System.out.println(\"world\");\n          // 右大括号前换行，右大括号后有 else，不用换行\n      } else {\n          System.out.println(\"ok\");\n          // 在右大括号后直接结束，则必须换行\n      }\n  }\n  ```\n\n- 注释的双斜线与注释内容之间有且仅有一个空格。\n\n  ```\n  // 正例：\n  // 这是示例注释，请注意在双斜线之后有一个空格\n  String ygb = new String();\n  ```\n\n- 单行字符数限制不超过120个，超出需要换行，换行时遵循如下原则：\n  - 第二行相对第一行缩进 4 个空格，从第三行开始，不再继续缩进，参考示例。\n  - 运算符与下文一起换行。\n  - 方法调用的点符号与下文一起换行。\n  - 方法调用时，多个参数，需要换行时，在逗号后进行。\n\n  ```\n  StringBuffer sb = new StringBuffer();\n  //超过 120 个字符的情况下，换行缩进 4 个空格，点号和方法名称一起换行 \n  sb.append(\"zi\").append(\"xin\")...\n  .append(\"huang\")...\n  .append(\"huang\")...\n  .append(\"huang\");\n  ```\n\n- 方法参数在定义和传入时，多个参数逗号后边必须加空格。\n\n  ```\n  method(\"a\", \"b\", \"c\");\n  ```\n\n- IDE的`text file encoding`设置为`UTF-8`; IDE 中文件的换行符使用 `Unix` 格式，不要使用 Windows 格式。\n- 不同逻辑、不同语义、不同业务的代码之间插入一个空行分割开来以提升可读性。说明：没有必要插入多个空行进行隔开\n- 避免通过一个类的对象引用访问此类的静态变量或静态方法，直接用类名来访问即可。\n- 所有的覆写方法，必须加 `@Override` 注解。\n- 相同参数类型，相同业务含义，才可以使用Java的可变参数，**避免使用Object**。说明：可变参数必须放置在参数列表的最后。\n- 外部正在调第三方库依赖的接口，不允许修改方法签名，避免对接口调用方法产生影响。\n  接口过时必须加`@Deprecated`注解，并清晰地说明采用的新接口或者新服务是什么。\n- 不能使用过时的类和方法。\n  说明：`java.net.URLDecoder` 中的方法 `decode(String encodeStr)` 这个方法已经过时，应该使用双参数 `decode(String source, String encode)`。\n  接口提供方既然明确是过时接口，那么有义务同时提供新的接口；作为调用方来说，有义务去考证过时方法的新实现是什么。\n- `Object`的`equals`方法容易抛空指针异常，应使用常量或确定有值的对象来调用`equals`。 \n  - 正例：`”test”.equals(object)`; \n  - 反例：`object.equals(“test”)`; \n  - 说明：推荐使用 `java.util.Objects#equals`（JDK7 引入的工具类）\n- 所有的相同类型的包装类对象之间值的比较，全部使用`equals`方法比较。\n- 关于基本数据类型与包装数据类型的使用标准如下：\n    - 所有的 `POJO` 类属性必须使用包装数据类型。\n    - `RPC` 方法的返回值和参数必须使用包装数据类型。\n    - 所有的局部变量使用基本数据类型。\n    - 说明：`POJO` 类属性没有初值是提醒使用者在需要使用时，必须自己显式地进行赋值，任何 `NPE` 问题，或者入库检查，都由使用者来保证。 \n    - 正例：数据库的查询结果可能是 `null`，因为自动拆箱，用基本数据类型接收有 `NPE` 风险。\n    - 反例：比如显示成交总额涨跌情况，即正负 x%，x 为基本数据类型，调用的 `RPC` 服务，调用不成功时，返回的是默认值，页面显示为 0%，这是不合理的，应该显示成中划线。所以包装数据类型的 `null` 值，能够表示额外的信息，如：远程调用失败，异常退出。\n\n- 定义 `DO/DTO/VO` 等 `POJO` 类时，不要设定任何属性默认值。 \n  反例：`POJO` 类的 `gmtCreate` 默认值为 `new Date();`但是这个属性在数据提取时并没有置入具体值，在更新其它字段时又附带更新了此字段，导致创建时间被修改成当前时间。\n- 序列化类新增属性时，请不要修改 `serialVersionUID` 字段，避免反序列化失败；\n- 构造方法里面禁止加入任何业务逻辑。使用IDE中的工具，请放在`init`方法中。\n- POJO类必须写`toString`方法。\n    - 使用IDE中的工具：`source` > `generate toString`时，如果继承了另一个 POJO 类，注意在前面加一下 `super.toString`。 \n    - 说明：在方法执行抛出异常时，可以直接调用 `POJO` 的 `toString()`方法打印其属性值，便于排查问题。\n- 使用索引访问String的split方法得到的数组时，需做最后一个分隔符后有无内容的检查，否则会有抛 `IndexOutOfBoundsException` 的风险。 \n\n  ``` \n  String str = \"a,b,c,,\";\n  String[] ary = str.split(\",\");\n  // 预期大于 3，结果是 3 \n  System.out.println(ary.length);\n  ```\n\n- 当一个类有多个构造方法，或者多个同名方法，这些方法应该按顺序放置在一起，便于阅读。\n- 类内方法定义的顺序：公有方法或保护方法>私有方法>`getter/setter`方法。 \n  \n  说明：公有方法是类的调用者和维护者最关心的方法，首屏展示最好；保护方法虽然只是子类关心，也可能是“模板设计模式”下的核心方法；而私有方法外部一般不需要特别关心，是一个黑盒实现；因为承载的信息价值较低，所有 Service 和 DAO 的 getter/setter 方法放在类体最后。\n\n- setter方法中，参数名称与类成员变量名称一致，`this.成员名 = 参数名`。在`getter/setter`方法中，不要增加业务逻辑，增加排查问题的难度。 \n- 循环体内，字符串的连接方法，使用`StringBuilder`的append方法进行扩展。 \n- `final`可以声明类、成员变量、方法、以及本地变量，下列情况使用`final`关键字：\n    - 不允许被继承的类，如：`String` 类。\n    - 不允许修改引用的域对象，如：`POJO` 类的域变量。\n    - 不允许被重写的方法，如：`POJO` 类的 `setter` 方法。\n    - 不允许运行过程中重新赋值的局部变量。\n    - 避免上下文重复使用一个变量，使用 `final` 描述可以强制重新定义一个变量，方便更好地进行重构。\n\n- 慎用`Object`的`clone`方法来拷贝对象。 \n\n  说明：对象的clone方法默认是浅拷贝，若想实现深拷贝需要重写 clone 方法实现属性对象的拷贝。\n\n- 类成员与方法访问控制从严：\n    - 如果不允许外部直接通过 `new` 来创建对象，那么构造方法必须是 `private`。\n    - 工具类不允许有 `public` 或 `default` 构造方法。\n    - 类非 `static` 成员变量并且与子类共享，必须是 `protected`。\n    - 类非 `static` 成员变量并且仅在本类使用，必须是 `private`。\n    - 类 `static` 成员变量如果仅在本类使用，必须是 `private`。\n    - 若是 `static` 成员变量，必须考虑是否为 `final`。\n    - 类成员方法只供类内部调用，必须是 `private`。\n    - 类成员方法只对继承类公开，那么限制为 `protected`。\n    - 说明：任何类、方法、参数、变量，严控访问范围。过于宽泛的访问范围，不利于模块解耦。 \n    - 思考：如果是一个`private`的方法，想删除就删除，可是一个`public`的`service`成员方法或成员变量，删除一下，不得手心冒点汗吗？变量像自己的小孩，尽量在自己的视线内，变量作用域太大，无限制的到处跑，那么你会担心的。\n\n## 集合处理\n\n- 关于`hsahCode`和`equals`的处理，遵循如下规则：\n    - 只要重写 `equals`，就必须重写 `hashCode`。\n    - 因为 `Set` 存储的是不重复的对象，依据 `hashCode` 和 `equals` 进行判断，所以 `Set` 存储的对象必须重写这两个方法。\n    - 如果自定义对象作为 `Map` 的键，那么必须重写 `hashCode` 和 `equals`。\n    - 说明：`String` 重写了 `hashCode` 和 `equals` 方法，可以愉快地使用 `String` 对象作为 `key` 来使用。\n\n- `ArrayList` 的 `subList` 结果不可强转成 `ArrayList`，否则会抛出 `ClassCastException` 异常，即 `java.util.RandomAccessSubList cannot be cast to java.util.ArrayList`。\n  \n  说明：`subList` 返回的是 `ArrayList` 的内部类 `SubList`，并不是 `ArrayList` ，而是 `ArrayList` 的一个视图，对于 `SubList` 子列表的所有操作最终会反映到原列表上。\n\n- 在 `subList` 场景中，高度注意对原集合元素个数的修改，会导致子列表的遍历、增加、删除均会产生 `ConcurrentModificationException` 异常。\n- 使用集合转数组的方法，必须使用集合的 `toArray(T[] array)`，传入的是类型完全一样的数组，大小就是`list.size()`。 \n  \n  说明：使用 `toArray` 带参方法，入参分配的数组空间不够大时，`toArray` 方法内部将重新分配内存空间，并返回新数组地址；\n  如果数组元素个数大于实际所需，下标为[ `list.size()` ] 的数组元素将被置为 `null`，其它数组元素保持原值，因此最好将方法入参数组大小定义与集合元素个数一致。 \n\n  ```\n  List<String> list = new ArrayList<String>(2);\n  list.add(\"guan\");\n  list.add(\"bao\");\n  String[] array = new String[list.size()];\n  array = list.toArray(array);\n  ```\n\n- 使用工具类 `Arrays.asList()`把数组转换成集合时，不能使用其修改集合相关的方法，它的 `add/remove/clear` 方法抛出  `UnsupportedOperationException` 异常。 \n\n  说明：`asList` 的返回对象是一个 `Arrays` 内部类，并没有实现集合的修改方法。`Arrays.asList`体现的是适配器模式，只是转换接口，后台的数据仍是数组。\n\n  ```\n  String[] str = new String[] {\"you\", \"wu\"};\n  List list = Arrays.asList(str);\n  ```\n\n  - 第一种情况：`list.add(“yangguanbao”);` 运行时异常。 \n  - 第二种情况：`str[0] = “gujin”;` 那么 `list.get(0)`也会随之修改。\n\n- 泛型通配符 `<? extends T>` 来接收返回的数据，此写法的泛型集合不能使用 `add` 方法，而`<? super T>`不能使用 `get` 方法，作为接口调用赋值时易出错。 \n\n    说明：扩展说一下 `PECS(Producer Extends Consumer Super)`原则：\n    1. 第一、频繁往外读取内容的，适合用`<? extends T>`。\n    2. 第二、经常往里插入的，适合用`<? super T>`。\n\n- 不要在 `foreach` 循环里进行元素的 `remove/add` 操作。`remove` 元素请使用 `Iterator`方式，如果并发操作，需要对 `Iterator` 对象加锁。 \n  \n  ```\n  // 正例：\n  Iterator<String> iterator = list.iterator();\n  while (iterator.hasNext()) {\n      String item = iterator.next();\n      if (删除元素的条件) {\n          iterator.remove();\n      }\n  }\n\n  // 反例：\n  List<String> list = new ArrayList<String>();\n  list.add(\"1\");\n  list.add(\"2\");\n  for (String item : list) {\n      if (\"1\".equals(item)) {\n          list.remove(item);\n      }\n  }\n  ```\n\n- 在 JDK7 版本及以上，`Comparator` 要满足如下三个条件，不然 `Arrays.sort`，`Collections.sort` 会报 `IllegalArgumentException` 异常。说明：三个条件如下\n    - x，y 的比较结果和 y，x 的比较结果相反。\n    - x > y，y > z，则 x>z。\n    - x = y，则 x，z 比较结果和 y，z 比较结果相同。\n\n    ```\n    // 反例：下例中没有处理相等的情况，实际使用中可能会出现异常：\n    new Comparator<Student>() {\n        @Override\n        public int compare(Student o1, Student o2) {\n            return o1.getId() > o2.getId() ? 1 : -1;\n        }\n    };\n    ```\n\n- 集合初始化时，指定集合初始值大小。 \n    - 说明：`HashMap` 使用 `HashMap(int initialCapacity)` 初始化，\n    - 正例：`initialCapacity` = (需要存储的元素个数 / 负载因子) + 1。注意负载因子（即 `loader factor`）默认为 0.75，如果暂时无法确定初始值大小，请设置为 16（即默认值）。\n    - 反例：`HashMap` 需要放置 1024 个元素，由于没有设置容量初始大小，随着元素不断增加，容量7 次被迫扩大，`resize` 需要重建 hash 表，严重影响性能。\n\n- 使用 `entrySet` 遍历 `Map` 类集合 `KV`，而不是 `keySet` 方式进行遍历。 \n    - 说明：`keySet` 其实是遍历了 2 次，一次是转为 `Iterator` 对象，另一次是从 `hashMap` 中取出 `key` 所对应的 `value`。而 `entrySet` 只是遍历了一次就把 `key` 和 `value` 都放到了 `entry` 中，效率更高。如果是 JDK8，使用 `Map.foreach` 方法。\n    - 正例：`values()`返回的是 V 值集合，是一个 `list` 集合对象；`keySet()`返回的是 K 值集合，是一个 `Set` 集合对象；`entrySet()`返回的是 K-V 值组合集合。\n\n- 高度注意 `Map` 类集合 K/V 能不能存储 null 值的情况，如下表格：\n\n集合类  |  Key | Value | Super | 说明\n:---:|:---:|:---:|:---:|:---:\nHashtable | 禁止为 null | 禁止为 null | Dictionary | 线程安全\nConcurrentHashMap | 禁止为 null  | 禁止为 null | AbstractMap | 锁分段技术（JDK8:CAS）\nTreeMap | 禁止为 null | 允许为 null | AbstractMap | 线程不安全\nHashMap | 允许为 null | 允许为 null | AbstractMap | 线程不安全\n\n  反例： 由于 HashMap 的干扰，很多人认为 `ConcurrentHashMap` 是可以置入 null 值，而事实上，存储 `null` 值时会抛出 `NPE` 异常。\n\n- 合理利用好集合的有序性(`sort`)和稳定性(`order`)，避免集合的无序性(`unsort`)和不稳定性(`unorder`)带来的负面影响。 \n  \n  说明：有序性是指遍历的结果是按某种比较规则依次排列的。稳定性指集合每次遍历的元素次序是一定的。\n  如：`ArrayList` 是 `order/unsort`；`HashMap` 是 `unorder/unsort`；`TreeSet` 是`order/sort`。\n\n- 利用 `Set` 元素唯一的特性，可以快速对一个集合进行去重操作，避免使用 `List` 的 `contains` 方法进行遍历、对比、去重操作。\n\n## 并发处理\n\n- 获取单例对象需要保证线程安全，其中的方法也要保证线程安全。说明：资源驱动类、工具类、单例工厂类都需要注意。\n- 创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。 \n\n    ```\n    // 正例：\n    public class TimerTaskThread extends Thread {\n        public TimerTaskThread() {\n        super.setName(\"TimerTaskThread\");\n        ...\n    }\n    ```\n\n- 线程资源必须通过线程池提供，不允许在应用中自行显示创建线程。 \n\n  说明：使用线程池的好处是减少在创建和销毁线程上所花的时间以及系统资源的开销，解决资源不足的问题。\n  如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。\n\n-  线程池不允许使用 `Executors` 去创建，而是通过 `ThreadPoolExecutor`的方法，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。 \n\n    说明：Executors 返回的线程池对象的弊端如下：\n    - `FixedThreadPool` 和 `SingleThreadPool`: 允许的请求队列长度为 `Integer.MAX_VALUE`，可能会堆积大量的请求，从而导致 `OOM`。\n    - `CachedThreadPool` 和 `ScheduledThreadPool`: 允许的创建线程数量为 `Integer.MAX_VALUE`，可能会创建大量的线程，从而导致 `OOM`。\n\n- `SimpleDateFormat` 是线程不安全的类，一般不要定义为 `static` 变量，如果定义为 `static`，必须加锁，或者使用 `DateUtils` 工具类。 \n\n    ```\n    // 正例：注意线程安全，使用 DateUtils。亦推荐如下处理：\n    private static final ThreadLocal<DateFormat> df = new ThreadLocal<DateFormat>() {\n        @Override\n        protected DateFormat initialValue() {\n            return new SimpleDateFormat(\"yyyy-MM-dd\");\n        }\n    };\n    ```\n\n    说明：如果是 JDK8 的应用，可以使用 `Instant` 代替 `Date`，`LocalDateTime` 代替 `Calendar`，`DateTimeFormatter` 代替 `SimpleDateFormat`，官方给出的解释：`simple beautiful strong immutable thread-safe`。\n\n- 高并发时同步调用应该去考量锁的性能损耗。能用无锁数据结构，就不要用锁；能锁区块，就不要锁整个方法体；能用对象锁，就不要用类锁。 \n    \n    说明:尽可能使加锁的代码块工作量尽可能的小，避免在锁代码块中调用 RPC 方法。\n\n- 对多个资源、数据库表、对象同时加锁时，需要保持一致的加锁顺序，否则可能会造成死锁。 \n\n    说明：线程一需要对表 A、B、C 依次全部加锁后才可以进行更新操作，那么线程二的加锁顺序也必须是 A、B、C，否则可能出现死锁。\n\n- 并发修改同一记录时，避免更新丢失，需要枷锁。要么在应用层加锁，要么在缓存加锁，要么在数据库层使用乐观锁，使用`version`作为更新依据\n。 \n    说明：如果每次访问冲突概率小于 20%，推荐使用乐观锁，否则使用悲观锁。乐观锁的重试次数不得小于 3 次。\n\n- 多线程并发处理定时任务时，`Timer`运行多个`TimeTask`时，只要其中之一没有捕获抛出的异常，其他任务便会自动终止运行，使用`ScheduledExecutorService` 则没有这个问题。\n\n- 使用 `CountDownLatch` 进行异步转同步操作，每个线程退出前必须调用 `countDown` 方法，线程执行代码注意 `catch` 异常，确保 `countDown` 方法被执行到，避免主线程无法执行至 await 方法，直到超时才返回结果。 \n\n    说明：注意，子线程抛出异常堆栈，不能在主线程 `try-catch` 到。\n\n- 避免 Random 实例被多线程使用，虽然共享该实例是线程安全的，但会因竞争同一 `seed` 导致的性能下降。\n\n    说明：Random 实例包括 `java.util.Random` 的实例或者 `Math.random()`的方式。\n\n    正例：在 JDK7 之后，可以直接使用 `API ThreadLocalRandom`，而在 JDK7 之前，需要编码保证每个线程持有一个实例。\n\n- 在并发场景下，通过双重检查锁（`double-checked locking`）实现延迟初始化的优化问题隐患(可参考 The “Double-Checked Locking is Broken” Declaration)，推荐解决方案中较为简单一种（适用于 JDK5 及以上版本），将目标属性声明为 `volatile` 型。 \n\n    ```\n    // 反例：\n    class Singleton {\n        private Helper helper = null;\n        public Helper getHelper() {\n            if (helper == null)\n                synchronized (this) {\n                    if (helper == null)\n                        helper = new Helper();\n                }\n            return helper;\n        }\n        // other methods and fields...\n    }\n    ```\n\n- `volatile` 解决多线程内存不可见问题。对于一写多读，是可以解决变量同步问题，但是如果多写，同样无法解决线程安全问题。如果是 `count++`操作，\n    \n    使用如下类实现： `AtomicInteger count = new AtomicInteger(); count.addAndGet(1); `\n    如果是 JDK8，推荐使用 LongAdder 对象，比 `AtomicLong` 性能更好（减少乐观锁的重试次数）。\n\n- `HashMap` 在容量不够进行 `resize` 时由于高并发可能出现死链，导致 CPU 飙升，在开发过程中可以使用其它数据结构或加锁来规避此风险。\n- `ThreadLocal` 无法解决共享对象的更新问题，`ThreadLocal` 对象建议使用 `static`修饰。这个变量是针对一个线程内所有操作共享的，所以设置为静态变量，所有此类实例共享此静态变量 ，也就是说在类第一次被使用时装载，只分配一块存储空间，所有此类的对象(只要是这个线程内定义的)都可以操控这个变量。\n\n## 控制语句\n\n- 在一个 `switch` 块内，每一个` case` 要么通过 `break/return` 等来终止，要么注释说明程序将继续执行到哪一个`case`为止；在一个`switch`块内，都必须包含一个`default`语句并且放在最后，即使空代码。\n- 在 `if/else/for/while/do` 语句中必须使用大括号。即使只有一行代码，避免采用单行的编码方式：`if (condition) statements;`\n- 在高并发场景中，避免使用”等于”判断作为中断或退出的条件。 \n\n    说明：如果并发控制没有处理好，容易产生等值判断被“击穿”的情况，使用大于或小于的区间判断条件来代替。\n    反例：判断剩余奖品数量等于 0 时，终止发放奖品，但因为并发处理错误导致奖品数量瞬间变成了负数，这样的话，活动无法终止。\n\n- 表达异常的分支时，少用 `if-else` 方式，这种方式可以改写成：\n\n    ```\n    // 反例\n    if (condition) {\n      ...\n      obj = ...\n    } else {\n      obj = ...\n    }\n    return obj;\n\n    // 正例\n    if (condition) {\n        ...\n        return obj;\n    }\n    obj = ...;\n    return obj;\n    ```\n\n    说明：如果非得使用 `if()...else if()...else...` 方式表达逻辑，【强制】避免后续代码维护困难，**请勿超过 3 层**。 \n    \n    正例：超过 3 层的 `if-else` 的逻辑判断代码可以使用卫语句、策略模式、状态模式等来实现，[If-Else优化方案](/developer/style-guide/if-else-optimize-solutions.html)\n    \n\n- 除常用方法（如 `getXxx/isXxx`）等外，不要在条件判断中执行其它复杂的语句，将复杂逻辑判断的结果赋值给一个有意义的布尔变量名，以提高可读性。\n    \n    说明：很多 if 语句内的逻辑相当复杂，阅读者需要分析条件表达式的最终结果，才能明确什么样的条件执行什么样的语句，那么，如果阅读者分析逻辑表达式错误呢？\n\n    ```\n    // 正例：\n    final boolean existed = (file.open(fileName, \"w\") != null) && (...) || (...); \n    if (existed) {\n        ...\n    }\n    \n    // 反例：\n    if ((file.open(fileName, \"w\") != null) && (...) || (...)) {\n        ...\n    }\n    ```\n\n- 循环体中的语句要考量性能，以下操作尽量移至循环体外处理，如定义对象、变量、获取数据库连接，进行不必要的 `try-catch` 操作（这个 `try-catch` 是否可以移至循环体外）。\n- 避免采用取反逻辑运算符。 \n    说明：取反逻辑不利于快速理解，并且取反逻辑写法必然存在对应的正向逻辑写法。 \n    \n    - 正例：使用 if (x < 628) 来表达 x 小于 628。 \n    - 反例：使用 if (!(x >= 628)) 来表达 x 小于 628。\n\n- 接口入参保护，这种场景常见的是用作鼻梁操作的接口。\n\n 下列情形，需要进行参数校验：\n    - 调用频次低的方法。\n    - 执行时间开销很大的方法。此情形中，参数校验时间几乎可以忽略不计，但如果因为参数错误导致中间执行回退，或者错误，那得不偿失。\n    - 需要极高稳定性和可用性的方法。\n    - 对外提供的开放接口，不管是 `RPC`/`API`/`HTTP` 接口。\n    - 敏感权限入口。\n\n  下列情形，不需要进行参数校验：\n    - 极有可能被循环调用的方法。但在方法说明里必须注明外部参数检查要求。\n    - 底层调用频度比较高的方法。毕竟是像纯净水过滤的最后一道，参数错误不太可能到底层才会暴露问题。一般 `DAO` 层与 `Service` \n    - 层都在同一个应用中，部署在同一台服务器中，所以 `DAO` 的参数校验，可以省略。\n    - 被声明成 `private`\n    - 只会被自己代码所调用的方法，如果能够确定调用方法的代码传入参数已经做过检查或者肯定不会有问题，此时可以不校验参数。\n\n## 注释规约\n\n- 类、类属性、类方法的注释必须使用`Javadoc`规约，使用`/** 内容 **/` 格式，不得使用 `//xxx` 方式。 \n    \n    说明：在 IDE 编辑窗口中，Javadoc 方式会提示相关注释，生成 Javadoc 可以正确输出相应注释；\n    在 IDE 中，工程调用方法时，不进入方法即可悬浮提示方法、参数、返回值的意义，提高阅读效率。\n\n- 所有的抽象方法（包括接口中的方法）必须要用javadoc注释、除了返回值、参数、异常说明外，还必须指出该方法做什么事情，实现什么功能。 \n\n  说明：对子类的实现要求，或者调用注意实现，请一并说明。\n\n- 所有类都必须添加创建者和创建日期。\n- 方法内部单行注释，在被注释语句上方另起一行，使用`// Comment`。方法内部多行注释使用`/**/`注释，注意与代码对齐。\n- 所有的枚举类型字段必须要有注释，说明每个数据项的用途。\n- 与其“半吊子”英文注释，不如用中文注释把问题说清楚。专有名词与关键字保持英文原文即可。 \n  \n  反例：“TCP 连接超时”解释成“传输控制协议连接超时”，理解反而费脑筋。\n\n- 代码修改的同时，注释也要进行相应的修改，尤其是参数、返回值、异常、核心逻辑等的修改。 \n\n  说明：代码与注释更新不同步，就像路网与导航软件更新不同步一样，如果导航软件严重滞后，就失去了导航的意义。\n\n- 谨慎注释掉代码。在上方详细说明，而不是简单地注释掉。如果无用，则删除。 \n\n  说明：代码被注释掉有两种可能性：\n    - 后续会恢复此段代码逻辑。\n    - 永久不用。前者如果没有备注信息，难以知晓注释动机。后者建议直接删掉（代码仓库保存了历史代码）。\n\n- [参考]对于注释的要求： \n    - 第一、能够准确反应设计思想和代码逻辑； \n    - 第二、能够描述业务含义，使别的程序员能够迅速了解到代码背后的信息。完全没有注释的大段代码对于阅读者形同天书，注释是给自己看的，即使隔很长时间，也能清晰理解当时的思路；注释也是给继任者看的，使其能够快速接替自己的工作。\n- 好的命名、代码结构是自解释的，注释力求精简准确、表达到位。避免出现注释的一个极端：过多过滥的注释，代码的逻辑一旦修改，修改注释是相当大的负担。\n\n  ```\n  // 反例：\n  // put elephant into fridge \n  put(elephant, fridge);\n  ```\n\n  方法名 put，加上两个有意义的变量名 elephant 和 fridge，已经说明了这是在干什么，语义清晰的代码不需要额外的注释。\n\n\n## 异常日志\n\n### 异常处理\n\n- Java 类库中定义的可以通过预检查方式规避的 `RuntimeException` 异常不应该通过catch 的方式来处理，比如：`NullPointerException`，`IndexOutOfBoundsException` 等等。 \n  \n  说明：无法通过预检查的异常除外，比如，在解析字符串形式的数字时，不得不通过 `catchNumberFormatException` 来实现。 \n\n  正例：`if (obj != null) { ... }`\n  反例：`try { obj.method() } catch (NullPointerException e) { ... }`\n\n- 异常不要用来做流程控制，条件控制。 \n  \n  说明：异常设计的初中是解决程序运行中的各种意外情况，且异常的处理效率比条件判断方式要低很多。\n\n- `catch` 时请分清稳定代码和非稳定代码，稳定代码指的是无论如何不会出错的代码。对于非稳定代码的catch尽可能进行区分异常类型，再做对应的异常处理。 \n    \n    说明：对大段代码进行try-catch，是程序无法根据不同的异常做出正确的应急反应，也不利于定位问题，这是一种不负责任的表现。 \n    \n    正例：用户注册的场景中，如果用户输入非法字符，或用户名称已存在，或用户输入密码过于简单，在程序上作出分门别类的判断，并提示给用户。\n\n- 捕获异常是为了处理它，不要捕获了却什么都不处理而抛弃之，如果不想处理它，请将该异常抛给它的调用者。最外层的业务使用者，必须处理异常，将其转化为用户可以理解的内容。\n- 有 `try` 块放到了事务代码中，`catch` 异常后，如果需要回滚事务，一定要注意手动回滚事务。\n- `finally` 块必须对资源对象、流对象进行关闭，有异常也要做 `try-catch`。 \n- 不要在 `finally` 块中使用 `return`。 \n\n  说明：finally 块中的 return 返回后方法结束执行，不会再执行 try 块中的 return 语句。\n\n- 捕获异常与抛异常，必须是完全匹配，或者捕获异常是抛异常的父类。 \n  \n  说明：如果预期对方抛的是绣球，实际接到的是铅球，就会产生意外情况。\n\n- 方法的返回值可以为 `null`，不强制返回空集合，或者空对象等，必须添加注释充分说明什么情况下会返回 `null` 值。 \n\n  说明：本手册明确防止 NPE 是调用者的责任。即使被调用方法返回空集合或者空对象，对调用者来说，也并非高枕无忧，必须考虑到远程调用失败、序列化失败、运行时异常等场景返回null 的情况。\n\n- 防止 `NPE`(NullPointerException)，是程序员的基本修养，注意 `NPE` 产生的场景：\n\n    - 返回类型为基本数据类型，`return` 包装数据类型的对象时，自动拆箱有可能产生 `NPE`。\n    - 反例：`public int f() { return Integer 对象}`， 如果为 null，自动解箱抛 NPE。\n        - 数据库的查询结果可能为 null。\n        - 集合里的元素即使 isNotEmpty，取出的数据元素也可能为 null。\n        - 远程调用返回对象时，一律要求进行空指针判断，防止 NPE。\n        - 对于 Session 中获取的数据，建议 NPE 检查，避免空指针。\n        - 级联调用 obj.getA().getB().getC()；一连串调用，易产生 NPE。\n\n    - 正例：使用 `JDK8` 的 `Optional` 类来防止 `NPE` 问题。\n\n- 定义时区分 `unchecked/checked` 异常，避免直接抛出 `new RuntimeException()`，更不允许抛出 `Exception` 或者 `Throwable`，应使用有业务含义的自定义异常。推荐业界已定义过的自定义异常，如：`DAOException`/`ServiceException` 等。\n- 对于公司外的 http/api 开放接口必须使用“错误码”；而应用内部推荐异常抛出；跨应用间 `RPC` 调用优先考虑使用 `Result` 方式，封装 `isSuccess()`方法、“错误码”、“错误简短信息”。 \n\n  说明：关于 RPC 方法返回方式使用 Result 方式的理由：\n  - 使用抛异常返回方式，调用方如果没有捕获到就会产生运行时错误。\n  - 如果不加栈信息，只是 new 自定义异常，加入自己的理解的 error message，对于调用端解决问题的帮助不会太多。如果加了栈信息，在频繁调用出错的情况下，数据序列化和传输的性能损耗也是问题。\n\n- 避免出现重复的代码（Don’t Repeat Yourself），即 DRY 原则。 \n\n    说明：随意复制和粘贴代码，必然会导致代码的重复，在以后需要修改时，需要修改所有的副本，容易遗漏。必要时抽取共性方法，或者抽象公共类，甚至是组件化。\n\n    ```    \n    // 正例：\n    // 一个类中有多个 public 方法，都需要进行数行相同的参数校验操作，这个时候请抽取：\n    private boolean checkParam(DTO dto) {...}\n    ```\n\n## 整洁代码\n\n[整洁代码的建议列表](/developer/style-guide/tips-to-keep-java-code-clean.html)","date":"2023-06-10T10:49:05.488Z","updated":"2023-06-10T10:49:05.488Z","path":"developer/style-guide/java.html","comments":1,"layout":"page","_id":"clipw1dd4000toix5d9yv8pat","content":"<h2 id=\"命名风格\"><a href=\"#命名风格\" class=\"headerlink\" title=\"命名风格\"></a>命名风格</h2><ul>\n<li><p>代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。 </p>\n</li>\n<li><p>类名使用 <code>UpperCamelCase</code> 风格。</p>\n</li>\n<li><p>方法名、参数名、成员变量、局部变量使用 <code>lowerCamelCase</code> 风格，遵循驼峰形式。</p>\n</li>\n<li><p>变量和常量的命名方式：非公有（<code>private</code>&#x2F;<code>protected</code>&#x2F;<code>default</code>）变量前面要加上小写<code>m</code>；静态变量（<code>static</code>）前面加上小写<code>s</code>；其它变量以小写字母开头；静态常量（<code>static final</code>）全大写。</p>\n</li>\n<li><p>常量命名全部大写，单词键用下划线隔开，力求语义表达完整，不要嫌名字长。 正例：<code>MAX_STOCK_COUNT</code> 反例：<code>MAX_COUNT</code></p>\n</li>\n<li><p>抽象类命名使用 <code>Abstract</code> 或 <code>Base</code> 开头；异常类命名使用 <code>Exception</code> 结尾；测试类命名以它要测试的类名开始，以 <code>Test</code> 结尾。</p>\n</li>\n<li><p>类型与中括号紧挨相连来定义数组。 正例：定义整形数组 <code>int[] arrayDemo</code>; 反例：在 <code>main</code> 参数中，使用 <code>String args []</code>来定义。</p>\n</li>\n<li><p><code>POJO</code> 类中布尔类型的标量，都不要加<code>is</code>前缀，否则部分框架解析会引起序列化错误。反例：定义为基本数据类型 <code>Boolean isDeleted；</code>的属性，它的方法也是 <code>isDeleted()</code>，RPC框架在反向解析的时候，“误以为”对应的属性名称是 <code>deleted</code>，导致属性获取不到，进而抛出异常。</p>\n</li>\n<li><p>包名统一是用小写，点分隔符之间有且仅有一个自然语义的英语单词。（此规则参考 <code>spring</code> 的框架结构）</p>\n</li>\n<li><p>杜绝完全不规范的缩写，避免忘文不知义。</p>\n</li>\n<li><p>如果模块、接口、类、方法使用了设计模式，在命名时体现出具体模式。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">public class OrderFactory;<br>public class LoginProxy;<br>public class ResourceObserver;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>接口类中的方法和属性不要加任何修饰符号(<code>public</code> 也不要加)，保持代码的简洁性，并加上有效的<code>javadoc</code>注释。尽量不要在接口里定义变量，如果一定要定义变量，肯定是与接口方法相关，并且是整个应用的基础常量。</p>\n</li>\n<li><p>如果是形容能力的接口名称，取对应的形容词为接口名（通常是<code>-able</code>的形式）。正例：<code>AbstractTranslator</code> 实现 <code>Translatable</code>。</p>\n</li>\n<li><p>枚举类名建议带上<code>Enum</code>后缀，枚举成员名称需要全部大写，单词间用下划线隔开。</p>\n</li>\n<li><p>各层命名规约： </p>\n<ul>\n<li><code>Service/DAO</code> 层方法命名规约：<ul>\n<li>获取单个对象的方法用<code>get</code>作前缀。</li>\n<li>获取多个对象的方法用<code>list</code>作前缀。</li>\n<li>获取统计值的方法用<code>count</code>作前缀。</li>\n<li>插入的方法用<code>save</code>&#x2F;<code>insert</code>作前缀。</li>\n<li>删除的方法用<code>remove</code>&#x2F;<code>delete</code>作前缀。</li>\n<li>修改的方法用<code>update</code>作前缀。</li>\n</ul>\n</li>\n<li>领域模型命名规约<ul>\n<li>数据对象 <code>xxxDO</code>，<code>xxx</code> 即为数据表名。</li>\n<li>数据传输对象：<code>xxxDTO</code>，<code>xxx</code> 为业务领域相关的名称。</li>\n<li>展示对象：<code>xxxVO</code>，<code>xxx</code>一般为网页名称。</li>\n<li><code>POJO</code>是<code>DO/DTO/BO/VO</code> 的统称，禁止命名成<code>xxxPOJO</code>。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"常量定义\"><a href=\"#常量定义\" class=\"headerlink\" title=\"常量定义\"></a>常量定义</h2><ul>\n<li><p>不允许任何魔法值（即未经预先定义的常量）直接出现在代码中。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 反例：<br>String key = &quot;Id#taobao_&quot; + tradeId;<br>cache.put(key, value);<br></code></pre></td></tr></table></figure>\n\n<p>说明：上面的<code>Id#taobao_</code>就是魔法值，需要先定义再使用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 正例：<br>private static final String NAME_TAOBAO = &quot;Id#taobao_&quot;;<br>String key = NAME_TAOBAO + tradeId;<br>cache.put(key, value);<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><code>long</code>或者<code>Long</code>初始赋值时，使用大写的<code>L</code>，不能小写的<code>l</code>，<strong>小写容易跟数字1混淆</strong>，造成误解。</p>\n</li>\n<li><p>要使用一个常量类维护所有常量，按常量功能进行归类，分开维护。</p>\n</li>\n<li><p>常量的复用层次有五层：跨应用共享常量、应用内共享常量、子工程内共享常量、包内共存常量、类内共享常量。</p>\n<ul>\n<li>跨应用共享常量：放置在二方库中，通常是 client.jar 中的 <code>constant</code> 目录下。</li>\n<li>应用内共享常量：放置在一方库中，通常是子模块中的 <code>constant</code> 目录下。</li>\n<li>反例：易懂变量也要统一定义成应用内共享常量，两位攻城师在两个类中分别定义了表示“是”的变量：</li>\n<li>类 A 中：<code>public static final String YES = “yes”</code>; </li>\n<li>类 B 中：<code>public static final String YES = “y”</code>; </li>\n<li><code>A.YES.equals(B.YES)</code>，预期是 true，但实际返回为 false，导致线上问题。<ul>\n<li>子工程内部共享常量：即在当前子工程的 constant 目录下。</li>\n<li>包内共享常量：即在当前包下单独的 constant 目录下。</li>\n<li>类内共享常量：直接在类内部 <code>private static final</code> 定义。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>变量值仅在固定范围内变化用<code>enum</code>类型来定义。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">public enum SeasonEnum &#123;<br>    SPRING(1), SUMMER(2), AUTUMN(3), WINTER(4);<br>    int seq;<br>    SeasonEnum(int seq) &#123;<br>        this.seq = seq;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"代码格式\"><a href=\"#代码格式\" class=\"headerlink\" title=\"代码格式\"></a>代码格式</h2><ul>\n<li><p>大括号的使用约定。如果是大括号内为空，则简介地写成 <code>&#123;&#125;</code> 即可，不需要换行；<br>如果是非空代码块则：</p>\n<ul>\n<li>左大括号前空一格、不换行。</li>\n<li>左大括号后换行。</li>\n<li>右大括号前换行。</li>\n<li>右大括号后还有 <code>else</code> 等代码则不换行；表示终止的右大括号后必须换行。</li>\n</ul>\n</li>\n<li><p>左小括号和字符之间不出现空格；</p>\n</li>\n<li><p><code>if/for/while/switch/do</code>等保留字与括号之间都必须加空格。</p>\n</li>\n<li><p>任何二目、三木运算符的左右两边都需要加一个空格。说明：运算符包括<code>赋值运算符=</code>、<code>逻辑运算符&amp;&amp;</code>、<code>加减乘除符号</code>等。</p>\n</li>\n<li><p>采用4个空格缩进，禁止使用<code>tab</code>字符 </p>\n<p>如果使用 tab 缩进，必须设置 1 个 tab 为 4 个空格。IDEA 设置 tab 为 4 个空格时，请勿勾选 Use tab character；<br>而在 eclipse 中，必须勾选 insert spaces for tabs。 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 正例：（涉及 1-5 点）<br>public static void main(String[] args) &#123;<br>    // 缩进 4 个空格<br>    String say = &quot;hello&quot;;<br>    int flag = 0;<br>    // 运算符的左右必须有一个空格 <br>    // 关键词 if 与括号之间必须有一个空格，括号内的 f 与左括号，0 与右括号不需要空格 <br>    if (flag == 0) &#123;<br>        System.out.println(say);<br>    &#125;<br>    // 左大括号前加空格且不换行；左大括号后换行<br>    if (flag == 1) &#123;<br>        System.out.println(&quot;world&quot;);<br>        // 右大括号前换行，右大括号后有 else，不用换行<br>    &#125; else &#123;<br>        System.out.println(&quot;ok&quot;);<br>        // 在右大括号后直接结束，则必须换行<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>注释的双斜线与注释内容之间有且仅有一个空格。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 正例：<br>// 这是示例注释，请注意在双斜线之后有一个空格<br>String ygb = new String();<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>单行字符数限制不超过120个，超出需要换行，换行时遵循如下原则：</p>\n<ul>\n<li>第二行相对第一行缩进 4 个空格，从第三行开始，不再继续缩进，参考示例。</li>\n<li>运算符与下文一起换行。</li>\n<li>方法调用的点符号与下文一起换行。</li>\n<li>方法调用时，多个参数，需要换行时，在逗号后进行。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">StringBuffer sb = new StringBuffer();<br>//超过 120 个字符的情况下，换行缩进 4 个空格，点号和方法名称一起换行 <br>sb.append(&quot;zi&quot;).append(&quot;xin&quot;)...<br>.append(&quot;huang&quot;)...<br>.append(&quot;huang&quot;)...<br>.append(&quot;huang&quot;);<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>方法参数在定义和传入时，多个参数逗号后边必须加空格。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">method(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>IDE的<code>text file encoding</code>设置为<code>UTF-8</code>; IDE 中文件的换行符使用 <code>Unix</code> 格式，不要使用 Windows 格式。</p>\n</li>\n<li><p>不同逻辑、不同语义、不同业务的代码之间插入一个空行分割开来以提升可读性。说明：没有必要插入多个空行进行隔开</p>\n</li>\n<li><p>避免通过一个类的对象引用访问此类的静态变量或静态方法，直接用类名来访问即可。</p>\n</li>\n<li><p>所有的覆写方法，必须加 <code>@Override</code> 注解。</p>\n</li>\n<li><p>相同参数类型，相同业务含义，才可以使用Java的可变参数，<strong>避免使用Object</strong>。说明：可变参数必须放置在参数列表的最后。</p>\n</li>\n<li><p>外部正在调第三方库依赖的接口，不允许修改方法签名，避免对接口调用方法产生影响。<br>接口过时必须加<code>@Deprecated</code>注解，并清晰地说明采用的新接口或者新服务是什么。</p>\n</li>\n<li><p>不能使用过时的类和方法。<br>说明：<code>java.net.URLDecoder</code> 中的方法 <code>decode(String encodeStr)</code> 这个方法已经过时，应该使用双参数 <code>decode(String source, String encode)</code>。<br>接口提供方既然明确是过时接口，那么有义务同时提供新的接口；作为调用方来说，有义务去考证过时方法的新实现是什么。</p>\n</li>\n<li><p><code>Object</code>的<code>equals</code>方法容易抛空指针异常，应使用常量或确定有值的对象来调用<code>equals</code>。 </p>\n<ul>\n<li>正例：<code>”test”.equals(object)</code>; </li>\n<li>反例：<code>object.equals(“test”)</code>; </li>\n<li>说明：推荐使用 <code>java.util.Objects#equals</code>（JDK7 引入的工具类）</li>\n</ul>\n</li>\n<li><p>所有的相同类型的包装类对象之间值的比较，全部使用<code>equals</code>方法比较。</p>\n</li>\n<li><p>关于基本数据类型与包装数据类型的使用标准如下：</p>\n<ul>\n<li>所有的 <code>POJO</code> 类属性必须使用包装数据类型。</li>\n<li><code>RPC</code> 方法的返回值和参数必须使用包装数据类型。</li>\n<li>所有的局部变量使用基本数据类型。</li>\n<li>说明：<code>POJO</code> 类属性没有初值是提醒使用者在需要使用时，必须自己显式地进行赋值，任何 <code>NPE</code> 问题，或者入库检查，都由使用者来保证。 </li>\n<li>正例：数据库的查询结果可能是 <code>null</code>，因为自动拆箱，用基本数据类型接收有 <code>NPE</code> 风险。</li>\n<li>反例：比如显示成交总额涨跌情况，即正负 x%，x 为基本数据类型，调用的 <code>RPC</code> 服务，调用不成功时，返回的是默认值，页面显示为 0%，这是不合理的，应该显示成中划线。所以包装数据类型的 <code>null</code> 值，能够表示额外的信息，如：远程调用失败，异常退出。</li>\n</ul>\n</li>\n<li><p>定义 <code>DO/DTO/VO</code> 等 <code>POJO</code> 类时，不要设定任何属性默认值。<br>反例：<code>POJO</code> 类的 <code>gmtCreate</code> 默认值为 <code>new Date();</code>但是这个属性在数据提取时并没有置入具体值，在更新其它字段时又附带更新了此字段，导致创建时间被修改成当前时间。</p>\n</li>\n<li><p>序列化类新增属性时，请不要修改 <code>serialVersionUID</code> 字段，避免反序列化失败；</p>\n</li>\n<li><p>构造方法里面禁止加入任何业务逻辑。使用IDE中的工具，请放在<code>init</code>方法中。</p>\n</li>\n<li><p>POJO类必须写<code>toString</code>方法。</p>\n<ul>\n<li>使用IDE中的工具：<code>source</code> &gt; <code>generate toString</code>时，如果继承了另一个 POJO 类，注意在前面加一下 <code>super.toString</code>。 </li>\n<li>说明：在方法执行抛出异常时，可以直接调用 <code>POJO</code> 的 <code>toString()</code>方法打印其属性值，便于排查问题。</li>\n</ul>\n</li>\n<li><p>使用索引访问String的split方法得到的数组时，需做最后一个分隔符后有无内容的检查，否则会有抛 <code>IndexOutOfBoundsException</code> 的风险。 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">String str = &quot;a,b,c,,&quot;;<br>String[] ary = str.split(&quot;,&quot;);<br>// 预期大于 3，结果是 3 <br>System.out.println(ary.length);<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>当一个类有多个构造方法，或者多个同名方法，这些方法应该按顺序放置在一起，便于阅读。</p>\n</li>\n<li><p>类内方法定义的顺序：公有方法或保护方法&gt;私有方法&gt;<code>getter/setter</code>方法。 </p>\n<p>说明：公有方法是类的调用者和维护者最关心的方法，首屏展示最好；保护方法虽然只是子类关心，也可能是“模板设计模式”下的核心方法；而私有方法外部一般不需要特别关心，是一个黑盒实现；因为承载的信息价值较低，所有 Service 和 DAO 的 getter&#x2F;setter 方法放在类体最后。</p>\n</li>\n<li><p>setter方法中，参数名称与类成员变量名称一致，<code>this.成员名 = 参数名</code>。在<code>getter/setter</code>方法中，不要增加业务逻辑，增加排查问题的难度。 </p>\n</li>\n<li><p>循环体内，字符串的连接方法，使用<code>StringBuilder</code>的append方法进行扩展。 </p>\n</li>\n<li><p><code>final</code>可以声明类、成员变量、方法、以及本地变量，下列情况使用<code>final</code>关键字：</p>\n<ul>\n<li>不允许被继承的类，如：<code>String</code> 类。</li>\n<li>不允许修改引用的域对象，如：<code>POJO</code> 类的域变量。</li>\n<li>不允许被重写的方法，如：<code>POJO</code> 类的 <code>setter</code> 方法。</li>\n<li>不允许运行过程中重新赋值的局部变量。</li>\n<li>避免上下文重复使用一个变量，使用 <code>final</code> 描述可以强制重新定义一个变量，方便更好地进行重构。</li>\n</ul>\n</li>\n<li><p>慎用<code>Object</code>的<code>clone</code>方法来拷贝对象。 </p>\n<p>说明：对象的clone方法默认是浅拷贝，若想实现深拷贝需要重写 clone 方法实现属性对象的拷贝。</p>\n</li>\n<li><p>类成员与方法访问控制从严：</p>\n<ul>\n<li>如果不允许外部直接通过 <code>new</code> 来创建对象，那么构造方法必须是 <code>private</code>。</li>\n<li>工具类不允许有 <code>public</code> 或 <code>default</code> 构造方法。</li>\n<li>类非 <code>static</code> 成员变量并且与子类共享，必须是 <code>protected</code>。</li>\n<li>类非 <code>static</code> 成员变量并且仅在本类使用，必须是 <code>private</code>。</li>\n<li>类 <code>static</code> 成员变量如果仅在本类使用，必须是 <code>private</code>。</li>\n<li>若是 <code>static</code> 成员变量，必须考虑是否为 <code>final</code>。</li>\n<li>类成员方法只供类内部调用，必须是 <code>private</code>。</li>\n<li>类成员方法只对继承类公开，那么限制为 <code>protected</code>。</li>\n<li>说明：任何类、方法、参数、变量，严控访问范围。过于宽泛的访问范围，不利于模块解耦。 </li>\n<li>思考：如果是一个<code>private</code>的方法，想删除就删除，可是一个<code>public</code>的<code>service</code>成员方法或成员变量，删除一下，不得手心冒点汗吗？变量像自己的小孩，尽量在自己的视线内，变量作用域太大，无限制的到处跑，那么你会担心的。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"集合处理\"><a href=\"#集合处理\" class=\"headerlink\" title=\"集合处理\"></a>集合处理</h2><ul>\n<li><p>关于<code>hsahCode</code>和<code>equals</code>的处理，遵循如下规则：</p>\n<ul>\n<li>只要重写 <code>equals</code>，就必须重写 <code>hashCode</code>。</li>\n<li>因为 <code>Set</code> 存储的是不重复的对象，依据 <code>hashCode</code> 和 <code>equals</code> 进行判断，所以 <code>Set</code> 存储的对象必须重写这两个方法。</li>\n<li>如果自定义对象作为 <code>Map</code> 的键，那么必须重写 <code>hashCode</code> 和 <code>equals</code>。</li>\n<li>说明：<code>String</code> 重写了 <code>hashCode</code> 和 <code>equals</code> 方法，可以愉快地使用 <code>String</code> 对象作为 <code>key</code> 来使用。</li>\n</ul>\n</li>\n<li><p><code>ArrayList</code> 的 <code>subList</code> 结果不可强转成 <code>ArrayList</code>，否则会抛出 <code>ClassCastException</code> 异常，即 <code>java.util.RandomAccessSubList cannot be cast to java.util.ArrayList</code>。</p>\n<p>说明：<code>subList</code> 返回的是 <code>ArrayList</code> 的内部类 <code>SubList</code>，并不是 <code>ArrayList</code> ，而是 <code>ArrayList</code> 的一个视图，对于 <code>SubList</code> 子列表的所有操作最终会反映到原列表上。</p>\n</li>\n<li><p>在 <code>subList</code> 场景中，高度注意对原集合元素个数的修改，会导致子列表的遍历、增加、删除均会产生 <code>ConcurrentModificationException</code> 异常。</p>\n</li>\n<li><p>使用集合转数组的方法，必须使用集合的 <code>toArray(T[] array)</code>，传入的是类型完全一样的数组，大小就是<code>list.size()</code>。 </p>\n<p>说明：使用 <code>toArray</code> 带参方法，入参分配的数组空间不够大时，<code>toArray</code> 方法内部将重新分配内存空间，并返回新数组地址；<br>如果数组元素个数大于实际所需，下标为[ <code>list.size()</code> ] 的数组元素将被置为 <code>null</code>，其它数组元素保持原值，因此最好将方法入参数组大小定义与集合元素个数一致。 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">List&lt;String&gt; list = new ArrayList&lt;String&gt;(2);<br>list.add(&quot;guan&quot;);<br>list.add(&quot;bao&quot;);<br>String[] array = new String[list.size()];<br>array = list.toArray(array);<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>使用工具类 <code>Arrays.asList()</code>把数组转换成集合时，不能使用其修改集合相关的方法，它的 <code>add/remove/clear</code> 方法抛出  <code>UnsupportedOperationException</code> 异常。 </p>\n<p>说明：<code>asList</code> 的返回对象是一个 <code>Arrays</code> 内部类，并没有实现集合的修改方法。<code>Arrays.asList</code>体现的是适配器模式，只是转换接口，后台的数据仍是数组。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">String[] str = new String[] &#123;&quot;you&quot;, &quot;wu&quot;&#125;;<br>List list = Arrays.asList(str);<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>第一种情况：<code>list.add(“yangguanbao”);</code> 运行时异常。 </li>\n<li>第二种情况：<code>str[0] = “gujin”;</code> 那么 <code>list.get(0)</code>也会随之修改。</li>\n</ul>\n</li>\n<li><p>泛型通配符 <code>&lt;? extends T&gt;</code> 来接收返回的数据，此写法的泛型集合不能使用 <code>add</code> 方法，而<code>&lt;? super T&gt;</code>不能使用 <code>get</code> 方法，作为接口调用赋值时易出错。 </p>\n<p>  说明：扩展说一下 <code>PECS(Producer Extends Consumer Super)</code>原则：</p>\n<ol>\n<li>第一、频繁往外读取内容的，适合用<code>&lt;? extends T&gt;</code>。</li>\n<li>第二、经常往里插入的，适合用<code>&lt;? super T&gt;</code>。</li>\n</ol>\n</li>\n<li><p>不要在 <code>foreach</code> 循环里进行元素的 <code>remove/add</code> 操作。<code>remove</code> 元素请使用 <code>Iterator</code>方式，如果并发操作，需要对 <code>Iterator</code> 对象加锁。 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 正例：<br>Iterator&lt;String&gt; iterator = list.iterator();<br>while (iterator.hasNext()) &#123;<br>    String item = iterator.next();<br>    if (删除元素的条件) &#123;<br>        iterator.remove();<br>    &#125;<br>&#125;<br><br>// 反例：<br>List&lt;String&gt; list = new ArrayList&lt;String&gt;();<br>list.add(&quot;1&quot;);<br>list.add(&quot;2&quot;);<br>for (String item : list) &#123;<br>    if (&quot;1&quot;.equals(item)) &#123;<br>        list.remove(item);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>在 JDK7 版本及以上，<code>Comparator</code> 要满足如下三个条件，不然 <code>Arrays.sort</code>，<code>Collections.sort</code> 会报 <code>IllegalArgumentException</code> 异常。说明：三个条件如下</p>\n<ul>\n<li>x，y 的比较结果和 y，x 的比较结果相反。</li>\n<li>x &gt; y，y &gt; z，则 x&gt;z。</li>\n<li>x &#x3D; y，则 x，z 比较结果和 y，z 比较结果相同。</li>\n</ul>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 反例：下例中没有处理相等的情况，实际使用中可能会出现异常：<br>new Comparator&lt;Student&gt;() &#123;<br>    @Override<br>    public int compare(Student o1, Student o2) &#123;<br>        return o1.getId() &gt; o2.getId() ? 1 : -1;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>集合初始化时，指定集合初始值大小。 </p>\n<ul>\n<li>说明：<code>HashMap</code> 使用 <code>HashMap(int initialCapacity)</code> 初始化，</li>\n<li>正例：<code>initialCapacity</code> &#x3D; (需要存储的元素个数 &#x2F; 负载因子) + 1。注意负载因子（即 <code>loader factor</code>）默认为 0.75，如果暂时无法确定初始值大小，请设置为 16（即默认值）。</li>\n<li>反例：<code>HashMap</code> 需要放置 1024 个元素，由于没有设置容量初始大小，随着元素不断增加，容量7 次被迫扩大，<code>resize</code> 需要重建 hash 表，严重影响性能。</li>\n</ul>\n</li>\n<li><p>使用 <code>entrySet</code> 遍历 <code>Map</code> 类集合 <code>KV</code>，而不是 <code>keySet</code> 方式进行遍历。 </p>\n<ul>\n<li>说明：<code>keySet</code> 其实是遍历了 2 次，一次是转为 <code>Iterator</code> 对象，另一次是从 <code>hashMap</code> 中取出 <code>key</code> 所对应的 <code>value</code>。而 <code>entrySet</code> 只是遍历了一次就把 <code>key</code> 和 <code>value</code> 都放到了 <code>entry</code> 中，效率更高。如果是 JDK8，使用 <code>Map.foreach</code> 方法。</li>\n<li>正例：<code>values()</code>返回的是 V 值集合，是一个 <code>list</code> 集合对象；<code>keySet()</code>返回的是 K 值集合，是一个 <code>Set</code> 集合对象；<code>entrySet()</code>返回的是 K-V 值组合集合。</li>\n</ul>\n</li>\n<li><p>高度注意 <code>Map</code> 类集合 K&#x2F;V 能不能存储 null 值的情况，如下表格：</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">集合类</th>\n<th align=\"center\">Key</th>\n<th align=\"center\">Value</th>\n<th align=\"center\">Super</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Hashtable</td>\n<td align=\"center\">禁止为 null</td>\n<td align=\"center\">禁止为 null</td>\n<td align=\"center\">Dictionary</td>\n<td align=\"center\">线程安全</td>\n</tr>\n<tr>\n<td align=\"center\">ConcurrentHashMap</td>\n<td align=\"center\">禁止为 null</td>\n<td align=\"center\">禁止为 null</td>\n<td align=\"center\">AbstractMap</td>\n<td align=\"center\">锁分段技术（JDK8:CAS）</td>\n</tr>\n<tr>\n<td align=\"center\">TreeMap</td>\n<td align=\"center\">禁止为 null</td>\n<td align=\"center\">允许为 null</td>\n<td align=\"center\">AbstractMap</td>\n<td align=\"center\">线程不安全</td>\n</tr>\n<tr>\n<td align=\"center\">HashMap</td>\n<td align=\"center\">允许为 null</td>\n<td align=\"center\">允许为 null</td>\n<td align=\"center\">AbstractMap</td>\n<td align=\"center\">线程不安全</td>\n</tr>\n</tbody></table>\n<p>  反例： 由于 HashMap 的干扰，很多人认为 <code>ConcurrentHashMap</code> 是可以置入 null 值，而事实上，存储 <code>null</code> 值时会抛出 <code>NPE</code> 异常。</p>\n<ul>\n<li><p>合理利用好集合的有序性(<code>sort</code>)和稳定性(<code>order</code>)，避免集合的无序性(<code>unsort</code>)和不稳定性(<code>unorder</code>)带来的负面影响。 </p>\n<p>说明：有序性是指遍历的结果是按某种比较规则依次排列的。稳定性指集合每次遍历的元素次序是一定的。<br>如：<code>ArrayList</code> 是 <code>order/unsort</code>；<code>HashMap</code> 是 <code>unorder/unsort</code>；<code>TreeSet</code> 是<code>order/sort</code>。</p>\n</li>\n<li><p>利用 <code>Set</code> 元素唯一的特性，可以快速对一个集合进行去重操作，避免使用 <code>List</code> 的 <code>contains</code> 方法进行遍历、对比、去重操作。</p>\n</li>\n</ul>\n<h2 id=\"并发处理\"><a href=\"#并发处理\" class=\"headerlink\" title=\"并发处理\"></a>并发处理</h2><ul>\n<li><p>获取单例对象需要保证线程安全，其中的方法也要保证线程安全。说明：资源驱动类、工具类、单例工厂类都需要注意。</p>\n</li>\n<li><p>创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。 </p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 正例：<br>public class TimerTaskThread extends Thread &#123;<br>    public TimerTaskThread() &#123;<br>    super.setName(&quot;TimerTaskThread&quot;);<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>线程资源必须通过线程池提供，不允许在应用中自行显示创建线程。 </p>\n<p>说明：使用线程池的好处是减少在创建和销毁线程上所花的时间以及系统资源的开销，解决资源不足的问题。<br>如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。</p>\n</li>\n<li><p>线程池不允许使用 <code>Executors</code> 去创建，而是通过 <code>ThreadPoolExecutor</code>的方法，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。 </p>\n<p> 说明：Executors 返回的线程池对象的弊端如下：</p>\n<ul>\n<li><code>FixedThreadPool</code> 和 <code>SingleThreadPool</code>: 允许的请求队列长度为 <code>Integer.MAX_VALUE</code>，可能会堆积大量的请求，从而导致 <code>OOM</code>。</li>\n<li><code>CachedThreadPool</code> 和 <code>ScheduledThreadPool</code>: 允许的创建线程数量为 <code>Integer.MAX_VALUE</code>，可能会创建大量的线程，从而导致 <code>OOM</code>。</li>\n</ul>\n</li>\n<li><p><code>SimpleDateFormat</code> 是线程不安全的类，一般不要定义为 <code>static</code> 变量，如果定义为 <code>static</code>，必须加锁，或者使用 <code>DateUtils</code> 工具类。 </p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 正例：注意线程安全，使用 DateUtils。亦推荐如下处理：<br>private static final ThreadLocal&lt;DateFormat&gt; df = new ThreadLocal&lt;DateFormat&gt;() &#123;<br>    @Override<br>    protected DateFormat initialValue() &#123;<br>        return new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>  说明：如果是 JDK8 的应用，可以使用 <code>Instant</code> 代替 <code>Date</code>，<code>LocalDateTime</code> 代替 <code>Calendar</code>，<code>DateTimeFormatter</code> 代替 <code>SimpleDateFormat</code>，官方给出的解释：<code>simple beautiful strong immutable thread-safe</code>。</p>\n</li>\n<li><p>高并发时同步调用应该去考量锁的性能损耗。能用无锁数据结构，就不要用锁；能锁区块，就不要锁整个方法体；能用对象锁，就不要用类锁。 </p>\n<p>  说明:尽可能使加锁的代码块工作量尽可能的小，避免在锁代码块中调用 RPC 方法。</p>\n</li>\n<li><p>对多个资源、数据库表、对象同时加锁时，需要保持一致的加锁顺序，否则可能会造成死锁。 </p>\n<p>  说明：线程一需要对表 A、B、C 依次全部加锁后才可以进行更新操作，那么线程二的加锁顺序也必须是 A、B、C，否则可能出现死锁。</p>\n</li>\n<li><p>并发修改同一记录时，避免更新丢失，需要枷锁。要么在应用层加锁，要么在缓存加锁，要么在数据库层使用乐观锁，使用<code>version</code>作为更新依据<br>。<br>  说明：如果每次访问冲突概率小于 20%，推荐使用乐观锁，否则使用悲观锁。乐观锁的重试次数不得小于 3 次。</p>\n</li>\n<li><p>多线程并发处理定时任务时，<code>Timer</code>运行多个<code>TimeTask</code>时，只要其中之一没有捕获抛出的异常，其他任务便会自动终止运行，使用<code>ScheduledExecutorService</code> 则没有这个问题。</p>\n</li>\n<li><p>使用 <code>CountDownLatch</code> 进行异步转同步操作，每个线程退出前必须调用 <code>countDown</code> 方法，线程执行代码注意 <code>catch</code> 异常，确保 <code>countDown</code> 方法被执行到，避免主线程无法执行至 await 方法，直到超时才返回结果。 </p>\n<p>  说明：注意，子线程抛出异常堆栈，不能在主线程 <code>try-catch</code> 到。</p>\n</li>\n<li><p>避免 Random 实例被多线程使用，虽然共享该实例是线程安全的，但会因竞争同一 <code>seed</code> 导致的性能下降。</p>\n<p>  说明：Random 实例包括 <code>java.util.Random</code> 的实例或者 <code>Math.random()</code>的方式。</p>\n<p>  正例：在 JDK7 之后，可以直接使用 <code>API ThreadLocalRandom</code>，而在 JDK7 之前，需要编码保证每个线程持有一个实例。</p>\n</li>\n<li><p>在并发场景下，通过双重检查锁（<code>double-checked locking</code>）实现延迟初始化的优化问题隐患(可参考 The “Double-Checked Locking is Broken” Declaration)，推荐解决方案中较为简单一种（适用于 JDK5 及以上版本），将目标属性声明为 <code>volatile</code> 型。 </p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 反例：<br>class Singleton &#123;<br>    private Helper helper = null;<br>    public Helper getHelper() &#123;<br>        if (helper == null)<br>            synchronized (this) &#123;<br>                if (helper == null)<br>                    helper = new Helper();<br>            &#125;<br>        return helper;<br>    &#125;<br>    // other methods and fields...<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><code>volatile</code> 解决多线程内存不可见问题。对于一写多读，是可以解决变量同步问题，但是如果多写，同样无法解决线程安全问题。如果是 <code>count++</code>操作，</p>\n<p>  使用如下类实现： <code>AtomicInteger count = new AtomicInteger(); count.addAndGet(1); </code><br>  如果是 JDK8，推荐使用 LongAdder 对象，比 <code>AtomicLong</code> 性能更好（减少乐观锁的重试次数）。</p>\n</li>\n<li><p><code>HashMap</code> 在容量不够进行 <code>resize</code> 时由于高并发可能出现死链，导致 CPU 飙升，在开发过程中可以使用其它数据结构或加锁来规避此风险。</p>\n</li>\n<li><p><code>ThreadLocal</code> 无法解决共享对象的更新问题，<code>ThreadLocal</code> 对象建议使用 <code>static</code>修饰。这个变量是针对一个线程内所有操作共享的，所以设置为静态变量，所有此类实例共享此静态变量 ，也就是说在类第一次被使用时装载，只分配一块存储空间，所有此类的对象(只要是这个线程内定义的)都可以操控这个变量。</p>\n</li>\n</ul>\n<h2 id=\"控制语句\"><a href=\"#控制语句\" class=\"headerlink\" title=\"控制语句\"></a>控制语句</h2><ul>\n<li><p>在一个 <code>switch</code> 块内，每一个<code> case</code> 要么通过 <code>break/return</code> 等来终止，要么注释说明程序将继续执行到哪一个<code>case</code>为止；在一个<code>switch</code>块内，都必须包含一个<code>default</code>语句并且放在最后，即使空代码。</p>\n</li>\n<li><p>在 <code>if/else/for/while/do</code> 语句中必须使用大括号。即使只有一行代码，避免采用单行的编码方式：<code>if (condition) statements;</code></p>\n</li>\n<li><p>在高并发场景中，避免使用”等于”判断作为中断或退出的条件。 </p>\n<p>  说明：如果并发控制没有处理好，容易产生等值判断被“击穿”的情况，使用大于或小于的区间判断条件来代替。<br>  反例：判断剩余奖品数量等于 0 时，终止发放奖品，但因为并发处理错误导致奖品数量瞬间变成了负数，这样的话，活动无法终止。</p>\n</li>\n<li><p>表达异常的分支时，少用 <code>if-else</code> 方式，这种方式可以改写成：</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 反例<br>if (condition) &#123;<br>  ...<br>  obj = ...<br>&#125; else &#123;<br>  obj = ...<br>&#125;<br>return obj;<br><br>// 正例<br>if (condition) &#123;<br>    ...<br>    return obj;<br>&#125;<br>obj = ...;<br>return obj;<br></code></pre></td></tr></table></figure>\n\n<p>  说明：如果非得使用 <code>if()...else if()...else...</code> 方式表达逻辑，【强制】避免后续代码维护困难，<strong>请勿超过 3 层</strong>。 </p>\n<p>  正例：超过 3 层的 <code>if-else</code> 的逻辑判断代码可以使用卫语句、策略模式、状态模式等来实现，<a href=\"/developer/style-guide/if-else-optimize-solutions.html\">If-Else优化方案</a></p>\n</li>\n<li><p>除常用方法（如 <code>getXxx/isXxx</code>）等外，不要在条件判断中执行其它复杂的语句，将复杂逻辑判断的结果赋值给一个有意义的布尔变量名，以提高可读性。</p>\n<p>  说明：很多 if 语句内的逻辑相当复杂，阅读者需要分析条件表达式的最终结果，才能明确什么样的条件执行什么样的语句，那么，如果阅读者分析逻辑表达式错误呢？</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 正例：<br>final boolean existed = (file.open(fileName, &quot;w&quot;) != null) &amp;&amp; (...) || (...); <br>if (existed) &#123;<br>    ...<br>&#125;<br><br>// 反例：<br>if ((file.open(fileName, &quot;w&quot;) != null) &amp;&amp; (...) || (...)) &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>循环体中的语句要考量性能，以下操作尽量移至循环体外处理，如定义对象、变量、获取数据库连接，进行不必要的 <code>try-catch</code> 操作（这个 <code>try-catch</code> 是否可以移至循环体外）。</p>\n</li>\n<li><p>避免采用取反逻辑运算符。<br>  说明：取反逻辑不利于快速理解，并且取反逻辑写法必然存在对应的正向逻辑写法。 </p>\n<ul>\n<li>正例：使用 if (x &lt; 628) 来表达 x 小于 628。 </li>\n<li>反例：使用 if (!(x &gt;&#x3D; 628)) 来表达 x 小于 628。</li>\n</ul>\n</li>\n<li><p>接口入参保护，这种场景常见的是用作鼻梁操作的接口。</p>\n</li>\n</ul>\n<p> 下列情形，需要进行参数校验：<br>    - 调用频次低的方法。<br>    - 执行时间开销很大的方法。此情形中，参数校验时间几乎可以忽略不计，但如果因为参数错误导致中间执行回退，或者错误，那得不偿失。<br>    - 需要极高稳定性和可用性的方法。<br>    - 对外提供的开放接口，不管是 <code>RPC</code>&#x2F;<code>API</code>&#x2F;<code>HTTP</code> 接口。<br>    - 敏感权限入口。</p>\n<p>  下列情形，不需要进行参数校验：<br>    - 极有可能被循环调用的方法。但在方法说明里必须注明外部参数检查要求。<br>    - 底层调用频度比较高的方法。毕竟是像纯净水过滤的最后一道，参数错误不太可能到底层才会暴露问题。一般 <code>DAO</code> 层与 <code>Service</code><br>    - 层都在同一个应用中，部署在同一台服务器中，所以 <code>DAO</code> 的参数校验，可以省略。<br>    - 被声明成 <code>private</code><br>    - 只会被自己代码所调用的方法，如果能够确定调用方法的代码传入参数已经做过检查或者肯定不会有问题，此时可以不校验参数。</p>\n<h2 id=\"注释规约\"><a href=\"#注释规约\" class=\"headerlink\" title=\"注释规约\"></a>注释规约</h2><ul>\n<li><p>类、类属性、类方法的注释必须使用<code>Javadoc</code>规约，使用<code>/** 内容 **/</code> 格式，不得使用 <code>//xxx</code> 方式。 </p>\n<p>  说明：在 IDE 编辑窗口中，Javadoc 方式会提示相关注释，生成 Javadoc 可以正确输出相应注释；<br>  在 IDE 中，工程调用方法时，不进入方法即可悬浮提示方法、参数、返回值的意义，提高阅读效率。</p>\n</li>\n<li><p>所有的抽象方法（包括接口中的方法）必须要用javadoc注释、除了返回值、参数、异常说明外，还必须指出该方法做什么事情，实现什么功能。 </p>\n<p>说明：对子类的实现要求，或者调用注意实现，请一并说明。</p>\n</li>\n<li><p>所有类都必须添加创建者和创建日期。</p>\n</li>\n<li><p>方法内部单行注释，在被注释语句上方另起一行，使用<code>// Comment</code>。方法内部多行注释使用<code>/**/</code>注释，注意与代码对齐。</p>\n</li>\n<li><p>所有的枚举类型字段必须要有注释，说明每个数据项的用途。</p>\n</li>\n<li><p>与其“半吊子”英文注释，不如用中文注释把问题说清楚。专有名词与关键字保持英文原文即可。 </p>\n<p>反例：“TCP 连接超时”解释成“传输控制协议连接超时”，理解反而费脑筋。</p>\n</li>\n<li><p>代码修改的同时，注释也要进行相应的修改，尤其是参数、返回值、异常、核心逻辑等的修改。 </p>\n<p>说明：代码与注释更新不同步，就像路网与导航软件更新不同步一样，如果导航软件严重滞后，就失去了导航的意义。</p>\n</li>\n<li><p>谨慎注释掉代码。在上方详细说明，而不是简单地注释掉。如果无用，则删除。 </p>\n<p>说明：代码被注释掉有两种可能性：</p>\n<ul>\n<li>后续会恢复此段代码逻辑。</li>\n<li>永久不用。前者如果没有备注信息，难以知晓注释动机。后者建议直接删掉（代码仓库保存了历史代码）。</li>\n</ul>\n</li>\n<li><p>[参考]对于注释的要求： </p>\n<ul>\n<li>第一、能够准确反应设计思想和代码逻辑； </li>\n<li>第二、能够描述业务含义，使别的程序员能够迅速了解到代码背后的信息。完全没有注释的大段代码对于阅读者形同天书，注释是给自己看的，即使隔很长时间，也能清晰理解当时的思路；注释也是给继任者看的，使其能够快速接替自己的工作。</li>\n</ul>\n</li>\n<li><p>好的命名、代码结构是自解释的，注释力求精简准确、表达到位。避免出现注释的一个极端：过多过滥的注释，代码的逻辑一旦修改，修改注释是相当大的负担。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 反例：<br>// put elephant into fridge <br>put(elephant, fridge);<br></code></pre></td></tr></table></figure>\n\n<p>方法名 put，加上两个有意义的变量名 elephant 和 fridge，已经说明了这是在干什么，语义清晰的代码不需要额外的注释。</p>\n</li>\n</ul>\n<h2 id=\"异常日志\"><a href=\"#异常日志\" class=\"headerlink\" title=\"异常日志\"></a>异常日志</h2><h3 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h3><ul>\n<li><p>Java 类库中定义的可以通过预检查方式规避的 <code>RuntimeException</code> 异常不应该通过catch 的方式来处理，比如：<code>NullPointerException</code>，<code>IndexOutOfBoundsException</code> 等等。 </p>\n<p>说明：无法通过预检查的异常除外，比如，在解析字符串形式的数字时，不得不通过 <code>catchNumberFormatException</code> 来实现。 </p>\n<p>正例：<code>if (obj != null) &#123; ... &#125;</code><br>反例：<code>try &#123; obj.method() &#125; catch (NullPointerException e) &#123; ... &#125;</code></p>\n</li>\n<li><p>异常不要用来做流程控制，条件控制。 </p>\n<p>说明：异常设计的初中是解决程序运行中的各种意外情况，且异常的处理效率比条件判断方式要低很多。</p>\n</li>\n<li><p><code>catch</code> 时请分清稳定代码和非稳定代码，稳定代码指的是无论如何不会出错的代码。对于非稳定代码的catch尽可能进行区分异常类型，再做对应的异常处理。 </p>\n<p>  说明：对大段代码进行try-catch，是程序无法根据不同的异常做出正确的应急反应，也不利于定位问题，这是一种不负责任的表现。 </p>\n<p>  正例：用户注册的场景中，如果用户输入非法字符，或用户名称已存在，或用户输入密码过于简单，在程序上作出分门别类的判断，并提示给用户。</p>\n</li>\n<li><p>捕获异常是为了处理它，不要捕获了却什么都不处理而抛弃之，如果不想处理它，请将该异常抛给它的调用者。最外层的业务使用者，必须处理异常，将其转化为用户可以理解的内容。</p>\n</li>\n<li><p>有 <code>try</code> 块放到了事务代码中，<code>catch</code> 异常后，如果需要回滚事务，一定要注意手动回滚事务。</p>\n</li>\n<li><p><code>finally</code> 块必须对资源对象、流对象进行关闭，有异常也要做 <code>try-catch</code>。 </p>\n</li>\n<li><p>不要在 <code>finally</code> 块中使用 <code>return</code>。 </p>\n<p>说明：finally 块中的 return 返回后方法结束执行，不会再执行 try 块中的 return 语句。</p>\n</li>\n<li><p>捕获异常与抛异常，必须是完全匹配，或者捕获异常是抛异常的父类。 </p>\n<p>说明：如果预期对方抛的是绣球，实际接到的是铅球，就会产生意外情况。</p>\n</li>\n<li><p>方法的返回值可以为 <code>null</code>，不强制返回空集合，或者空对象等，必须添加注释充分说明什么情况下会返回 <code>null</code> 值。 </p>\n<p>说明：本手册明确防止 NPE 是调用者的责任。即使被调用方法返回空集合或者空对象，对调用者来说，也并非高枕无忧，必须考虑到远程调用失败、序列化失败、运行时异常等场景返回null 的情况。</p>\n</li>\n<li><p>防止 <code>NPE</code>(NullPointerException)，是程序员的基本修养，注意 <code>NPE</code> 产生的场景：</p>\n<ul>\n<li><p>返回类型为基本数据类型，<code>return</code> 包装数据类型的对象时，自动拆箱有可能产生 <code>NPE</code>。</p>\n</li>\n<li><p>反例：<code>public int f() &#123; return Integer 对象&#125;</code>， 如果为 null，自动解箱抛 NPE。</p>\n<ul>\n<li>数据库的查询结果可能为 null。</li>\n<li>集合里的元素即使 isNotEmpty，取出的数据元素也可能为 null。</li>\n<li>远程调用返回对象时，一律要求进行空指针判断，防止 NPE。</li>\n<li>对于 Session 中获取的数据，建议 NPE 检查，避免空指针。</li>\n<li>级联调用 obj.getA().getB().getC()；一连串调用，易产生 NPE。</li>\n</ul>\n</li>\n<li><p>正例：使用 <code>JDK8</code> 的 <code>Optional</code> 类来防止 <code>NPE</code> 问题。</p>\n</li>\n</ul>\n</li>\n<li><p>定义时区分 <code>unchecked/checked</code> 异常，避免直接抛出 <code>new RuntimeException()</code>，更不允许抛出 <code>Exception</code> 或者 <code>Throwable</code>，应使用有业务含义的自定义异常。推荐业界已定义过的自定义异常，如：<code>DAOException</code>&#x2F;<code>ServiceException</code> 等。</p>\n</li>\n<li><p>对于公司外的 http&#x2F;api 开放接口必须使用“错误码”；而应用内部推荐异常抛出；跨应用间 <code>RPC</code> 调用优先考虑使用 <code>Result</code> 方式，封装 <code>isSuccess()</code>方法、“错误码”、“错误简短信息”。 </p>\n<p>说明：关于 RPC 方法返回方式使用 Result 方式的理由：</p>\n<ul>\n<li>使用抛异常返回方式，调用方如果没有捕获到就会产生运行时错误。</li>\n<li>如果不加栈信息，只是 new 自定义异常，加入自己的理解的 error message，对于调用端解决问题的帮助不会太多。如果加了栈信息，在频繁调用出错的情况下，数据序列化和传输的性能损耗也是问题。</li>\n</ul>\n</li>\n<li><p>避免出现重复的代码（Don’t Repeat Yourself），即 DRY 原则。 </p>\n<p>  说明：随意复制和粘贴代码，必然会导致代码的重复，在以后需要修改时，需要修改所有的副本，容易遗漏。必要时抽取共性方法，或者抽象公共类，甚至是组件化。</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 正例：<br>// 一个类中有多个 public 方法，都需要进行数行相同的参数校验操作，这个时候请抽取：<br>private boolean checkParam(DTO dto) &#123;...&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"整洁代码\"><a href=\"#整洁代码\" class=\"headerlink\" title=\"整洁代码\"></a>整洁代码</h2><p><a href=\"/developer/style-guide/tips-to-keep-java-code-clean.html\">整洁代码的建议列表</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"命名风格\"><a href=\"#命名风格\" class=\"headerlink\" title=\"命名风格\"></a>命名风格</h2><ul>\n<li><p>代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。 </p>\n</li>\n<li><p>类名使用 <code>UpperCamelCase</code> 风格。</p>\n</li>\n<li><p>方法名、参数名、成员变量、局部变量使用 <code>lowerCamelCase</code> 风格，遵循驼峰形式。</p>\n</li>\n<li><p>变量和常量的命名方式：非公有（<code>private</code>&#x2F;<code>protected</code>&#x2F;<code>default</code>）变量前面要加上小写<code>m</code>；静态变量（<code>static</code>）前面加上小写<code>s</code>；其它变量以小写字母开头；静态常量（<code>static final</code>）全大写。</p>\n</li>\n<li><p>常量命名全部大写，单词键用下划线隔开，力求语义表达完整，不要嫌名字长。 正例：<code>MAX_STOCK_COUNT</code> 反例：<code>MAX_COUNT</code></p>\n</li>\n<li><p>抽象类命名使用 <code>Abstract</code> 或 <code>Base</code> 开头；异常类命名使用 <code>Exception</code> 结尾；测试类命名以它要测试的类名开始，以 <code>Test</code> 结尾。</p>\n</li>\n<li><p>类型与中括号紧挨相连来定义数组。 正例：定义整形数组 <code>int[] arrayDemo</code>; 反例：在 <code>main</code> 参数中，使用 <code>String args []</code>来定义。</p>\n</li>\n<li><p><code>POJO</code> 类中布尔类型的标量，都不要加<code>is</code>前缀，否则部分框架解析会引起序列化错误。反例：定义为基本数据类型 <code>Boolean isDeleted；</code>的属性，它的方法也是 <code>isDeleted()</code>，RPC框架在反向解析的时候，“误以为”对应的属性名称是 <code>deleted</code>，导致属性获取不到，进而抛出异常。</p>\n</li>\n<li><p>包名统一是用小写，点分隔符之间有且仅有一个自然语义的英语单词。（此规则参考 <code>spring</code> 的框架结构）</p>\n</li>\n<li><p>杜绝完全不规范的缩写，避免忘文不知义。</p>\n</li>\n<li><p>如果模块、接口、类、方法使用了设计模式，在命名时体现出具体模式。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">public class OrderFactory;<br>public class LoginProxy;<br>public class ResourceObserver;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>接口类中的方法和属性不要加任何修饰符号(<code>public</code> 也不要加)，保持代码的简洁性，并加上有效的<code>javadoc</code>注释。尽量不要在接口里定义变量，如果一定要定义变量，肯定是与接口方法相关，并且是整个应用的基础常量。</p>\n</li>\n<li><p>如果是形容能力的接口名称，取对应的形容词为接口名（通常是<code>-able</code>的形式）。正例：<code>AbstractTranslator</code> 实现 <code>Translatable</code>。</p>\n</li>\n<li><p>枚举类名建议带上<code>Enum</code>后缀，枚举成员名称需要全部大写，单词间用下划线隔开。</p>\n</li>\n<li><p>各层命名规约： </p>\n<ul>\n<li><code>Service/DAO</code> 层方法命名规约：<ul>\n<li>获取单个对象的方法用<code>get</code>作前缀。</li>\n<li>获取多个对象的方法用<code>list</code>作前缀。</li>\n<li>获取统计值的方法用<code>count</code>作前缀。</li>\n<li>插入的方法用<code>save</code>&#x2F;<code>insert</code>作前缀。</li>\n<li>删除的方法用<code>remove</code>&#x2F;<code>delete</code>作前缀。</li>\n<li>修改的方法用<code>update</code>作前缀。</li>\n</ul>\n</li>\n<li>领域模型命名规约<ul>\n<li>数据对象 <code>xxxDO</code>，<code>xxx</code> 即为数据表名。</li>\n<li>数据传输对象：<code>xxxDTO</code>，<code>xxx</code> 为业务领域相关的名称。</li>\n<li>展示对象：<code>xxxVO</code>，<code>xxx</code>一般为网页名称。</li>\n<li><code>POJO</code>是<code>DO/DTO/BO/VO</code> 的统称，禁止命名成<code>xxxPOJO</code>。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"常量定义\"><a href=\"#常量定义\" class=\"headerlink\" title=\"常量定义\"></a>常量定义</h2><ul>\n<li><p>不允许任何魔法值（即未经预先定义的常量）直接出现在代码中。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 反例：<br>String key = &quot;Id#taobao_&quot; + tradeId;<br>cache.put(key, value);<br></code></pre></td></tr></table></figure>\n\n<p>说明：上面的<code>Id#taobao_</code>就是魔法值，需要先定义再使用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 正例：<br>private static final String NAME_TAOBAO = &quot;Id#taobao_&quot;;<br>String key = NAME_TAOBAO + tradeId;<br>cache.put(key, value);<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><code>long</code>或者<code>Long</code>初始赋值时，使用大写的<code>L</code>，不能小写的<code>l</code>，<strong>小写容易跟数字1混淆</strong>，造成误解。</p>\n</li>\n<li><p>要使用一个常量类维护所有常量，按常量功能进行归类，分开维护。</p>\n</li>\n<li><p>常量的复用层次有五层：跨应用共享常量、应用内共享常量、子工程内共享常量、包内共存常量、类内共享常量。</p>\n<ul>\n<li>跨应用共享常量：放置在二方库中，通常是 client.jar 中的 <code>constant</code> 目录下。</li>\n<li>应用内共享常量：放置在一方库中，通常是子模块中的 <code>constant</code> 目录下。</li>\n<li>反例：易懂变量也要统一定义成应用内共享常量，两位攻城师在两个类中分别定义了表示“是”的变量：</li>\n<li>类 A 中：<code>public static final String YES = “yes”</code>; </li>\n<li>类 B 中：<code>public static final String YES = “y”</code>; </li>\n<li><code>A.YES.equals(B.YES)</code>，预期是 true，但实际返回为 false，导致线上问题。<ul>\n<li>子工程内部共享常量：即在当前子工程的 constant 目录下。</li>\n<li>包内共享常量：即在当前包下单独的 constant 目录下。</li>\n<li>类内共享常量：直接在类内部 <code>private static final</code> 定义。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>变量值仅在固定范围内变化用<code>enum</code>类型来定义。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">public enum SeasonEnum &#123;<br>    SPRING(1), SUMMER(2), AUTUMN(3), WINTER(4);<br>    int seq;<br>    SeasonEnum(int seq) &#123;<br>        this.seq = seq;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"代码格式\"><a href=\"#代码格式\" class=\"headerlink\" title=\"代码格式\"></a>代码格式</h2><ul>\n<li><p>大括号的使用约定。如果是大括号内为空，则简介地写成 <code>&#123;&#125;</code> 即可，不需要换行；<br>如果是非空代码块则：</p>\n<ul>\n<li>左大括号前空一格、不换行。</li>\n<li>左大括号后换行。</li>\n<li>右大括号前换行。</li>\n<li>右大括号后还有 <code>else</code> 等代码则不换行；表示终止的右大括号后必须换行。</li>\n</ul>\n</li>\n<li><p>左小括号和字符之间不出现空格；</p>\n</li>\n<li><p><code>if/for/while/switch/do</code>等保留字与括号之间都必须加空格。</p>\n</li>\n<li><p>任何二目、三木运算符的左右两边都需要加一个空格。说明：运算符包括<code>赋值运算符=</code>、<code>逻辑运算符&amp;&amp;</code>、<code>加减乘除符号</code>等。</p>\n</li>\n<li><p>采用4个空格缩进，禁止使用<code>tab</code>字符 </p>\n<p>如果使用 tab 缩进，必须设置 1 个 tab 为 4 个空格。IDEA 设置 tab 为 4 个空格时，请勿勾选 Use tab character；<br>而在 eclipse 中，必须勾选 insert spaces for tabs。 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 正例：（涉及 1-5 点）<br>public static void main(String[] args) &#123;<br>    // 缩进 4 个空格<br>    String say = &quot;hello&quot;;<br>    int flag = 0;<br>    // 运算符的左右必须有一个空格 <br>    // 关键词 if 与括号之间必须有一个空格，括号内的 f 与左括号，0 与右括号不需要空格 <br>    if (flag == 0) &#123;<br>        System.out.println(say);<br>    &#125;<br>    // 左大括号前加空格且不换行；左大括号后换行<br>    if (flag == 1) &#123;<br>        System.out.println(&quot;world&quot;);<br>        // 右大括号前换行，右大括号后有 else，不用换行<br>    &#125; else &#123;<br>        System.out.println(&quot;ok&quot;);<br>        // 在右大括号后直接结束，则必须换行<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>注释的双斜线与注释内容之间有且仅有一个空格。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 正例：<br>// 这是示例注释，请注意在双斜线之后有一个空格<br>String ygb = new String();<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>单行字符数限制不超过120个，超出需要换行，换行时遵循如下原则：</p>\n<ul>\n<li>第二行相对第一行缩进 4 个空格，从第三行开始，不再继续缩进，参考示例。</li>\n<li>运算符与下文一起换行。</li>\n<li>方法调用的点符号与下文一起换行。</li>\n<li>方法调用时，多个参数，需要换行时，在逗号后进行。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">StringBuffer sb = new StringBuffer();<br>//超过 120 个字符的情况下，换行缩进 4 个空格，点号和方法名称一起换行 <br>sb.append(&quot;zi&quot;).append(&quot;xin&quot;)...<br>.append(&quot;huang&quot;)...<br>.append(&quot;huang&quot;)...<br>.append(&quot;huang&quot;);<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>方法参数在定义和传入时，多个参数逗号后边必须加空格。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">method(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>IDE的<code>text file encoding</code>设置为<code>UTF-8</code>; IDE 中文件的换行符使用 <code>Unix</code> 格式，不要使用 Windows 格式。</p>\n</li>\n<li><p>不同逻辑、不同语义、不同业务的代码之间插入一个空行分割开来以提升可读性。说明：没有必要插入多个空行进行隔开</p>\n</li>\n<li><p>避免通过一个类的对象引用访问此类的静态变量或静态方法，直接用类名来访问即可。</p>\n</li>\n<li><p>所有的覆写方法，必须加 <code>@Override</code> 注解。</p>\n</li>\n<li><p>相同参数类型，相同业务含义，才可以使用Java的可变参数，<strong>避免使用Object</strong>。说明：可变参数必须放置在参数列表的最后。</p>\n</li>\n<li><p>外部正在调第三方库依赖的接口，不允许修改方法签名，避免对接口调用方法产生影响。<br>接口过时必须加<code>@Deprecated</code>注解，并清晰地说明采用的新接口或者新服务是什么。</p>\n</li>\n<li><p>不能使用过时的类和方法。<br>说明：<code>java.net.URLDecoder</code> 中的方法 <code>decode(String encodeStr)</code> 这个方法已经过时，应该使用双参数 <code>decode(String source, String encode)</code>。<br>接口提供方既然明确是过时接口，那么有义务同时提供新的接口；作为调用方来说，有义务去考证过时方法的新实现是什么。</p>\n</li>\n<li><p><code>Object</code>的<code>equals</code>方法容易抛空指针异常，应使用常量或确定有值的对象来调用<code>equals</code>。 </p>\n<ul>\n<li>正例：<code>”test”.equals(object)</code>; </li>\n<li>反例：<code>object.equals(“test”)</code>; </li>\n<li>说明：推荐使用 <code>java.util.Objects#equals</code>（JDK7 引入的工具类）</li>\n</ul>\n</li>\n<li><p>所有的相同类型的包装类对象之间值的比较，全部使用<code>equals</code>方法比较。</p>\n</li>\n<li><p>关于基本数据类型与包装数据类型的使用标准如下：</p>\n<ul>\n<li>所有的 <code>POJO</code> 类属性必须使用包装数据类型。</li>\n<li><code>RPC</code> 方法的返回值和参数必须使用包装数据类型。</li>\n<li>所有的局部变量使用基本数据类型。</li>\n<li>说明：<code>POJO</code> 类属性没有初值是提醒使用者在需要使用时，必须自己显式地进行赋值，任何 <code>NPE</code> 问题，或者入库检查，都由使用者来保证。 </li>\n<li>正例：数据库的查询结果可能是 <code>null</code>，因为自动拆箱，用基本数据类型接收有 <code>NPE</code> 风险。</li>\n<li>反例：比如显示成交总额涨跌情况，即正负 x%，x 为基本数据类型，调用的 <code>RPC</code> 服务，调用不成功时，返回的是默认值，页面显示为 0%，这是不合理的，应该显示成中划线。所以包装数据类型的 <code>null</code> 值，能够表示额外的信息，如：远程调用失败，异常退出。</li>\n</ul>\n</li>\n<li><p>定义 <code>DO/DTO/VO</code> 等 <code>POJO</code> 类时，不要设定任何属性默认值。<br>反例：<code>POJO</code> 类的 <code>gmtCreate</code> 默认值为 <code>new Date();</code>但是这个属性在数据提取时并没有置入具体值，在更新其它字段时又附带更新了此字段，导致创建时间被修改成当前时间。</p>\n</li>\n<li><p>序列化类新增属性时，请不要修改 <code>serialVersionUID</code> 字段，避免反序列化失败；</p>\n</li>\n<li><p>构造方法里面禁止加入任何业务逻辑。使用IDE中的工具，请放在<code>init</code>方法中。</p>\n</li>\n<li><p>POJO类必须写<code>toString</code>方法。</p>\n<ul>\n<li>使用IDE中的工具：<code>source</code> &gt; <code>generate toString</code>时，如果继承了另一个 POJO 类，注意在前面加一下 <code>super.toString</code>。 </li>\n<li>说明：在方法执行抛出异常时，可以直接调用 <code>POJO</code> 的 <code>toString()</code>方法打印其属性值，便于排查问题。</li>\n</ul>\n</li>\n<li><p>使用索引访问String的split方法得到的数组时，需做最后一个分隔符后有无内容的检查，否则会有抛 <code>IndexOutOfBoundsException</code> 的风险。 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">String str = &quot;a,b,c,,&quot;;<br>String[] ary = str.split(&quot;,&quot;);<br>// 预期大于 3，结果是 3 <br>System.out.println(ary.length);<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>当一个类有多个构造方法，或者多个同名方法，这些方法应该按顺序放置在一起，便于阅读。</p>\n</li>\n<li><p>类内方法定义的顺序：公有方法或保护方法&gt;私有方法&gt;<code>getter/setter</code>方法。 </p>\n<p>说明：公有方法是类的调用者和维护者最关心的方法，首屏展示最好；保护方法虽然只是子类关心，也可能是“模板设计模式”下的核心方法；而私有方法外部一般不需要特别关心，是一个黑盒实现；因为承载的信息价值较低，所有 Service 和 DAO 的 getter&#x2F;setter 方法放在类体最后。</p>\n</li>\n<li><p>setter方法中，参数名称与类成员变量名称一致，<code>this.成员名 = 参数名</code>。在<code>getter/setter</code>方法中，不要增加业务逻辑，增加排查问题的难度。 </p>\n</li>\n<li><p>循环体内，字符串的连接方法，使用<code>StringBuilder</code>的append方法进行扩展。 </p>\n</li>\n<li><p><code>final</code>可以声明类、成员变量、方法、以及本地变量，下列情况使用<code>final</code>关键字：</p>\n<ul>\n<li>不允许被继承的类，如：<code>String</code> 类。</li>\n<li>不允许修改引用的域对象，如：<code>POJO</code> 类的域变量。</li>\n<li>不允许被重写的方法，如：<code>POJO</code> 类的 <code>setter</code> 方法。</li>\n<li>不允许运行过程中重新赋值的局部变量。</li>\n<li>避免上下文重复使用一个变量，使用 <code>final</code> 描述可以强制重新定义一个变量，方便更好地进行重构。</li>\n</ul>\n</li>\n<li><p>慎用<code>Object</code>的<code>clone</code>方法来拷贝对象。 </p>\n<p>说明：对象的clone方法默认是浅拷贝，若想实现深拷贝需要重写 clone 方法实现属性对象的拷贝。</p>\n</li>\n<li><p>类成员与方法访问控制从严：</p>\n<ul>\n<li>如果不允许外部直接通过 <code>new</code> 来创建对象，那么构造方法必须是 <code>private</code>。</li>\n<li>工具类不允许有 <code>public</code> 或 <code>default</code> 构造方法。</li>\n<li>类非 <code>static</code> 成员变量并且与子类共享，必须是 <code>protected</code>。</li>\n<li>类非 <code>static</code> 成员变量并且仅在本类使用，必须是 <code>private</code>。</li>\n<li>类 <code>static</code> 成员变量如果仅在本类使用，必须是 <code>private</code>。</li>\n<li>若是 <code>static</code> 成员变量，必须考虑是否为 <code>final</code>。</li>\n<li>类成员方法只供类内部调用，必须是 <code>private</code>。</li>\n<li>类成员方法只对继承类公开，那么限制为 <code>protected</code>。</li>\n<li>说明：任何类、方法、参数、变量，严控访问范围。过于宽泛的访问范围，不利于模块解耦。 </li>\n<li>思考：如果是一个<code>private</code>的方法，想删除就删除，可是一个<code>public</code>的<code>service</code>成员方法或成员变量，删除一下，不得手心冒点汗吗？变量像自己的小孩，尽量在自己的视线内，变量作用域太大，无限制的到处跑，那么你会担心的。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"集合处理\"><a href=\"#集合处理\" class=\"headerlink\" title=\"集合处理\"></a>集合处理</h2><ul>\n<li><p>关于<code>hsahCode</code>和<code>equals</code>的处理，遵循如下规则：</p>\n<ul>\n<li>只要重写 <code>equals</code>，就必须重写 <code>hashCode</code>。</li>\n<li>因为 <code>Set</code> 存储的是不重复的对象，依据 <code>hashCode</code> 和 <code>equals</code> 进行判断，所以 <code>Set</code> 存储的对象必须重写这两个方法。</li>\n<li>如果自定义对象作为 <code>Map</code> 的键，那么必须重写 <code>hashCode</code> 和 <code>equals</code>。</li>\n<li>说明：<code>String</code> 重写了 <code>hashCode</code> 和 <code>equals</code> 方法，可以愉快地使用 <code>String</code> 对象作为 <code>key</code> 来使用。</li>\n</ul>\n</li>\n<li><p><code>ArrayList</code> 的 <code>subList</code> 结果不可强转成 <code>ArrayList</code>，否则会抛出 <code>ClassCastException</code> 异常，即 <code>java.util.RandomAccessSubList cannot be cast to java.util.ArrayList</code>。</p>\n<p>说明：<code>subList</code> 返回的是 <code>ArrayList</code> 的内部类 <code>SubList</code>，并不是 <code>ArrayList</code> ，而是 <code>ArrayList</code> 的一个视图，对于 <code>SubList</code> 子列表的所有操作最终会反映到原列表上。</p>\n</li>\n<li><p>在 <code>subList</code> 场景中，高度注意对原集合元素个数的修改，会导致子列表的遍历、增加、删除均会产生 <code>ConcurrentModificationException</code> 异常。</p>\n</li>\n<li><p>使用集合转数组的方法，必须使用集合的 <code>toArray(T[] array)</code>，传入的是类型完全一样的数组，大小就是<code>list.size()</code>。 </p>\n<p>说明：使用 <code>toArray</code> 带参方法，入参分配的数组空间不够大时，<code>toArray</code> 方法内部将重新分配内存空间，并返回新数组地址；<br>如果数组元素个数大于实际所需，下标为[ <code>list.size()</code> ] 的数组元素将被置为 <code>null</code>，其它数组元素保持原值，因此最好将方法入参数组大小定义与集合元素个数一致。 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">List&lt;String&gt; list = new ArrayList&lt;String&gt;(2);<br>list.add(&quot;guan&quot;);<br>list.add(&quot;bao&quot;);<br>String[] array = new String[list.size()];<br>array = list.toArray(array);<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>使用工具类 <code>Arrays.asList()</code>把数组转换成集合时，不能使用其修改集合相关的方法，它的 <code>add/remove/clear</code> 方法抛出  <code>UnsupportedOperationException</code> 异常。 </p>\n<p>说明：<code>asList</code> 的返回对象是一个 <code>Arrays</code> 内部类，并没有实现集合的修改方法。<code>Arrays.asList</code>体现的是适配器模式，只是转换接口，后台的数据仍是数组。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">String[] str = new String[] &#123;&quot;you&quot;, &quot;wu&quot;&#125;;<br>List list = Arrays.asList(str);<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>第一种情况：<code>list.add(“yangguanbao”);</code> 运行时异常。 </li>\n<li>第二种情况：<code>str[0] = “gujin”;</code> 那么 <code>list.get(0)</code>也会随之修改。</li>\n</ul>\n</li>\n<li><p>泛型通配符 <code>&lt;? extends T&gt;</code> 来接收返回的数据，此写法的泛型集合不能使用 <code>add</code> 方法，而<code>&lt;? super T&gt;</code>不能使用 <code>get</code> 方法，作为接口调用赋值时易出错。 </p>\n<p>  说明：扩展说一下 <code>PECS(Producer Extends Consumer Super)</code>原则：</p>\n<ol>\n<li>第一、频繁往外读取内容的，适合用<code>&lt;? extends T&gt;</code>。</li>\n<li>第二、经常往里插入的，适合用<code>&lt;? super T&gt;</code>。</li>\n</ol>\n</li>\n<li><p>不要在 <code>foreach</code> 循环里进行元素的 <code>remove/add</code> 操作。<code>remove</code> 元素请使用 <code>Iterator</code>方式，如果并发操作，需要对 <code>Iterator</code> 对象加锁。 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 正例：<br>Iterator&lt;String&gt; iterator = list.iterator();<br>while (iterator.hasNext()) &#123;<br>    String item = iterator.next();<br>    if (删除元素的条件) &#123;<br>        iterator.remove();<br>    &#125;<br>&#125;<br><br>// 反例：<br>List&lt;String&gt; list = new ArrayList&lt;String&gt;();<br>list.add(&quot;1&quot;);<br>list.add(&quot;2&quot;);<br>for (String item : list) &#123;<br>    if (&quot;1&quot;.equals(item)) &#123;<br>        list.remove(item);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>在 JDK7 版本及以上，<code>Comparator</code> 要满足如下三个条件，不然 <code>Arrays.sort</code>，<code>Collections.sort</code> 会报 <code>IllegalArgumentException</code> 异常。说明：三个条件如下</p>\n<ul>\n<li>x，y 的比较结果和 y，x 的比较结果相反。</li>\n<li>x &gt; y，y &gt; z，则 x&gt;z。</li>\n<li>x &#x3D; y，则 x，z 比较结果和 y，z 比较结果相同。</li>\n</ul>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 反例：下例中没有处理相等的情况，实际使用中可能会出现异常：<br>new Comparator&lt;Student&gt;() &#123;<br>    @Override<br>    public int compare(Student o1, Student o2) &#123;<br>        return o1.getId() &gt; o2.getId() ? 1 : -1;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>集合初始化时，指定集合初始值大小。 </p>\n<ul>\n<li>说明：<code>HashMap</code> 使用 <code>HashMap(int initialCapacity)</code> 初始化，</li>\n<li>正例：<code>initialCapacity</code> &#x3D; (需要存储的元素个数 &#x2F; 负载因子) + 1。注意负载因子（即 <code>loader factor</code>）默认为 0.75，如果暂时无法确定初始值大小，请设置为 16（即默认值）。</li>\n<li>反例：<code>HashMap</code> 需要放置 1024 个元素，由于没有设置容量初始大小，随着元素不断增加，容量7 次被迫扩大，<code>resize</code> 需要重建 hash 表，严重影响性能。</li>\n</ul>\n</li>\n<li><p>使用 <code>entrySet</code> 遍历 <code>Map</code> 类集合 <code>KV</code>，而不是 <code>keySet</code> 方式进行遍历。 </p>\n<ul>\n<li>说明：<code>keySet</code> 其实是遍历了 2 次，一次是转为 <code>Iterator</code> 对象，另一次是从 <code>hashMap</code> 中取出 <code>key</code> 所对应的 <code>value</code>。而 <code>entrySet</code> 只是遍历了一次就把 <code>key</code> 和 <code>value</code> 都放到了 <code>entry</code> 中，效率更高。如果是 JDK8，使用 <code>Map.foreach</code> 方法。</li>\n<li>正例：<code>values()</code>返回的是 V 值集合，是一个 <code>list</code> 集合对象；<code>keySet()</code>返回的是 K 值集合，是一个 <code>Set</code> 集合对象；<code>entrySet()</code>返回的是 K-V 值组合集合。</li>\n</ul>\n</li>\n<li><p>高度注意 <code>Map</code> 类集合 K&#x2F;V 能不能存储 null 值的情况，如下表格：</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">集合类</th>\n<th align=\"center\">Key</th>\n<th align=\"center\">Value</th>\n<th align=\"center\">Super</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Hashtable</td>\n<td align=\"center\">禁止为 null</td>\n<td align=\"center\">禁止为 null</td>\n<td align=\"center\">Dictionary</td>\n<td align=\"center\">线程安全</td>\n</tr>\n<tr>\n<td align=\"center\">ConcurrentHashMap</td>\n<td align=\"center\">禁止为 null</td>\n<td align=\"center\">禁止为 null</td>\n<td align=\"center\">AbstractMap</td>\n<td align=\"center\">锁分段技术（JDK8:CAS）</td>\n</tr>\n<tr>\n<td align=\"center\">TreeMap</td>\n<td align=\"center\">禁止为 null</td>\n<td align=\"center\">允许为 null</td>\n<td align=\"center\">AbstractMap</td>\n<td align=\"center\">线程不安全</td>\n</tr>\n<tr>\n<td align=\"center\">HashMap</td>\n<td align=\"center\">允许为 null</td>\n<td align=\"center\">允许为 null</td>\n<td align=\"center\">AbstractMap</td>\n<td align=\"center\">线程不安全</td>\n</tr>\n</tbody></table>\n<p>  反例： 由于 HashMap 的干扰，很多人认为 <code>ConcurrentHashMap</code> 是可以置入 null 值，而事实上，存储 <code>null</code> 值时会抛出 <code>NPE</code> 异常。</p>\n<ul>\n<li><p>合理利用好集合的有序性(<code>sort</code>)和稳定性(<code>order</code>)，避免集合的无序性(<code>unsort</code>)和不稳定性(<code>unorder</code>)带来的负面影响。 </p>\n<p>说明：有序性是指遍历的结果是按某种比较规则依次排列的。稳定性指集合每次遍历的元素次序是一定的。<br>如：<code>ArrayList</code> 是 <code>order/unsort</code>；<code>HashMap</code> 是 <code>unorder/unsort</code>；<code>TreeSet</code> 是<code>order/sort</code>。</p>\n</li>\n<li><p>利用 <code>Set</code> 元素唯一的特性，可以快速对一个集合进行去重操作，避免使用 <code>List</code> 的 <code>contains</code> 方法进行遍历、对比、去重操作。</p>\n</li>\n</ul>\n<h2 id=\"并发处理\"><a href=\"#并发处理\" class=\"headerlink\" title=\"并发处理\"></a>并发处理</h2><ul>\n<li><p>获取单例对象需要保证线程安全，其中的方法也要保证线程安全。说明：资源驱动类、工具类、单例工厂类都需要注意。</p>\n</li>\n<li><p>创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。 </p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 正例：<br>public class TimerTaskThread extends Thread &#123;<br>    public TimerTaskThread() &#123;<br>    super.setName(&quot;TimerTaskThread&quot;);<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>线程资源必须通过线程池提供，不允许在应用中自行显示创建线程。 </p>\n<p>说明：使用线程池的好处是减少在创建和销毁线程上所花的时间以及系统资源的开销，解决资源不足的问题。<br>如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。</p>\n</li>\n<li><p>线程池不允许使用 <code>Executors</code> 去创建，而是通过 <code>ThreadPoolExecutor</code>的方法，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。 </p>\n<p> 说明：Executors 返回的线程池对象的弊端如下：</p>\n<ul>\n<li><code>FixedThreadPool</code> 和 <code>SingleThreadPool</code>: 允许的请求队列长度为 <code>Integer.MAX_VALUE</code>，可能会堆积大量的请求，从而导致 <code>OOM</code>。</li>\n<li><code>CachedThreadPool</code> 和 <code>ScheduledThreadPool</code>: 允许的创建线程数量为 <code>Integer.MAX_VALUE</code>，可能会创建大量的线程，从而导致 <code>OOM</code>。</li>\n</ul>\n</li>\n<li><p><code>SimpleDateFormat</code> 是线程不安全的类，一般不要定义为 <code>static</code> 变量，如果定义为 <code>static</code>，必须加锁，或者使用 <code>DateUtils</code> 工具类。 </p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 正例：注意线程安全，使用 DateUtils。亦推荐如下处理：<br>private static final ThreadLocal&lt;DateFormat&gt; df = new ThreadLocal&lt;DateFormat&gt;() &#123;<br>    @Override<br>    protected DateFormat initialValue() &#123;<br>        return new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>  说明：如果是 JDK8 的应用，可以使用 <code>Instant</code> 代替 <code>Date</code>，<code>LocalDateTime</code> 代替 <code>Calendar</code>，<code>DateTimeFormatter</code> 代替 <code>SimpleDateFormat</code>，官方给出的解释：<code>simple beautiful strong immutable thread-safe</code>。</p>\n</li>\n<li><p>高并发时同步调用应该去考量锁的性能损耗。能用无锁数据结构，就不要用锁；能锁区块，就不要锁整个方法体；能用对象锁，就不要用类锁。 </p>\n<p>  说明:尽可能使加锁的代码块工作量尽可能的小，避免在锁代码块中调用 RPC 方法。</p>\n</li>\n<li><p>对多个资源、数据库表、对象同时加锁时，需要保持一致的加锁顺序，否则可能会造成死锁。 </p>\n<p>  说明：线程一需要对表 A、B、C 依次全部加锁后才可以进行更新操作，那么线程二的加锁顺序也必须是 A、B、C，否则可能出现死锁。</p>\n</li>\n<li><p>并发修改同一记录时，避免更新丢失，需要枷锁。要么在应用层加锁，要么在缓存加锁，要么在数据库层使用乐观锁，使用<code>version</code>作为更新依据<br>。<br>  说明：如果每次访问冲突概率小于 20%，推荐使用乐观锁，否则使用悲观锁。乐观锁的重试次数不得小于 3 次。</p>\n</li>\n<li><p>多线程并发处理定时任务时，<code>Timer</code>运行多个<code>TimeTask</code>时，只要其中之一没有捕获抛出的异常，其他任务便会自动终止运行，使用<code>ScheduledExecutorService</code> 则没有这个问题。</p>\n</li>\n<li><p>使用 <code>CountDownLatch</code> 进行异步转同步操作，每个线程退出前必须调用 <code>countDown</code> 方法，线程执行代码注意 <code>catch</code> 异常，确保 <code>countDown</code> 方法被执行到，避免主线程无法执行至 await 方法，直到超时才返回结果。 </p>\n<p>  说明：注意，子线程抛出异常堆栈，不能在主线程 <code>try-catch</code> 到。</p>\n</li>\n<li><p>避免 Random 实例被多线程使用，虽然共享该实例是线程安全的，但会因竞争同一 <code>seed</code> 导致的性能下降。</p>\n<p>  说明：Random 实例包括 <code>java.util.Random</code> 的实例或者 <code>Math.random()</code>的方式。</p>\n<p>  正例：在 JDK7 之后，可以直接使用 <code>API ThreadLocalRandom</code>，而在 JDK7 之前，需要编码保证每个线程持有一个实例。</p>\n</li>\n<li><p>在并发场景下，通过双重检查锁（<code>double-checked locking</code>）实现延迟初始化的优化问题隐患(可参考 The “Double-Checked Locking is Broken” Declaration)，推荐解决方案中较为简单一种（适用于 JDK5 及以上版本），将目标属性声明为 <code>volatile</code> 型。 </p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 反例：<br>class Singleton &#123;<br>    private Helper helper = null;<br>    public Helper getHelper() &#123;<br>        if (helper == null)<br>            synchronized (this) &#123;<br>                if (helper == null)<br>                    helper = new Helper();<br>            &#125;<br>        return helper;<br>    &#125;<br>    // other methods and fields...<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><code>volatile</code> 解决多线程内存不可见问题。对于一写多读，是可以解决变量同步问题，但是如果多写，同样无法解决线程安全问题。如果是 <code>count++</code>操作，</p>\n<p>  使用如下类实现： <code>AtomicInteger count = new AtomicInteger(); count.addAndGet(1); </code><br>  如果是 JDK8，推荐使用 LongAdder 对象，比 <code>AtomicLong</code> 性能更好（减少乐观锁的重试次数）。</p>\n</li>\n<li><p><code>HashMap</code> 在容量不够进行 <code>resize</code> 时由于高并发可能出现死链，导致 CPU 飙升，在开发过程中可以使用其它数据结构或加锁来规避此风险。</p>\n</li>\n<li><p><code>ThreadLocal</code> 无法解决共享对象的更新问题，<code>ThreadLocal</code> 对象建议使用 <code>static</code>修饰。这个变量是针对一个线程内所有操作共享的，所以设置为静态变量，所有此类实例共享此静态变量 ，也就是说在类第一次被使用时装载，只分配一块存储空间，所有此类的对象(只要是这个线程内定义的)都可以操控这个变量。</p>\n</li>\n</ul>\n<h2 id=\"控制语句\"><a href=\"#控制语句\" class=\"headerlink\" title=\"控制语句\"></a>控制语句</h2><ul>\n<li><p>在一个 <code>switch</code> 块内，每一个<code> case</code> 要么通过 <code>break/return</code> 等来终止，要么注释说明程序将继续执行到哪一个<code>case</code>为止；在一个<code>switch</code>块内，都必须包含一个<code>default</code>语句并且放在最后，即使空代码。</p>\n</li>\n<li><p>在 <code>if/else/for/while/do</code> 语句中必须使用大括号。即使只有一行代码，避免采用单行的编码方式：<code>if (condition) statements;</code></p>\n</li>\n<li><p>在高并发场景中，避免使用”等于”判断作为中断或退出的条件。 </p>\n<p>  说明：如果并发控制没有处理好，容易产生等值判断被“击穿”的情况，使用大于或小于的区间判断条件来代替。<br>  反例：判断剩余奖品数量等于 0 时，终止发放奖品，但因为并发处理错误导致奖品数量瞬间变成了负数，这样的话，活动无法终止。</p>\n</li>\n<li><p>表达异常的分支时，少用 <code>if-else</code> 方式，这种方式可以改写成：</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 反例<br>if (condition) &#123;<br>  ...<br>  obj = ...<br>&#125; else &#123;<br>  obj = ...<br>&#125;<br>return obj;<br><br>// 正例<br>if (condition) &#123;<br>    ...<br>    return obj;<br>&#125;<br>obj = ...;<br>return obj;<br></code></pre></td></tr></table></figure>\n\n<p>  说明：如果非得使用 <code>if()...else if()...else...</code> 方式表达逻辑，【强制】避免后续代码维护困难，<strong>请勿超过 3 层</strong>。 </p>\n<p>  正例：超过 3 层的 <code>if-else</code> 的逻辑判断代码可以使用卫语句、策略模式、状态模式等来实现，<a href=\"/developer/style-guide/if-else-optimize-solutions.html\">If-Else优化方案</a></p>\n</li>\n<li><p>除常用方法（如 <code>getXxx/isXxx</code>）等外，不要在条件判断中执行其它复杂的语句，将复杂逻辑判断的结果赋值给一个有意义的布尔变量名，以提高可读性。</p>\n<p>  说明：很多 if 语句内的逻辑相当复杂，阅读者需要分析条件表达式的最终结果，才能明确什么样的条件执行什么样的语句，那么，如果阅读者分析逻辑表达式错误呢？</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 正例：<br>final boolean existed = (file.open(fileName, &quot;w&quot;) != null) &amp;&amp; (...) || (...); <br>if (existed) &#123;<br>    ...<br>&#125;<br><br>// 反例：<br>if ((file.open(fileName, &quot;w&quot;) != null) &amp;&amp; (...) || (...)) &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>循环体中的语句要考量性能，以下操作尽量移至循环体外处理，如定义对象、变量、获取数据库连接，进行不必要的 <code>try-catch</code> 操作（这个 <code>try-catch</code> 是否可以移至循环体外）。</p>\n</li>\n<li><p>避免采用取反逻辑运算符。<br>  说明：取反逻辑不利于快速理解，并且取反逻辑写法必然存在对应的正向逻辑写法。 </p>\n<ul>\n<li>正例：使用 if (x &lt; 628) 来表达 x 小于 628。 </li>\n<li>反例：使用 if (!(x &gt;&#x3D; 628)) 来表达 x 小于 628。</li>\n</ul>\n</li>\n<li><p>接口入参保护，这种场景常见的是用作鼻梁操作的接口。</p>\n</li>\n</ul>\n<p> 下列情形，需要进行参数校验：<br>    - 调用频次低的方法。<br>    - 执行时间开销很大的方法。此情形中，参数校验时间几乎可以忽略不计，但如果因为参数错误导致中间执行回退，或者错误，那得不偿失。<br>    - 需要极高稳定性和可用性的方法。<br>    - 对外提供的开放接口，不管是 <code>RPC</code>&#x2F;<code>API</code>&#x2F;<code>HTTP</code> 接口。<br>    - 敏感权限入口。</p>\n<p>  下列情形，不需要进行参数校验：<br>    - 极有可能被循环调用的方法。但在方法说明里必须注明外部参数检查要求。<br>    - 底层调用频度比较高的方法。毕竟是像纯净水过滤的最后一道，参数错误不太可能到底层才会暴露问题。一般 <code>DAO</code> 层与 <code>Service</code><br>    - 层都在同一个应用中，部署在同一台服务器中，所以 <code>DAO</code> 的参数校验，可以省略。<br>    - 被声明成 <code>private</code><br>    - 只会被自己代码所调用的方法，如果能够确定调用方法的代码传入参数已经做过检查或者肯定不会有问题，此时可以不校验参数。</p>\n<h2 id=\"注释规约\"><a href=\"#注释规约\" class=\"headerlink\" title=\"注释规约\"></a>注释规约</h2><ul>\n<li><p>类、类属性、类方法的注释必须使用<code>Javadoc</code>规约，使用<code>/** 内容 **/</code> 格式，不得使用 <code>//xxx</code> 方式。 </p>\n<p>  说明：在 IDE 编辑窗口中，Javadoc 方式会提示相关注释，生成 Javadoc 可以正确输出相应注释；<br>  在 IDE 中，工程调用方法时，不进入方法即可悬浮提示方法、参数、返回值的意义，提高阅读效率。</p>\n</li>\n<li><p>所有的抽象方法（包括接口中的方法）必须要用javadoc注释、除了返回值、参数、异常说明外，还必须指出该方法做什么事情，实现什么功能。 </p>\n<p>说明：对子类的实现要求，或者调用注意实现，请一并说明。</p>\n</li>\n<li><p>所有类都必须添加创建者和创建日期。</p>\n</li>\n<li><p>方法内部单行注释，在被注释语句上方另起一行，使用<code>// Comment</code>。方法内部多行注释使用<code>/**/</code>注释，注意与代码对齐。</p>\n</li>\n<li><p>所有的枚举类型字段必须要有注释，说明每个数据项的用途。</p>\n</li>\n<li><p>与其“半吊子”英文注释，不如用中文注释把问题说清楚。专有名词与关键字保持英文原文即可。 </p>\n<p>反例：“TCP 连接超时”解释成“传输控制协议连接超时”，理解反而费脑筋。</p>\n</li>\n<li><p>代码修改的同时，注释也要进行相应的修改，尤其是参数、返回值、异常、核心逻辑等的修改。 </p>\n<p>说明：代码与注释更新不同步，就像路网与导航软件更新不同步一样，如果导航软件严重滞后，就失去了导航的意义。</p>\n</li>\n<li><p>谨慎注释掉代码。在上方详细说明，而不是简单地注释掉。如果无用，则删除。 </p>\n<p>说明：代码被注释掉有两种可能性：</p>\n<ul>\n<li>后续会恢复此段代码逻辑。</li>\n<li>永久不用。前者如果没有备注信息，难以知晓注释动机。后者建议直接删掉（代码仓库保存了历史代码）。</li>\n</ul>\n</li>\n<li><p>[参考]对于注释的要求： </p>\n<ul>\n<li>第一、能够准确反应设计思想和代码逻辑； </li>\n<li>第二、能够描述业务含义，使别的程序员能够迅速了解到代码背后的信息。完全没有注释的大段代码对于阅读者形同天书，注释是给自己看的，即使隔很长时间，也能清晰理解当时的思路；注释也是给继任者看的，使其能够快速接替自己的工作。</li>\n</ul>\n</li>\n<li><p>好的命名、代码结构是自解释的，注释力求精简准确、表达到位。避免出现注释的一个极端：过多过滥的注释，代码的逻辑一旦修改，修改注释是相当大的负担。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 反例：<br>// put elephant into fridge <br>put(elephant, fridge);<br></code></pre></td></tr></table></figure>\n\n<p>方法名 put，加上两个有意义的变量名 elephant 和 fridge，已经说明了这是在干什么，语义清晰的代码不需要额外的注释。</p>\n</li>\n</ul>\n<h2 id=\"异常日志\"><a href=\"#异常日志\" class=\"headerlink\" title=\"异常日志\"></a>异常日志</h2><h3 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h3><ul>\n<li><p>Java 类库中定义的可以通过预检查方式规避的 <code>RuntimeException</code> 异常不应该通过catch 的方式来处理，比如：<code>NullPointerException</code>，<code>IndexOutOfBoundsException</code> 等等。 </p>\n<p>说明：无法通过预检查的异常除外，比如，在解析字符串形式的数字时，不得不通过 <code>catchNumberFormatException</code> 来实现。 </p>\n<p>正例：<code>if (obj != null) &#123; ... &#125;</code><br>反例：<code>try &#123; obj.method() &#125; catch (NullPointerException e) &#123; ... &#125;</code></p>\n</li>\n<li><p>异常不要用来做流程控制，条件控制。 </p>\n<p>说明：异常设计的初中是解决程序运行中的各种意外情况，且异常的处理效率比条件判断方式要低很多。</p>\n</li>\n<li><p><code>catch</code> 时请分清稳定代码和非稳定代码，稳定代码指的是无论如何不会出错的代码。对于非稳定代码的catch尽可能进行区分异常类型，再做对应的异常处理。 </p>\n<p>  说明：对大段代码进行try-catch，是程序无法根据不同的异常做出正确的应急反应，也不利于定位问题，这是一种不负责任的表现。 </p>\n<p>  正例：用户注册的场景中，如果用户输入非法字符，或用户名称已存在，或用户输入密码过于简单，在程序上作出分门别类的判断，并提示给用户。</p>\n</li>\n<li><p>捕获异常是为了处理它，不要捕获了却什么都不处理而抛弃之，如果不想处理它，请将该异常抛给它的调用者。最外层的业务使用者，必须处理异常，将其转化为用户可以理解的内容。</p>\n</li>\n<li><p>有 <code>try</code> 块放到了事务代码中，<code>catch</code> 异常后，如果需要回滚事务，一定要注意手动回滚事务。</p>\n</li>\n<li><p><code>finally</code> 块必须对资源对象、流对象进行关闭，有异常也要做 <code>try-catch</code>。 </p>\n</li>\n<li><p>不要在 <code>finally</code> 块中使用 <code>return</code>。 </p>\n<p>说明：finally 块中的 return 返回后方法结束执行，不会再执行 try 块中的 return 语句。</p>\n</li>\n<li><p>捕获异常与抛异常，必须是完全匹配，或者捕获异常是抛异常的父类。 </p>\n<p>说明：如果预期对方抛的是绣球，实际接到的是铅球，就会产生意外情况。</p>\n</li>\n<li><p>方法的返回值可以为 <code>null</code>，不强制返回空集合，或者空对象等，必须添加注释充分说明什么情况下会返回 <code>null</code> 值。 </p>\n<p>说明：本手册明确防止 NPE 是调用者的责任。即使被调用方法返回空集合或者空对象，对调用者来说，也并非高枕无忧，必须考虑到远程调用失败、序列化失败、运行时异常等场景返回null 的情况。</p>\n</li>\n<li><p>防止 <code>NPE</code>(NullPointerException)，是程序员的基本修养，注意 <code>NPE</code> 产生的场景：</p>\n<ul>\n<li><p>返回类型为基本数据类型，<code>return</code> 包装数据类型的对象时，自动拆箱有可能产生 <code>NPE</code>。</p>\n</li>\n<li><p>反例：<code>public int f() &#123; return Integer 对象&#125;</code>， 如果为 null，自动解箱抛 NPE。</p>\n<ul>\n<li>数据库的查询结果可能为 null。</li>\n<li>集合里的元素即使 isNotEmpty，取出的数据元素也可能为 null。</li>\n<li>远程调用返回对象时，一律要求进行空指针判断，防止 NPE。</li>\n<li>对于 Session 中获取的数据，建议 NPE 检查，避免空指针。</li>\n<li>级联调用 obj.getA().getB().getC()；一连串调用，易产生 NPE。</li>\n</ul>\n</li>\n<li><p>正例：使用 <code>JDK8</code> 的 <code>Optional</code> 类来防止 <code>NPE</code> 问题。</p>\n</li>\n</ul>\n</li>\n<li><p>定义时区分 <code>unchecked/checked</code> 异常，避免直接抛出 <code>new RuntimeException()</code>，更不允许抛出 <code>Exception</code> 或者 <code>Throwable</code>，应使用有业务含义的自定义异常。推荐业界已定义过的自定义异常，如：<code>DAOException</code>&#x2F;<code>ServiceException</code> 等。</p>\n</li>\n<li><p>对于公司外的 http&#x2F;api 开放接口必须使用“错误码”；而应用内部推荐异常抛出；跨应用间 <code>RPC</code> 调用优先考虑使用 <code>Result</code> 方式，封装 <code>isSuccess()</code>方法、“错误码”、“错误简短信息”。 </p>\n<p>说明：关于 RPC 方法返回方式使用 Result 方式的理由：</p>\n<ul>\n<li>使用抛异常返回方式，调用方如果没有捕获到就会产生运行时错误。</li>\n<li>如果不加栈信息，只是 new 自定义异常，加入自己的理解的 error message，对于调用端解决问题的帮助不会太多。如果加了栈信息，在频繁调用出错的情况下，数据序列化和传输的性能损耗也是问题。</li>\n</ul>\n</li>\n<li><p>避免出现重复的代码（Don’t Repeat Yourself），即 DRY 原则。 </p>\n<p>  说明：随意复制和粘贴代码，必然会导致代码的重复，在以后需要修改时，需要修改所有的副本，容易遗漏。必要时抽取共性方法，或者抽象公共类，甚至是组件化。</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 正例：<br>// 一个类中有多个 public 方法，都需要进行数行相同的参数校验操作，这个时候请抽取：<br>private boolean checkParam(DTO dto) &#123;...&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"整洁代码\"><a href=\"#整洁代码\" class=\"headerlink\" title=\"整洁代码\"></a>整洁代码</h2><p><a href=\"/developer/style-guide/tips-to-keep-java-code-clean.html\">整洁代码的建议列表</a></p>\n"},{"title":"Javascript 编程规范","type":"Javascript 编程规范","_content":"\n## 命名规范\nfv\n- 标准变量采用驼峰式命名\n- ID 在变量名中全大写\n- 常量全大写，用下划线连接构造函数，大写第一个字母\n- JQuery 对象必须以 $ 开头命名\n\n```\nlet thisIsMyName;\nlet goodID;\nlet reportURL;\nlet AndroidVersion;\nlet iOSVersion;\nlet MAX_COUNT = 10;\n\nfunction Person(name) {\n    this.name = name;\n}\n// 不推荐\nlet body = $('body');\n// 推荐\nlet $body = $('body');\n```\n\n## 函数命名\n\n> 小驼峰命名法，可使用常见动词约定：\n\n- `{ctl}{Event}`, 控件的操作事件，示例: `radioChange`, `btnSaveClick`\n- canXXX 判断是否可执行某个动作，函数返回布尔值。true：可执行；false：不可执行\n- hasXXX 判断是否含有某个值， 函数返回布尔值。true：含有此值；false：不含有此值\n- isXXX 判断是否为某个值，函数返回布尔值。true：为某个值；false：不为某个值\n- getXXX 获取某个值，函数返回非布尔值\n- setXXX 设置某个值\n    - 无返回值\n    - 返回是否设置成功\n    - 返回链式对象 load 加载某些数据\n    - 返回是否加载完成的结果\n\n```\n// 是否有权限\nfunction hasPermission() {\n return true;\n}\n// 获取权限列表\nfunction getPermissinList() {\n return this.permissinList;\n}\n```\n\n## 引用 References\n\n1. 对所有的引用使用 const；不要使用 var。\n\n  > eslint: prefer-const, no-const-assign\n\n  这可以确保你无法对引用重新分配，重新分配可能会导致 bug 和难以理解的代码。\n\n  ```\n  // 批评\n  var a = 1;\n  var b = 2;\n  // 推荐\n  const a = 1;\n  const b = 2;\n  ```\n\n2. 如果一定需要可变动的引用，使用 let 代替 var 。\n\n  > eslint: no-var jscs: disallowVar\n\n  ```\n  // 不推荐\n  var count = 1;\n  if (true) {\n      count += 1;\n  }\n  // 推荐\n  let count = 1;\n  if (true) {\n      count += 1;\n  }\n  ```\n\n## 对象 Objects\n\n1. 使用字面量语法创建对象。\n\n  > eslint: no-new-object\n\n  ```\n  // 不推荐\n  const item = new Object();\n  // 推荐\n  const item = {};\n  ```\n\n2. 创建带有动态属性名称的对象时使用计算的属性名称。\n\n  它们允许你在一个地方定义一个对象的所有属性。\n\n  ```\n  function getKey(k) {\n      return `a-key-named-k`;\n  }\n  // 不推荐\n  const obj = {\n      id: 5,\n      name: 'San Francisco',\n  };\n  obj[getKey('enabled')] = true;\n\n  // 推荐\n  const obj = {\n      id: 5,\n      name: 'San Francisco',\n      [getKey('enabled')]: true,\n  };\n  ```\n\n3. 使用对象方法速记语法。\n\n  > eslint: object-shorthand jscs: requireEnhancedObjectLiterals\n\n  ```\n  // 不推荐\n  const atom = {\n    value: 1,\n    addValue: function (value) {\n        return atom.value + value;\n    }\n  };\n\n  // 推荐\n  const atom = {\n    value: 1,\n    addValue(value) {\n        return atom.value + value;\n    }\n  };\n  ```\n\n4. 使用对象属性速记语法。\n\n  > eslint: object-shorthand jscs: requireEnhancedObjectLiterals\n\n  ```\n  const lukeSkywalker = 'Luke Skywalker';\n  // 不推荐\n  const obj = {\n      lukeSkywalker: lukeSkywalker,\n  };\n\n  // 推荐\n  const obj = {\n      lukeSkywalker,\n  };\n  ```\n\n5. 将速记属性分组写在对象声明的开始处\n\n  更容易看出哪些属性在使用速记语法\n\n  ```\n  const anakinSkywalker = 'Anakin Skywalker';\n  const lukeSkywalker = 'Luke Skywalker';\n  // 不推荐\n  const obj = {\n      episodeOne: 1,\n      twoJediWalkIntoACantina: 2,\n      lukeSkywalker,\n      episodeThree: 3,\n      mayTheFourth: 4,\n      anakinSkywalker,\n  };\n  // 推荐\n  const obj = {\n      lukeSkywalker,\n      anakinSkywalker,\n      episodeOne: 1,\n      twoJediWalkIntoACantina: 2,\n      episodeThree: 3,\n      mayTheFourth: 4,\n  };\n  ```\n\n6. 仅无效标识符的属性使用引号\n\n  > eslint: quote-props jscs: disallowQuotedKeysInObjects\n\n  比较容易阅读。它改进了语法高亮显示，并且更容易被许多JS引擎优化。\n\n  ```\n  // 不推荐\n  const bad = {\n      'foo': 3,\n      'bar': 4,\n      'data-blah': 5\n  };\n\n  // 推荐\n  const good = {\n      foo: 3,\n      bar: 4,\n      'data-blah': 5\n  };\n  ```\n\n7. 用对象展开操作符浅复制对象，优先于Object.assign。\n\n  使用对象剩余操作符来获得一个省略某些属性的新对象。\n\n  ```\n  // 批评\n  const original = { a: 1, b: 2 };\n  const copy = Object.assign(original, { c: 3 }); //  `original` 是可变的\n  delete copy.a; // so does this\n\n  // 不推荐\n  const original = { a: 1, b: 2 };\n  const copy = Object.assign({}, original, { c: 3 }); // copy => { a: 1, b: 2, c: 3 }\n\n  // 推荐\n  const original = { a: 1, b: 2 };\n  const copy = { ...original, c: 3 }; // copy => { a: 1, b: 2, c: 3 }\n  const { a, ...noA } = copy; // noA => { b: 2, c: 3 }\n  ```\n\n## 数组 Arrays\n\n1. 使用字面量创建数组。\n\n  > eslint: no-array-constructor\n\n  ```\n  // 不推荐\n  const items = new Array();\n  // 推荐\n  const items = [];\n  ```\n\n2. 使用数组展开操作符`...`复制数组。\n\n  ```\n  // 不推荐\n  const len = items.length;\n  const itemsCopy = [];\n  let i;\n  for (i = 0; i < len; i += 1) {\n      itemsCopy[i] = items[i];\n  }\n\n  // 推荐\n  const itemsCopy = [...items];\n  ```\n\n3. 使用展开操作符`...`代替 Array.from，将类数组(array-like) 对象转换成数组。\n\n  ```\n  const foo = document.querySelectorAll('.foo');\n  // 推荐\n  const nodes = Array.from(foo);\n  // 高效\n  const nodes = [...foo];\n  ```\n\n4. 使用 Array.from 代替展开操作符`...`来映射迭代，它避免了创建媒介数组。\n\n  ```\n  // 不推荐\n  const baz = [...foo].map(bar);\n  // 推荐\n  const baz = Array.from(foo, bar);\n  ```\n\n## 解构 Destructuring\n\n1. 当访问和使用对象的多个属性时，请使用对象解构。\n\n  > eslint: prefer-destructuring jscs: requireObjectDestructuring\n\n  ```\n  // 不推荐\n  function getFullName(user) {\n      const firstName = user.firstName;\n      const lastName = user.lastName;\n      return `firstName lastName`;\n  }\n  // 推荐\n  function getFullName(user) {\n      const { firstName, lastName } = user;\n      return `firstName lastName`;\n  }\n  // 高效\n  function getFullName({ firstName, lastName }) {\n      return `firstName lastName`;\n  }\n  ```\n\n2. 使用数组解构。\n\n  > eslint: prefer-destructuring jscs: requireArrayDestructuring\n\n  ```\n  const arr = [1, 2, 3, 4];\n  // 不推荐\n  const first = arr[0];\n  const second = arr[1];\n  // 推荐\n  const [first, second] = arr;\n  const [first, second, ...other] = arr;\n  ```\n\n3. 使用对象解构来实现多个返回值，而不是数组解构。\n\n  随着时间的推移添加新的属性或更改排序，而不会改变调用时的位置。\n\n  ```\n  // 不推荐\n  function processInput(input) {\n      return [left, right, top, bottom];\n  }\n  const [left, __, top] = processInput(input); // 需考虑返回数据的顺序\n  \n  // 推荐\n  function processInput(input) {\n      return { left, right, top, bottom };\n  }\n  const { left, top } = processInput(input); // 只选择需要的数据\n  ```\n\n## 字符串 Strings\n\n1. 字符串使用单引号 ''。\n\n  > eslint: quotes jscs: validateQuoteMarks\n\n  ```\n  // 不推荐\n  const name = \"Capt. Janeway\";\n  // 不推荐 - 模板字面量应该包含插值或换行符\n  const name = `Capt. Janeway`;\n  // 推荐\n  const name = 'Capt. Janeway';\n  ```\n\n2. 构建字符串时，使用模板字符串。\n\n  > eslint: prefer-template template-curly-spacing jscs: requireTemplateStrings\n\n  ```\n  // 不推荐\n  function sayHi(name) {\n      return 'How are you, ' + name + '?';\n  }\n  // 不推荐\n  function sayHi(name) {\n      return ['How are you, ', name, '?'].join();\n  }\n  // 不推荐\n  function sayHi(name) {\n      return `How are you, ${ name }?`;\n  }\n  // 推荐\n  function sayHi(name) {\n       return `How are you, ${name}?`;\n  }\n  ```\n\n3. 永远不要在字符串上使用 eval() ，它会打开太多的漏洞。\n\n  > eslint: no-eval\n\n## 函数 Functions\n\n1. 使用命名函数表达式而不是函数声明。\n\n  > eslint: func-style jscs: disallowFunctionDeclarations\n\n  函数声明很容易被提升（Hoisting）,这对可读性和可维护性来说都是不利的;\n\n  ```\n  // 不推荐\n  function foo() {\n    // ...\n  }\n  // 不推荐\n  const foo = function () {\n    // ...\n  };\n  // 推荐\n  // 用明显区别于变量引用调用的词汇命名\n  const short = function longUniqueMoreDescriptiveLexicalFoo() {\n    // ...\n  };\n  ```\n\n2. 用圆括号包裹立即调用函数表达式 (IIFE)。\n\n  > eslint: wrap-iife jscs: requireParenthesesAroundIIFE\n\n  一个立即调用函数表达式是一个单独的单元 – 将函数表达式包裹在括号中，后面再跟一个调用括号，这看上去很紧凑。\n\n  ```\n  // 立即调用函数表达式 (IIFE)\n  (function () {\n    console.log('Welcome to the Internet. Please follow me.');\n  }());\n  ```\n\n3. 不要使用 arguments。可以选择 rest 语法 `...` 替代。\n\n  使用 `...` 能明确要传入的参数。另外 rest（剩余）参数是一个真正的数组，而 arguments 是一个类数组（Array-like）。\n\n  ```\n  // 不推荐\n  function concatenateAll() {\n    const args = Array.prototype.slice.call(arguments);\n    return args.join('');\n  }\n  // 推荐\n  function concatenateAll(...args) {\n    return args.join('');\n  }\n  ```\n\n4. 使用默认参数语法，而不要使用一个变化的函数参数\n\n  ```\n  // 不推荐\n  function handleThings(opts) {\n    // 更加糟糕: 如果参数 opts 是 falsy(假值) 的话，它将被设置为一个对象，\n    // 这可能是你想要的，但它可以引起一些小的错误。\n    opts = opts || {};\n    // ...\n  }\n  // 不推荐\n  function handleThings(opts) {\n    if (opts === void 0) {\n        opts = {};\n    }\n    // ...\n  }\n  // 推荐\n  function handleThings(opts = {}) {\n    // ...\n  }\n  ```\n\n5. 始终将默认参数放在最后。\n\n  ```\n  // 不推荐\n  function handleThings(opts = {}, name) {\n    // ...\n  }\n  // 推荐\n  function handleThings(name, opts = {}) {\n    // ...\n  }\n  ```\n\n6. 隔开函数签名，括号两边用空格隔开。\n\n  ```\n  // 不推荐\n  const f = function(){};\n  const g = function (){};\n  const h = function() {};\n  // 推荐\n  const x = function () {};\n  const y = function a() {};\n  ```\n\n7. 不要改变参数(?)。\n\n  > eslint: no-param-reassign\n\n  *操作*作为参数传入的对象，可能会在调用原始对象时造成不必要的变量副作用。（对象是引用类型）\n\n  ```\n  // 不推荐\n  function f1(obj) {\n      obj.key = 1;\n  }\n  // 推荐\n  function f2(obj) {\n      const key = Object.prototype.hasOwnProperty.call(obj, 'key') ? obj.key : 1;\n  }\n  ```\n\n## 箭头函数 Arrow Functions\n\n1. 当必须使用匿名函数（如在传递一个内联回调时），请使用箭头函数表示法。\n\n  > eslint: prefer-arrow-callback, arrow-spacing jscs: requireArrowFunctions\n\n  它创建了一个在 this 上下文中执行的函数的版本，这通常是你想要的，而且这样的写法更为简洁。\n\n  ```\n  // 不推荐\n  [1, 2, 3].map(function (x) {\n      const y = x + 1;\n      return x * y;\n  });\n  // 不推荐\n  [1, 2, 3].map( _ => {\n\n      return 0;\n  });\n  // 推荐\n  [1, 2, 3].map((x) => {\n      const y = x + 1;\n      return x * y;\n  });\n  // 推荐\n  [1, 2, 3].map(() => {\n      return 0;\n  });\n  ```\n\n2. 无副作用的单行语句\n\n  如果函数体由一个返回无副作用(side effect)的expression(表达式)的单行语句组成，那么可以省略大括号并使用隐式返回。否则，保留大括号并使用 return 语句\n\n  ```\n  // 不推荐\n  [1, 2, 3].map(number => {\n      const nextNumber = number + 1;\n      return `A string containing the ${nextNumber}.`;\n  });\n  // 推荐\n  [1, 2, 3].map(number => `A string containing the ${number}.`);\n  ```\n\n3. 如果表达式跨多行，将其包裹在括号中，可以提高可读性。\n\n  ```\n  // 不推荐\n  ['get', 'post', 'put'].map(httpMethod => Object.prototype.hasOwnProperty.call(\n      httpMagicObjectWithAVeryLongName,\n      httpMethod\n    )\n  );\n  // 推荐\n  ['get', 'post', 'put'].map(httpMethod => (\n      Object.prototype.hasOwnProperty.call(\n        httpMagicObjectWithAVeryLongName,\n        httpMethod\n      )\n    )\n  );\n  ```\n\n4. 如果函数只有一个参数并且不使用大括号，则可以省略参数括号。否则，为了清晰和一致性，总是给参数加上括号。\n\n  ```\n  // 不推荐\n  [1, 2, 3].map((x) => x * x);\n  // 推荐\n  [1, 2, 3].map(x => x * x);\n  // 推荐\n  [1, 2, 3].map(number => (\n    `A long string with the number. It’s so long that we don’t want it to take up space on the .map line!`\n  ));\n  // 不推荐\n  [1, 2, 3].map(x => {\n    const y = x + 1;\n    return x * y;\n  });\n  // 推荐\n  [1, 2, 3].map((x) => {\n    const y = x + 1;\n    return x * y;\n  });\n  ```\n\n5. 避免使用比较运算符(< =, >=)时，混淆箭头函数语法(=>)。\n\n  ```\n  // 不推荐\n  const itemHeight = item => item.height > 256 ? item.largeSize : item.smallSize;\n  // 不推荐\n  const itemHeight = (item) => item.height > 256 ? item.largeSize : item.smallSize;\n  // 推荐\n  const itemHeight = item => (item.height > 256 ? item.largeSize : item.smallSize);\n  // 推荐\n  const itemHeight = (item) => {\n    const { height, largeSize, smallSize } = item;\n    return height > 256 ? largeSize : smallSize;\n  };\n  ```\n\n## 类 Classes & 构造函数 Constructors\n\n1. 总是使用 class。避免直接操作 prototype 。\n\n  ```\n  // 不推荐\n  function Queue(contents = []) {\n      this.queue = [...contents];\n  }\n  Queue.prototype.pop = function () {\n      const value = this.queue[0];\n      this.queue.splice(0, 1);\n      return value;\n  };\n  // 推荐\n  class Queue {\n      constructor(contents = []) {\n          this.queue = [...contents];\n      }\n      pop() {\n          const value = this.queue[0];\n          this.queue.splice(0, 1);\n          return value;\n      }\n  }\n  ```\n\n2. 使用 extends 继承。\n\n  extends 是一个内置的原型继承方法并且不会破坏 instanceof。\n\n  ```\n  // 不推荐\n  const inherits = require('inherits');\n      function PeekableQueue(contents) {\n      Queue.apply(this, contents);\n  }\n\n  inherits(PeekableQueue, Queue);\n  PeekableQueue.prototype.peek = function () {\n      return this.queue[0];\n  };\n\n  // 推荐\n  class PeekableQueue extends Queue {\n      peek() {\n          return this.queue[0];\n      }\n  }\n  ```\n\n3. 如果没有指定，类有一个默认的构造函数。一个空的构造函数或者只是委托给父类则不是必须的(?)。\n\n  > eslint: no-useless-constructor\n\n  ```\n  // 不推荐\n  class Jedi {\n      constructor() {}\n          getName() {\n          return this.name;\n      }\n  }\n  // 不推荐\n  class Rey extends Jedi {\n      constructor(...args) {\n          super(...args);\n      }\n  }\n  // 推荐\n  class Rey extends Jedi {\n      constructor(...args) {\n          super(...args);\n          this.name = 'Rey';\n      }\n  }\n  ```\n\n4. 避免重复类成员(?)。\n\n  > eslint: no-dupe-class-members\n\n  ```\n  // 不推荐\n  class Foo {\n    bar() { return 1; }\n    bar() { return 2; }\n  }\n  // 推荐\n  class Foo {\n    bar() { return 1; }\n  }\n  // 推荐\n  class Foo {\n    bar() { return 2; }\n  }\n  ```\n\n## 模块 Modules\n\n1. 使用模块 (import/export) 而不是其他非标准模块系统。\n\n  ```\n  // 不推荐\n  const JavascriptStyleGuide = require('./JavascriptStyleGuide');\n  module.exports = JavascriptStyleGuide.es6;\n  // 一般\n  import JavascriptStyleGuide from './JavascriptStyleGuide';\n  export default JavascriptStyleGuide.es6;\n  // 推荐\n  import { es6 } from './JavascriptStyleGuide';\n  export default es6;\n  ```\n\n2. 不要使用通配符 import(导入)。\n\n  这样能确保你只有一个默认 export(导出)。\n\n  ```\n  // 不推荐\n  import * as JavascriptStyleGuide from './JavascriptStyleGuide';\n  // 推荐\n  import JavascriptStyleGuide from './JavascriptStyleGuide';\n  ```\n\n3. 不要从 import(导入) 中直接 export(导出)。\n\n  虽然一行代码简洁明了，但有一个明确的 import(导入) 方法和一个明确的 export(导出) 方法，使事情能保持一致。\n\n  ```\n  // 不推荐\n  export { es6 as default } from './JavascriptStyleGuide';\n\n  // 推荐\n  import { es6 } from './JavascriptStyleGuide';\n  export default es6;\n  ```\n\n4. 一个地方只在一个路径中 import(导入) 。\n\n  ```\n  // 不推荐\n  import foo from 'foo';\n  import { named1, named2 } from 'foo';\n\n  // 推荐\n  import foo, { named1, named2 } from 'foo';\n  ```\n\n5. 不要 export(导出) 可变绑定。\n\n  > eslint: import/no-mutable-exports\n\n  一般应该避免可变性，特别是在导出可变绑定时。虽然一些特殊情况下，可能需要这种技术，但是一般而言，只应该导出常量引用。\n\n  ```\n  // 不推荐\n  let foo = 3;\n  export { foo };\n  // 推荐\n  const foo = 3;\n  export { foo };\n  ```\n\n6. 在只有单个导出的模块中，默认 export(导出) 优于命名 export(导出)。\n\n  > eslint: import/prefer-default-export\n\n  为了鼓励更多的文件只有一个 export(导出)，这有利于模块的可读性和可维护性。\n\n  ```\n  // 不推荐\n  export function foo() {}\n  // 推荐\n  export default function foo() {}\n  ```\n\n7. 将所有 import 导入放在非导入语句的上面。\n\n  > eslint: import/first\n\n  由于 import 被提升，保持他们在顶部，防止意外的行为。\n\n  ```\n  // 不推荐\n  import foo from 'foo';\n  foo.init();\n  import bar from 'bar';\n\n  // 推荐\n  import foo from 'foo';\n  import bar from 'bar';\n  foo.init();\n  ```\n\n8. 多行导入应该像多行数组和对象字面量一样进行缩进。\n\n  ```\n  // 不推荐\n  import {longNameA, longNameB, longNameC, longNameD, longNameE} from 'path';\n  // 推荐\n  import {\n      longNameA,\n      longNameB,\n      longNameC,\n      longNameD,\n      longNameE,\n  } from 'path';\n  ```\n\n## 变量 Variables\n\n1. 总是使用 const 或 let 来声明变量。 \n\n  var 声明变量会导致产生全局变量，避免污染全局命名空间。\n\n  > eslint: no-undef prefer-const\n\n  ```\n  // 不推荐\n  superPower = new SuperPower();\n  // 推荐\n  const superPower = new SuperPower();\n  ```\n\n2. 将所有的 const 和 let 分组 。\n\n  ```\n  // 不推荐\n  let i, len, dragonball,\n  items = getItems(),\n  goSportsTeam = true;\n\n  // 不推荐\n  let i;\n  const items = getItems();\n  let dragonball;\n  const goSportsTeam = true;\n  let len;\n\n  // 推荐\n  const goSportsTeam = true;\n  const items = getItems();\n  let dragonball;\n  let i;\n  let length;\n  ```\n\n3. 变量不要链式赋值。\n\n  > eslint: no-multi-assign\n\n  ```\n  // 不推荐\n  (function example() {\n    // JavaScript 将其解析为\n    // let a = ( b = ( c = 1 ) );\n    // let关键字只适用于变量a;\n    // 变量b和c变成了全局变量。\n    let a = b = c = 1;\n  }());\n  console.log(a); // 抛出 ReferenceError（引用错误）\n  console.log(b); // 1\n  console.log(c); // 1\n\n  // 推荐\n  (function example() {\n    let a = 1;\n    let b = a;\n    let c = a;\n    // 同样适用于 `const`\n  }());\n  console.log(a); // 抛出 ReferenceError（引用错误）\n  console.log(b); // 抛出 ReferenceError（引用错误）\n  console.log(c); // 抛出 ReferenceError（引用错误）\n  ```\n\n4. 避免使用一元递增和递减运算符(++, -–)。\n\n  根据 eslint 文档，一元递增和递减语句会受到自动插入分号的影响，并可能导致应用程序中的值递增或递减，从而导致无提示错误。\n\n  使用像 num += 1 而不是 num++ 或 num ++ 这样的语句来改变你的值也更具有表现力。\n\n  不允许一元递增和递减语句也会阻止您无意中预先递增/递减值，这也会导致程序中的意外行为。\n\n  ```\n  // 不推荐\n  const array = [1, 2, 3];\n  let num = 1;\n  num++;\n  --num;\n  let sum = 0;\n  let truthyCount = 0;\n  for (let i = 0; i < array.length; i++) { \n    let value = array[i]; \n    sum += value;\n     if (value) {\n        truthyCount++; \n      } \n   }\n\n  // 推荐\n  const array = [1, 2, 3]; \n  let num = 1; num += 1; num -= 1; \n  const sum = array.reduce((a, b) => a + b, 0);\n  const truthyCount = array.filter(Boolean).length;\n  ```\n\n## 比较运算符 Comparison Operators 和 等号 Equality\n\n1. 使用 === 和 !== 优先于 == 和 !=。\n\n  > eslint: eqeqeq\n\n2. 对于布尔值使用简写，但对于字符串和数字使用显式比较。\n\n  ```\n  // 不推荐\n  if (isValid === true) {\n    // ...\n  }\n  // 推荐\n  if (isValid) {\n    // ...\n  }\n\n  // 不推荐\n  if (name) {\n    // ...\n  }\n  // 推荐\n  if (name !== '') {\n    // ...\n  }\n\n  // 不推荐\n  if (collection.length) {\n    // ...\n  }\n  // 推荐\n  if (collection.length > 0) {\n    // ...\n  }\n  ```\n\n3. 在 case 和 default 子句中，使用大括号来创建包含词法声明的语句块(例如 let, const, function, 和 class).\n\n  > eslint: no-case-declarations\n\n  ```\n  // 不推荐\n  switch (foo) {\n    case 1:\n      let x = 1;\n    break;\n    case 2:\n      const y = 2;\n    break;\n    case 3:\n      function f() {\n        // ...\n      }\n    break;\n  default:\n    class C {}\n  }\n\n  // 推荐\n  switch (foo) {\n    case 1: {\n      let x = 1;\n      break;\n    }\n    case 2: {\n      const y = 2;\n      break;\n    }\n    case 3: {\n      function f() {\n        // ...\n      }\n      break;\n    }\n    case 4:\n      bar();\n      break;\n    default: {\n      class C {}\n    }\n  }\n  ```\n\n4. 三元表达式不应该嵌套，通常写成单行表达式。\n\n  > eslint: no-nested-ternary\n\n  ```\n  // 不推荐\n  const foo = maybe1 > maybe2\n  ? \"bar\"\n  : value1 > value2 ? \"baz\" : null;\n\n  // 推荐\n  const maybeNull = value1 > value2 ? 'baz' : null;\n  const foo = maybe1 > maybe2 ? 'bar' : maybeNull;\n  ```\n\n5. 避免不必要的三元表达式语句。\n\n  > eslint: no-unneeded-ternary\n\n  ```\n  // 不推荐\n  const foo = a ? a : b;\n  const bar = c ? true : false;\n  const baz = c ? false : true;\n\n  // 推荐\n  const foo = a || b;\n  const bar = !!c;\n  const baz = !c;\n  ```\n\n6. 当运算符混合在一个语句中时，请将其放在括号内。\n\n  > eslint: no-mixed-operators\n\n  混合算术运算符时，不要将 * 和 % 与 + ， -，，/ 混合在一起。\n\n  提高可读性，并清晰展现开发者的意图。\n\n  ```\n  // 不推荐\n  const foo = a && b < 0 || c > 0 || d + 1 === 0;\n  // 不推荐\n  const bar = a ** b - 5 % d;\n  // 不推荐\n  if (a || b && c) {\n    return d;\n  }\n  // 推荐\n  const foo = (a && b < 0) || c > 0 || (d + 1 === 0);\n  // 推荐\n  const bar = (a ** b) - (5 % d);\n  // 推荐\n  if ((a || b) && c) {\n    return d;\n  }\n  // 推荐\n  const bar = a + b / c * d;\n  ```\n\n## 代码块 Blocks\n\n1. 使用大括号包裹所有的多行代码块\n\n  > eslint: nonblock-statement-body-position\n\n  ```\n  // 不推荐\n  if (test)\n    return false;\n  // 推荐\n  if (test) return false;\n  // 推荐\n  if (test) {\n    return false;\n  }\n\n  // 不推荐\n  function foo() { return false; }\n  // 推荐\n  function bar() {\n    return false;\n  }\n  ```\n\n2. 如果通过 if 和 else 使用多行代码块，把 else 放在 if 代码块闭合括号的同一行。\n\n  > eslint: brace-style\n\n  ```\n  // 不推荐\n  if (test) {\n    thing1();\n    thing2();\n  }\n  else {\n    thing3();\n  }\n\n  // 推荐\n  if (test) {\n    thing1();\n    thing2();\n  } else {\n    thing3();\n  }\n  ```\n\n3. 如果一个 if 块总是执行一个 return 语句，后面的 else 块是不必要的。在 else if 块中的 return，可以分成多个 if 块来 return 。\n\n  > eslint: no-else-return\n\n  ```\n  // 不推荐\n  function foo() {\n    if (x) {\n      return x;\n    } else {\n      return y;\n    }\n  }\n  // 不推荐\n  function cats() {\n    if (x) {\n      return x;\n    } else if (y) {\n      return y;\n    }\n  }\n  // 不推荐\n  function dogs() {\n    if (x) {\n      return x;\n    } else {\n      if (y) {\n        return y;\n      }\n    }\n  }\n\n  // 推荐\n  function foo() {\n    if (x) {\n      return x;\n    }\n    return y;\n  }\n  // 推荐\n  function cats() {\n    if (x) {\n      return x;\n    }\n    if (y) {\n      return y;\n    }\n  }\n  // 推荐\n  function dogs(x) {\n    if (x) {\n      if (z) {\n        return y;\n      }\n    } else {\n      return z;\n    }\n  }\n  ```\n\n## 控制语句 Control Statements\n\n1. 如果控制语句(if, while 的)太长或超过最大行长度，那么每个（分组）条件可以放单独一行。逻辑运算符应该放在每行起始处。\n\n  ```\n  // 不推荐\n  if ((foo === 123 || bar === 'abc') && doesItLookGoodWhenItBecomesThatLong() && isThisReallyHappening()) {\n   thing1();\n  }\n  // 不推荐\n  if (foo === 123 &&\n    bar === 'abc') {\n    thing1();\n  }\n  // 不推荐\n  if (foo === 123\n    && bar === 'abc') {\n    thing1();\n  }\n  // 不推荐\n  if (\n    foo === 123 &&\n    bar === 'abc'\n  ) {\n    thing1();\n  }\n\n  // 推荐\n  if (\n    foo === 123\n    && bar === 'abc'\n  ) {\n    thing1();\n  }\n  // 推荐\n  if (\n    (foo === 123 || bar === \"abc\")\n    && doesItLookGoodWhenItBecomesThatLong()\n    && isThisReallyHappening()\n  ) {\n    thing1();\n  }\n  // 推荐\n  if (foo === 123 && bar === 'abc') {\n    thing1();\n  }\n  ```\n\n## 注释 Comments\n\n1. 多行注释使用 `/.../`。\n\n  ```\n  /**\n  * @param {Grid} grid 需要合并的Grid\n  * @param {Array} cols 需要合并列的Index(序号)数组；从0开始计数，序号也包含。\n  * @param {Boolean} isAllSome 是否2个tr的cols必须完成一样才能进行合并。true：完成一样；false(默认)：不完全一样\n  * @return void\n  * @author XXX 2019/09/09\n  */\n  function mergeCells(grid, cols, isAllSome) {\n      // Do Something\n  }\n  ```\n\n2. 单行注释使用 `//`。将单行注释放在需注释的语句上方。在注释之前放置一个空行，除非它位于代码块的第一行。\n\n  ```\n  // 不推荐\n  const active = true;  // is current tab\n  // 推荐\n  // is current tab\n  const active = true;\n\n  // 不推荐\n  function getType() {\n    console.log('fetching type...');\n    // set the default type to 'no type'\n    const type = this.type || 'no type';\n    return type;\n  }\n  // 推荐\n  function getType() {\n    console.log('fetching type...');\n\n    // set the default type to 'no type'\n    const type = this.type || 'no type';\n    return type;\n  }\n  // 推荐\n  function getType() {\n    // set the default type to 'no type'\n    const type = this.type || 'no type';\n    return type;\n  }\n  ```\n\n3. 所有注释符和注释内容用一个空格隔开，让它更容易阅读。\n\n  > eslint: spaced-comment\n\n  ```\n  // 不推荐\n  //is current tab\n  const active = true;\n  // 推荐\n  // is current tab\n  const active = true;\n\n  // 不推荐\n  /**\n  *make() returns a new element\n  *based on the passed-in tag name\n  */\n  function make(tag) {\n    // ...\n    return element;\n  }\n  // 推荐\n  /**\n  * make() returns a new element\n  * based on the passed-in tag name\n  */\n  function make(tag) {\n    // ...\n    return element;\n  }\n  ```\n\n4. 给注释增加 FIXME 或 TODO 的前缀\n\n  帮助其他开发者快速了解这个是否是一个需要重新复查的问题，或是你正在为需要解决的问题提出解决方案。这将有别于常规注释，因为它们是可操作的。\n\n  使用 `FIXME – need to figure this out` 或者 `TODO – need to implement`。\n\n  使用 `// FIXME: ` 来标识需要修正的问题。\n\n  注：如果代码中有该标识，说明标识处代码需要修正，甚至代码是错误的，不能工作，需要修复，如何修正会在说明中简略说明。\n\n  ```\n  lass Calculator extends Abacus {\n    constructor() {\n      super();\n      // FIXME: shouldn’t use a global here\n      total = 0;\n    }\n  }\n  ```\n\n  使用 `// TODO:` 来标识需要实现的问题。\n\n  注：如果代码中有该标识，说明在标识处有功能代码待编写，待实现的功能在说明中会简略说明。\n\n  ```\n  class Calculator extends Abacus {\n    constructor() {\n      super();\n      // TODO: total should be configurable by an options param\n      this.total = 0;\n    }\n  }\n  ```\n\n## 空格 Whitespace\n\n1. 使用 2 个空格作为缩进\n\n  ```\n  // 推荐\n  function baz() {\n    let name;\n  }\n  ```\n\n2. 在大括号前放置 1 个空格。\n\n  > eslint: space-before-blocks jscs: requireSpaceBeforeBlockStatements\n\n  ```\n  // 不推荐\n  function test(){\n    console.log('test');\n  }\n  // 推荐\n  function test() {\n    console.log('test');\n  }\n  // 不推荐\n  dog.set('attr',{\n    age: '1 year',\n    breed: 'Bernese Mountain Dog',\n  });\n  // 推荐\n  dog.set('attr', {\n    age: '1 year',\n    breed: 'Bernese Mountain Dog',\n  });\n  ```\n\n3. 在控制语句（if、while 等）的小括号前放一个空格。在函数调用及声明中，不在函数的参数列表前加空格。\n\n  > eslint: keyword-spacing jscs: requireSpaceAfterKeywords\n\n  ```\n  // 不推荐\n  if(isJedi) {\n    fight ();\n  }\n  // 推荐\n  if (isJedi) {\n    fight();\n  }\n\n  // 不推荐\n  function fight () {\n    console.log ('Swooosh!');\n  }\n  // 推荐\n  function fight() {\n    console.log('Swooosh!');\n  }\n  ```\n\n4. 使用空格把运算符隔开。\n\n  > eslint: space-infix-ops jscs: requireSpaceBeforeBinaryOperators, requireSpaceAfterBinaryOperators\n\n  ```\n  // 不推荐\n  const x=y+5;\n  // 推荐\n  const x = y + 5;\n  ```\n\n5. 在文件末尾插入一个空行。\n\n  > eslint: eol-last\n\n  ```\n  // 不推荐\n  import { es6 } from './JavascriptStyleGuide';\n  // ...\n  export default es6;\n\n  // 推荐\n  import { es6 } from './JavascriptStyleGuide';\n  // ...\n  export default es6;\n\n  ```\n\n6. 长方法链式调用时使用缩进（2个以上的方法链式调用）。使用一个点 . 开头，强调该行是一个方法调用，不是一个新的声明。\n\n  > eslint: newline-per-chained-call no-whitespace-before-property\n\n  ```\n  // 不推荐\n  $('#items').find('.selected').highlight().end().find('.open').updateCount();\n\n  // 不推荐\n  $('#items').\n  find('.selected').\n  highlight().\n  end().\n  find('.open').\n  updateCount();\n\n  // 推荐\n  $('#items')\n    .find('.selected')\n    .highlight()\n    .end()\n    .find('.open')\n    .updateCount();\n\n  // 不推荐\n  const leds = stage.selectAll('.led').data(data).enter().append('svg:svg').classed('led', true)\n  .attr('width', (radius + margin) * 2).append('svg:g')\n  .attr('transform', `translate(${radius + margin},${radius + margin})`)\n  .call(tron.led);\n\n  // 推荐\n  const leds = stage.selectAll('.led')\n    .data(data)\n    .enter().append('svg:svg')\n    .classed('led', true)\n    .attr('width', (radius + margin) * 2)\n    .append('svg:g')\n    .attr('transform', `translate(${radius + margin},${radius + margin})`)\n    .call(tron.led);\n  // 推荐\n  const leds = stage.selectAll('.led').data(data);\n  ```\n\n7. 不要在圆括号内加空格。\n\n  ```\n  // 不推荐\n  function bar( foo ) {\n    return foo;\n  }\n  // 推荐\n  function bar(foo) {\n    return foo;\n  }\n  // 不推荐\n  if ( foo ) {\n    console.log(foo);\n  }\n  // 推荐\n  if (foo) {\n    console.log(foo);\n  }\n  ```\n\n8. 添加/不添加空格。\n\n  > eslint: array-bracket-spacing jscs: disallowSpacesInsideArrayBrackets\n\n  ```\n  // 不推荐\n  const foo = [ 1, 2, 3 ];\n  console.log(foo[ 0 ]);\n  // 推荐(内部分隔符号后有空格)\n  const foo = [1, 2, 3];\n  console.log(foo[0]);\n\n  // 不推荐\n  const foo = { clark:'kent' };\n  // 推荐(内部分隔符号后有空格)\n  const foo = {clark: 'kent'};\n  ```\n\n## 类型转换 Type Casting & Coercion\n\n1. 在声明语句的开始处就执行强制类型转换.\n\n  字符串：\n\n  > eslint: no-new-wrappers\n\n  ```\n  // => this.reviewScore = 9;\n  // 不推荐\n  const totalScore = new String(this.reviewScore); // typeof totalScore 是 \"object\" 而不是 \"string\"\n  // 不推荐\n  const totalScore = this.reviewScore + ''; // 调用 this.reviewScore.valueOf()\n  // 不推荐\n  const totalScore = this.reviewScore.toString(); // 不能保证返回一个字符串\n  // 推荐\n  const totalScore = String(this.reviewScore);\n  ```\n\n  数字：使用 Number 进行转换，而 parseInt 则始终以基数解析字串。\n\n  > eslint: radix no-new-wrappers\n\n  ```\n  const inputValue = '4';\n  // 不推荐\n  const val = new Number(inputValue);\n  // 不推荐\n  const val = +inputValue;\n  // 不推荐\n  const val = inputValue >> 0;\n  // 不推荐\n  const val = parseInt(inputValue);\n  // 推荐\n  const val = Number(inputValue);\n  // 推荐\n  const val = parseInt(inputValue, 10);\n  ```\n\n  布尔值:\n\n  > eslint: no-new-wrappers\n\n  ```\n  const age = 0;\n  // 不推荐\n  const hasAge = new Boolean(age);\n  // 推荐\n  const hasAge = Boolean(age);\n  // 强烈推荐\n  const hasAge = !!age;\n  ```\n\n## 命名规则 Naming Conventions\n\n1. 避免使用单字母名称，命名应具有描述性。\n\n  > eslint: id-length\n\n  ```\n  // 不推荐\n  function q() {\n    // ...\n  }\n  // 推荐\n  function query() {\n    // ...\n  }\n  ```\n2. 当命名对象，函数和实例时使用驼峰式命名。\n\n  > eslint: camelcase jscs: requireCamelCaseOrUpperCaseIdentifiers\n\n  ```\n  // 不推荐\n  const OBJEcttsssss = {};\n  const this_is_my_object = {};\n  function c() {}\n  // 推荐\n  const thisIsMyObject = {};\n  function thisIsMyFunction() {}\n  ```\n\n3. 当命名构造函数或类的时候使用 PascalCase 式命名，（注：即单词首字母大写）。\n\n  > eslint: new-cap\n\n  ```\n  // 不推荐\n  function user(options) {\n    this.name = options.name;\n  }\n  const bad = new user({\n    name: 'nope',\n  });\n  // 推荐\n  class User {\n    constructor(options) {\n      this.name = options.name;\n    }\n  }\n  const good = new User({\n    name: 'yup',\n  });\n  ```\n\n4. 当导出(export) 一个默认函数时使用驼峰式命名。你的文件名应该和你的函数的名字一致。\n\n  ```\n  function makeStyleGuide() {\n    // ...\n  }\n  export default makeStyleGuide;\n  ```\n\n5. 当导出一个构造函数/类/单例/函数库/纯对象时使用 PascalCase 式命名。\n\n  ```\n  const JavascriptStyleGuide = {\n    es6: {\n    },\n  };\n  export default JavascriptStyleGuide;\n  ```\n\n## 存取器 Accessors\n\n属性的存取器函数不是必须的。\n\n1. 別使用 JavaScript 的 getters/setters，因为它们会导致意想不到的副作用，而且很难测试，维护和理解。相反，如果要使用存取器函数，使用 getVal() 及 setVal(‘hello’)。\n\n  ```\n  // 不推荐\n  class Dragon {\n    get age() {\n      // ...\n    }\n    set age(value) {\n      // ...\n    }\n  }\n  // 推荐\n  class Dragon {\n    getAge() {\n      // ...\n    }\n    setAge(value) {\n      // ...\n    }\n  }\n  ```\n\n2. 如果属性/方法是一个 boolean, 使用 isVal() 或 hasVal() 方法。\n\n  ```\n  // 不推荐\n  if (!dragon.age()) {\n    return false;\n  }\n  // 推荐\n  if (!dragon.hasAge()) {\n    return false;\n  }\n  ```\n\n## If-Else优化方案\n\n[If-Else优化方案](/developer/style-guide/if-else-optimize-solutions.html)\n\n## 整洁代码\n\n[整洁代码的建议列表](/developer/style-guide/tips-to-keep-javascript-code-clean.html)\n\n## 摘自文章\n\n- [JavaScript 编程规范(一)](https://cloud.tencent.com/developer/article/1404290)\n- [JavaScript 编程规范(二)](https://cloud.tencent.com/developer/article/1404381)\n","source":"developer/style-guide/javascript.md","raw":"---\ntitle: Javascript 编程规范\ntype: Javascript 编程规范\n---\n\n## 命名规范\nfv\n- 标准变量采用驼峰式命名\n- ID 在变量名中全大写\n- 常量全大写，用下划线连接构造函数，大写第一个字母\n- JQuery 对象必须以 $ 开头命名\n\n```\nlet thisIsMyName;\nlet goodID;\nlet reportURL;\nlet AndroidVersion;\nlet iOSVersion;\nlet MAX_COUNT = 10;\n\nfunction Person(name) {\n    this.name = name;\n}\n// 不推荐\nlet body = $('body');\n// 推荐\nlet $body = $('body');\n```\n\n## 函数命名\n\n> 小驼峰命名法，可使用常见动词约定：\n\n- `{ctl}{Event}`, 控件的操作事件，示例: `radioChange`, `btnSaveClick`\n- canXXX 判断是否可执行某个动作，函数返回布尔值。true：可执行；false：不可执行\n- hasXXX 判断是否含有某个值， 函数返回布尔值。true：含有此值；false：不含有此值\n- isXXX 判断是否为某个值，函数返回布尔值。true：为某个值；false：不为某个值\n- getXXX 获取某个值，函数返回非布尔值\n- setXXX 设置某个值\n    - 无返回值\n    - 返回是否设置成功\n    - 返回链式对象 load 加载某些数据\n    - 返回是否加载完成的结果\n\n```\n// 是否有权限\nfunction hasPermission() {\n return true;\n}\n// 获取权限列表\nfunction getPermissinList() {\n return this.permissinList;\n}\n```\n\n## 引用 References\n\n1. 对所有的引用使用 const；不要使用 var。\n\n  > eslint: prefer-const, no-const-assign\n\n  这可以确保你无法对引用重新分配，重新分配可能会导致 bug 和难以理解的代码。\n\n  ```\n  // 批评\n  var a = 1;\n  var b = 2;\n  // 推荐\n  const a = 1;\n  const b = 2;\n  ```\n\n2. 如果一定需要可变动的引用，使用 let 代替 var 。\n\n  > eslint: no-var jscs: disallowVar\n\n  ```\n  // 不推荐\n  var count = 1;\n  if (true) {\n      count += 1;\n  }\n  // 推荐\n  let count = 1;\n  if (true) {\n      count += 1;\n  }\n  ```\n\n## 对象 Objects\n\n1. 使用字面量语法创建对象。\n\n  > eslint: no-new-object\n\n  ```\n  // 不推荐\n  const item = new Object();\n  // 推荐\n  const item = {};\n  ```\n\n2. 创建带有动态属性名称的对象时使用计算的属性名称。\n\n  它们允许你在一个地方定义一个对象的所有属性。\n\n  ```\n  function getKey(k) {\n      return `a-key-named-k`;\n  }\n  // 不推荐\n  const obj = {\n      id: 5,\n      name: 'San Francisco',\n  };\n  obj[getKey('enabled')] = true;\n\n  // 推荐\n  const obj = {\n      id: 5,\n      name: 'San Francisco',\n      [getKey('enabled')]: true,\n  };\n  ```\n\n3. 使用对象方法速记语法。\n\n  > eslint: object-shorthand jscs: requireEnhancedObjectLiterals\n\n  ```\n  // 不推荐\n  const atom = {\n    value: 1,\n    addValue: function (value) {\n        return atom.value + value;\n    }\n  };\n\n  // 推荐\n  const atom = {\n    value: 1,\n    addValue(value) {\n        return atom.value + value;\n    }\n  };\n  ```\n\n4. 使用对象属性速记语法。\n\n  > eslint: object-shorthand jscs: requireEnhancedObjectLiterals\n\n  ```\n  const lukeSkywalker = 'Luke Skywalker';\n  // 不推荐\n  const obj = {\n      lukeSkywalker: lukeSkywalker,\n  };\n\n  // 推荐\n  const obj = {\n      lukeSkywalker,\n  };\n  ```\n\n5. 将速记属性分组写在对象声明的开始处\n\n  更容易看出哪些属性在使用速记语法\n\n  ```\n  const anakinSkywalker = 'Anakin Skywalker';\n  const lukeSkywalker = 'Luke Skywalker';\n  // 不推荐\n  const obj = {\n      episodeOne: 1,\n      twoJediWalkIntoACantina: 2,\n      lukeSkywalker,\n      episodeThree: 3,\n      mayTheFourth: 4,\n      anakinSkywalker,\n  };\n  // 推荐\n  const obj = {\n      lukeSkywalker,\n      anakinSkywalker,\n      episodeOne: 1,\n      twoJediWalkIntoACantina: 2,\n      episodeThree: 3,\n      mayTheFourth: 4,\n  };\n  ```\n\n6. 仅无效标识符的属性使用引号\n\n  > eslint: quote-props jscs: disallowQuotedKeysInObjects\n\n  比较容易阅读。它改进了语法高亮显示，并且更容易被许多JS引擎优化。\n\n  ```\n  // 不推荐\n  const bad = {\n      'foo': 3,\n      'bar': 4,\n      'data-blah': 5\n  };\n\n  // 推荐\n  const good = {\n      foo: 3,\n      bar: 4,\n      'data-blah': 5\n  };\n  ```\n\n7. 用对象展开操作符浅复制对象，优先于Object.assign。\n\n  使用对象剩余操作符来获得一个省略某些属性的新对象。\n\n  ```\n  // 批评\n  const original = { a: 1, b: 2 };\n  const copy = Object.assign(original, { c: 3 }); //  `original` 是可变的\n  delete copy.a; // so does this\n\n  // 不推荐\n  const original = { a: 1, b: 2 };\n  const copy = Object.assign({}, original, { c: 3 }); // copy => { a: 1, b: 2, c: 3 }\n\n  // 推荐\n  const original = { a: 1, b: 2 };\n  const copy = { ...original, c: 3 }; // copy => { a: 1, b: 2, c: 3 }\n  const { a, ...noA } = copy; // noA => { b: 2, c: 3 }\n  ```\n\n## 数组 Arrays\n\n1. 使用字面量创建数组。\n\n  > eslint: no-array-constructor\n\n  ```\n  // 不推荐\n  const items = new Array();\n  // 推荐\n  const items = [];\n  ```\n\n2. 使用数组展开操作符`...`复制数组。\n\n  ```\n  // 不推荐\n  const len = items.length;\n  const itemsCopy = [];\n  let i;\n  for (i = 0; i < len; i += 1) {\n      itemsCopy[i] = items[i];\n  }\n\n  // 推荐\n  const itemsCopy = [...items];\n  ```\n\n3. 使用展开操作符`...`代替 Array.from，将类数组(array-like) 对象转换成数组。\n\n  ```\n  const foo = document.querySelectorAll('.foo');\n  // 推荐\n  const nodes = Array.from(foo);\n  // 高效\n  const nodes = [...foo];\n  ```\n\n4. 使用 Array.from 代替展开操作符`...`来映射迭代，它避免了创建媒介数组。\n\n  ```\n  // 不推荐\n  const baz = [...foo].map(bar);\n  // 推荐\n  const baz = Array.from(foo, bar);\n  ```\n\n## 解构 Destructuring\n\n1. 当访问和使用对象的多个属性时，请使用对象解构。\n\n  > eslint: prefer-destructuring jscs: requireObjectDestructuring\n\n  ```\n  // 不推荐\n  function getFullName(user) {\n      const firstName = user.firstName;\n      const lastName = user.lastName;\n      return `firstName lastName`;\n  }\n  // 推荐\n  function getFullName(user) {\n      const { firstName, lastName } = user;\n      return `firstName lastName`;\n  }\n  // 高效\n  function getFullName({ firstName, lastName }) {\n      return `firstName lastName`;\n  }\n  ```\n\n2. 使用数组解构。\n\n  > eslint: prefer-destructuring jscs: requireArrayDestructuring\n\n  ```\n  const arr = [1, 2, 3, 4];\n  // 不推荐\n  const first = arr[0];\n  const second = arr[1];\n  // 推荐\n  const [first, second] = arr;\n  const [first, second, ...other] = arr;\n  ```\n\n3. 使用对象解构来实现多个返回值，而不是数组解构。\n\n  随着时间的推移添加新的属性或更改排序，而不会改变调用时的位置。\n\n  ```\n  // 不推荐\n  function processInput(input) {\n      return [left, right, top, bottom];\n  }\n  const [left, __, top] = processInput(input); // 需考虑返回数据的顺序\n  \n  // 推荐\n  function processInput(input) {\n      return { left, right, top, bottom };\n  }\n  const { left, top } = processInput(input); // 只选择需要的数据\n  ```\n\n## 字符串 Strings\n\n1. 字符串使用单引号 ''。\n\n  > eslint: quotes jscs: validateQuoteMarks\n\n  ```\n  // 不推荐\n  const name = \"Capt. Janeway\";\n  // 不推荐 - 模板字面量应该包含插值或换行符\n  const name = `Capt. Janeway`;\n  // 推荐\n  const name = 'Capt. Janeway';\n  ```\n\n2. 构建字符串时，使用模板字符串。\n\n  > eslint: prefer-template template-curly-spacing jscs: requireTemplateStrings\n\n  ```\n  // 不推荐\n  function sayHi(name) {\n      return 'How are you, ' + name + '?';\n  }\n  // 不推荐\n  function sayHi(name) {\n      return ['How are you, ', name, '?'].join();\n  }\n  // 不推荐\n  function sayHi(name) {\n      return `How are you, ${ name }?`;\n  }\n  // 推荐\n  function sayHi(name) {\n       return `How are you, ${name}?`;\n  }\n  ```\n\n3. 永远不要在字符串上使用 eval() ，它会打开太多的漏洞。\n\n  > eslint: no-eval\n\n## 函数 Functions\n\n1. 使用命名函数表达式而不是函数声明。\n\n  > eslint: func-style jscs: disallowFunctionDeclarations\n\n  函数声明很容易被提升（Hoisting）,这对可读性和可维护性来说都是不利的;\n\n  ```\n  // 不推荐\n  function foo() {\n    // ...\n  }\n  // 不推荐\n  const foo = function () {\n    // ...\n  };\n  // 推荐\n  // 用明显区别于变量引用调用的词汇命名\n  const short = function longUniqueMoreDescriptiveLexicalFoo() {\n    // ...\n  };\n  ```\n\n2. 用圆括号包裹立即调用函数表达式 (IIFE)。\n\n  > eslint: wrap-iife jscs: requireParenthesesAroundIIFE\n\n  一个立即调用函数表达式是一个单独的单元 – 将函数表达式包裹在括号中，后面再跟一个调用括号，这看上去很紧凑。\n\n  ```\n  // 立即调用函数表达式 (IIFE)\n  (function () {\n    console.log('Welcome to the Internet. Please follow me.');\n  }());\n  ```\n\n3. 不要使用 arguments。可以选择 rest 语法 `...` 替代。\n\n  使用 `...` 能明确要传入的参数。另外 rest（剩余）参数是一个真正的数组，而 arguments 是一个类数组（Array-like）。\n\n  ```\n  // 不推荐\n  function concatenateAll() {\n    const args = Array.prototype.slice.call(arguments);\n    return args.join('');\n  }\n  // 推荐\n  function concatenateAll(...args) {\n    return args.join('');\n  }\n  ```\n\n4. 使用默认参数语法，而不要使用一个变化的函数参数\n\n  ```\n  // 不推荐\n  function handleThings(opts) {\n    // 更加糟糕: 如果参数 opts 是 falsy(假值) 的话，它将被设置为一个对象，\n    // 这可能是你想要的，但它可以引起一些小的错误。\n    opts = opts || {};\n    // ...\n  }\n  // 不推荐\n  function handleThings(opts) {\n    if (opts === void 0) {\n        opts = {};\n    }\n    // ...\n  }\n  // 推荐\n  function handleThings(opts = {}) {\n    // ...\n  }\n  ```\n\n5. 始终将默认参数放在最后。\n\n  ```\n  // 不推荐\n  function handleThings(opts = {}, name) {\n    // ...\n  }\n  // 推荐\n  function handleThings(name, opts = {}) {\n    // ...\n  }\n  ```\n\n6. 隔开函数签名，括号两边用空格隔开。\n\n  ```\n  // 不推荐\n  const f = function(){};\n  const g = function (){};\n  const h = function() {};\n  // 推荐\n  const x = function () {};\n  const y = function a() {};\n  ```\n\n7. 不要改变参数(?)。\n\n  > eslint: no-param-reassign\n\n  *操作*作为参数传入的对象，可能会在调用原始对象时造成不必要的变量副作用。（对象是引用类型）\n\n  ```\n  // 不推荐\n  function f1(obj) {\n      obj.key = 1;\n  }\n  // 推荐\n  function f2(obj) {\n      const key = Object.prototype.hasOwnProperty.call(obj, 'key') ? obj.key : 1;\n  }\n  ```\n\n## 箭头函数 Arrow Functions\n\n1. 当必须使用匿名函数（如在传递一个内联回调时），请使用箭头函数表示法。\n\n  > eslint: prefer-arrow-callback, arrow-spacing jscs: requireArrowFunctions\n\n  它创建了一个在 this 上下文中执行的函数的版本，这通常是你想要的，而且这样的写法更为简洁。\n\n  ```\n  // 不推荐\n  [1, 2, 3].map(function (x) {\n      const y = x + 1;\n      return x * y;\n  });\n  // 不推荐\n  [1, 2, 3].map( _ => {\n\n      return 0;\n  });\n  // 推荐\n  [1, 2, 3].map((x) => {\n      const y = x + 1;\n      return x * y;\n  });\n  // 推荐\n  [1, 2, 3].map(() => {\n      return 0;\n  });\n  ```\n\n2. 无副作用的单行语句\n\n  如果函数体由一个返回无副作用(side effect)的expression(表达式)的单行语句组成，那么可以省略大括号并使用隐式返回。否则，保留大括号并使用 return 语句\n\n  ```\n  // 不推荐\n  [1, 2, 3].map(number => {\n      const nextNumber = number + 1;\n      return `A string containing the ${nextNumber}.`;\n  });\n  // 推荐\n  [1, 2, 3].map(number => `A string containing the ${number}.`);\n  ```\n\n3. 如果表达式跨多行，将其包裹在括号中，可以提高可读性。\n\n  ```\n  // 不推荐\n  ['get', 'post', 'put'].map(httpMethod => Object.prototype.hasOwnProperty.call(\n      httpMagicObjectWithAVeryLongName,\n      httpMethod\n    )\n  );\n  // 推荐\n  ['get', 'post', 'put'].map(httpMethod => (\n      Object.prototype.hasOwnProperty.call(\n        httpMagicObjectWithAVeryLongName,\n        httpMethod\n      )\n    )\n  );\n  ```\n\n4. 如果函数只有一个参数并且不使用大括号，则可以省略参数括号。否则，为了清晰和一致性，总是给参数加上括号。\n\n  ```\n  // 不推荐\n  [1, 2, 3].map((x) => x * x);\n  // 推荐\n  [1, 2, 3].map(x => x * x);\n  // 推荐\n  [1, 2, 3].map(number => (\n    `A long string with the number. It’s so long that we don’t want it to take up space on the .map line!`\n  ));\n  // 不推荐\n  [1, 2, 3].map(x => {\n    const y = x + 1;\n    return x * y;\n  });\n  // 推荐\n  [1, 2, 3].map((x) => {\n    const y = x + 1;\n    return x * y;\n  });\n  ```\n\n5. 避免使用比较运算符(< =, >=)时，混淆箭头函数语法(=>)。\n\n  ```\n  // 不推荐\n  const itemHeight = item => item.height > 256 ? item.largeSize : item.smallSize;\n  // 不推荐\n  const itemHeight = (item) => item.height > 256 ? item.largeSize : item.smallSize;\n  // 推荐\n  const itemHeight = item => (item.height > 256 ? item.largeSize : item.smallSize);\n  // 推荐\n  const itemHeight = (item) => {\n    const { height, largeSize, smallSize } = item;\n    return height > 256 ? largeSize : smallSize;\n  };\n  ```\n\n## 类 Classes & 构造函数 Constructors\n\n1. 总是使用 class。避免直接操作 prototype 。\n\n  ```\n  // 不推荐\n  function Queue(contents = []) {\n      this.queue = [...contents];\n  }\n  Queue.prototype.pop = function () {\n      const value = this.queue[0];\n      this.queue.splice(0, 1);\n      return value;\n  };\n  // 推荐\n  class Queue {\n      constructor(contents = []) {\n          this.queue = [...contents];\n      }\n      pop() {\n          const value = this.queue[0];\n          this.queue.splice(0, 1);\n          return value;\n      }\n  }\n  ```\n\n2. 使用 extends 继承。\n\n  extends 是一个内置的原型继承方法并且不会破坏 instanceof。\n\n  ```\n  // 不推荐\n  const inherits = require('inherits');\n      function PeekableQueue(contents) {\n      Queue.apply(this, contents);\n  }\n\n  inherits(PeekableQueue, Queue);\n  PeekableQueue.prototype.peek = function () {\n      return this.queue[0];\n  };\n\n  // 推荐\n  class PeekableQueue extends Queue {\n      peek() {\n          return this.queue[0];\n      }\n  }\n  ```\n\n3. 如果没有指定，类有一个默认的构造函数。一个空的构造函数或者只是委托给父类则不是必须的(?)。\n\n  > eslint: no-useless-constructor\n\n  ```\n  // 不推荐\n  class Jedi {\n      constructor() {}\n          getName() {\n          return this.name;\n      }\n  }\n  // 不推荐\n  class Rey extends Jedi {\n      constructor(...args) {\n          super(...args);\n      }\n  }\n  // 推荐\n  class Rey extends Jedi {\n      constructor(...args) {\n          super(...args);\n          this.name = 'Rey';\n      }\n  }\n  ```\n\n4. 避免重复类成员(?)。\n\n  > eslint: no-dupe-class-members\n\n  ```\n  // 不推荐\n  class Foo {\n    bar() { return 1; }\n    bar() { return 2; }\n  }\n  // 推荐\n  class Foo {\n    bar() { return 1; }\n  }\n  // 推荐\n  class Foo {\n    bar() { return 2; }\n  }\n  ```\n\n## 模块 Modules\n\n1. 使用模块 (import/export) 而不是其他非标准模块系统。\n\n  ```\n  // 不推荐\n  const JavascriptStyleGuide = require('./JavascriptStyleGuide');\n  module.exports = JavascriptStyleGuide.es6;\n  // 一般\n  import JavascriptStyleGuide from './JavascriptStyleGuide';\n  export default JavascriptStyleGuide.es6;\n  // 推荐\n  import { es6 } from './JavascriptStyleGuide';\n  export default es6;\n  ```\n\n2. 不要使用通配符 import(导入)。\n\n  这样能确保你只有一个默认 export(导出)。\n\n  ```\n  // 不推荐\n  import * as JavascriptStyleGuide from './JavascriptStyleGuide';\n  // 推荐\n  import JavascriptStyleGuide from './JavascriptStyleGuide';\n  ```\n\n3. 不要从 import(导入) 中直接 export(导出)。\n\n  虽然一行代码简洁明了，但有一个明确的 import(导入) 方法和一个明确的 export(导出) 方法，使事情能保持一致。\n\n  ```\n  // 不推荐\n  export { es6 as default } from './JavascriptStyleGuide';\n\n  // 推荐\n  import { es6 } from './JavascriptStyleGuide';\n  export default es6;\n  ```\n\n4. 一个地方只在一个路径中 import(导入) 。\n\n  ```\n  // 不推荐\n  import foo from 'foo';\n  import { named1, named2 } from 'foo';\n\n  // 推荐\n  import foo, { named1, named2 } from 'foo';\n  ```\n\n5. 不要 export(导出) 可变绑定。\n\n  > eslint: import/no-mutable-exports\n\n  一般应该避免可变性，特别是在导出可变绑定时。虽然一些特殊情况下，可能需要这种技术，但是一般而言，只应该导出常量引用。\n\n  ```\n  // 不推荐\n  let foo = 3;\n  export { foo };\n  // 推荐\n  const foo = 3;\n  export { foo };\n  ```\n\n6. 在只有单个导出的模块中，默认 export(导出) 优于命名 export(导出)。\n\n  > eslint: import/prefer-default-export\n\n  为了鼓励更多的文件只有一个 export(导出)，这有利于模块的可读性和可维护性。\n\n  ```\n  // 不推荐\n  export function foo() {}\n  // 推荐\n  export default function foo() {}\n  ```\n\n7. 将所有 import 导入放在非导入语句的上面。\n\n  > eslint: import/first\n\n  由于 import 被提升，保持他们在顶部，防止意外的行为。\n\n  ```\n  // 不推荐\n  import foo from 'foo';\n  foo.init();\n  import bar from 'bar';\n\n  // 推荐\n  import foo from 'foo';\n  import bar from 'bar';\n  foo.init();\n  ```\n\n8. 多行导入应该像多行数组和对象字面量一样进行缩进。\n\n  ```\n  // 不推荐\n  import {longNameA, longNameB, longNameC, longNameD, longNameE} from 'path';\n  // 推荐\n  import {\n      longNameA,\n      longNameB,\n      longNameC,\n      longNameD,\n      longNameE,\n  } from 'path';\n  ```\n\n## 变量 Variables\n\n1. 总是使用 const 或 let 来声明变量。 \n\n  var 声明变量会导致产生全局变量，避免污染全局命名空间。\n\n  > eslint: no-undef prefer-const\n\n  ```\n  // 不推荐\n  superPower = new SuperPower();\n  // 推荐\n  const superPower = new SuperPower();\n  ```\n\n2. 将所有的 const 和 let 分组 。\n\n  ```\n  // 不推荐\n  let i, len, dragonball,\n  items = getItems(),\n  goSportsTeam = true;\n\n  // 不推荐\n  let i;\n  const items = getItems();\n  let dragonball;\n  const goSportsTeam = true;\n  let len;\n\n  // 推荐\n  const goSportsTeam = true;\n  const items = getItems();\n  let dragonball;\n  let i;\n  let length;\n  ```\n\n3. 变量不要链式赋值。\n\n  > eslint: no-multi-assign\n\n  ```\n  // 不推荐\n  (function example() {\n    // JavaScript 将其解析为\n    // let a = ( b = ( c = 1 ) );\n    // let关键字只适用于变量a;\n    // 变量b和c变成了全局变量。\n    let a = b = c = 1;\n  }());\n  console.log(a); // 抛出 ReferenceError（引用错误）\n  console.log(b); // 1\n  console.log(c); // 1\n\n  // 推荐\n  (function example() {\n    let a = 1;\n    let b = a;\n    let c = a;\n    // 同样适用于 `const`\n  }());\n  console.log(a); // 抛出 ReferenceError（引用错误）\n  console.log(b); // 抛出 ReferenceError（引用错误）\n  console.log(c); // 抛出 ReferenceError（引用错误）\n  ```\n\n4. 避免使用一元递增和递减运算符(++, -–)。\n\n  根据 eslint 文档，一元递增和递减语句会受到自动插入分号的影响，并可能导致应用程序中的值递增或递减，从而导致无提示错误。\n\n  使用像 num += 1 而不是 num++ 或 num ++ 这样的语句来改变你的值也更具有表现力。\n\n  不允许一元递增和递减语句也会阻止您无意中预先递增/递减值，这也会导致程序中的意外行为。\n\n  ```\n  // 不推荐\n  const array = [1, 2, 3];\n  let num = 1;\n  num++;\n  --num;\n  let sum = 0;\n  let truthyCount = 0;\n  for (let i = 0; i < array.length; i++) { \n    let value = array[i]; \n    sum += value;\n     if (value) {\n        truthyCount++; \n      } \n   }\n\n  // 推荐\n  const array = [1, 2, 3]; \n  let num = 1; num += 1; num -= 1; \n  const sum = array.reduce((a, b) => a + b, 0);\n  const truthyCount = array.filter(Boolean).length;\n  ```\n\n## 比较运算符 Comparison Operators 和 等号 Equality\n\n1. 使用 === 和 !== 优先于 == 和 !=。\n\n  > eslint: eqeqeq\n\n2. 对于布尔值使用简写，但对于字符串和数字使用显式比较。\n\n  ```\n  // 不推荐\n  if (isValid === true) {\n    // ...\n  }\n  // 推荐\n  if (isValid) {\n    // ...\n  }\n\n  // 不推荐\n  if (name) {\n    // ...\n  }\n  // 推荐\n  if (name !== '') {\n    // ...\n  }\n\n  // 不推荐\n  if (collection.length) {\n    // ...\n  }\n  // 推荐\n  if (collection.length > 0) {\n    // ...\n  }\n  ```\n\n3. 在 case 和 default 子句中，使用大括号来创建包含词法声明的语句块(例如 let, const, function, 和 class).\n\n  > eslint: no-case-declarations\n\n  ```\n  // 不推荐\n  switch (foo) {\n    case 1:\n      let x = 1;\n    break;\n    case 2:\n      const y = 2;\n    break;\n    case 3:\n      function f() {\n        // ...\n      }\n    break;\n  default:\n    class C {}\n  }\n\n  // 推荐\n  switch (foo) {\n    case 1: {\n      let x = 1;\n      break;\n    }\n    case 2: {\n      const y = 2;\n      break;\n    }\n    case 3: {\n      function f() {\n        // ...\n      }\n      break;\n    }\n    case 4:\n      bar();\n      break;\n    default: {\n      class C {}\n    }\n  }\n  ```\n\n4. 三元表达式不应该嵌套，通常写成单行表达式。\n\n  > eslint: no-nested-ternary\n\n  ```\n  // 不推荐\n  const foo = maybe1 > maybe2\n  ? \"bar\"\n  : value1 > value2 ? \"baz\" : null;\n\n  // 推荐\n  const maybeNull = value1 > value2 ? 'baz' : null;\n  const foo = maybe1 > maybe2 ? 'bar' : maybeNull;\n  ```\n\n5. 避免不必要的三元表达式语句。\n\n  > eslint: no-unneeded-ternary\n\n  ```\n  // 不推荐\n  const foo = a ? a : b;\n  const bar = c ? true : false;\n  const baz = c ? false : true;\n\n  // 推荐\n  const foo = a || b;\n  const bar = !!c;\n  const baz = !c;\n  ```\n\n6. 当运算符混合在一个语句中时，请将其放在括号内。\n\n  > eslint: no-mixed-operators\n\n  混合算术运算符时，不要将 * 和 % 与 + ， -，，/ 混合在一起。\n\n  提高可读性，并清晰展现开发者的意图。\n\n  ```\n  // 不推荐\n  const foo = a && b < 0 || c > 0 || d + 1 === 0;\n  // 不推荐\n  const bar = a ** b - 5 % d;\n  // 不推荐\n  if (a || b && c) {\n    return d;\n  }\n  // 推荐\n  const foo = (a && b < 0) || c > 0 || (d + 1 === 0);\n  // 推荐\n  const bar = (a ** b) - (5 % d);\n  // 推荐\n  if ((a || b) && c) {\n    return d;\n  }\n  // 推荐\n  const bar = a + b / c * d;\n  ```\n\n## 代码块 Blocks\n\n1. 使用大括号包裹所有的多行代码块\n\n  > eslint: nonblock-statement-body-position\n\n  ```\n  // 不推荐\n  if (test)\n    return false;\n  // 推荐\n  if (test) return false;\n  // 推荐\n  if (test) {\n    return false;\n  }\n\n  // 不推荐\n  function foo() { return false; }\n  // 推荐\n  function bar() {\n    return false;\n  }\n  ```\n\n2. 如果通过 if 和 else 使用多行代码块，把 else 放在 if 代码块闭合括号的同一行。\n\n  > eslint: brace-style\n\n  ```\n  // 不推荐\n  if (test) {\n    thing1();\n    thing2();\n  }\n  else {\n    thing3();\n  }\n\n  // 推荐\n  if (test) {\n    thing1();\n    thing2();\n  } else {\n    thing3();\n  }\n  ```\n\n3. 如果一个 if 块总是执行一个 return 语句，后面的 else 块是不必要的。在 else if 块中的 return，可以分成多个 if 块来 return 。\n\n  > eslint: no-else-return\n\n  ```\n  // 不推荐\n  function foo() {\n    if (x) {\n      return x;\n    } else {\n      return y;\n    }\n  }\n  // 不推荐\n  function cats() {\n    if (x) {\n      return x;\n    } else if (y) {\n      return y;\n    }\n  }\n  // 不推荐\n  function dogs() {\n    if (x) {\n      return x;\n    } else {\n      if (y) {\n        return y;\n      }\n    }\n  }\n\n  // 推荐\n  function foo() {\n    if (x) {\n      return x;\n    }\n    return y;\n  }\n  // 推荐\n  function cats() {\n    if (x) {\n      return x;\n    }\n    if (y) {\n      return y;\n    }\n  }\n  // 推荐\n  function dogs(x) {\n    if (x) {\n      if (z) {\n        return y;\n      }\n    } else {\n      return z;\n    }\n  }\n  ```\n\n## 控制语句 Control Statements\n\n1. 如果控制语句(if, while 的)太长或超过最大行长度，那么每个（分组）条件可以放单独一行。逻辑运算符应该放在每行起始处。\n\n  ```\n  // 不推荐\n  if ((foo === 123 || bar === 'abc') && doesItLookGoodWhenItBecomesThatLong() && isThisReallyHappening()) {\n   thing1();\n  }\n  // 不推荐\n  if (foo === 123 &&\n    bar === 'abc') {\n    thing1();\n  }\n  // 不推荐\n  if (foo === 123\n    && bar === 'abc') {\n    thing1();\n  }\n  // 不推荐\n  if (\n    foo === 123 &&\n    bar === 'abc'\n  ) {\n    thing1();\n  }\n\n  // 推荐\n  if (\n    foo === 123\n    && bar === 'abc'\n  ) {\n    thing1();\n  }\n  // 推荐\n  if (\n    (foo === 123 || bar === \"abc\")\n    && doesItLookGoodWhenItBecomesThatLong()\n    && isThisReallyHappening()\n  ) {\n    thing1();\n  }\n  // 推荐\n  if (foo === 123 && bar === 'abc') {\n    thing1();\n  }\n  ```\n\n## 注释 Comments\n\n1. 多行注释使用 `/.../`。\n\n  ```\n  /**\n  * @param {Grid} grid 需要合并的Grid\n  * @param {Array} cols 需要合并列的Index(序号)数组；从0开始计数，序号也包含。\n  * @param {Boolean} isAllSome 是否2个tr的cols必须完成一样才能进行合并。true：完成一样；false(默认)：不完全一样\n  * @return void\n  * @author XXX 2019/09/09\n  */\n  function mergeCells(grid, cols, isAllSome) {\n      // Do Something\n  }\n  ```\n\n2. 单行注释使用 `//`。将单行注释放在需注释的语句上方。在注释之前放置一个空行，除非它位于代码块的第一行。\n\n  ```\n  // 不推荐\n  const active = true;  // is current tab\n  // 推荐\n  // is current tab\n  const active = true;\n\n  // 不推荐\n  function getType() {\n    console.log('fetching type...');\n    // set the default type to 'no type'\n    const type = this.type || 'no type';\n    return type;\n  }\n  // 推荐\n  function getType() {\n    console.log('fetching type...');\n\n    // set the default type to 'no type'\n    const type = this.type || 'no type';\n    return type;\n  }\n  // 推荐\n  function getType() {\n    // set the default type to 'no type'\n    const type = this.type || 'no type';\n    return type;\n  }\n  ```\n\n3. 所有注释符和注释内容用一个空格隔开，让它更容易阅读。\n\n  > eslint: spaced-comment\n\n  ```\n  // 不推荐\n  //is current tab\n  const active = true;\n  // 推荐\n  // is current tab\n  const active = true;\n\n  // 不推荐\n  /**\n  *make() returns a new element\n  *based on the passed-in tag name\n  */\n  function make(tag) {\n    // ...\n    return element;\n  }\n  // 推荐\n  /**\n  * make() returns a new element\n  * based on the passed-in tag name\n  */\n  function make(tag) {\n    // ...\n    return element;\n  }\n  ```\n\n4. 给注释增加 FIXME 或 TODO 的前缀\n\n  帮助其他开发者快速了解这个是否是一个需要重新复查的问题，或是你正在为需要解决的问题提出解决方案。这将有别于常规注释，因为它们是可操作的。\n\n  使用 `FIXME – need to figure this out` 或者 `TODO – need to implement`。\n\n  使用 `// FIXME: ` 来标识需要修正的问题。\n\n  注：如果代码中有该标识，说明标识处代码需要修正，甚至代码是错误的，不能工作，需要修复，如何修正会在说明中简略说明。\n\n  ```\n  lass Calculator extends Abacus {\n    constructor() {\n      super();\n      // FIXME: shouldn’t use a global here\n      total = 0;\n    }\n  }\n  ```\n\n  使用 `// TODO:` 来标识需要实现的问题。\n\n  注：如果代码中有该标识，说明在标识处有功能代码待编写，待实现的功能在说明中会简略说明。\n\n  ```\n  class Calculator extends Abacus {\n    constructor() {\n      super();\n      // TODO: total should be configurable by an options param\n      this.total = 0;\n    }\n  }\n  ```\n\n## 空格 Whitespace\n\n1. 使用 2 个空格作为缩进\n\n  ```\n  // 推荐\n  function baz() {\n    let name;\n  }\n  ```\n\n2. 在大括号前放置 1 个空格。\n\n  > eslint: space-before-blocks jscs: requireSpaceBeforeBlockStatements\n\n  ```\n  // 不推荐\n  function test(){\n    console.log('test');\n  }\n  // 推荐\n  function test() {\n    console.log('test');\n  }\n  // 不推荐\n  dog.set('attr',{\n    age: '1 year',\n    breed: 'Bernese Mountain Dog',\n  });\n  // 推荐\n  dog.set('attr', {\n    age: '1 year',\n    breed: 'Bernese Mountain Dog',\n  });\n  ```\n\n3. 在控制语句（if、while 等）的小括号前放一个空格。在函数调用及声明中，不在函数的参数列表前加空格。\n\n  > eslint: keyword-spacing jscs: requireSpaceAfterKeywords\n\n  ```\n  // 不推荐\n  if(isJedi) {\n    fight ();\n  }\n  // 推荐\n  if (isJedi) {\n    fight();\n  }\n\n  // 不推荐\n  function fight () {\n    console.log ('Swooosh!');\n  }\n  // 推荐\n  function fight() {\n    console.log('Swooosh!');\n  }\n  ```\n\n4. 使用空格把运算符隔开。\n\n  > eslint: space-infix-ops jscs: requireSpaceBeforeBinaryOperators, requireSpaceAfterBinaryOperators\n\n  ```\n  // 不推荐\n  const x=y+5;\n  // 推荐\n  const x = y + 5;\n  ```\n\n5. 在文件末尾插入一个空行。\n\n  > eslint: eol-last\n\n  ```\n  // 不推荐\n  import { es6 } from './JavascriptStyleGuide';\n  // ...\n  export default es6;\n\n  // 推荐\n  import { es6 } from './JavascriptStyleGuide';\n  // ...\n  export default es6;\n\n  ```\n\n6. 长方法链式调用时使用缩进（2个以上的方法链式调用）。使用一个点 . 开头，强调该行是一个方法调用，不是一个新的声明。\n\n  > eslint: newline-per-chained-call no-whitespace-before-property\n\n  ```\n  // 不推荐\n  $('#items').find('.selected').highlight().end().find('.open').updateCount();\n\n  // 不推荐\n  $('#items').\n  find('.selected').\n  highlight().\n  end().\n  find('.open').\n  updateCount();\n\n  // 推荐\n  $('#items')\n    .find('.selected')\n    .highlight()\n    .end()\n    .find('.open')\n    .updateCount();\n\n  // 不推荐\n  const leds = stage.selectAll('.led').data(data).enter().append('svg:svg').classed('led', true)\n  .attr('width', (radius + margin) * 2).append('svg:g')\n  .attr('transform', `translate(${radius + margin},${radius + margin})`)\n  .call(tron.led);\n\n  // 推荐\n  const leds = stage.selectAll('.led')\n    .data(data)\n    .enter().append('svg:svg')\n    .classed('led', true)\n    .attr('width', (radius + margin) * 2)\n    .append('svg:g')\n    .attr('transform', `translate(${radius + margin},${radius + margin})`)\n    .call(tron.led);\n  // 推荐\n  const leds = stage.selectAll('.led').data(data);\n  ```\n\n7. 不要在圆括号内加空格。\n\n  ```\n  // 不推荐\n  function bar( foo ) {\n    return foo;\n  }\n  // 推荐\n  function bar(foo) {\n    return foo;\n  }\n  // 不推荐\n  if ( foo ) {\n    console.log(foo);\n  }\n  // 推荐\n  if (foo) {\n    console.log(foo);\n  }\n  ```\n\n8. 添加/不添加空格。\n\n  > eslint: array-bracket-spacing jscs: disallowSpacesInsideArrayBrackets\n\n  ```\n  // 不推荐\n  const foo = [ 1, 2, 3 ];\n  console.log(foo[ 0 ]);\n  // 推荐(内部分隔符号后有空格)\n  const foo = [1, 2, 3];\n  console.log(foo[0]);\n\n  // 不推荐\n  const foo = { clark:'kent' };\n  // 推荐(内部分隔符号后有空格)\n  const foo = {clark: 'kent'};\n  ```\n\n## 类型转换 Type Casting & Coercion\n\n1. 在声明语句的开始处就执行强制类型转换.\n\n  字符串：\n\n  > eslint: no-new-wrappers\n\n  ```\n  // => this.reviewScore = 9;\n  // 不推荐\n  const totalScore = new String(this.reviewScore); // typeof totalScore 是 \"object\" 而不是 \"string\"\n  // 不推荐\n  const totalScore = this.reviewScore + ''; // 调用 this.reviewScore.valueOf()\n  // 不推荐\n  const totalScore = this.reviewScore.toString(); // 不能保证返回一个字符串\n  // 推荐\n  const totalScore = String(this.reviewScore);\n  ```\n\n  数字：使用 Number 进行转换，而 parseInt 则始终以基数解析字串。\n\n  > eslint: radix no-new-wrappers\n\n  ```\n  const inputValue = '4';\n  // 不推荐\n  const val = new Number(inputValue);\n  // 不推荐\n  const val = +inputValue;\n  // 不推荐\n  const val = inputValue >> 0;\n  // 不推荐\n  const val = parseInt(inputValue);\n  // 推荐\n  const val = Number(inputValue);\n  // 推荐\n  const val = parseInt(inputValue, 10);\n  ```\n\n  布尔值:\n\n  > eslint: no-new-wrappers\n\n  ```\n  const age = 0;\n  // 不推荐\n  const hasAge = new Boolean(age);\n  // 推荐\n  const hasAge = Boolean(age);\n  // 强烈推荐\n  const hasAge = !!age;\n  ```\n\n## 命名规则 Naming Conventions\n\n1. 避免使用单字母名称，命名应具有描述性。\n\n  > eslint: id-length\n\n  ```\n  // 不推荐\n  function q() {\n    // ...\n  }\n  // 推荐\n  function query() {\n    // ...\n  }\n  ```\n2. 当命名对象，函数和实例时使用驼峰式命名。\n\n  > eslint: camelcase jscs: requireCamelCaseOrUpperCaseIdentifiers\n\n  ```\n  // 不推荐\n  const OBJEcttsssss = {};\n  const this_is_my_object = {};\n  function c() {}\n  // 推荐\n  const thisIsMyObject = {};\n  function thisIsMyFunction() {}\n  ```\n\n3. 当命名构造函数或类的时候使用 PascalCase 式命名，（注：即单词首字母大写）。\n\n  > eslint: new-cap\n\n  ```\n  // 不推荐\n  function user(options) {\n    this.name = options.name;\n  }\n  const bad = new user({\n    name: 'nope',\n  });\n  // 推荐\n  class User {\n    constructor(options) {\n      this.name = options.name;\n    }\n  }\n  const good = new User({\n    name: 'yup',\n  });\n  ```\n\n4. 当导出(export) 一个默认函数时使用驼峰式命名。你的文件名应该和你的函数的名字一致。\n\n  ```\n  function makeStyleGuide() {\n    // ...\n  }\n  export default makeStyleGuide;\n  ```\n\n5. 当导出一个构造函数/类/单例/函数库/纯对象时使用 PascalCase 式命名。\n\n  ```\n  const JavascriptStyleGuide = {\n    es6: {\n    },\n  };\n  export default JavascriptStyleGuide;\n  ```\n\n## 存取器 Accessors\n\n属性的存取器函数不是必须的。\n\n1. 別使用 JavaScript 的 getters/setters，因为它们会导致意想不到的副作用，而且很难测试，维护和理解。相反，如果要使用存取器函数，使用 getVal() 及 setVal(‘hello’)。\n\n  ```\n  // 不推荐\n  class Dragon {\n    get age() {\n      // ...\n    }\n    set age(value) {\n      // ...\n    }\n  }\n  // 推荐\n  class Dragon {\n    getAge() {\n      // ...\n    }\n    setAge(value) {\n      // ...\n    }\n  }\n  ```\n\n2. 如果属性/方法是一个 boolean, 使用 isVal() 或 hasVal() 方法。\n\n  ```\n  // 不推荐\n  if (!dragon.age()) {\n    return false;\n  }\n  // 推荐\n  if (!dragon.hasAge()) {\n    return false;\n  }\n  ```\n\n## If-Else优化方案\n\n[If-Else优化方案](/developer/style-guide/if-else-optimize-solutions.html)\n\n## 整洁代码\n\n[整洁代码的建议列表](/developer/style-guide/tips-to-keep-javascript-code-clean.html)\n\n## 摘自文章\n\n- [JavaScript 编程规范(一)](https://cloud.tencent.com/developer/article/1404290)\n- [JavaScript 编程规范(二)](https://cloud.tencent.com/developer/article/1404381)\n","date":"2023-06-10T10:49:05.488Z","updated":"2023-06-10T10:49:05.488Z","path":"developer/style-guide/javascript.html","comments":1,"layout":"page","_id":"clipw1dd4000uoix50tau46lt","content":"<h2 id=\"命名规范\"><a href=\"#命名规范\" class=\"headerlink\" title=\"命名规范\"></a>命名规范</h2><p>fv</p>\n<ul>\n<li>标准变量采用驼峰式命名</li>\n<li>ID 在变量名中全大写</li>\n<li>常量全大写，用下划线连接构造函数，大写第一个字母</li>\n<li>JQuery 对象必须以 $ 开头命名</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">let thisIsMyName;<br>let goodID;<br>let reportURL;<br>let AndroidVersion;<br>let iOSVersion;<br>let MAX_COUNT = 10;<br><br>function Person(name) &#123;<br>    this.name = name;<br>&#125;<br>// 不推荐<br>let body = $(&#x27;body&#x27;);<br>// 推荐<br>let $body = $(&#x27;body&#x27;);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"函数命名\"><a href=\"#函数命名\" class=\"headerlink\" title=\"函数命名\"></a>函数命名</h2><blockquote>\n<p>小驼峰命名法，可使用常见动词约定：</p>\n</blockquote>\n<ul>\n<li><code>&#123;ctl&#125;&#123;Event&#125;</code>, 控件的操作事件，示例: <code>radioChange</code>, <code>btnSaveClick</code></li>\n<li>canXXX 判断是否可执行某个动作，函数返回布尔值。true：可执行；false：不可执行</li>\n<li>hasXXX 判断是否含有某个值， 函数返回布尔值。true：含有此值；false：不含有此值</li>\n<li>isXXX 判断是否为某个值，函数返回布尔值。true：为某个值；false：不为某个值</li>\n<li>getXXX 获取某个值，函数返回非布尔值</li>\n<li>setXXX 设置某个值<ul>\n<li>无返回值</li>\n<li>返回是否设置成功</li>\n<li>返回链式对象 load 加载某些数据</li>\n<li>返回是否加载完成的结果</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 是否有权限<br>function hasPermission() &#123;<br> return true;<br>&#125;<br>// 获取权限列表<br>function getPermissinList() &#123;<br> return this.permissinList;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"引用-References\"><a href=\"#引用-References\" class=\"headerlink\" title=\"引用 References\"></a>引用 References</h2><ol>\n<li>对所有的引用使用 const；不要使用 var。</li>\n</ol>\n<blockquote>\n<p>eslint: prefer-const, no-const-assign</p>\n</blockquote>\n<p>  这可以确保你无法对引用重新分配，重新分配可能会导致 bug 和难以理解的代码。</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 批评<br>var a = 1;<br>var b = 2;<br>// 推荐<br>const a = 1;<br>const b = 2;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>如果一定需要可变动的引用，使用 let 代替 var 。</li>\n</ol>\n<blockquote>\n<p>eslint: no-var jscs: disallowVar</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>var count = 1;<br>if (true) &#123;<br>    count += 1;<br>&#125;<br>// 推荐<br>let count = 1;<br>if (true) &#123;<br>    count += 1;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"对象-Objects\"><a href=\"#对象-Objects\" class=\"headerlink\" title=\"对象 Objects\"></a>对象 Objects</h2><ol>\n<li>使用字面量语法创建对象。</li>\n</ol>\n<blockquote>\n<p>eslint: no-new-object</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>const item = new Object();<br>// 推荐<br>const item = &#123;&#125;;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>创建带有动态属性名称的对象时使用计算的属性名称。</li>\n</ol>\n<p>  它们允许你在一个地方定义一个对象的所有属性。</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">function getKey(k) &#123;<br>    return `a-key-named-k`;<br>&#125;<br>// 不推荐<br>const obj = &#123;<br>    id: 5,<br>    name: &#x27;San Francisco&#x27;,<br>&#125;;<br>obj[getKey(&#x27;enabled&#x27;)] = true;<br><br>// 推荐<br>const obj = &#123;<br>    id: 5,<br>    name: &#x27;San Francisco&#x27;,<br>    [getKey(&#x27;enabled&#x27;)]: true,<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>使用对象方法速记语法。</li>\n</ol>\n<blockquote>\n<p>eslint: object-shorthand jscs: requireEnhancedObjectLiterals</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>const atom = &#123;<br>  value: 1,<br>  addValue: function (value) &#123;<br>      return atom.value + value;<br>  &#125;<br>&#125;;<br><br>// 推荐<br>const atom = &#123;<br>  value: 1,<br>  addValue(value) &#123;<br>      return atom.value + value;<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>使用对象属性速记语法。</li>\n</ol>\n<blockquote>\n<p>eslint: object-shorthand jscs: requireEnhancedObjectLiterals</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">const lukeSkywalker = &#x27;Luke Skywalker&#x27;;<br>// 不推荐<br>const obj = &#123;<br>    lukeSkywalker: lukeSkywalker,<br>&#125;;<br><br>// 推荐<br>const obj = &#123;<br>    lukeSkywalker,<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>将速记属性分组写在对象声明的开始处</li>\n</ol>\n<p>  更容易看出哪些属性在使用速记语法</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">const anakinSkywalker = &#x27;Anakin Skywalker&#x27;;<br>const lukeSkywalker = &#x27;Luke Skywalker&#x27;;<br>// 不推荐<br>const obj = &#123;<br>    episodeOne: 1,<br>    twoJediWalkIntoACantina: 2,<br>    lukeSkywalker,<br>    episodeThree: 3,<br>    mayTheFourth: 4,<br>    anakinSkywalker,<br>&#125;;<br>// 推荐<br>const obj = &#123;<br>    lukeSkywalker,<br>    anakinSkywalker,<br>    episodeOne: 1,<br>    twoJediWalkIntoACantina: 2,<br>    episodeThree: 3,<br>    mayTheFourth: 4,<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>仅无效标识符的属性使用引号</li>\n</ol>\n<blockquote>\n<p>eslint: quote-props jscs: disallowQuotedKeysInObjects</p>\n</blockquote>\n<p>  比较容易阅读。它改进了语法高亮显示，并且更容易被许多JS引擎优化。</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>const bad = &#123;<br>    &#x27;foo&#x27;: 3,<br>    &#x27;bar&#x27;: 4,<br>    &#x27;data-blah&#x27;: 5<br>&#125;;<br><br>// 推荐<br>const good = &#123;<br>    foo: 3,<br>    bar: 4,<br>    &#x27;data-blah&#x27;: 5<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>用对象展开操作符浅复制对象，优先于Object.assign。</li>\n</ol>\n<p>  使用对象剩余操作符来获得一个省略某些属性的新对象。</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 批评<br>const original = &#123; a: 1, b: 2 &#125;;<br>const copy = Object.assign(original, &#123; c: 3 &#125;); //  `original` 是可变的<br>delete copy.a; // so does this<br><br>// 不推荐<br>const original = &#123; a: 1, b: 2 &#125;;<br>const copy = Object.assign(&#123;&#125;, original, &#123; c: 3 &#125;); // copy =&gt; &#123; a: 1, b: 2, c: 3 &#125;<br><br>// 推荐<br>const original = &#123; a: 1, b: 2 &#125;;<br>const copy = &#123; ...original, c: 3 &#125;; // copy =&gt; &#123; a: 1, b: 2, c: 3 &#125;<br>const &#123; a, ...noA &#125; = copy; // noA =&gt; &#123; b: 2, c: 3 &#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"数组-Arrays\"><a href=\"#数组-Arrays\" class=\"headerlink\" title=\"数组 Arrays\"></a>数组 Arrays</h2><ol>\n<li>使用字面量创建数组。</li>\n</ol>\n<blockquote>\n<p>eslint: no-array-constructor</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>const items = new Array();<br>// 推荐<br>const items = [];<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用数组展开操作符<code>...</code>复制数组。</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>const len = items.length;<br>const itemsCopy = [];<br>let i;<br>for (i = 0; i &lt; len; i += 1) &#123;<br>    itemsCopy[i] = items[i];<br>&#125;<br><br>// 推荐<br>const itemsCopy = [...items];<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>使用展开操作符<code>...</code>代替 Array.from，将类数组(array-like) 对象转换成数组。</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">const foo = document.querySelectorAll(&#x27;.foo&#x27;);<br>// 推荐<br>const nodes = Array.from(foo);<br>// 高效<br>const nodes = [...foo];<br></code></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>使用 Array.from 代替展开操作符<code>...</code>来映射迭代，它避免了创建媒介数组。</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>const baz = [...foo].map(bar);<br>// 推荐<br>const baz = Array.from(foo, bar);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"解构-Destructuring\"><a href=\"#解构-Destructuring\" class=\"headerlink\" title=\"解构 Destructuring\"></a>解构 Destructuring</h2><ol>\n<li>当访问和使用对象的多个属性时，请使用对象解构。</li>\n</ol>\n<blockquote>\n<p>eslint: prefer-destructuring jscs: requireObjectDestructuring</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>function getFullName(user) &#123;<br>    const firstName = user.firstName;<br>    const lastName = user.lastName;<br>    return `firstName lastName`;<br>&#125;<br>// 推荐<br>function getFullName(user) &#123;<br>    const &#123; firstName, lastName &#125; = user;<br>    return `firstName lastName`;<br>&#125;<br>// 高效<br>function getFullName(&#123; firstName, lastName &#125;) &#123;<br>    return `firstName lastName`;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用数组解构。</li>\n</ol>\n<blockquote>\n<p>eslint: prefer-destructuring jscs: requireArrayDestructuring</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">const arr = [1, 2, 3, 4];<br>// 不推荐<br>const first = arr[0];<br>const second = arr[1];<br>// 推荐<br>const [first, second] = arr;<br>const [first, second, ...other] = arr;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>使用对象解构来实现多个返回值，而不是数组解构。</li>\n</ol>\n<p>  随着时间的推移添加新的属性或更改排序，而不会改变调用时的位置。</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>function processInput(input) &#123;<br>    return [left, right, top, bottom];<br>&#125;<br>const [left, __, top] = processInput(input); // 需考虑返回数据的顺序<br><br>// 推荐<br>function processInput(input) &#123;<br>    return &#123; left, right, top, bottom &#125;;<br>&#125;<br>const &#123; left, top &#125; = processInput(input); // 只选择需要的数据<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"字符串-Strings\"><a href=\"#字符串-Strings\" class=\"headerlink\" title=\"字符串 Strings\"></a>字符串 Strings</h2><ol>\n<li>字符串使用单引号 ‘’。</li>\n</ol>\n<blockquote>\n<p>eslint: quotes jscs: validateQuoteMarks</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>const name = &quot;Capt. Janeway&quot;;<br>// 不推荐 - 模板字面量应该包含插值或换行符<br>const name = `Capt. Janeway`;<br>// 推荐<br>const name = &#x27;Capt. Janeway&#x27;;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>构建字符串时，使用模板字符串。</li>\n</ol>\n<blockquote>\n<p>eslint: prefer-template template-curly-spacing jscs: requireTemplateStrings</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>function sayHi(name) &#123;<br>    return &#x27;How are you, &#x27; + name + &#x27;?&#x27;;<br>&#125;<br>// 不推荐<br>function sayHi(name) &#123;<br>    return [&#x27;How are you, &#x27;, name, &#x27;?&#x27;].join();<br>&#125;<br>// 不推荐<br>function sayHi(name) &#123;<br>    return `How are you, $&#123; name &#125;?`;<br>&#125;<br>// 推荐<br>function sayHi(name) &#123;<br>     return `How are you, $&#123;name&#125;?`;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>永远不要在字符串上使用 eval() ，它会打开太多的漏洞。</li>\n</ol>\n<blockquote>\n<p>eslint: no-eval</p>\n</blockquote>\n<h2 id=\"函数-Functions\"><a href=\"#函数-Functions\" class=\"headerlink\" title=\"函数 Functions\"></a>函数 Functions</h2><ol>\n<li>使用命名函数表达式而不是函数声明。</li>\n</ol>\n<blockquote>\n<p>eslint: func-style jscs: disallowFunctionDeclarations</p>\n</blockquote>\n<p>  函数声明很容易被提升（Hoisting）,这对可读性和可维护性来说都是不利的;</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>function foo() &#123;<br>  // ...<br>&#125;<br>// 不推荐<br>const foo = function () &#123;<br>  // ...<br>&#125;;<br>// 推荐<br>// 用明显区别于变量引用调用的词汇命名<br>const short = function longUniqueMoreDescriptiveLexicalFoo() &#123;<br>  // ...<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>用圆括号包裹立即调用函数表达式 (IIFE)。</li>\n</ol>\n<blockquote>\n<p>eslint: wrap-iife jscs: requireParenthesesAroundIIFE</p>\n</blockquote>\n<p>  一个立即调用函数表达式是一个单独的单元 – 将函数表达式包裹在括号中，后面再跟一个调用括号，这看上去很紧凑。</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 立即调用函数表达式 (IIFE)<br>(function () &#123;<br>  console.log(&#x27;Welcome to the Internet. Please follow me.&#x27;);<br>&#125;());<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>不要使用 arguments。可以选择 rest 语法 <code>...</code> 替代。</li>\n</ol>\n<p>  使用 <code>...</code> 能明确要传入的参数。另外 rest（剩余）参数是一个真正的数组，而 arguments 是一个类数组（Array-like）。</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>function concatenateAll() &#123;<br>  const args = Array.prototype.slice.call(arguments);<br>  return args.join(&#x27;&#x27;);<br>&#125;<br>// 推荐<br>function concatenateAll(...args) &#123;<br>  return args.join(&#x27;&#x27;);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>使用默认参数语法，而不要使用一个变化的函数参数</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>function handleThings(opts) &#123;<br>  // 更加糟糕: 如果参数 opts 是 falsy(假值) 的话，它将被设置为一个对象，<br>  // 这可能是你想要的，但它可以引起一些小的错误。<br>  opts = opts || &#123;&#125;;<br>  // ...<br>&#125;<br>// 不推荐<br>function handleThings(opts) &#123;<br>  if (opts === void 0) &#123;<br>      opts = &#123;&#125;;<br>  &#125;<br>  // ...<br>&#125;<br>// 推荐<br>function handleThings(opts = &#123;&#125;) &#123;<br>  // ...<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>始终将默认参数放在最后。</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>function handleThings(opts = &#123;&#125;, name) &#123;<br>  // ...<br>&#125;<br>// 推荐<br>function handleThings(name, opts = &#123;&#125;) &#123;<br>  // ...<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>隔开函数签名，括号两边用空格隔开。</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>const f = function()&#123;&#125;;<br>const g = function ()&#123;&#125;;<br>const h = function() &#123;&#125;;<br>// 推荐<br>const x = function () &#123;&#125;;<br>const y = function a() &#123;&#125;;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>不要改变参数(?)。</li>\n</ol>\n<blockquote>\n<p>eslint: no-param-reassign</p>\n</blockquote>\n<p>  <em>操作</em>作为参数传入的对象，可能会在调用原始对象时造成不必要的变量副作用。（对象是引用类型）</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>function f1(obj) &#123;<br>    obj.key = 1;<br>&#125;<br>// 推荐<br>function f2(obj) &#123;<br>    const key = Object.prototype.hasOwnProperty.call(obj, &#x27;key&#x27;) ? obj.key : 1;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"箭头函数-Arrow-Functions\"><a href=\"#箭头函数-Arrow-Functions\" class=\"headerlink\" title=\"箭头函数 Arrow Functions\"></a>箭头函数 Arrow Functions</h2><ol>\n<li>当必须使用匿名函数（如在传递一个内联回调时），请使用箭头函数表示法。</li>\n</ol>\n<blockquote>\n<p>eslint: prefer-arrow-callback, arrow-spacing jscs: requireArrowFunctions</p>\n</blockquote>\n<p>  它创建了一个在 this 上下文中执行的函数的版本，这通常是你想要的，而且这样的写法更为简洁。</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>[1, 2, 3].map(function (x) &#123;<br>    const y = x + 1;<br>    return x * y;<br>&#125;);<br>// 不推荐<br>[1, 2, 3].map( _ =&gt; &#123;<br><br>    return 0;<br>&#125;);<br>// 推荐<br>[1, 2, 3].map((x) =&gt; &#123;<br>    const y = x + 1;<br>    return x * y;<br>&#125;);<br>// 推荐<br>[1, 2, 3].map(() =&gt; &#123;<br>    return 0;<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>无副作用的单行语句</li>\n</ol>\n<p>  如果函数体由一个返回无副作用(side effect)的expression(表达式)的单行语句组成，那么可以省略大括号并使用隐式返回。否则，保留大括号并使用 return 语句</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>[1, 2, 3].map(number =&gt; &#123;<br>    const nextNumber = number + 1;<br>    return `A string containing the $&#123;nextNumber&#125;.`;<br>&#125;);<br>// 推荐<br>[1, 2, 3].map(number =&gt; `A string containing the $&#123;number&#125;.`);<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>如果表达式跨多行，将其包裹在括号中，可以提高可读性。</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>[&#x27;get&#x27;, &#x27;post&#x27;, &#x27;put&#x27;].map(httpMethod =&gt; Object.prototype.hasOwnProperty.call(<br>    httpMagicObjectWithAVeryLongName,<br>    httpMethod<br>  )<br>);<br>// 推荐<br>[&#x27;get&#x27;, &#x27;post&#x27;, &#x27;put&#x27;].map(httpMethod =&gt; (<br>    Object.prototype.hasOwnProperty.call(<br>      httpMagicObjectWithAVeryLongName,<br>      httpMethod<br>    )<br>  )<br>);<br></code></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>如果函数只有一个参数并且不使用大括号，则可以省略参数括号。否则，为了清晰和一致性，总是给参数加上括号。</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>[1, 2, 3].map((x) =&gt; x * x);<br>// 推荐<br>[1, 2, 3].map(x =&gt; x * x);<br>// 推荐<br>[1, 2, 3].map(number =&gt; (<br>  `A long string with the number. It’s so long that we don’t want it to take up space on the .map line!`<br>));<br>// 不推荐<br>[1, 2, 3].map(x =&gt; &#123;<br>  const y = x + 1;<br>  return x * y;<br>&#125;);<br>// 推荐<br>[1, 2, 3].map((x) =&gt; &#123;<br>  const y = x + 1;<br>  return x * y;<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>避免使用比较运算符(&lt; &#x3D;, &gt;&#x3D;)时，混淆箭头函数语法(&#x3D;&gt;)。</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>const itemHeight = item =&gt; item.height &gt; 256 ? item.largeSize : item.smallSize;<br>// 不推荐<br>const itemHeight = (item) =&gt; item.height &gt; 256 ? item.largeSize : item.smallSize;<br>// 推荐<br>const itemHeight = item =&gt; (item.height &gt; 256 ? item.largeSize : item.smallSize);<br>// 推荐<br>const itemHeight = (item) =&gt; &#123;<br>  const &#123; height, largeSize, smallSize &#125; = item;<br>  return height &gt; 256 ? largeSize : smallSize;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"类-Classes-amp-构造函数-Constructors\"><a href=\"#类-Classes-amp-构造函数-Constructors\" class=\"headerlink\" title=\"类 Classes &amp; 构造函数 Constructors\"></a>类 Classes &amp; 构造函数 Constructors</h2><ol>\n<li>总是使用 class。避免直接操作 prototype 。</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>function Queue(contents = []) &#123;<br>    this.queue = [...contents];<br>&#125;<br>Queue.prototype.pop = function () &#123;<br>    const value = this.queue[0];<br>    this.queue.splice(0, 1);<br>    return value;<br>&#125;;<br>// 推荐<br>class Queue &#123;<br>    constructor(contents = []) &#123;<br>        this.queue = [...contents];<br>    &#125;<br>    pop() &#123;<br>        const value = this.queue[0];<br>        this.queue.splice(0, 1);<br>        return value;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用 extends 继承。</li>\n</ol>\n<p>  extends 是一个内置的原型继承方法并且不会破坏 instanceof。</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>const inherits = require(&#x27;inherits&#x27;);<br>    function PeekableQueue(contents) &#123;<br>    Queue.apply(this, contents);<br>&#125;<br><br>inherits(PeekableQueue, Queue);<br>PeekableQueue.prototype.peek = function () &#123;<br>    return this.queue[0];<br>&#125;;<br><br>// 推荐<br>class PeekableQueue extends Queue &#123;<br>    peek() &#123;<br>        return this.queue[0];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>如果没有指定，类有一个默认的构造函数。一个空的构造函数或者只是委托给父类则不是必须的(?)。</li>\n</ol>\n<blockquote>\n<p>eslint: no-useless-constructor</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>class Jedi &#123;<br>    constructor() &#123;&#125;<br>        getName() &#123;<br>        return this.name;<br>    &#125;<br>&#125;<br>// 不推荐<br>class Rey extends Jedi &#123;<br>    constructor(...args) &#123;<br>        super(...args);<br>    &#125;<br>&#125;<br>// 推荐<br>class Rey extends Jedi &#123;<br>    constructor(...args) &#123;<br>        super(...args);<br>        this.name = &#x27;Rey&#x27;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>避免重复类成员(?)。</li>\n</ol>\n<blockquote>\n<p>eslint: no-dupe-class-members</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>class Foo &#123;<br>  bar() &#123; return 1; &#125;<br>  bar() &#123; return 2; &#125;<br>&#125;<br>// 推荐<br>class Foo &#123;<br>  bar() &#123; return 1; &#125;<br>&#125;<br>// 推荐<br>class Foo &#123;<br>  bar() &#123; return 2; &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"模块-Modules\"><a href=\"#模块-Modules\" class=\"headerlink\" title=\"模块 Modules\"></a>模块 Modules</h2><ol>\n<li>使用模块 (import&#x2F;export) 而不是其他非标准模块系统。</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>const JavascriptStyleGuide = require(&#x27;./JavascriptStyleGuide&#x27;);<br>module.exports = JavascriptStyleGuide.es6;<br>// 一般<br>import JavascriptStyleGuide from &#x27;./JavascriptStyleGuide&#x27;;<br>export default JavascriptStyleGuide.es6;<br>// 推荐<br>import &#123; es6 &#125; from &#x27;./JavascriptStyleGuide&#x27;;<br>export default es6;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>不要使用通配符 import(导入)。</li>\n</ol>\n<p>  这样能确保你只有一个默认 export(导出)。</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>import * as JavascriptStyleGuide from &#x27;./JavascriptStyleGuide&#x27;;<br>// 推荐<br>import JavascriptStyleGuide from &#x27;./JavascriptStyleGuide&#x27;;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>不要从 import(导入) 中直接 export(导出)。</li>\n</ol>\n<p>  虽然一行代码简洁明了，但有一个明确的 import(导入) 方法和一个明确的 export(导出) 方法，使事情能保持一致。</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>export &#123; es6 as default &#125; from &#x27;./JavascriptStyleGuide&#x27;;<br><br>// 推荐<br>import &#123; es6 &#125; from &#x27;./JavascriptStyleGuide&#x27;;<br>export default es6;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>一个地方只在一个路径中 import(导入) 。</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>import foo from &#x27;foo&#x27;;<br>import &#123; named1, named2 &#125; from &#x27;foo&#x27;;<br><br>// 推荐<br>import foo, &#123; named1, named2 &#125; from &#x27;foo&#x27;;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>不要 export(导出) 可变绑定。</li>\n</ol>\n<blockquote>\n<p>eslint: import&#x2F;no-mutable-exports</p>\n</blockquote>\n<p>  一般应该避免可变性，特别是在导出可变绑定时。虽然一些特殊情况下，可能需要这种技术，但是一般而言，只应该导出常量引用。</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>let foo = 3;<br>export &#123; foo &#125;;<br>// 推荐<br>const foo = 3;<br>export &#123; foo &#125;;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>在只有单个导出的模块中，默认 export(导出) 优于命名 export(导出)。</li>\n</ol>\n<blockquote>\n<p>eslint: import&#x2F;prefer-default-export</p>\n</blockquote>\n<p>  为了鼓励更多的文件只有一个 export(导出)，这有利于模块的可读性和可维护性。</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>export function foo() &#123;&#125;<br>// 推荐<br>export default function foo() &#123;&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>将所有 import 导入放在非导入语句的上面。</li>\n</ol>\n<blockquote>\n<p>eslint: import&#x2F;first</p>\n</blockquote>\n<p>  由于 import 被提升，保持他们在顶部，防止意外的行为。</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>import foo from &#x27;foo&#x27;;<br>foo.init();<br>import bar from &#x27;bar&#x27;;<br><br>// 推荐<br>import foo from &#x27;foo&#x27;;<br>import bar from &#x27;bar&#x27;;<br>foo.init();<br></code></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li>多行导入应该像多行数组和对象字面量一样进行缩进。</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>import &#123;longNameA, longNameB, longNameC, longNameD, longNameE&#125; from &#x27;path&#x27;;<br>// 推荐<br>import &#123;<br>    longNameA,<br>    longNameB,<br>    longNameC,<br>    longNameD,<br>    longNameE,<br>&#125; from &#x27;path&#x27;;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"变量-Variables\"><a href=\"#变量-Variables\" class=\"headerlink\" title=\"变量 Variables\"></a>变量 Variables</h2><ol>\n<li>总是使用 const 或 let 来声明变量。</li>\n</ol>\n<p>  var 声明变量会导致产生全局变量，避免污染全局命名空间。</p>\n<blockquote>\n<p>eslint: no-undef prefer-const</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>superPower = new SuperPower();<br>// 推荐<br>const superPower = new SuperPower();<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>将所有的 const 和 let 分组 。</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>let i, len, dragonball,<br>items = getItems(),<br>goSportsTeam = true;<br><br>// 不推荐<br>let i;<br>const items = getItems();<br>let dragonball;<br>const goSportsTeam = true;<br>let len;<br><br>// 推荐<br>const goSportsTeam = true;<br>const items = getItems();<br>let dragonball;<br>let i;<br>let length;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>变量不要链式赋值。</li>\n</ol>\n<blockquote>\n<p>eslint: no-multi-assign</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>(function example() &#123;<br>  // JavaScript 将其解析为<br>  // let a = ( b = ( c = 1 ) );<br>  // let关键字只适用于变量a;<br>  // 变量b和c变成了全局变量。<br>  let a = b = c = 1;<br>&#125;());<br>console.log(a); // 抛出 ReferenceError（引用错误）<br>console.log(b); // 1<br>console.log(c); // 1<br><br>// 推荐<br>(function example() &#123;<br>  let a = 1;<br>  let b = a;<br>  let c = a;<br>  // 同样适用于 `const`<br>&#125;());<br>console.log(a); // 抛出 ReferenceError（引用错误）<br>console.log(b); // 抛出 ReferenceError（引用错误）<br>console.log(c); // 抛出 ReferenceError（引用错误）<br></code></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>避免使用一元递增和递减运算符(++, -–)。</li>\n</ol>\n<p>  根据 eslint 文档，一元递增和递减语句会受到自动插入分号的影响，并可能导致应用程序中的值递增或递减，从而导致无提示错误。</p>\n<p>  使用像 num +&#x3D; 1 而不是 num++ 或 num ++ 这样的语句来改变你的值也更具有表现力。</p>\n<p>  不允许一元递增和递减语句也会阻止您无意中预先递增&#x2F;递减值，这也会导致程序中的意外行为。</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>const array = [1, 2, 3];<br>let num = 1;<br>num++;<br>--num;<br>let sum = 0;<br>let truthyCount = 0;<br>for (let i = 0; i &lt; array.length; i++) &#123; <br>  let value = array[i]; <br>  sum += value;<br>   if (value) &#123;<br>      truthyCount++; <br>    &#125; <br> &#125;<br><br>// 推荐<br>const array = [1, 2, 3]; <br>let num = 1; num += 1; num -= 1; <br>const sum = array.reduce((a, b) =&gt; a + b, 0);<br>const truthyCount = array.filter(Boolean).length;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"比较运算符-Comparison-Operators-和-等号-Equality\"><a href=\"#比较运算符-Comparison-Operators-和-等号-Equality\" class=\"headerlink\" title=\"比较运算符 Comparison Operators 和 等号 Equality\"></a>比较运算符 Comparison Operators 和 等号 Equality</h2><ol>\n<li>使用 &#x3D;&#x3D;&#x3D; 和 !&#x3D;&#x3D; 优先于 &#x3D;&#x3D; 和 !&#x3D;。</li>\n</ol>\n<blockquote>\n<p>eslint: eqeqeq</p>\n</blockquote>\n<ol start=\"2\">\n<li>对于布尔值使用简写，但对于字符串和数字使用显式比较。</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>if (isValid === true) &#123;<br>  // ...<br>&#125;<br>// 推荐<br>if (isValid) &#123;<br>  // ...<br>&#125;<br><br>// 不推荐<br>if (name) &#123;<br>  // ...<br>&#125;<br>// 推荐<br>if (name !== &#x27;&#x27;) &#123;<br>  // ...<br>&#125;<br><br>// 不推荐<br>if (collection.length) &#123;<br>  // ...<br>&#125;<br>// 推荐<br>if (collection.length &gt; 0) &#123;<br>  // ...<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>在 case 和 default 子句中，使用大括号来创建包含词法声明的语句块(例如 let, const, function, 和 class).</li>\n</ol>\n<blockquote>\n<p>eslint: no-case-declarations</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>switch (foo) &#123;<br>  case 1:<br>    let x = 1;<br>  break;<br>  case 2:<br>    const y = 2;<br>  break;<br>  case 3:<br>    function f() &#123;<br>      // ...<br>    &#125;<br>  break;<br>default:<br>  class C &#123;&#125;<br>&#125;<br><br>// 推荐<br>switch (foo) &#123;<br>  case 1: &#123;<br>    let x = 1;<br>    break;<br>  &#125;<br>  case 2: &#123;<br>    const y = 2;<br>    break;<br>  &#125;<br>  case 3: &#123;<br>    function f() &#123;<br>      // ...<br>    &#125;<br>    break;<br>  &#125;<br>  case 4:<br>    bar();<br>    break;<br>  default: &#123;<br>    class C &#123;&#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>三元表达式不应该嵌套，通常写成单行表达式。</li>\n</ol>\n<blockquote>\n<p>eslint: no-nested-ternary</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>const foo = maybe1 &gt; maybe2<br>? &quot;bar&quot;<br>: value1 &gt; value2 ? &quot;baz&quot; : null;<br><br>// 推荐<br>const maybeNull = value1 &gt; value2 ? &#x27;baz&#x27; : null;<br>const foo = maybe1 &gt; maybe2 ? &#x27;bar&#x27; : maybeNull;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>避免不必要的三元表达式语句。</li>\n</ol>\n<blockquote>\n<p>eslint: no-unneeded-ternary</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>const foo = a ? a : b;<br>const bar = c ? true : false;<br>const baz = c ? false : true;<br><br>// 推荐<br>const foo = a || b;<br>const bar = !!c;<br>const baz = !c;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>当运算符混合在一个语句中时，请将其放在括号内。</li>\n</ol>\n<blockquote>\n<p>eslint: no-mixed-operators</p>\n</blockquote>\n<p>  混合算术运算符时，不要将 * 和 % 与 + ， -，，&#x2F; 混合在一起。</p>\n<p>  提高可读性，并清晰展现开发者的意图。</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>const foo = a &amp;&amp; b &lt; 0 || c &gt; 0 || d + 1 === 0;<br>// 不推荐<br>const bar = a ** b - 5 % d;<br>// 不推荐<br>if (a || b &amp;&amp; c) &#123;<br>  return d;<br>&#125;<br>// 推荐<br>const foo = (a &amp;&amp; b &lt; 0) || c &gt; 0 || (d + 1 === 0);<br>// 推荐<br>const bar = (a ** b) - (5 % d);<br>// 推荐<br>if ((a || b) &amp;&amp; c) &#123;<br>  return d;<br>&#125;<br>// 推荐<br>const bar = a + b / c * d;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"代码块-Blocks\"><a href=\"#代码块-Blocks\" class=\"headerlink\" title=\"代码块 Blocks\"></a>代码块 Blocks</h2><ol>\n<li>使用大括号包裹所有的多行代码块</li>\n</ol>\n<blockquote>\n<p>eslint: nonblock-statement-body-position</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>if (test)<br>  return false;<br>// 推荐<br>if (test) return false;<br>// 推荐<br>if (test) &#123;<br>  return false;<br>&#125;<br><br>// 不推荐<br>function foo() &#123; return false; &#125;<br>// 推荐<br>function bar() &#123;<br>  return false;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>如果通过 if 和 else 使用多行代码块，把 else 放在 if 代码块闭合括号的同一行。</li>\n</ol>\n<blockquote>\n<p>eslint: brace-style</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>if (test) &#123;<br>  thing1();<br>  thing2();<br>&#125;<br>else &#123;<br>  thing3();<br>&#125;<br><br>// 推荐<br>if (test) &#123;<br>  thing1();<br>  thing2();<br>&#125; else &#123;<br>  thing3();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>如果一个 if 块总是执行一个 return 语句，后面的 else 块是不必要的。在 else if 块中的 return，可以分成多个 if 块来 return 。</li>\n</ol>\n<blockquote>\n<p>eslint: no-else-return</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>function foo() &#123;<br>  if (x) &#123;<br>    return x;<br>  &#125; else &#123;<br>    return y;<br>  &#125;<br>&#125;<br>// 不推荐<br>function cats() &#123;<br>  if (x) &#123;<br>    return x;<br>  &#125; else if (y) &#123;<br>    return y;<br>  &#125;<br>&#125;<br>// 不推荐<br>function dogs() &#123;<br>  if (x) &#123;<br>    return x;<br>  &#125; else &#123;<br>    if (y) &#123;<br>      return y;<br>    &#125;<br>  &#125;<br>&#125;<br><br>// 推荐<br>function foo() &#123;<br>  if (x) &#123;<br>    return x;<br>  &#125;<br>  return y;<br>&#125;<br>// 推荐<br>function cats() &#123;<br>  if (x) &#123;<br>    return x;<br>  &#125;<br>  if (y) &#123;<br>    return y;<br>  &#125;<br>&#125;<br>// 推荐<br>function dogs(x) &#123;<br>  if (x) &#123;<br>    if (z) &#123;<br>      return y;<br>    &#125;<br>  &#125; else &#123;<br>    return z;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"控制语句-Control-Statements\"><a href=\"#控制语句-Control-Statements\" class=\"headerlink\" title=\"控制语句 Control Statements\"></a>控制语句 Control Statements</h2><ol>\n<li>如果控制语句(if, while 的)太长或超过最大行长度，那么每个（分组）条件可以放单独一行。逻辑运算符应该放在每行起始处。</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>if ((foo === 123 || bar === &#x27;abc&#x27;) &amp;&amp; doesItLookGoodWhenItBecomesThatLong() &amp;&amp; isThisReallyHappening()) &#123;<br> thing1();<br>&#125;<br>// 不推荐<br>if (foo === 123 &amp;&amp;<br>  bar === &#x27;abc&#x27;) &#123;<br>  thing1();<br>&#125;<br>// 不推荐<br>if (foo === 123<br>  &amp;&amp; bar === &#x27;abc&#x27;) &#123;<br>  thing1();<br>&#125;<br>// 不推荐<br>if (<br>  foo === 123 &amp;&amp;<br>  bar === &#x27;abc&#x27;<br>) &#123;<br>  thing1();<br>&#125;<br><br>// 推荐<br>if (<br>  foo === 123<br>  &amp;&amp; bar === &#x27;abc&#x27;<br>) &#123;<br>  thing1();<br>&#125;<br>// 推荐<br>if (<br>  (foo === 123 || bar === &quot;abc&quot;)<br>  &amp;&amp; doesItLookGoodWhenItBecomesThatLong()<br>  &amp;&amp; isThisReallyHappening()<br>) &#123;<br>  thing1();<br>&#125;<br>// 推荐<br>if (foo === 123 &amp;&amp; bar === &#x27;abc&#x27;) &#123;<br>  thing1();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"注释-Comments\"><a href=\"#注释-Comments\" class=\"headerlink\" title=\"注释 Comments\"></a>注释 Comments</h2><ol>\n<li>多行注释使用 <code>/.../</code>。</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">/**<br>* @param &#123;Grid&#125; grid 需要合并的Grid<br>* @param &#123;Array&#125; cols 需要合并列的Index(序号)数组；从0开始计数，序号也包含。<br>* @param &#123;Boolean&#125; isAllSome 是否2个tr的cols必须完成一样才能进行合并。true：完成一样；false(默认)：不完全一样<br>* @return void<br>* @author XXX 2019/09/09<br>*/<br>function mergeCells(grid, cols, isAllSome) &#123;<br>    // Do Something<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>单行注释使用 <code>//</code>。将单行注释放在需注释的语句上方。在注释之前放置一个空行，除非它位于代码块的第一行。</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>const active = true;  // is current tab<br>// 推荐<br>// is current tab<br>const active = true;<br><br>// 不推荐<br>function getType() &#123;<br>  console.log(&#x27;fetching type...&#x27;);<br>  // set the default type to &#x27;no type&#x27;<br>  const type = this.type || &#x27;no type&#x27;;<br>  return type;<br>&#125;<br>// 推荐<br>function getType() &#123;<br>  console.log(&#x27;fetching type...&#x27;);<br><br>  // set the default type to &#x27;no type&#x27;<br>  const type = this.type || &#x27;no type&#x27;;<br>  return type;<br>&#125;<br>// 推荐<br>function getType() &#123;<br>  // set the default type to &#x27;no type&#x27;<br>  const type = this.type || &#x27;no type&#x27;;<br>  return type;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>所有注释符和注释内容用一个空格隔开，让它更容易阅读。</li>\n</ol>\n<blockquote>\n<p>eslint: spaced-comment</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>//is current tab<br>const active = true;<br>// 推荐<br>// is current tab<br>const active = true;<br><br>// 不推荐<br>/**<br>*make() returns a new element<br>*based on the passed-in tag name<br>*/<br>function make(tag) &#123;<br>  // ...<br>  return element;<br>&#125;<br>// 推荐<br>/**<br>* make() returns a new element<br>* based on the passed-in tag name<br>*/<br>function make(tag) &#123;<br>  // ...<br>  return element;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>给注释增加 FIXME 或 TODO 的前缀</li>\n</ol>\n<p>  帮助其他开发者快速了解这个是否是一个需要重新复查的问题，或是你正在为需要解决的问题提出解决方案。这将有别于常规注释，因为它们是可操作的。</p>\n<p>  使用 <code>FIXME – need to figure this out</code> 或者 <code>TODO – need to implement</code>。</p>\n<p>  使用 <code>// FIXME: </code> 来标识需要修正的问题。</p>\n<p>  注：如果代码中有该标识，说明标识处代码需要修正，甚至代码是错误的，不能工作，需要修复，如何修正会在说明中简略说明。</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">lass Calculator extends Abacus &#123;<br>  constructor() &#123;<br>    super();<br>    // FIXME: shouldn’t use a global here<br>    total = 0;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>  使用 <code>// TODO:</code> 来标识需要实现的问题。</p>\n<p>  注：如果代码中有该标识，说明在标识处有功能代码待编写，待实现的功能在说明中会简略说明。</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">class Calculator extends Abacus &#123;<br>  constructor() &#123;<br>    super();<br>    // TODO: total should be configurable by an options param<br>    this.total = 0;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"空格-Whitespace\"><a href=\"#空格-Whitespace\" class=\"headerlink\" title=\"空格 Whitespace\"></a>空格 Whitespace</h2><ol>\n<li>使用 2 个空格作为缩进</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 推荐<br>function baz() &#123;<br>  let name;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>在大括号前放置 1 个空格。</li>\n</ol>\n<blockquote>\n<p>eslint: space-before-blocks jscs: requireSpaceBeforeBlockStatements</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>function test()&#123;<br>  console.log(&#x27;test&#x27;);<br>&#125;<br>// 推荐<br>function test() &#123;<br>  console.log(&#x27;test&#x27;);<br>&#125;<br>// 不推荐<br>dog.set(&#x27;attr&#x27;,&#123;<br>  age: &#x27;1 year&#x27;,<br>  breed: &#x27;Bernese Mountain Dog&#x27;,<br>&#125;);<br>// 推荐<br>dog.set(&#x27;attr&#x27;, &#123;<br>  age: &#x27;1 year&#x27;,<br>  breed: &#x27;Bernese Mountain Dog&#x27;,<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>在控制语句（if、while 等）的小括号前放一个空格。在函数调用及声明中，不在函数的参数列表前加空格。</li>\n</ol>\n<blockquote>\n<p>eslint: keyword-spacing jscs: requireSpaceAfterKeywords</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>if(isJedi) &#123;<br>  fight ();<br>&#125;<br>// 推荐<br>if (isJedi) &#123;<br>  fight();<br>&#125;<br><br>// 不推荐<br>function fight () &#123;<br>  console.log (&#x27;Swooosh!&#x27;);<br>&#125;<br>// 推荐<br>function fight() &#123;<br>  console.log(&#x27;Swooosh!&#x27;);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>使用空格把运算符隔开。</li>\n</ol>\n<blockquote>\n<p>eslint: space-infix-ops jscs: requireSpaceBeforeBinaryOperators, requireSpaceAfterBinaryOperators</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>const x=y+5;<br>// 推荐<br>const x = y + 5;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>在文件末尾插入一个空行。</li>\n</ol>\n<blockquote>\n<p>eslint: eol-last</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>import &#123; es6 &#125; from &#x27;./JavascriptStyleGuide&#x27;;<br>// ...<br>export default es6;<br><br>// 推荐<br>import &#123; es6 &#125; from &#x27;./JavascriptStyleGuide&#x27;;<br>// ...<br>export default es6;<br><br></code></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>长方法链式调用时使用缩进（2个以上的方法链式调用）。使用一个点 . 开头，强调该行是一个方法调用，不是一个新的声明。</li>\n</ol>\n<blockquote>\n<p>eslint: newline-per-chained-call no-whitespace-before-property</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>$(&#x27;#items&#x27;).find(&#x27;.selected&#x27;).highlight().end().find(&#x27;.open&#x27;).updateCount();<br><br>// 不推荐<br>$(&#x27;#items&#x27;).<br>find(&#x27;.selected&#x27;).<br>highlight().<br>end().<br>find(&#x27;.open&#x27;).<br>updateCount();<br><br>// 推荐<br>$(&#x27;#items&#x27;)<br>  .find(&#x27;.selected&#x27;)<br>  .highlight()<br>  .end()<br>  .find(&#x27;.open&#x27;)<br>  .updateCount();<br><br>// 不推荐<br>const leds = stage.selectAll(&#x27;.led&#x27;).data(data).enter().append(&#x27;svg:svg&#x27;).classed(&#x27;led&#x27;, true)<br>.attr(&#x27;width&#x27;, (radius + margin) * 2).append(&#x27;svg:g&#x27;)<br>.attr(&#x27;transform&#x27;, `translate($&#123;radius + margin&#125;,$&#123;radius + margin&#125;)`)<br>.call(tron.led);<br><br>// 推荐<br>const leds = stage.selectAll(&#x27;.led&#x27;)<br>  .data(data)<br>  .enter().append(&#x27;svg:svg&#x27;)<br>  .classed(&#x27;led&#x27;, true)<br>  .attr(&#x27;width&#x27;, (radius + margin) * 2)<br>  .append(&#x27;svg:g&#x27;)<br>  .attr(&#x27;transform&#x27;, `translate($&#123;radius + margin&#125;,$&#123;radius + margin&#125;)`)<br>  .call(tron.led);<br>// 推荐<br>const leds = stage.selectAll(&#x27;.led&#x27;).data(data);<br></code></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>不要在圆括号内加空格。</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>function bar( foo ) &#123;<br>  return foo;<br>&#125;<br>// 推荐<br>function bar(foo) &#123;<br>  return foo;<br>&#125;<br>// 不推荐<br>if ( foo ) &#123;<br>  console.log(foo);<br>&#125;<br>// 推荐<br>if (foo) &#123;<br>  console.log(foo);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li>添加&#x2F;不添加空格。</li>\n</ol>\n<blockquote>\n<p>eslint: array-bracket-spacing jscs: disallowSpacesInsideArrayBrackets</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>const foo = [ 1, 2, 3 ];<br>console.log(foo[ 0 ]);<br>// 推荐(内部分隔符号后有空格)<br>const foo = [1, 2, 3];<br>console.log(foo[0]);<br><br>// 不推荐<br>const foo = &#123; clark:&#x27;kent&#x27; &#125;;<br>// 推荐(内部分隔符号后有空格)<br>const foo = &#123;clark: &#x27;kent&#x27;&#125;;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"类型转换-Type-Casting-amp-Coercion\"><a href=\"#类型转换-Type-Casting-amp-Coercion\" class=\"headerlink\" title=\"类型转换 Type Casting &amp; Coercion\"></a>类型转换 Type Casting &amp; Coercion</h2><ol>\n<li>在声明语句的开始处就执行强制类型转换.</li>\n</ol>\n<p>  字符串：</p>\n<blockquote>\n<p>eslint: no-new-wrappers</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// =&gt; this.reviewScore = 9;<br>// 不推荐<br>const totalScore = new String(this.reviewScore); // typeof totalScore 是 &quot;object&quot; 而不是 &quot;string&quot;<br>// 不推荐<br>const totalScore = this.reviewScore + &#x27;&#x27;; // 调用 this.reviewScore.valueOf()<br>// 不推荐<br>const totalScore = this.reviewScore.toString(); // 不能保证返回一个字符串<br>// 推荐<br>const totalScore = String(this.reviewScore);<br></code></pre></td></tr></table></figure>\n\n<p>  数字：使用 Number 进行转换，而 parseInt 则始终以基数解析字串。</p>\n<blockquote>\n<p>eslint: radix no-new-wrappers</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">const inputValue = &#x27;4&#x27;;<br>// 不推荐<br>const val = new Number(inputValue);<br>// 不推荐<br>const val = +inputValue;<br>// 不推荐<br>const val = inputValue &gt;&gt; 0;<br>// 不推荐<br>const val = parseInt(inputValue);<br>// 推荐<br>const val = Number(inputValue);<br>// 推荐<br>const val = parseInt(inputValue, 10);<br></code></pre></td></tr></table></figure>\n\n<p>  布尔值:</p>\n<blockquote>\n<p>eslint: no-new-wrappers</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">const age = 0;<br>// 不推荐<br>const hasAge = new Boolean(age);<br>// 推荐<br>const hasAge = Boolean(age);<br>// 强烈推荐<br>const hasAge = !!age;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"命名规则-Naming-Conventions\"><a href=\"#命名规则-Naming-Conventions\" class=\"headerlink\" title=\"命名规则 Naming Conventions\"></a>命名规则 Naming Conventions</h2><ol>\n<li>避免使用单字母名称，命名应具有描述性。</li>\n</ol>\n<blockquote>\n<p>eslint: id-length</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>function q() &#123;<br>  // ...<br>&#125;<br>// 推荐<br>function query() &#123;<br>  // ...<br>&#125;<br></code></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>当命名对象，函数和实例时使用驼峰式命名。</li>\n</ol>\n<blockquote>\n<p>eslint: camelcase jscs: requireCamelCaseOrUpperCaseIdentifiers</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>const OBJEcttsssss = &#123;&#125;;<br>const this_is_my_object = &#123;&#125;;<br>function c() &#123;&#125;<br>// 推荐<br>const thisIsMyObject = &#123;&#125;;<br>function thisIsMyFunction() &#123;&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>当命名构造函数或类的时候使用 PascalCase 式命名，（注：即单词首字母大写）。</li>\n</ol>\n<blockquote>\n<p>eslint: new-cap</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>function user(options) &#123;<br>  this.name = options.name;<br>&#125;<br>const bad = new user(&#123;<br>  name: &#x27;nope&#x27;,<br>&#125;);<br>// 推荐<br>class User &#123;<br>  constructor(options) &#123;<br>    this.name = options.name;<br>  &#125;<br>&#125;<br>const good = new User(&#123;<br>  name: &#x27;yup&#x27;,<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>当导出(export) 一个默认函数时使用驼峰式命名。你的文件名应该和你的函数的名字一致。</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">function makeStyleGuide() &#123;<br>  // ...<br>&#125;<br>export default makeStyleGuide;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>当导出一个构造函数&#x2F;类&#x2F;单例&#x2F;函数库&#x2F;纯对象时使用 PascalCase 式命名。</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">const JavascriptStyleGuide = &#123;<br>  es6: &#123;<br>  &#125;,<br>&#125;;<br>export default JavascriptStyleGuide;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"存取器-Accessors\"><a href=\"#存取器-Accessors\" class=\"headerlink\" title=\"存取器 Accessors\"></a>存取器 Accessors</h2><p>属性的存取器函数不是必须的。</p>\n<ol>\n<li>別使用 JavaScript 的 getters&#x2F;setters，因为它们会导致意想不到的副作用，而且很难测试，维护和理解。相反，如果要使用存取器函数，使用 getVal() 及 setVal(‘hello’)。</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>class Dragon &#123;<br>  get age() &#123;<br>    // ...<br>  &#125;<br>  set age(value) &#123;<br>    // ...<br>  &#125;<br>&#125;<br>// 推荐<br>class Dragon &#123;<br>  getAge() &#123;<br>    // ...<br>  &#125;<br>  setAge(value) &#123;<br>    // ...<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>如果属性&#x2F;方法是一个 boolean, 使用 isVal() 或 hasVal() 方法。</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>if (!dragon.age()) &#123;<br>  return false;<br>&#125;<br>// 推荐<br>if (!dragon.hasAge()) &#123;<br>  return false;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"If-Else优化方案\"><a href=\"#If-Else优化方案\" class=\"headerlink\" title=\"If-Else优化方案\"></a>If-Else优化方案</h2><p><a href=\"/developer/style-guide/if-else-optimize-solutions.html\">If-Else优化方案</a></p>\n<h2 id=\"整洁代码\"><a href=\"#整洁代码\" class=\"headerlink\" title=\"整洁代码\"></a>整洁代码</h2><p><a href=\"/developer/style-guide/tips-to-keep-javascript-code-clean.html\">整洁代码的建议列表</a></p>\n<h2 id=\"摘自文章\"><a href=\"#摘自文章\" class=\"headerlink\" title=\"摘自文章\"></a>摘自文章</h2><ul>\n<li><a href=\"https://cloud.tencent.com/developer/article/1404290\">JavaScript 编程规范(一)</a></li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1404381\">JavaScript 编程规范(二)</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"命名规范\"><a href=\"#命名规范\" class=\"headerlink\" title=\"命名规范\"></a>命名规范</h2><p>fv</p>\n<ul>\n<li>标准变量采用驼峰式命名</li>\n<li>ID 在变量名中全大写</li>\n<li>常量全大写，用下划线连接构造函数，大写第一个字母</li>\n<li>JQuery 对象必须以 $ 开头命名</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">let thisIsMyName;<br>let goodID;<br>let reportURL;<br>let AndroidVersion;<br>let iOSVersion;<br>let MAX_COUNT = 10;<br><br>function Person(name) &#123;<br>    this.name = name;<br>&#125;<br>// 不推荐<br>let body = $(&#x27;body&#x27;);<br>// 推荐<br>let $body = $(&#x27;body&#x27;);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"函数命名\"><a href=\"#函数命名\" class=\"headerlink\" title=\"函数命名\"></a>函数命名</h2><blockquote>\n<p>小驼峰命名法，可使用常见动词约定：</p>\n</blockquote>\n<ul>\n<li><code>&#123;ctl&#125;&#123;Event&#125;</code>, 控件的操作事件，示例: <code>radioChange</code>, <code>btnSaveClick</code></li>\n<li>canXXX 判断是否可执行某个动作，函数返回布尔值。true：可执行；false：不可执行</li>\n<li>hasXXX 判断是否含有某个值， 函数返回布尔值。true：含有此值；false：不含有此值</li>\n<li>isXXX 判断是否为某个值，函数返回布尔值。true：为某个值；false：不为某个值</li>\n<li>getXXX 获取某个值，函数返回非布尔值</li>\n<li>setXXX 设置某个值<ul>\n<li>无返回值</li>\n<li>返回是否设置成功</li>\n<li>返回链式对象 load 加载某些数据</li>\n<li>返回是否加载完成的结果</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 是否有权限<br>function hasPermission() &#123;<br> return true;<br>&#125;<br>// 获取权限列表<br>function getPermissinList() &#123;<br> return this.permissinList;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"引用-References\"><a href=\"#引用-References\" class=\"headerlink\" title=\"引用 References\"></a>引用 References</h2><ol>\n<li>对所有的引用使用 const；不要使用 var。</li>\n</ol>\n<blockquote>\n<p>eslint: prefer-const, no-const-assign</p>\n</blockquote>\n<p>  这可以确保你无法对引用重新分配，重新分配可能会导致 bug 和难以理解的代码。</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 批评<br>var a = 1;<br>var b = 2;<br>// 推荐<br>const a = 1;<br>const b = 2;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>如果一定需要可变动的引用，使用 let 代替 var 。</li>\n</ol>\n<blockquote>\n<p>eslint: no-var jscs: disallowVar</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>var count = 1;<br>if (true) &#123;<br>    count += 1;<br>&#125;<br>// 推荐<br>let count = 1;<br>if (true) &#123;<br>    count += 1;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"对象-Objects\"><a href=\"#对象-Objects\" class=\"headerlink\" title=\"对象 Objects\"></a>对象 Objects</h2><ol>\n<li>使用字面量语法创建对象。</li>\n</ol>\n<blockquote>\n<p>eslint: no-new-object</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>const item = new Object();<br>// 推荐<br>const item = &#123;&#125;;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>创建带有动态属性名称的对象时使用计算的属性名称。</li>\n</ol>\n<p>  它们允许你在一个地方定义一个对象的所有属性。</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">function getKey(k) &#123;<br>    return `a-key-named-k`;<br>&#125;<br>// 不推荐<br>const obj = &#123;<br>    id: 5,<br>    name: &#x27;San Francisco&#x27;,<br>&#125;;<br>obj[getKey(&#x27;enabled&#x27;)] = true;<br><br>// 推荐<br>const obj = &#123;<br>    id: 5,<br>    name: &#x27;San Francisco&#x27;,<br>    [getKey(&#x27;enabled&#x27;)]: true,<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>使用对象方法速记语法。</li>\n</ol>\n<blockquote>\n<p>eslint: object-shorthand jscs: requireEnhancedObjectLiterals</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>const atom = &#123;<br>  value: 1,<br>  addValue: function (value) &#123;<br>      return atom.value + value;<br>  &#125;<br>&#125;;<br><br>// 推荐<br>const atom = &#123;<br>  value: 1,<br>  addValue(value) &#123;<br>      return atom.value + value;<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>使用对象属性速记语法。</li>\n</ol>\n<blockquote>\n<p>eslint: object-shorthand jscs: requireEnhancedObjectLiterals</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">const lukeSkywalker = &#x27;Luke Skywalker&#x27;;<br>// 不推荐<br>const obj = &#123;<br>    lukeSkywalker: lukeSkywalker,<br>&#125;;<br><br>// 推荐<br>const obj = &#123;<br>    lukeSkywalker,<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>将速记属性分组写在对象声明的开始处</li>\n</ol>\n<p>  更容易看出哪些属性在使用速记语法</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">const anakinSkywalker = &#x27;Anakin Skywalker&#x27;;<br>const lukeSkywalker = &#x27;Luke Skywalker&#x27;;<br>// 不推荐<br>const obj = &#123;<br>    episodeOne: 1,<br>    twoJediWalkIntoACantina: 2,<br>    lukeSkywalker,<br>    episodeThree: 3,<br>    mayTheFourth: 4,<br>    anakinSkywalker,<br>&#125;;<br>// 推荐<br>const obj = &#123;<br>    lukeSkywalker,<br>    anakinSkywalker,<br>    episodeOne: 1,<br>    twoJediWalkIntoACantina: 2,<br>    episodeThree: 3,<br>    mayTheFourth: 4,<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>仅无效标识符的属性使用引号</li>\n</ol>\n<blockquote>\n<p>eslint: quote-props jscs: disallowQuotedKeysInObjects</p>\n</blockquote>\n<p>  比较容易阅读。它改进了语法高亮显示，并且更容易被许多JS引擎优化。</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>const bad = &#123;<br>    &#x27;foo&#x27;: 3,<br>    &#x27;bar&#x27;: 4,<br>    &#x27;data-blah&#x27;: 5<br>&#125;;<br><br>// 推荐<br>const good = &#123;<br>    foo: 3,<br>    bar: 4,<br>    &#x27;data-blah&#x27;: 5<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>用对象展开操作符浅复制对象，优先于Object.assign。</li>\n</ol>\n<p>  使用对象剩余操作符来获得一个省略某些属性的新对象。</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 批评<br>const original = &#123; a: 1, b: 2 &#125;;<br>const copy = Object.assign(original, &#123; c: 3 &#125;); //  `original` 是可变的<br>delete copy.a; // so does this<br><br>// 不推荐<br>const original = &#123; a: 1, b: 2 &#125;;<br>const copy = Object.assign(&#123;&#125;, original, &#123; c: 3 &#125;); // copy =&gt; &#123; a: 1, b: 2, c: 3 &#125;<br><br>// 推荐<br>const original = &#123; a: 1, b: 2 &#125;;<br>const copy = &#123; ...original, c: 3 &#125;; // copy =&gt; &#123; a: 1, b: 2, c: 3 &#125;<br>const &#123; a, ...noA &#125; = copy; // noA =&gt; &#123; b: 2, c: 3 &#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"数组-Arrays\"><a href=\"#数组-Arrays\" class=\"headerlink\" title=\"数组 Arrays\"></a>数组 Arrays</h2><ol>\n<li>使用字面量创建数组。</li>\n</ol>\n<blockquote>\n<p>eslint: no-array-constructor</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>const items = new Array();<br>// 推荐<br>const items = [];<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用数组展开操作符<code>...</code>复制数组。</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>const len = items.length;<br>const itemsCopy = [];<br>let i;<br>for (i = 0; i &lt; len; i += 1) &#123;<br>    itemsCopy[i] = items[i];<br>&#125;<br><br>// 推荐<br>const itemsCopy = [...items];<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>使用展开操作符<code>...</code>代替 Array.from，将类数组(array-like) 对象转换成数组。</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">const foo = document.querySelectorAll(&#x27;.foo&#x27;);<br>// 推荐<br>const nodes = Array.from(foo);<br>// 高效<br>const nodes = [...foo];<br></code></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>使用 Array.from 代替展开操作符<code>...</code>来映射迭代，它避免了创建媒介数组。</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>const baz = [...foo].map(bar);<br>// 推荐<br>const baz = Array.from(foo, bar);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"解构-Destructuring\"><a href=\"#解构-Destructuring\" class=\"headerlink\" title=\"解构 Destructuring\"></a>解构 Destructuring</h2><ol>\n<li>当访问和使用对象的多个属性时，请使用对象解构。</li>\n</ol>\n<blockquote>\n<p>eslint: prefer-destructuring jscs: requireObjectDestructuring</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>function getFullName(user) &#123;<br>    const firstName = user.firstName;<br>    const lastName = user.lastName;<br>    return `firstName lastName`;<br>&#125;<br>// 推荐<br>function getFullName(user) &#123;<br>    const &#123; firstName, lastName &#125; = user;<br>    return `firstName lastName`;<br>&#125;<br>// 高效<br>function getFullName(&#123; firstName, lastName &#125;) &#123;<br>    return `firstName lastName`;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用数组解构。</li>\n</ol>\n<blockquote>\n<p>eslint: prefer-destructuring jscs: requireArrayDestructuring</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">const arr = [1, 2, 3, 4];<br>// 不推荐<br>const first = arr[0];<br>const second = arr[1];<br>// 推荐<br>const [first, second] = arr;<br>const [first, second, ...other] = arr;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>使用对象解构来实现多个返回值，而不是数组解构。</li>\n</ol>\n<p>  随着时间的推移添加新的属性或更改排序，而不会改变调用时的位置。</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>function processInput(input) &#123;<br>    return [left, right, top, bottom];<br>&#125;<br>const [left, __, top] = processInput(input); // 需考虑返回数据的顺序<br><br>// 推荐<br>function processInput(input) &#123;<br>    return &#123; left, right, top, bottom &#125;;<br>&#125;<br>const &#123; left, top &#125; = processInput(input); // 只选择需要的数据<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"字符串-Strings\"><a href=\"#字符串-Strings\" class=\"headerlink\" title=\"字符串 Strings\"></a>字符串 Strings</h2><ol>\n<li>字符串使用单引号 ‘’。</li>\n</ol>\n<blockquote>\n<p>eslint: quotes jscs: validateQuoteMarks</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>const name = &quot;Capt. Janeway&quot;;<br>// 不推荐 - 模板字面量应该包含插值或换行符<br>const name = `Capt. Janeway`;<br>// 推荐<br>const name = &#x27;Capt. Janeway&#x27;;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>构建字符串时，使用模板字符串。</li>\n</ol>\n<blockquote>\n<p>eslint: prefer-template template-curly-spacing jscs: requireTemplateStrings</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>function sayHi(name) &#123;<br>    return &#x27;How are you, &#x27; + name + &#x27;?&#x27;;<br>&#125;<br>// 不推荐<br>function sayHi(name) &#123;<br>    return [&#x27;How are you, &#x27;, name, &#x27;?&#x27;].join();<br>&#125;<br>// 不推荐<br>function sayHi(name) &#123;<br>    return `How are you, $&#123; name &#125;?`;<br>&#125;<br>// 推荐<br>function sayHi(name) &#123;<br>     return `How are you, $&#123;name&#125;?`;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>永远不要在字符串上使用 eval() ，它会打开太多的漏洞。</li>\n</ol>\n<blockquote>\n<p>eslint: no-eval</p>\n</blockquote>\n<h2 id=\"函数-Functions\"><a href=\"#函数-Functions\" class=\"headerlink\" title=\"函数 Functions\"></a>函数 Functions</h2><ol>\n<li>使用命名函数表达式而不是函数声明。</li>\n</ol>\n<blockquote>\n<p>eslint: func-style jscs: disallowFunctionDeclarations</p>\n</blockquote>\n<p>  函数声明很容易被提升（Hoisting）,这对可读性和可维护性来说都是不利的;</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>function foo() &#123;<br>  // ...<br>&#125;<br>// 不推荐<br>const foo = function () &#123;<br>  // ...<br>&#125;;<br>// 推荐<br>// 用明显区别于变量引用调用的词汇命名<br>const short = function longUniqueMoreDescriptiveLexicalFoo() &#123;<br>  // ...<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>用圆括号包裹立即调用函数表达式 (IIFE)。</li>\n</ol>\n<blockquote>\n<p>eslint: wrap-iife jscs: requireParenthesesAroundIIFE</p>\n</blockquote>\n<p>  一个立即调用函数表达式是一个单独的单元 – 将函数表达式包裹在括号中，后面再跟一个调用括号，这看上去很紧凑。</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 立即调用函数表达式 (IIFE)<br>(function () &#123;<br>  console.log(&#x27;Welcome to the Internet. Please follow me.&#x27;);<br>&#125;());<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>不要使用 arguments。可以选择 rest 语法 <code>...</code> 替代。</li>\n</ol>\n<p>  使用 <code>...</code> 能明确要传入的参数。另外 rest（剩余）参数是一个真正的数组，而 arguments 是一个类数组（Array-like）。</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>function concatenateAll() &#123;<br>  const args = Array.prototype.slice.call(arguments);<br>  return args.join(&#x27;&#x27;);<br>&#125;<br>// 推荐<br>function concatenateAll(...args) &#123;<br>  return args.join(&#x27;&#x27;);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>使用默认参数语法，而不要使用一个变化的函数参数</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>function handleThings(opts) &#123;<br>  // 更加糟糕: 如果参数 opts 是 falsy(假值) 的话，它将被设置为一个对象，<br>  // 这可能是你想要的，但它可以引起一些小的错误。<br>  opts = opts || &#123;&#125;;<br>  // ...<br>&#125;<br>// 不推荐<br>function handleThings(opts) &#123;<br>  if (opts === void 0) &#123;<br>      opts = &#123;&#125;;<br>  &#125;<br>  // ...<br>&#125;<br>// 推荐<br>function handleThings(opts = &#123;&#125;) &#123;<br>  // ...<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>始终将默认参数放在最后。</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>function handleThings(opts = &#123;&#125;, name) &#123;<br>  // ...<br>&#125;<br>// 推荐<br>function handleThings(name, opts = &#123;&#125;) &#123;<br>  // ...<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>隔开函数签名，括号两边用空格隔开。</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>const f = function()&#123;&#125;;<br>const g = function ()&#123;&#125;;<br>const h = function() &#123;&#125;;<br>// 推荐<br>const x = function () &#123;&#125;;<br>const y = function a() &#123;&#125;;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>不要改变参数(?)。</li>\n</ol>\n<blockquote>\n<p>eslint: no-param-reassign</p>\n</blockquote>\n<p>  <em>操作</em>作为参数传入的对象，可能会在调用原始对象时造成不必要的变量副作用。（对象是引用类型）</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>function f1(obj) &#123;<br>    obj.key = 1;<br>&#125;<br>// 推荐<br>function f2(obj) &#123;<br>    const key = Object.prototype.hasOwnProperty.call(obj, &#x27;key&#x27;) ? obj.key : 1;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"箭头函数-Arrow-Functions\"><a href=\"#箭头函数-Arrow-Functions\" class=\"headerlink\" title=\"箭头函数 Arrow Functions\"></a>箭头函数 Arrow Functions</h2><ol>\n<li>当必须使用匿名函数（如在传递一个内联回调时），请使用箭头函数表示法。</li>\n</ol>\n<blockquote>\n<p>eslint: prefer-arrow-callback, arrow-spacing jscs: requireArrowFunctions</p>\n</blockquote>\n<p>  它创建了一个在 this 上下文中执行的函数的版本，这通常是你想要的，而且这样的写法更为简洁。</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>[1, 2, 3].map(function (x) &#123;<br>    const y = x + 1;<br>    return x * y;<br>&#125;);<br>// 不推荐<br>[1, 2, 3].map( _ =&gt; &#123;<br><br>    return 0;<br>&#125;);<br>// 推荐<br>[1, 2, 3].map((x) =&gt; &#123;<br>    const y = x + 1;<br>    return x * y;<br>&#125;);<br>// 推荐<br>[1, 2, 3].map(() =&gt; &#123;<br>    return 0;<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>无副作用的单行语句</li>\n</ol>\n<p>  如果函数体由一个返回无副作用(side effect)的expression(表达式)的单行语句组成，那么可以省略大括号并使用隐式返回。否则，保留大括号并使用 return 语句</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>[1, 2, 3].map(number =&gt; &#123;<br>    const nextNumber = number + 1;<br>    return `A string containing the $&#123;nextNumber&#125;.`;<br>&#125;);<br>// 推荐<br>[1, 2, 3].map(number =&gt; `A string containing the $&#123;number&#125;.`);<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>如果表达式跨多行，将其包裹在括号中，可以提高可读性。</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>[&#x27;get&#x27;, &#x27;post&#x27;, &#x27;put&#x27;].map(httpMethod =&gt; Object.prototype.hasOwnProperty.call(<br>    httpMagicObjectWithAVeryLongName,<br>    httpMethod<br>  )<br>);<br>// 推荐<br>[&#x27;get&#x27;, &#x27;post&#x27;, &#x27;put&#x27;].map(httpMethod =&gt; (<br>    Object.prototype.hasOwnProperty.call(<br>      httpMagicObjectWithAVeryLongName,<br>      httpMethod<br>    )<br>  )<br>);<br></code></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>如果函数只有一个参数并且不使用大括号，则可以省略参数括号。否则，为了清晰和一致性，总是给参数加上括号。</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>[1, 2, 3].map((x) =&gt; x * x);<br>// 推荐<br>[1, 2, 3].map(x =&gt; x * x);<br>// 推荐<br>[1, 2, 3].map(number =&gt; (<br>  `A long string with the number. It’s so long that we don’t want it to take up space on the .map line!`<br>));<br>// 不推荐<br>[1, 2, 3].map(x =&gt; &#123;<br>  const y = x + 1;<br>  return x * y;<br>&#125;);<br>// 推荐<br>[1, 2, 3].map((x) =&gt; &#123;<br>  const y = x + 1;<br>  return x * y;<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>避免使用比较运算符(&lt; &#x3D;, &gt;&#x3D;)时，混淆箭头函数语法(&#x3D;&gt;)。</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>const itemHeight = item =&gt; item.height &gt; 256 ? item.largeSize : item.smallSize;<br>// 不推荐<br>const itemHeight = (item) =&gt; item.height &gt; 256 ? item.largeSize : item.smallSize;<br>// 推荐<br>const itemHeight = item =&gt; (item.height &gt; 256 ? item.largeSize : item.smallSize);<br>// 推荐<br>const itemHeight = (item) =&gt; &#123;<br>  const &#123; height, largeSize, smallSize &#125; = item;<br>  return height &gt; 256 ? largeSize : smallSize;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"类-Classes-amp-构造函数-Constructors\"><a href=\"#类-Classes-amp-构造函数-Constructors\" class=\"headerlink\" title=\"类 Classes &amp; 构造函数 Constructors\"></a>类 Classes &amp; 构造函数 Constructors</h2><ol>\n<li>总是使用 class。避免直接操作 prototype 。</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>function Queue(contents = []) &#123;<br>    this.queue = [...contents];<br>&#125;<br>Queue.prototype.pop = function () &#123;<br>    const value = this.queue[0];<br>    this.queue.splice(0, 1);<br>    return value;<br>&#125;;<br>// 推荐<br>class Queue &#123;<br>    constructor(contents = []) &#123;<br>        this.queue = [...contents];<br>    &#125;<br>    pop() &#123;<br>        const value = this.queue[0];<br>        this.queue.splice(0, 1);<br>        return value;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用 extends 继承。</li>\n</ol>\n<p>  extends 是一个内置的原型继承方法并且不会破坏 instanceof。</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>const inherits = require(&#x27;inherits&#x27;);<br>    function PeekableQueue(contents) &#123;<br>    Queue.apply(this, contents);<br>&#125;<br><br>inherits(PeekableQueue, Queue);<br>PeekableQueue.prototype.peek = function () &#123;<br>    return this.queue[0];<br>&#125;;<br><br>// 推荐<br>class PeekableQueue extends Queue &#123;<br>    peek() &#123;<br>        return this.queue[0];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>如果没有指定，类有一个默认的构造函数。一个空的构造函数或者只是委托给父类则不是必须的(?)。</li>\n</ol>\n<blockquote>\n<p>eslint: no-useless-constructor</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>class Jedi &#123;<br>    constructor() &#123;&#125;<br>        getName() &#123;<br>        return this.name;<br>    &#125;<br>&#125;<br>// 不推荐<br>class Rey extends Jedi &#123;<br>    constructor(...args) &#123;<br>        super(...args);<br>    &#125;<br>&#125;<br>// 推荐<br>class Rey extends Jedi &#123;<br>    constructor(...args) &#123;<br>        super(...args);<br>        this.name = &#x27;Rey&#x27;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>避免重复类成员(?)。</li>\n</ol>\n<blockquote>\n<p>eslint: no-dupe-class-members</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>class Foo &#123;<br>  bar() &#123; return 1; &#125;<br>  bar() &#123; return 2; &#125;<br>&#125;<br>// 推荐<br>class Foo &#123;<br>  bar() &#123; return 1; &#125;<br>&#125;<br>// 推荐<br>class Foo &#123;<br>  bar() &#123; return 2; &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"模块-Modules\"><a href=\"#模块-Modules\" class=\"headerlink\" title=\"模块 Modules\"></a>模块 Modules</h2><ol>\n<li>使用模块 (import&#x2F;export) 而不是其他非标准模块系统。</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>const JavascriptStyleGuide = require(&#x27;./JavascriptStyleGuide&#x27;);<br>module.exports = JavascriptStyleGuide.es6;<br>// 一般<br>import JavascriptStyleGuide from &#x27;./JavascriptStyleGuide&#x27;;<br>export default JavascriptStyleGuide.es6;<br>// 推荐<br>import &#123; es6 &#125; from &#x27;./JavascriptStyleGuide&#x27;;<br>export default es6;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>不要使用通配符 import(导入)。</li>\n</ol>\n<p>  这样能确保你只有一个默认 export(导出)。</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>import * as JavascriptStyleGuide from &#x27;./JavascriptStyleGuide&#x27;;<br>// 推荐<br>import JavascriptStyleGuide from &#x27;./JavascriptStyleGuide&#x27;;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>不要从 import(导入) 中直接 export(导出)。</li>\n</ol>\n<p>  虽然一行代码简洁明了，但有一个明确的 import(导入) 方法和一个明确的 export(导出) 方法，使事情能保持一致。</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>export &#123; es6 as default &#125; from &#x27;./JavascriptStyleGuide&#x27;;<br><br>// 推荐<br>import &#123; es6 &#125; from &#x27;./JavascriptStyleGuide&#x27;;<br>export default es6;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>一个地方只在一个路径中 import(导入) 。</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>import foo from &#x27;foo&#x27;;<br>import &#123; named1, named2 &#125; from &#x27;foo&#x27;;<br><br>// 推荐<br>import foo, &#123; named1, named2 &#125; from &#x27;foo&#x27;;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>不要 export(导出) 可变绑定。</li>\n</ol>\n<blockquote>\n<p>eslint: import&#x2F;no-mutable-exports</p>\n</blockquote>\n<p>  一般应该避免可变性，特别是在导出可变绑定时。虽然一些特殊情况下，可能需要这种技术，但是一般而言，只应该导出常量引用。</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>let foo = 3;<br>export &#123; foo &#125;;<br>// 推荐<br>const foo = 3;<br>export &#123; foo &#125;;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>在只有单个导出的模块中，默认 export(导出) 优于命名 export(导出)。</li>\n</ol>\n<blockquote>\n<p>eslint: import&#x2F;prefer-default-export</p>\n</blockquote>\n<p>  为了鼓励更多的文件只有一个 export(导出)，这有利于模块的可读性和可维护性。</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>export function foo() &#123;&#125;<br>// 推荐<br>export default function foo() &#123;&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>将所有 import 导入放在非导入语句的上面。</li>\n</ol>\n<blockquote>\n<p>eslint: import&#x2F;first</p>\n</blockquote>\n<p>  由于 import 被提升，保持他们在顶部，防止意外的行为。</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>import foo from &#x27;foo&#x27;;<br>foo.init();<br>import bar from &#x27;bar&#x27;;<br><br>// 推荐<br>import foo from &#x27;foo&#x27;;<br>import bar from &#x27;bar&#x27;;<br>foo.init();<br></code></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li>多行导入应该像多行数组和对象字面量一样进行缩进。</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>import &#123;longNameA, longNameB, longNameC, longNameD, longNameE&#125; from &#x27;path&#x27;;<br>// 推荐<br>import &#123;<br>    longNameA,<br>    longNameB,<br>    longNameC,<br>    longNameD,<br>    longNameE,<br>&#125; from &#x27;path&#x27;;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"变量-Variables\"><a href=\"#变量-Variables\" class=\"headerlink\" title=\"变量 Variables\"></a>变量 Variables</h2><ol>\n<li>总是使用 const 或 let 来声明变量。</li>\n</ol>\n<p>  var 声明变量会导致产生全局变量，避免污染全局命名空间。</p>\n<blockquote>\n<p>eslint: no-undef prefer-const</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>superPower = new SuperPower();<br>// 推荐<br>const superPower = new SuperPower();<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>将所有的 const 和 let 分组 。</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>let i, len, dragonball,<br>items = getItems(),<br>goSportsTeam = true;<br><br>// 不推荐<br>let i;<br>const items = getItems();<br>let dragonball;<br>const goSportsTeam = true;<br>let len;<br><br>// 推荐<br>const goSportsTeam = true;<br>const items = getItems();<br>let dragonball;<br>let i;<br>let length;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>变量不要链式赋值。</li>\n</ol>\n<blockquote>\n<p>eslint: no-multi-assign</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>(function example() &#123;<br>  // JavaScript 将其解析为<br>  // let a = ( b = ( c = 1 ) );<br>  // let关键字只适用于变量a;<br>  // 变量b和c变成了全局变量。<br>  let a = b = c = 1;<br>&#125;());<br>console.log(a); // 抛出 ReferenceError（引用错误）<br>console.log(b); // 1<br>console.log(c); // 1<br><br>// 推荐<br>(function example() &#123;<br>  let a = 1;<br>  let b = a;<br>  let c = a;<br>  // 同样适用于 `const`<br>&#125;());<br>console.log(a); // 抛出 ReferenceError（引用错误）<br>console.log(b); // 抛出 ReferenceError（引用错误）<br>console.log(c); // 抛出 ReferenceError（引用错误）<br></code></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>避免使用一元递增和递减运算符(++, -–)。</li>\n</ol>\n<p>  根据 eslint 文档，一元递增和递减语句会受到自动插入分号的影响，并可能导致应用程序中的值递增或递减，从而导致无提示错误。</p>\n<p>  使用像 num +&#x3D; 1 而不是 num++ 或 num ++ 这样的语句来改变你的值也更具有表现力。</p>\n<p>  不允许一元递增和递减语句也会阻止您无意中预先递增&#x2F;递减值，这也会导致程序中的意外行为。</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>const array = [1, 2, 3];<br>let num = 1;<br>num++;<br>--num;<br>let sum = 0;<br>let truthyCount = 0;<br>for (let i = 0; i &lt; array.length; i++) &#123; <br>  let value = array[i]; <br>  sum += value;<br>   if (value) &#123;<br>      truthyCount++; <br>    &#125; <br> &#125;<br><br>// 推荐<br>const array = [1, 2, 3]; <br>let num = 1; num += 1; num -= 1; <br>const sum = array.reduce((a, b) =&gt; a + b, 0);<br>const truthyCount = array.filter(Boolean).length;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"比较运算符-Comparison-Operators-和-等号-Equality\"><a href=\"#比较运算符-Comparison-Operators-和-等号-Equality\" class=\"headerlink\" title=\"比较运算符 Comparison Operators 和 等号 Equality\"></a>比较运算符 Comparison Operators 和 等号 Equality</h2><ol>\n<li>使用 &#x3D;&#x3D;&#x3D; 和 !&#x3D;&#x3D; 优先于 &#x3D;&#x3D; 和 !&#x3D;。</li>\n</ol>\n<blockquote>\n<p>eslint: eqeqeq</p>\n</blockquote>\n<ol start=\"2\">\n<li>对于布尔值使用简写，但对于字符串和数字使用显式比较。</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>if (isValid === true) &#123;<br>  // ...<br>&#125;<br>// 推荐<br>if (isValid) &#123;<br>  // ...<br>&#125;<br><br>// 不推荐<br>if (name) &#123;<br>  // ...<br>&#125;<br>// 推荐<br>if (name !== &#x27;&#x27;) &#123;<br>  // ...<br>&#125;<br><br>// 不推荐<br>if (collection.length) &#123;<br>  // ...<br>&#125;<br>// 推荐<br>if (collection.length &gt; 0) &#123;<br>  // ...<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>在 case 和 default 子句中，使用大括号来创建包含词法声明的语句块(例如 let, const, function, 和 class).</li>\n</ol>\n<blockquote>\n<p>eslint: no-case-declarations</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>switch (foo) &#123;<br>  case 1:<br>    let x = 1;<br>  break;<br>  case 2:<br>    const y = 2;<br>  break;<br>  case 3:<br>    function f() &#123;<br>      // ...<br>    &#125;<br>  break;<br>default:<br>  class C &#123;&#125;<br>&#125;<br><br>// 推荐<br>switch (foo) &#123;<br>  case 1: &#123;<br>    let x = 1;<br>    break;<br>  &#125;<br>  case 2: &#123;<br>    const y = 2;<br>    break;<br>  &#125;<br>  case 3: &#123;<br>    function f() &#123;<br>      // ...<br>    &#125;<br>    break;<br>  &#125;<br>  case 4:<br>    bar();<br>    break;<br>  default: &#123;<br>    class C &#123;&#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>三元表达式不应该嵌套，通常写成单行表达式。</li>\n</ol>\n<blockquote>\n<p>eslint: no-nested-ternary</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>const foo = maybe1 &gt; maybe2<br>? &quot;bar&quot;<br>: value1 &gt; value2 ? &quot;baz&quot; : null;<br><br>// 推荐<br>const maybeNull = value1 &gt; value2 ? &#x27;baz&#x27; : null;<br>const foo = maybe1 &gt; maybe2 ? &#x27;bar&#x27; : maybeNull;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>避免不必要的三元表达式语句。</li>\n</ol>\n<blockquote>\n<p>eslint: no-unneeded-ternary</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>const foo = a ? a : b;<br>const bar = c ? true : false;<br>const baz = c ? false : true;<br><br>// 推荐<br>const foo = a || b;<br>const bar = !!c;<br>const baz = !c;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>当运算符混合在一个语句中时，请将其放在括号内。</li>\n</ol>\n<blockquote>\n<p>eslint: no-mixed-operators</p>\n</blockquote>\n<p>  混合算术运算符时，不要将 * 和 % 与 + ， -，，&#x2F; 混合在一起。</p>\n<p>  提高可读性，并清晰展现开发者的意图。</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>const foo = a &amp;&amp; b &lt; 0 || c &gt; 0 || d + 1 === 0;<br>// 不推荐<br>const bar = a ** b - 5 % d;<br>// 不推荐<br>if (a || b &amp;&amp; c) &#123;<br>  return d;<br>&#125;<br>// 推荐<br>const foo = (a &amp;&amp; b &lt; 0) || c &gt; 0 || (d + 1 === 0);<br>// 推荐<br>const bar = (a ** b) - (5 % d);<br>// 推荐<br>if ((a || b) &amp;&amp; c) &#123;<br>  return d;<br>&#125;<br>// 推荐<br>const bar = a + b / c * d;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"代码块-Blocks\"><a href=\"#代码块-Blocks\" class=\"headerlink\" title=\"代码块 Blocks\"></a>代码块 Blocks</h2><ol>\n<li>使用大括号包裹所有的多行代码块</li>\n</ol>\n<blockquote>\n<p>eslint: nonblock-statement-body-position</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>if (test)<br>  return false;<br>// 推荐<br>if (test) return false;<br>// 推荐<br>if (test) &#123;<br>  return false;<br>&#125;<br><br>// 不推荐<br>function foo() &#123; return false; &#125;<br>// 推荐<br>function bar() &#123;<br>  return false;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>如果通过 if 和 else 使用多行代码块，把 else 放在 if 代码块闭合括号的同一行。</li>\n</ol>\n<blockquote>\n<p>eslint: brace-style</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>if (test) &#123;<br>  thing1();<br>  thing2();<br>&#125;<br>else &#123;<br>  thing3();<br>&#125;<br><br>// 推荐<br>if (test) &#123;<br>  thing1();<br>  thing2();<br>&#125; else &#123;<br>  thing3();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>如果一个 if 块总是执行一个 return 语句，后面的 else 块是不必要的。在 else if 块中的 return，可以分成多个 if 块来 return 。</li>\n</ol>\n<blockquote>\n<p>eslint: no-else-return</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>function foo() &#123;<br>  if (x) &#123;<br>    return x;<br>  &#125; else &#123;<br>    return y;<br>  &#125;<br>&#125;<br>// 不推荐<br>function cats() &#123;<br>  if (x) &#123;<br>    return x;<br>  &#125; else if (y) &#123;<br>    return y;<br>  &#125;<br>&#125;<br>// 不推荐<br>function dogs() &#123;<br>  if (x) &#123;<br>    return x;<br>  &#125; else &#123;<br>    if (y) &#123;<br>      return y;<br>    &#125;<br>  &#125;<br>&#125;<br><br>// 推荐<br>function foo() &#123;<br>  if (x) &#123;<br>    return x;<br>  &#125;<br>  return y;<br>&#125;<br>// 推荐<br>function cats() &#123;<br>  if (x) &#123;<br>    return x;<br>  &#125;<br>  if (y) &#123;<br>    return y;<br>  &#125;<br>&#125;<br>// 推荐<br>function dogs(x) &#123;<br>  if (x) &#123;<br>    if (z) &#123;<br>      return y;<br>    &#125;<br>  &#125; else &#123;<br>    return z;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"控制语句-Control-Statements\"><a href=\"#控制语句-Control-Statements\" class=\"headerlink\" title=\"控制语句 Control Statements\"></a>控制语句 Control Statements</h2><ol>\n<li>如果控制语句(if, while 的)太长或超过最大行长度，那么每个（分组）条件可以放单独一行。逻辑运算符应该放在每行起始处。</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>if ((foo === 123 || bar === &#x27;abc&#x27;) &amp;&amp; doesItLookGoodWhenItBecomesThatLong() &amp;&amp; isThisReallyHappening()) &#123;<br> thing1();<br>&#125;<br>// 不推荐<br>if (foo === 123 &amp;&amp;<br>  bar === &#x27;abc&#x27;) &#123;<br>  thing1();<br>&#125;<br>// 不推荐<br>if (foo === 123<br>  &amp;&amp; bar === &#x27;abc&#x27;) &#123;<br>  thing1();<br>&#125;<br>// 不推荐<br>if (<br>  foo === 123 &amp;&amp;<br>  bar === &#x27;abc&#x27;<br>) &#123;<br>  thing1();<br>&#125;<br><br>// 推荐<br>if (<br>  foo === 123<br>  &amp;&amp; bar === &#x27;abc&#x27;<br>) &#123;<br>  thing1();<br>&#125;<br>// 推荐<br>if (<br>  (foo === 123 || bar === &quot;abc&quot;)<br>  &amp;&amp; doesItLookGoodWhenItBecomesThatLong()<br>  &amp;&amp; isThisReallyHappening()<br>) &#123;<br>  thing1();<br>&#125;<br>// 推荐<br>if (foo === 123 &amp;&amp; bar === &#x27;abc&#x27;) &#123;<br>  thing1();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"注释-Comments\"><a href=\"#注释-Comments\" class=\"headerlink\" title=\"注释 Comments\"></a>注释 Comments</h2><ol>\n<li>多行注释使用 <code>/.../</code>。</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">/**<br>* @param &#123;Grid&#125; grid 需要合并的Grid<br>* @param &#123;Array&#125; cols 需要合并列的Index(序号)数组；从0开始计数，序号也包含。<br>* @param &#123;Boolean&#125; isAllSome 是否2个tr的cols必须完成一样才能进行合并。true：完成一样；false(默认)：不完全一样<br>* @return void<br>* @author XXX 2019/09/09<br>*/<br>function mergeCells(grid, cols, isAllSome) &#123;<br>    // Do Something<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>单行注释使用 <code>//</code>。将单行注释放在需注释的语句上方。在注释之前放置一个空行，除非它位于代码块的第一行。</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>const active = true;  // is current tab<br>// 推荐<br>// is current tab<br>const active = true;<br><br>// 不推荐<br>function getType() &#123;<br>  console.log(&#x27;fetching type...&#x27;);<br>  // set the default type to &#x27;no type&#x27;<br>  const type = this.type || &#x27;no type&#x27;;<br>  return type;<br>&#125;<br>// 推荐<br>function getType() &#123;<br>  console.log(&#x27;fetching type...&#x27;);<br><br>  // set the default type to &#x27;no type&#x27;<br>  const type = this.type || &#x27;no type&#x27;;<br>  return type;<br>&#125;<br>// 推荐<br>function getType() &#123;<br>  // set the default type to &#x27;no type&#x27;<br>  const type = this.type || &#x27;no type&#x27;;<br>  return type;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>所有注释符和注释内容用一个空格隔开，让它更容易阅读。</li>\n</ol>\n<blockquote>\n<p>eslint: spaced-comment</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>//is current tab<br>const active = true;<br>// 推荐<br>// is current tab<br>const active = true;<br><br>// 不推荐<br>/**<br>*make() returns a new element<br>*based on the passed-in tag name<br>*/<br>function make(tag) &#123;<br>  // ...<br>  return element;<br>&#125;<br>// 推荐<br>/**<br>* make() returns a new element<br>* based on the passed-in tag name<br>*/<br>function make(tag) &#123;<br>  // ...<br>  return element;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>给注释增加 FIXME 或 TODO 的前缀</li>\n</ol>\n<p>  帮助其他开发者快速了解这个是否是一个需要重新复查的问题，或是你正在为需要解决的问题提出解决方案。这将有别于常规注释，因为它们是可操作的。</p>\n<p>  使用 <code>FIXME – need to figure this out</code> 或者 <code>TODO – need to implement</code>。</p>\n<p>  使用 <code>// FIXME: </code> 来标识需要修正的问题。</p>\n<p>  注：如果代码中有该标识，说明标识处代码需要修正，甚至代码是错误的，不能工作，需要修复，如何修正会在说明中简略说明。</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">lass Calculator extends Abacus &#123;<br>  constructor() &#123;<br>    super();<br>    // FIXME: shouldn’t use a global here<br>    total = 0;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>  使用 <code>// TODO:</code> 来标识需要实现的问题。</p>\n<p>  注：如果代码中有该标识，说明在标识处有功能代码待编写，待实现的功能在说明中会简略说明。</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">class Calculator extends Abacus &#123;<br>  constructor() &#123;<br>    super();<br>    // TODO: total should be configurable by an options param<br>    this.total = 0;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"空格-Whitespace\"><a href=\"#空格-Whitespace\" class=\"headerlink\" title=\"空格 Whitespace\"></a>空格 Whitespace</h2><ol>\n<li>使用 2 个空格作为缩进</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 推荐<br>function baz() &#123;<br>  let name;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>在大括号前放置 1 个空格。</li>\n</ol>\n<blockquote>\n<p>eslint: space-before-blocks jscs: requireSpaceBeforeBlockStatements</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>function test()&#123;<br>  console.log(&#x27;test&#x27;);<br>&#125;<br>// 推荐<br>function test() &#123;<br>  console.log(&#x27;test&#x27;);<br>&#125;<br>// 不推荐<br>dog.set(&#x27;attr&#x27;,&#123;<br>  age: &#x27;1 year&#x27;,<br>  breed: &#x27;Bernese Mountain Dog&#x27;,<br>&#125;);<br>// 推荐<br>dog.set(&#x27;attr&#x27;, &#123;<br>  age: &#x27;1 year&#x27;,<br>  breed: &#x27;Bernese Mountain Dog&#x27;,<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>在控制语句（if、while 等）的小括号前放一个空格。在函数调用及声明中，不在函数的参数列表前加空格。</li>\n</ol>\n<blockquote>\n<p>eslint: keyword-spacing jscs: requireSpaceAfterKeywords</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>if(isJedi) &#123;<br>  fight ();<br>&#125;<br>// 推荐<br>if (isJedi) &#123;<br>  fight();<br>&#125;<br><br>// 不推荐<br>function fight () &#123;<br>  console.log (&#x27;Swooosh!&#x27;);<br>&#125;<br>// 推荐<br>function fight() &#123;<br>  console.log(&#x27;Swooosh!&#x27;);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>使用空格把运算符隔开。</li>\n</ol>\n<blockquote>\n<p>eslint: space-infix-ops jscs: requireSpaceBeforeBinaryOperators, requireSpaceAfterBinaryOperators</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>const x=y+5;<br>// 推荐<br>const x = y + 5;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>在文件末尾插入一个空行。</li>\n</ol>\n<blockquote>\n<p>eslint: eol-last</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>import &#123; es6 &#125; from &#x27;./JavascriptStyleGuide&#x27;;<br>// ...<br>export default es6;<br><br>// 推荐<br>import &#123; es6 &#125; from &#x27;./JavascriptStyleGuide&#x27;;<br>// ...<br>export default es6;<br><br></code></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>长方法链式调用时使用缩进（2个以上的方法链式调用）。使用一个点 . 开头，强调该行是一个方法调用，不是一个新的声明。</li>\n</ol>\n<blockquote>\n<p>eslint: newline-per-chained-call no-whitespace-before-property</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>$(&#x27;#items&#x27;).find(&#x27;.selected&#x27;).highlight().end().find(&#x27;.open&#x27;).updateCount();<br><br>// 不推荐<br>$(&#x27;#items&#x27;).<br>find(&#x27;.selected&#x27;).<br>highlight().<br>end().<br>find(&#x27;.open&#x27;).<br>updateCount();<br><br>// 推荐<br>$(&#x27;#items&#x27;)<br>  .find(&#x27;.selected&#x27;)<br>  .highlight()<br>  .end()<br>  .find(&#x27;.open&#x27;)<br>  .updateCount();<br><br>// 不推荐<br>const leds = stage.selectAll(&#x27;.led&#x27;).data(data).enter().append(&#x27;svg:svg&#x27;).classed(&#x27;led&#x27;, true)<br>.attr(&#x27;width&#x27;, (radius + margin) * 2).append(&#x27;svg:g&#x27;)<br>.attr(&#x27;transform&#x27;, `translate($&#123;radius + margin&#125;,$&#123;radius + margin&#125;)`)<br>.call(tron.led);<br><br>// 推荐<br>const leds = stage.selectAll(&#x27;.led&#x27;)<br>  .data(data)<br>  .enter().append(&#x27;svg:svg&#x27;)<br>  .classed(&#x27;led&#x27;, true)<br>  .attr(&#x27;width&#x27;, (radius + margin) * 2)<br>  .append(&#x27;svg:g&#x27;)<br>  .attr(&#x27;transform&#x27;, `translate($&#123;radius + margin&#125;,$&#123;radius + margin&#125;)`)<br>  .call(tron.led);<br>// 推荐<br>const leds = stage.selectAll(&#x27;.led&#x27;).data(data);<br></code></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>不要在圆括号内加空格。</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>function bar( foo ) &#123;<br>  return foo;<br>&#125;<br>// 推荐<br>function bar(foo) &#123;<br>  return foo;<br>&#125;<br>// 不推荐<br>if ( foo ) &#123;<br>  console.log(foo);<br>&#125;<br>// 推荐<br>if (foo) &#123;<br>  console.log(foo);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li>添加&#x2F;不添加空格。</li>\n</ol>\n<blockquote>\n<p>eslint: array-bracket-spacing jscs: disallowSpacesInsideArrayBrackets</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>const foo = [ 1, 2, 3 ];<br>console.log(foo[ 0 ]);<br>// 推荐(内部分隔符号后有空格)<br>const foo = [1, 2, 3];<br>console.log(foo[0]);<br><br>// 不推荐<br>const foo = &#123; clark:&#x27;kent&#x27; &#125;;<br>// 推荐(内部分隔符号后有空格)<br>const foo = &#123;clark: &#x27;kent&#x27;&#125;;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"类型转换-Type-Casting-amp-Coercion\"><a href=\"#类型转换-Type-Casting-amp-Coercion\" class=\"headerlink\" title=\"类型转换 Type Casting &amp; Coercion\"></a>类型转换 Type Casting &amp; Coercion</h2><ol>\n<li>在声明语句的开始处就执行强制类型转换.</li>\n</ol>\n<p>  字符串：</p>\n<blockquote>\n<p>eslint: no-new-wrappers</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// =&gt; this.reviewScore = 9;<br>// 不推荐<br>const totalScore = new String(this.reviewScore); // typeof totalScore 是 &quot;object&quot; 而不是 &quot;string&quot;<br>// 不推荐<br>const totalScore = this.reviewScore + &#x27;&#x27;; // 调用 this.reviewScore.valueOf()<br>// 不推荐<br>const totalScore = this.reviewScore.toString(); // 不能保证返回一个字符串<br>// 推荐<br>const totalScore = String(this.reviewScore);<br></code></pre></td></tr></table></figure>\n\n<p>  数字：使用 Number 进行转换，而 parseInt 则始终以基数解析字串。</p>\n<blockquote>\n<p>eslint: radix no-new-wrappers</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">const inputValue = &#x27;4&#x27;;<br>// 不推荐<br>const val = new Number(inputValue);<br>// 不推荐<br>const val = +inputValue;<br>// 不推荐<br>const val = inputValue &gt;&gt; 0;<br>// 不推荐<br>const val = parseInt(inputValue);<br>// 推荐<br>const val = Number(inputValue);<br>// 推荐<br>const val = parseInt(inputValue, 10);<br></code></pre></td></tr></table></figure>\n\n<p>  布尔值:</p>\n<blockquote>\n<p>eslint: no-new-wrappers</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">const age = 0;<br>// 不推荐<br>const hasAge = new Boolean(age);<br>// 推荐<br>const hasAge = Boolean(age);<br>// 强烈推荐<br>const hasAge = !!age;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"命名规则-Naming-Conventions\"><a href=\"#命名规则-Naming-Conventions\" class=\"headerlink\" title=\"命名规则 Naming Conventions\"></a>命名规则 Naming Conventions</h2><ol>\n<li>避免使用单字母名称，命名应具有描述性。</li>\n</ol>\n<blockquote>\n<p>eslint: id-length</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>function q() &#123;<br>  // ...<br>&#125;<br>// 推荐<br>function query() &#123;<br>  // ...<br>&#125;<br></code></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>当命名对象，函数和实例时使用驼峰式命名。</li>\n</ol>\n<blockquote>\n<p>eslint: camelcase jscs: requireCamelCaseOrUpperCaseIdentifiers</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>const OBJEcttsssss = &#123;&#125;;<br>const this_is_my_object = &#123;&#125;;<br>function c() &#123;&#125;<br>// 推荐<br>const thisIsMyObject = &#123;&#125;;<br>function thisIsMyFunction() &#123;&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>当命名构造函数或类的时候使用 PascalCase 式命名，（注：即单词首字母大写）。</li>\n</ol>\n<blockquote>\n<p>eslint: new-cap</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>function user(options) &#123;<br>  this.name = options.name;<br>&#125;<br>const bad = new user(&#123;<br>  name: &#x27;nope&#x27;,<br>&#125;);<br>// 推荐<br>class User &#123;<br>  constructor(options) &#123;<br>    this.name = options.name;<br>  &#125;<br>&#125;<br>const good = new User(&#123;<br>  name: &#x27;yup&#x27;,<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>当导出(export) 一个默认函数时使用驼峰式命名。你的文件名应该和你的函数的名字一致。</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">function makeStyleGuide() &#123;<br>  // ...<br>&#125;<br>export default makeStyleGuide;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>当导出一个构造函数&#x2F;类&#x2F;单例&#x2F;函数库&#x2F;纯对象时使用 PascalCase 式命名。</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">const JavascriptStyleGuide = &#123;<br>  es6: &#123;<br>  &#125;,<br>&#125;;<br>export default JavascriptStyleGuide;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"存取器-Accessors\"><a href=\"#存取器-Accessors\" class=\"headerlink\" title=\"存取器 Accessors\"></a>存取器 Accessors</h2><p>属性的存取器函数不是必须的。</p>\n<ol>\n<li>別使用 JavaScript 的 getters&#x2F;setters，因为它们会导致意想不到的副作用，而且很难测试，维护和理解。相反，如果要使用存取器函数，使用 getVal() 及 setVal(‘hello’)。</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>class Dragon &#123;<br>  get age() &#123;<br>    // ...<br>  &#125;<br>  set age(value) &#123;<br>    // ...<br>  &#125;<br>&#125;<br>// 推荐<br>class Dragon &#123;<br>  getAge() &#123;<br>    // ...<br>  &#125;<br>  setAge(value) &#123;<br>    // ...<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>如果属性&#x2F;方法是一个 boolean, 使用 isVal() 或 hasVal() 方法。</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不推荐<br>if (!dragon.age()) &#123;<br>  return false;<br>&#125;<br>// 推荐<br>if (!dragon.hasAge()) &#123;<br>  return false;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"If-Else优化方案\"><a href=\"#If-Else优化方案\" class=\"headerlink\" title=\"If-Else优化方案\"></a>If-Else优化方案</h2><p><a href=\"/developer/style-guide/if-else-optimize-solutions.html\">If-Else优化方案</a></p>\n<h2 id=\"整洁代码\"><a href=\"#整洁代码\" class=\"headerlink\" title=\"整洁代码\"></a>整洁代码</h2><p><a href=\"/developer/style-guide/tips-to-keep-javascript-code-clean.html\">整洁代码的建议列表</a></p>\n<h2 id=\"摘自文章\"><a href=\"#摘自文章\" class=\"headerlink\" title=\"摘自文章\"></a>摘自文章</h2><ul>\n<li><a href=\"https://cloud.tencent.com/developer/article/1404290\">JavaScript 编程规范(一)</a></li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1404381\">JavaScript 编程规范(二)</a></li>\n</ul>\n"},{"title":"MySQL Insert 注意事项","type":"MySQL Insert 注意事项","_content":"\n## Create Table\n\n```\ncreate table if not exists `tbl_insert_ignore_replace_duplicate` (\n  `id` int(11) not null auto_increment comment '自增主键',\n  `label` varchar(20) not null comment '唯一标识',\n  `data_update_time` timestamp not null default current_timestamp comment '数据更新时间',\n  primary key (`id`),\n  unique index `inx_label` (`label`)\n) engine=innodb default charset=utf8 row_format=dynamic comment='测试insert/ignore/replace/duplicate功能';\n```\n\n## Insert Into\n\n```\nmysql > insert into tbl_insert_ignore_replace_duplicate(label) value ('insert'), ('replace'), ('duplicate');\n\nQuery OK, 3 rows affected (0.01 sec)\nRecords: 3  Duplicates: 0  Warnings: 0\n\nmysql> select * from tbl_insert_ignore_replace_duplicate;\n+----+-----------+---------------------+\n| id | label     | data_update_time    |\n+----+-----------+---------------------+\n|  1 | insert    | 2019-10-16 23:22:21 |\n|  2 | replace   | 2019-10-16 23:22:21 |\n|  3 | duplicate | 2019-10-16 23:22:21 |\n+----+-----------+---------------------+\n```\n\n普通 `insert into` 当主键或唯一索引冲突时，MySQL 会异常报错中断执行。\n\n```\nmysql> mysql > insert into tbl_insert_ignore_replace_duplicate(label) value ('insert');\nERROR 1062 (23000): Duplicate entry 'insert' for key 'inx_label'\n\nmysql> show create table tbl_insert_ignore_replace_duplicate;\n\nCREATE TABLE `tbl_insert_ignore_replace_duplicate` (\n  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '自增主键',\n  `label` varchar(20) NOT NULL COMMENT '唯一标识',\n  `data_update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '数据更新时间',\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `inx_label` (`label`)\n) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC COMMENT='测试insert/ignore/replace/duplicate功能'\n```\n\n虽然插入失败，但占用了一次 id+1 机会，即把 id=4 使用了，下次 id 从 5 开始。\n\n*TODO: 待确认 master-slave 集群时，slave 库中表的 `AUTO_INCREMENT` 值与 master 相同*\n\n## Replace Into (禁用)\n\n`replace into` 操作时，当主键或唯一索引冲突时就是普通的 `insert into` 效果。\n\n**但是**，当有主键或唯一索引冲突时，会删除冲突行，重新插入，从而 `id` 自动 `+1`.\n\n```\nmysql> select version();\n+-----------+\n| version() |\n+-----------+\n| 5.7.25    |\n+-----------+\n1 row in set (0.01 sec)\n\nmysql> select * from tbl_insert_ignore_replace_duplicate;\n+----+-----------+---------------------+\n| id | label     | data_update_time    |\n+----+-----------+---------------------+\n|  1 | insert    | 2019-10-16 23:22:21 |\n|  2 | replace   | 2019-10-16 23:22:21 |\n|  3 | duplicate | 2019-10-16 23:22:21 |\n+----+-----------+---------------------+\n3 rows in set (0.00 sec)\n\nmysql> replace into tbl_insert_ignore_replace_duplicate(label) value ('replace');\nQuery OK, 2 rows affected (0.00 sec)\n\n# 上面 insert into 冲突时，造成了 id=(旧id最大值+1)=4\nmysql> select * from tbl_insert_ignore_replace_duplicate;\n+----+-----------+---------------------+\n| id | label     | data_update_time    |\n+----+-----------+---------------------+\n|  1 | insert    | 2019-10-16 23:22:21 |\n|  3 | duplicate | 2019-10-16 23:22:21 |\n|  5 | replace   | 2019-10-16 23:27:50 |\n+----+-----------+---------------------+\n3 rows in set (0.00 sec)\n\nmysql> replace into tbl_insert_ignore_replace_duplicate(label) value ('replace');\nQuery OK, 2 rows affected (0.00 sec)\n\nmysql> select * from tbl_insert_ignore_replace_duplicate;\n+----+-----------+---------------------+\n| id | label     | data_update_time    |\n+----+-----------+---------------------+\n|  1 | insert    | 2019-10-16 23:22:21 |\n|  3 | duplicate | 2019-10-16 23:22:21 |\n|  6 | replace   | 2019-10-16 23:28:35 |\n+----+-----------+---------------------+\n3 rows in set (0.00 sec)\n\nmysql> show create table tbl_insert_ignore_replace_duplicate;\n\nCREATE TABLE `tbl_insert_ignore_replace_duplicate` (\n  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '自增主键',\n  `label` varchar(20) NOT NULL COMMENT '唯一标识',\n  `data_update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '数据更新时间',\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `inx_label` (`label`)\n) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC COMMENT='测试insert/ignore/replace/duplicate功能'\n```\n\n若配置了主从同步，则此时 slave 库中 tbl_insert_ignore_replace_duplicate 表的 AUTO_INCREMENT = 4。\n\n当 master 库压力过大或其他情况，需要把 slave 库转为 master 库时，造成 id 在 4-6 区间的数据无法同步到旧 master 库(出现 duplicate key error)\n\n*TODO: 待实践确认*\n\n## Insert Ignore Into\n\n```\nmysql> insert ignore into tbl_insert_ignore_replace_duplicate(label) value ('insert');\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n\n# 无任何\nmysql> select * from tbl_insert_ignore_replace_duplicate;\n+----+-----------+---------------------+\n| id | label     | data_update_time    |\n+----+-----------+---------------------+\n|  1 | insert    | 2019-10-16 23:22:21 |\n|  3 | duplicate | 2019-10-16 23:22:21 |\n|  6 | replace   | 2019-10-16 23:28:35 |\n+----+-----------+---------------------+\n4 rows in set (0.00 sec)\n\n# AUTO_INCREMENT 还是 +1 了！\nmysql> show create table tbl_insert_ignore_replace_duplicate;\n\nCREATE TABLE `tbl_insert_ignore_replace_duplicate` (\n  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '自增主键',\n  `label` varchar(20) NOT NULL COMMENT '唯一标识',\n  `data_update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '数据更新时间',\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `inx_label` (`label`)\n) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC COMMENT='测试insert/ignore/replace/duplicate功能'\n```\n\n## On Duplicate Key Update\n\n```\nmysql> insert into tbl_insert_ignore_replace_duplicate(label) value ('duplicate') on duplicate key update data_update_time = now();\nQuery OK, 2 rows affected (0.01 sec)\n\n# label = duplicate 行更新了 data_update_time 列\nmysql> select * from tbl_insert_ignore_replace_duplicate;\n+----+-----------+---------------------+\n| id | label     | data_update_time    |\n+----+-----------+---------------------+\n|  1 | insert    | 2019-10-16 23:22:21 |\n|  3 | duplicate | 2019-10-16 23:38:33 |\n|  6 | replace   | 2019-10-16 23:28:35 |\n+----+-----------+---------------------+\n4 rows in set (0.00 sec)\n```\n","source":"developer/style-guide/mysql-insert-ignore-replace-duplicate-different.md","raw":"---\ntitle: MySQL Insert 注意事项\ntype: MySQL Insert 注意事项\n---\n\n## Create Table\n\n```\ncreate table if not exists `tbl_insert_ignore_replace_duplicate` (\n  `id` int(11) not null auto_increment comment '自增主键',\n  `label` varchar(20) not null comment '唯一标识',\n  `data_update_time` timestamp not null default current_timestamp comment '数据更新时间',\n  primary key (`id`),\n  unique index `inx_label` (`label`)\n) engine=innodb default charset=utf8 row_format=dynamic comment='测试insert/ignore/replace/duplicate功能';\n```\n\n## Insert Into\n\n```\nmysql > insert into tbl_insert_ignore_replace_duplicate(label) value ('insert'), ('replace'), ('duplicate');\n\nQuery OK, 3 rows affected (0.01 sec)\nRecords: 3  Duplicates: 0  Warnings: 0\n\nmysql> select * from tbl_insert_ignore_replace_duplicate;\n+----+-----------+---------------------+\n| id | label     | data_update_time    |\n+----+-----------+---------------------+\n|  1 | insert    | 2019-10-16 23:22:21 |\n|  2 | replace   | 2019-10-16 23:22:21 |\n|  3 | duplicate | 2019-10-16 23:22:21 |\n+----+-----------+---------------------+\n```\n\n普通 `insert into` 当主键或唯一索引冲突时，MySQL 会异常报错中断执行。\n\n```\nmysql> mysql > insert into tbl_insert_ignore_replace_duplicate(label) value ('insert');\nERROR 1062 (23000): Duplicate entry 'insert' for key 'inx_label'\n\nmysql> show create table tbl_insert_ignore_replace_duplicate;\n\nCREATE TABLE `tbl_insert_ignore_replace_duplicate` (\n  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '自增主键',\n  `label` varchar(20) NOT NULL COMMENT '唯一标识',\n  `data_update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '数据更新时间',\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `inx_label` (`label`)\n) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC COMMENT='测试insert/ignore/replace/duplicate功能'\n```\n\n虽然插入失败，但占用了一次 id+1 机会，即把 id=4 使用了，下次 id 从 5 开始。\n\n*TODO: 待确认 master-slave 集群时，slave 库中表的 `AUTO_INCREMENT` 值与 master 相同*\n\n## Replace Into (禁用)\n\n`replace into` 操作时，当主键或唯一索引冲突时就是普通的 `insert into` 效果。\n\n**但是**，当有主键或唯一索引冲突时，会删除冲突行，重新插入，从而 `id` 自动 `+1`.\n\n```\nmysql> select version();\n+-----------+\n| version() |\n+-----------+\n| 5.7.25    |\n+-----------+\n1 row in set (0.01 sec)\n\nmysql> select * from tbl_insert_ignore_replace_duplicate;\n+----+-----------+---------------------+\n| id | label     | data_update_time    |\n+----+-----------+---------------------+\n|  1 | insert    | 2019-10-16 23:22:21 |\n|  2 | replace   | 2019-10-16 23:22:21 |\n|  3 | duplicate | 2019-10-16 23:22:21 |\n+----+-----------+---------------------+\n3 rows in set (0.00 sec)\n\nmysql> replace into tbl_insert_ignore_replace_duplicate(label) value ('replace');\nQuery OK, 2 rows affected (0.00 sec)\n\n# 上面 insert into 冲突时，造成了 id=(旧id最大值+1)=4\nmysql> select * from tbl_insert_ignore_replace_duplicate;\n+----+-----------+---------------------+\n| id | label     | data_update_time    |\n+----+-----------+---------------------+\n|  1 | insert    | 2019-10-16 23:22:21 |\n|  3 | duplicate | 2019-10-16 23:22:21 |\n|  5 | replace   | 2019-10-16 23:27:50 |\n+----+-----------+---------------------+\n3 rows in set (0.00 sec)\n\nmysql> replace into tbl_insert_ignore_replace_duplicate(label) value ('replace');\nQuery OK, 2 rows affected (0.00 sec)\n\nmysql> select * from tbl_insert_ignore_replace_duplicate;\n+----+-----------+---------------------+\n| id | label     | data_update_time    |\n+----+-----------+---------------------+\n|  1 | insert    | 2019-10-16 23:22:21 |\n|  3 | duplicate | 2019-10-16 23:22:21 |\n|  6 | replace   | 2019-10-16 23:28:35 |\n+----+-----------+---------------------+\n3 rows in set (0.00 sec)\n\nmysql> show create table tbl_insert_ignore_replace_duplicate;\n\nCREATE TABLE `tbl_insert_ignore_replace_duplicate` (\n  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '自增主键',\n  `label` varchar(20) NOT NULL COMMENT '唯一标识',\n  `data_update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '数据更新时间',\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `inx_label` (`label`)\n) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC COMMENT='测试insert/ignore/replace/duplicate功能'\n```\n\n若配置了主从同步，则此时 slave 库中 tbl_insert_ignore_replace_duplicate 表的 AUTO_INCREMENT = 4。\n\n当 master 库压力过大或其他情况，需要把 slave 库转为 master 库时，造成 id 在 4-6 区间的数据无法同步到旧 master 库(出现 duplicate key error)\n\n*TODO: 待实践确认*\n\n## Insert Ignore Into\n\n```\nmysql> insert ignore into tbl_insert_ignore_replace_duplicate(label) value ('insert');\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n\n# 无任何\nmysql> select * from tbl_insert_ignore_replace_duplicate;\n+----+-----------+---------------------+\n| id | label     | data_update_time    |\n+----+-----------+---------------------+\n|  1 | insert    | 2019-10-16 23:22:21 |\n|  3 | duplicate | 2019-10-16 23:22:21 |\n|  6 | replace   | 2019-10-16 23:28:35 |\n+----+-----------+---------------------+\n4 rows in set (0.00 sec)\n\n# AUTO_INCREMENT 还是 +1 了！\nmysql> show create table tbl_insert_ignore_replace_duplicate;\n\nCREATE TABLE `tbl_insert_ignore_replace_duplicate` (\n  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '自增主键',\n  `label` varchar(20) NOT NULL COMMENT '唯一标识',\n  `data_update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '数据更新时间',\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `inx_label` (`label`)\n) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC COMMENT='测试insert/ignore/replace/duplicate功能'\n```\n\n## On Duplicate Key Update\n\n```\nmysql> insert into tbl_insert_ignore_replace_duplicate(label) value ('duplicate') on duplicate key update data_update_time = now();\nQuery OK, 2 rows affected (0.01 sec)\n\n# label = duplicate 行更新了 data_update_time 列\nmysql> select * from tbl_insert_ignore_replace_duplicate;\n+----+-----------+---------------------+\n| id | label     | data_update_time    |\n+----+-----------+---------------------+\n|  1 | insert    | 2019-10-16 23:22:21 |\n|  3 | duplicate | 2019-10-16 23:38:33 |\n|  6 | replace   | 2019-10-16 23:28:35 |\n+----+-----------+---------------------+\n4 rows in set (0.00 sec)\n```\n","date":"2023-06-10T10:49:05.488Z","updated":"2023-06-10T10:49:05.488Z","path":"developer/style-guide/mysql-insert-ignore-replace-duplicate-different.html","comments":1,"layout":"page","_id":"clipw1dd5000voix55ly9ef08","content":"<h2 id=\"Create-Table\"><a href=\"#Create-Table\" class=\"headerlink\" title=\"Create Table\"></a>Create Table</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">create table if not exists `tbl_insert_ignore_replace_duplicate` (<br>  `id` int(11) not null auto_increment comment &#x27;自增主键&#x27;,<br>  `label` varchar(20) not null comment &#x27;唯一标识&#x27;,<br>  `data_update_time` timestamp not null default current_timestamp comment &#x27;数据更新时间&#x27;,<br>  primary key (`id`),<br>  unique index `inx_label` (`label`)<br>) engine=innodb default charset=utf8 row_format=dynamic comment=&#x27;测试insert/ignore/replace/duplicate功能&#x27;;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Insert-Into\"><a href=\"#Insert-Into\" class=\"headerlink\" title=\"Insert Into\"></a>Insert Into</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">mysql &gt; insert into tbl_insert_ignore_replace_duplicate(label) value (&#x27;insert&#x27;), (&#x27;replace&#x27;), (&#x27;duplicate&#x27;);<br><br>Query OK, 3 rows affected (0.01 sec)<br>Records: 3  Duplicates: 0  Warnings: 0<br><br>mysql&gt; select * from tbl_insert_ignore_replace_duplicate;<br>+----+-----------+---------------------+<br>| id | label     | data_update_time    |<br>+----+-----------+---------------------+<br>|  1 | insert    | 2019-10-16 23:22:21 |<br>|  2 | replace   | 2019-10-16 23:22:21 |<br>|  3 | duplicate | 2019-10-16 23:22:21 |<br>+----+-----------+---------------------+<br></code></pre></td></tr></table></figure>\n\n<p>普通 <code>insert into</code> 当主键或唯一索引冲突时，MySQL 会异常报错中断执行。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">mysql&gt; mysql &gt; insert into tbl_insert_ignore_replace_duplicate(label) value (&#x27;insert&#x27;);<br>ERROR 1062 (23000): Duplicate entry &#x27;insert&#x27; for key &#x27;inx_label&#x27;<br><br>mysql&gt; show create table tbl_insert_ignore_replace_duplicate;<br><br>CREATE TABLE `tbl_insert_ignore_replace_duplicate` (<br>  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT &#x27;自增主键&#x27;,<br>  `label` varchar(20) NOT NULL COMMENT &#x27;唯一标识&#x27;,<br>  `data_update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;数据更新时间&#x27;,<br>  PRIMARY KEY (`id`),<br>  UNIQUE KEY `inx_label` (`label`)<br>) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC COMMENT=&#x27;测试insert/ignore/replace/duplicate功能&#x27;<br></code></pre></td></tr></table></figure>\n\n<p>虽然插入失败，但占用了一次 id+1 机会，即把 id&#x3D;4 使用了，下次 id 从 5 开始。</p>\n<p><em>TODO: 待确认 master-slave 集群时，slave 库中表的 <code>AUTO_INCREMENT</code> 值与 master 相同</em></p>\n<h2 id=\"Replace-Into-禁用\"><a href=\"#Replace-Into-禁用\" class=\"headerlink\" title=\"Replace Into (禁用)\"></a>Replace Into (禁用)</h2><p><code>replace into</code> 操作时，当主键或唯一索引冲突时就是普通的 <code>insert into</code> 效果。</p>\n<p><strong>但是</strong>，当有主键或唯一索引冲突时，会删除冲突行，重新插入，从而 <code>id</code> 自动 <code>+1</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">mysql&gt; select version();<br>+-----------+<br>| version() |<br>+-----------+<br>| 5.7.25    |<br>+-----------+<br>1 row in set (0.01 sec)<br><br>mysql&gt; select * from tbl_insert_ignore_replace_duplicate;<br>+----+-----------+---------------------+<br>| id | label     | data_update_time    |<br>+----+-----------+---------------------+<br>|  1 | insert    | 2019-10-16 23:22:21 |<br>|  2 | replace   | 2019-10-16 23:22:21 |<br>|  3 | duplicate | 2019-10-16 23:22:21 |<br>+----+-----------+---------------------+<br>3 rows in set (0.00 sec)<br><br>mysql&gt; replace into tbl_insert_ignore_replace_duplicate(label) value (&#x27;replace&#x27;);<br>Query OK, 2 rows affected (0.00 sec)<br><br># 上面 insert into 冲突时，造成了 id=(旧id最大值+1)=4<br>mysql&gt; select * from tbl_insert_ignore_replace_duplicate;<br>+----+-----------+---------------------+<br>| id | label     | data_update_time    |<br>+----+-----------+---------------------+<br>|  1 | insert    | 2019-10-16 23:22:21 |<br>|  3 | duplicate | 2019-10-16 23:22:21 |<br>|  5 | replace   | 2019-10-16 23:27:50 |<br>+----+-----------+---------------------+<br>3 rows in set (0.00 sec)<br><br>mysql&gt; replace into tbl_insert_ignore_replace_duplicate(label) value (&#x27;replace&#x27;);<br>Query OK, 2 rows affected (0.00 sec)<br><br>mysql&gt; select * from tbl_insert_ignore_replace_duplicate;<br>+----+-----------+---------------------+<br>| id | label     | data_update_time    |<br>+----+-----------+---------------------+<br>|  1 | insert    | 2019-10-16 23:22:21 |<br>|  3 | duplicate | 2019-10-16 23:22:21 |<br>|  6 | replace   | 2019-10-16 23:28:35 |<br>+----+-----------+---------------------+<br>3 rows in set (0.00 sec)<br><br>mysql&gt; show create table tbl_insert_ignore_replace_duplicate;<br><br>CREATE TABLE `tbl_insert_ignore_replace_duplicate` (<br>  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT &#x27;自增主键&#x27;,<br>  `label` varchar(20) NOT NULL COMMENT &#x27;唯一标识&#x27;,<br>  `data_update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;数据更新时间&#x27;,<br>  PRIMARY KEY (`id`),<br>  UNIQUE KEY `inx_label` (`label`)<br>) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC COMMENT=&#x27;测试insert/ignore/replace/duplicate功能&#x27;<br></code></pre></td></tr></table></figure>\n\n<p>若配置了主从同步，则此时 slave 库中 tbl_insert_ignore_replace_duplicate 表的 AUTO_INCREMENT &#x3D; 4。</p>\n<p>当 master 库压力过大或其他情况，需要把 slave 库转为 master 库时，造成 id 在 4-6 区间的数据无法同步到旧 master 库(出现 duplicate key error)</p>\n<p><em>TODO: 待实践确认</em></p>\n<h2 id=\"Insert-Ignore-Into\"><a href=\"#Insert-Ignore-Into\" class=\"headerlink\" title=\"Insert Ignore Into\"></a>Insert Ignore Into</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">mysql&gt; insert ignore into tbl_insert_ignore_replace_duplicate(label) value (&#x27;insert&#x27;);<br>Query OK, 0 rows affected, 1 warning (0.00 sec)<br><br># 无任何<br>mysql&gt; select * from tbl_insert_ignore_replace_duplicate;<br>+----+-----------+---------------------+<br>| id | label     | data_update_time    |<br>+----+-----------+---------------------+<br>|  1 | insert    | 2019-10-16 23:22:21 |<br>|  3 | duplicate | 2019-10-16 23:22:21 |<br>|  6 | replace   | 2019-10-16 23:28:35 |<br>+----+-----------+---------------------+<br>4 rows in set (0.00 sec)<br><br># AUTO_INCREMENT 还是 +1 了！<br>mysql&gt; show create table tbl_insert_ignore_replace_duplicate;<br><br>CREATE TABLE `tbl_insert_ignore_replace_duplicate` (<br>  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT &#x27;自增主键&#x27;,<br>  `label` varchar(20) NOT NULL COMMENT &#x27;唯一标识&#x27;,<br>  `data_update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;数据更新时间&#x27;,<br>  PRIMARY KEY (`id`),<br>  UNIQUE KEY `inx_label` (`label`)<br>) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC COMMENT=&#x27;测试insert/ignore/replace/duplicate功能&#x27;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"On-Duplicate-Key-Update\"><a href=\"#On-Duplicate-Key-Update\" class=\"headerlink\" title=\"On Duplicate Key Update\"></a>On Duplicate Key Update</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">mysql&gt; insert into tbl_insert_ignore_replace_duplicate(label) value (&#x27;duplicate&#x27;) on duplicate key update data_update_time = now();<br>Query OK, 2 rows affected (0.01 sec)<br><br># label = duplicate 行更新了 data_update_time 列<br>mysql&gt; select * from tbl_insert_ignore_replace_duplicate;<br>+----+-----------+---------------------+<br>| id | label     | data_update_time    |<br>+----+-----------+---------------------+<br>|  1 | insert    | 2019-10-16 23:22:21 |<br>|  3 | duplicate | 2019-10-16 23:38:33 |<br>|  6 | replace   | 2019-10-16 23:28:35 |<br>+----+-----------+---------------------+<br>4 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Create-Table\"><a href=\"#Create-Table\" class=\"headerlink\" title=\"Create Table\"></a>Create Table</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">create table if not exists `tbl_insert_ignore_replace_duplicate` (<br>  `id` int(11) not null auto_increment comment &#x27;自增主键&#x27;,<br>  `label` varchar(20) not null comment &#x27;唯一标识&#x27;,<br>  `data_update_time` timestamp not null default current_timestamp comment &#x27;数据更新时间&#x27;,<br>  primary key (`id`),<br>  unique index `inx_label` (`label`)<br>) engine=innodb default charset=utf8 row_format=dynamic comment=&#x27;测试insert/ignore/replace/duplicate功能&#x27;;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Insert-Into\"><a href=\"#Insert-Into\" class=\"headerlink\" title=\"Insert Into\"></a>Insert Into</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">mysql &gt; insert into tbl_insert_ignore_replace_duplicate(label) value (&#x27;insert&#x27;), (&#x27;replace&#x27;), (&#x27;duplicate&#x27;);<br><br>Query OK, 3 rows affected (0.01 sec)<br>Records: 3  Duplicates: 0  Warnings: 0<br><br>mysql&gt; select * from tbl_insert_ignore_replace_duplicate;<br>+----+-----------+---------------------+<br>| id | label     | data_update_time    |<br>+----+-----------+---------------------+<br>|  1 | insert    | 2019-10-16 23:22:21 |<br>|  2 | replace   | 2019-10-16 23:22:21 |<br>|  3 | duplicate | 2019-10-16 23:22:21 |<br>+----+-----------+---------------------+<br></code></pre></td></tr></table></figure>\n\n<p>普通 <code>insert into</code> 当主键或唯一索引冲突时，MySQL 会异常报错中断执行。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">mysql&gt; mysql &gt; insert into tbl_insert_ignore_replace_duplicate(label) value (&#x27;insert&#x27;);<br>ERROR 1062 (23000): Duplicate entry &#x27;insert&#x27; for key &#x27;inx_label&#x27;<br><br>mysql&gt; show create table tbl_insert_ignore_replace_duplicate;<br><br>CREATE TABLE `tbl_insert_ignore_replace_duplicate` (<br>  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT &#x27;自增主键&#x27;,<br>  `label` varchar(20) NOT NULL COMMENT &#x27;唯一标识&#x27;,<br>  `data_update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;数据更新时间&#x27;,<br>  PRIMARY KEY (`id`),<br>  UNIQUE KEY `inx_label` (`label`)<br>) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC COMMENT=&#x27;测试insert/ignore/replace/duplicate功能&#x27;<br></code></pre></td></tr></table></figure>\n\n<p>虽然插入失败，但占用了一次 id+1 机会，即把 id&#x3D;4 使用了，下次 id 从 5 开始。</p>\n<p><em>TODO: 待确认 master-slave 集群时，slave 库中表的 <code>AUTO_INCREMENT</code> 值与 master 相同</em></p>\n<h2 id=\"Replace-Into-禁用\"><a href=\"#Replace-Into-禁用\" class=\"headerlink\" title=\"Replace Into (禁用)\"></a>Replace Into (禁用)</h2><p><code>replace into</code> 操作时，当主键或唯一索引冲突时就是普通的 <code>insert into</code> 效果。</p>\n<p><strong>但是</strong>，当有主键或唯一索引冲突时，会删除冲突行，重新插入，从而 <code>id</code> 自动 <code>+1</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">mysql&gt; select version();<br>+-----------+<br>| version() |<br>+-----------+<br>| 5.7.25    |<br>+-----------+<br>1 row in set (0.01 sec)<br><br>mysql&gt; select * from tbl_insert_ignore_replace_duplicate;<br>+----+-----------+---------------------+<br>| id | label     | data_update_time    |<br>+----+-----------+---------------------+<br>|  1 | insert    | 2019-10-16 23:22:21 |<br>|  2 | replace   | 2019-10-16 23:22:21 |<br>|  3 | duplicate | 2019-10-16 23:22:21 |<br>+----+-----------+---------------------+<br>3 rows in set (0.00 sec)<br><br>mysql&gt; replace into tbl_insert_ignore_replace_duplicate(label) value (&#x27;replace&#x27;);<br>Query OK, 2 rows affected (0.00 sec)<br><br># 上面 insert into 冲突时，造成了 id=(旧id最大值+1)=4<br>mysql&gt; select * from tbl_insert_ignore_replace_duplicate;<br>+----+-----------+---------------------+<br>| id | label     | data_update_time    |<br>+----+-----------+---------------------+<br>|  1 | insert    | 2019-10-16 23:22:21 |<br>|  3 | duplicate | 2019-10-16 23:22:21 |<br>|  5 | replace   | 2019-10-16 23:27:50 |<br>+----+-----------+---------------------+<br>3 rows in set (0.00 sec)<br><br>mysql&gt; replace into tbl_insert_ignore_replace_duplicate(label) value (&#x27;replace&#x27;);<br>Query OK, 2 rows affected (0.00 sec)<br><br>mysql&gt; select * from tbl_insert_ignore_replace_duplicate;<br>+----+-----------+---------------------+<br>| id | label     | data_update_time    |<br>+----+-----------+---------------------+<br>|  1 | insert    | 2019-10-16 23:22:21 |<br>|  3 | duplicate | 2019-10-16 23:22:21 |<br>|  6 | replace   | 2019-10-16 23:28:35 |<br>+----+-----------+---------------------+<br>3 rows in set (0.00 sec)<br><br>mysql&gt; show create table tbl_insert_ignore_replace_duplicate;<br><br>CREATE TABLE `tbl_insert_ignore_replace_duplicate` (<br>  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT &#x27;自增主键&#x27;,<br>  `label` varchar(20) NOT NULL COMMENT &#x27;唯一标识&#x27;,<br>  `data_update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;数据更新时间&#x27;,<br>  PRIMARY KEY (`id`),<br>  UNIQUE KEY `inx_label` (`label`)<br>) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC COMMENT=&#x27;测试insert/ignore/replace/duplicate功能&#x27;<br></code></pre></td></tr></table></figure>\n\n<p>若配置了主从同步，则此时 slave 库中 tbl_insert_ignore_replace_duplicate 表的 AUTO_INCREMENT &#x3D; 4。</p>\n<p>当 master 库压力过大或其他情况，需要把 slave 库转为 master 库时，造成 id 在 4-6 区间的数据无法同步到旧 master 库(出现 duplicate key error)</p>\n<p><em>TODO: 待实践确认</em></p>\n<h2 id=\"Insert-Ignore-Into\"><a href=\"#Insert-Ignore-Into\" class=\"headerlink\" title=\"Insert Ignore Into\"></a>Insert Ignore Into</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">mysql&gt; insert ignore into tbl_insert_ignore_replace_duplicate(label) value (&#x27;insert&#x27;);<br>Query OK, 0 rows affected, 1 warning (0.00 sec)<br><br># 无任何<br>mysql&gt; select * from tbl_insert_ignore_replace_duplicate;<br>+----+-----------+---------------------+<br>| id | label     | data_update_time    |<br>+----+-----------+---------------------+<br>|  1 | insert    | 2019-10-16 23:22:21 |<br>|  3 | duplicate | 2019-10-16 23:22:21 |<br>|  6 | replace   | 2019-10-16 23:28:35 |<br>+----+-----------+---------------------+<br>4 rows in set (0.00 sec)<br><br># AUTO_INCREMENT 还是 +1 了！<br>mysql&gt; show create table tbl_insert_ignore_replace_duplicate;<br><br>CREATE TABLE `tbl_insert_ignore_replace_duplicate` (<br>  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT &#x27;自增主键&#x27;,<br>  `label` varchar(20) NOT NULL COMMENT &#x27;唯一标识&#x27;,<br>  `data_update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;数据更新时间&#x27;,<br>  PRIMARY KEY (`id`),<br>  UNIQUE KEY `inx_label` (`label`)<br>) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC COMMENT=&#x27;测试insert/ignore/replace/duplicate功能&#x27;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"On-Duplicate-Key-Update\"><a href=\"#On-Duplicate-Key-Update\" class=\"headerlink\" title=\"On Duplicate Key Update\"></a>On Duplicate Key Update</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">mysql&gt; insert into tbl_insert_ignore_replace_duplicate(label) value (&#x27;duplicate&#x27;) on duplicate key update data_update_time = now();<br>Query OK, 2 rows affected (0.01 sec)<br><br># label = duplicate 行更新了 data_update_time 列<br>mysql&gt; select * from tbl_insert_ignore_replace_duplicate;<br>+----+-----------+---------------------+<br>| id | label     | data_update_time    |<br>+----+-----------+---------------------+<br>|  1 | insert    | 2019-10-16 23:22:21 |<br>|  3 | duplicate | 2019-10-16 23:38:33 |<br>|  6 | replace   | 2019-10-16 23:28:35 |<br>+----+-----------+---------------------+<br>4 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure>\n"},{"title":"整洁 Java 代码","type":"整洁 Java 代码","_content":"\n## 工具函数\n\n### 整理理念\n\n- 函数式编程，减少业务代码，逻辑一目了然。\n- 通用工具函数，逻辑考虑周全，出问题概率低。\n\n### 场景一：比较对象\n\n```\n// 不完善\nthisName != null && thisName.equals(name);\n\n// 冗余\n(thisName == name) || (thisName != null && thisName.equals(name));\n\n// 整洁\nObjects.equals(name, thisName);\n```\n\n### 场景一：判断对象为空\n\n```\n// 冗余\n!(list == null || list.isEmpty());\n\n// 整洁\nimport org.apache.commons.collections4.CollectionUtils;\nCollectionUtils.isNotEmpty(list);\n```\n\n## 拆分长函数\n\n### 整洁理念\n\n- 函数越短小精悍，功能就越单一，往往生命周期较长；\n- 函数越长越不容易理解和维护，维护人员不敢轻易修改；\n- 过长函数中，往往含有难以发现的重复代码。\n\n理解思路:\n\n- 当函数超过 80 行后，就属于长函数，需要进行拆分。\n- 代码块前方有一行注释，就是提醒你可以将这段代码替换成一个函数。\n- 函数有一个描述恰当的名字，就不需要去看内部代码究竟是如何实现的。\n\n### 场景一：代码块封装为函数\n\n冗余场景:\n\n```\n// 每日生活函数\npublic void liveDaily() {\n    // 吃饭\n    // 吃饭相关代码几十行\n\n    // 编码\n    // 编码相关代码几十行\n\n    // 睡觉\n    // 睡觉相关代码几十行\n}\n```\n\n整洁方案:\n\n```\n// 每日生活函数\npublic void liveDaily() {\n    // 吃饭\n    eat();\n\n    // 编码\n    code();\n\n    // 睡觉\n    sleep();\n}\n\n// 吃饭函数\nprivate void eat() {\n    // 吃饭相关代码\n}\n\n// 编码函数\nprivate void code() {\n    // 编码相关代码\n}\n\n// 睡觉函数\nprivate void sleep() {\n    // 睡觉相关代码\n}\n```\n\n### 场景二：循环体封装为函数\n\n冗余场景:\n\n```\n// 生活函数\npublic void live() {\n    while (isAlive) {\n        // 吃饭\n        eat();\n\n        // 编码\n        code();\n\n        // 睡觉\n        sleep();\n    }\n}\n```\n\n整洁方案:\n\n```\n// 生活函数\npublic void live() {\n    while (isAlive) {\n        // 每日生活\n        liveDaily();\n    }\n}\n\n// 每日生活函数\nprivate void liveDaily() {\n    // 吃饭\n    eat();\n\n    // 编码\n    code();\n\n    // 睡觉\n    sleep();\n}\n```\n\n### 场景三：条件体封装为函数\n\n冗余场景\n\n```\n// 外出函数\npublic void goOut() {\n    // 判断是否周末\n    // 判断是否周末: 是周末则游玩\n    if (isWeekday()) {\n        // 游玩代码几十行\n    }\n    // 判断是否周末: 非周末则工作\n    else {\n        // 工作代码几十行\n    }\n}\n```\n\n整洁方案\n\n```\n// 外出函数\npublic void goOut() {\n    // 判断是否周末\n    // 判断是否周末: 是周末则游玩\n    if (isWeekday()) {\n        play();\n        return;\n    }\n    // 判断是否周末: 非周末则工作\n    else {\n        // work();\n    }\n}\n\n// 游玩函数\nprivate void play() {\n    // 游玩代码几十行\n}\n\n// 工作函数\nprivate void work() {\n    // 工作代码几十行\n}\n```\n\n## 函数内代码块级别尽量一致\n\n### 整洁理念\n\n- 函数调用表明用途，函数实现表达逻辑，层次分明便于理解；\n- 不用层次的代码块放在一起，容易让人觉得代码头重脚轻。\n\n### 场景一：函数与代码块混合\n\n冗余场景\n\n```\n// 每日生活函数\npublic void liveDaily() {\n    // 吃饭\n    eat();\n\n    // 编码\n    code();\n\n    // 睡觉\n    // 睡觉相关代码几十行\n}\n```\n\n整洁方案\n\n```\npublic void liveDaily() {\n    // 吃饭\n    eat();\n\n    // 编码\n    code();\n\n    // 睡觉\n    sleep();\n}\n\n// 睡觉\nprivate void sleep() {\n    // 睡觉相关代码\n}\n```\n\n## 封装相同功能代码为函数\n\n### 整理理念: \n- 封装相似代码为函数，差异性通过函数参数控制。\n- 封装公共函数，减少代码行数，提高代码质量；\n- 封装公共函数，使业务代码更精炼，可读性可维护性更强。\n\n### 场景一：封装相同代码为函数\n\n冗余场景\n\n```\n// 禁用用户函数\npublic void disableUser() {\n    // 禁用黑名单用户\n    List<Long> userIdList = queryBlackUser();\n    for (Long userId : userIdList) {\n        User userUpdate = new User();\n        userUpdate.setId(userId);\n        userUpdate.setEnable(Boolean.FALSE);\n        userDAO.update(userUpdate);\n    }\n\n    // 禁用过期用户\n    userIdList = queryExpiredUser();\n    for (Long userId : userIdList) {\n        User userUpdate = new User();\n        userUpdate.setId(userId);\n        userUpdate.setEnable(Boolean.FALSE);\n        userDAO.update(userUpdate);\n    }\n}\n```\n\n整洁方案\n\n```\n// 禁用用户函数\npublic void disableUser() {\n    // 禁用黑名单用户\n    List<Long> userIdList = queryBlackUser();\n    for (Long userId : userIdList) {\n        disableUser(userId);\n    }\n\n    // 禁用过期用户\n    userIdList = queryExpiredUser();\n    for (Long userId : userIdList) {\n        disableUser(userId);\n    }\n}\n\n// 禁用用户函数\nprivate void disableUser(Long userId) {\n    User userUpdate = new User();\n    userUpdate.setId(userId);\n    userUpdate.setEnable(Boolean.FALSE);\n    userDAO.update(userUpdate);\n}\n```\n\n### 场景二：封装相似代码为函数\n\n冗余场景\n\n```\n// 通过工单函数\npublic void adoptOrder(Long orderId) {\n    Order orderUpdate = new Order();\n    orderUpdate.setId(orderId);\n    orderUpdate.setStatus(OrderStatus.ADOPTED);\n    orderUpdate.setAuditTime(new Date());\n    orderDAO.update(orderUpdate);\n}\n\n// 驳回工单函数\npublic void rejectOrder(Long orderId) {\n    Order orderUpdate = new Order();\n    orderUpdate.setId(orderId);\n    orderUpdate.setStatus(OrderStatus.REJECTED);\n    orderUpdate.setAuditTime(new Date());\n    orderDAO.update(orderUpdate);\n}\n```\n\n整洁方案\n\n```\n// 通过工单函数\npublic void adoptOrder(Long orderId) {\n    auditOrder(orderId, OrderStatus.ADOPTED);\n}\n\n// 驳回工单函数\npublic void rejectOrder(Long orderId) {\n    auditOrder(orderId, OrderStatus.REJECTED);\n}\n\n// 审核工单函数\nprivate void auditOrder(Long orderId, OrderStatus orderStatus) {\n    Order orderUpdate = new Order();\n    orderUpdate.setId(orderId);\n    orderUpdate.setStatus(orderStatus);\n    orderUpdate.setAuditTime(new Date());\n    orderDAO.update(orderUpdate);\n}\n```\n\n## 封装获取`参数值函数`\n\n### 整洁理念\n\n- 把获取参数值从业务函数中独立，使业务逻辑更清晰；\n- 封装的获取参数值为独立函数，在代码中重复使用。\n\n### 场景示例\n\n冗余场景\n\n```\n// 是否通过函数\npublic boolean isPassed(Long userId) {\n    // 获取通过阈值\n    double thisPassThreshold = PASS_THRESHOLD;\n    if (Objects.nonNull(passThreshold)) {\n        thisPassThreshold = passThreshold;\n    }\n\n    // 获取通过率\n    double passRate = getPassRate(userId);\n\n    // 判读是否通过\n    return passRate >= thisPassThreshold;\n}\n```\n\n整洁方案\n\n```\n// 是否通过函数\npublic boolean isPassed(Long userId) {\n    // 获取通过阈值\n    double thisPassThreshold = getPassThreshold();\n\n    // 获取通过率\n    double passRate = getPassRate(userId);\n\n    // 判读是否通过\n    return passRate >= thisPassThreshold;\n}\n\n// 获取通过阈值函数\nprivate double getPassThreshold() {\n    if (Objects.nonNull(passThreshold)) {\n        return passThreshold;\n    }\n    return PASS_THRESHOLD;\n}\n```\n\n## 接口参数化封装相同逻辑\n\n### 整洁理念\n\n- 把核心逻辑从各个业务函数中抽取，使业务代码更清晰更易维护；\n- 避免重复性代码多次编写，精简重复函数越多收益越大。\n\n### 场景示例\n\n冗余场景\n\n```\n// 发送审核员结算数据函数\npublic void sendAuditorSettleData() {\n    List<WorkerSettleData> settleDataList = auditTaskDAO.statAuditorSettleData();\n    for (WorkerSettleData settleData : settleDataList) {\n        WorkerPushData pushData = new WorkerPushData();\n        pushData.setId(settleData.getWorkerId());\n        pushData.setType(WorkerPushDataType.AUDITOR);\n        pushData.setData(settleData);\n        pushService.push(pushData);\n    }\n}\n\n// 发送验收员结算数据函数\npublic void sendCheckerSettleData() {\n    List<WorkerSettleData> settleDataList = auditTaskDAO.statCheckerSettleData();\n    for (WorkerSettleData settleData : settleDataList) {\n        WorkerPushData pushData = new WorkerPushData();\n        pushData.setId(settleData.getWorkerId());\n        pushData.setType(WorkerPushDataType.CHECKER);\n        pushData.setData(settleData);\n        pushService.push(pushData);\n    }\n}\n```\n\n整洁方案\n\n```\n// 发送审核员结算数据函数\npublic void sendAuditorSettleData() {\n    sendWorkerSettleData(WorkerPushDataType.AUDITOR, () -> auditTaskDAO.statAuditorSettleData());\n}\n\n// 发送验收员结算数据函数\npublic void sendCheckerSettleData() {\n    sendWorkerSettleData(WorkerPushDataType.CHECKER, () -> auditTaskDAO.statCheckerSettleData());\n}\n\n// 发送作业员结算数据函数\npublic void sendWorkerSettleData(WorkerPushDataType dataType, WorkerSettleDataProvider dataProvider) {\n    List<WorkerSettleData> settleDataList = dataProvider.statWorkerSettleData();\n    for (WorkerSettleData settleData : settleDataList) {\n        WorkerPushData pushData = new WorkerPushData();\n        pushData.setId(settleData.getWorkerId());\n        pushData.setType(dataType);\n        pushData.setData(settleData);\n        pushService.push(pushData);\n    }\n}\n\n// 作业员结算数据提供者接口\nprivate interface WorkerSettleDataProvider {\n    // 统计作业员结算数据\n    public List<WorkerSettleData> statWorkerSettleData();\n}\n```\n\n## 减少函数代码层级\n\n### 整洁理念\n\n- 代码层级减少，代码缩进减少；\n- 模块划分清晰，方便阅读维护。\n- 过多的缩进会让函数难以阅读。\n- 函数代码层级控制在1-4之间。\n\n### 场景一：提前 `return` 返回函数\n\n冗余场景\n\n```\n// 获取用户余额函数\npublic Double getUserBalance(Long userId) {\n    User user = getUser(userId);\n    if (Objects.nonNull(user)) {\n        UserAccount account = user.getAccount();\n        if (Objects.nonNull(account)) {\n            return account.getBalance();\n        }\n    }\n    return null;\n}\n```\n\n整洁方案\n\n```\n// 获取用户余额函数\npublic Double getUserBalance(Long userId) {\n    // 获取用户信息\n    User user = getUser(userId);\n    if (Objects.isNull(user)) {\n        return null;\n    }\n\n    // 获取用户账户\n    UserAccount account = user.getAccount();\n    if (Objects.isNull(account)) {\n        return null;\n    }\n\n    // 返回账户余额\n    return account.getBalance();\n}\n```\n\n### 场景二：提前 `continue` 结束循环\n\n整洁建议:\n\n- 在循环体中，建议最多使用一次continue。\n- 需要多次 continue 时，把循环体封装为函数。\n\n冗余场景\n\n```\n// 获取合计余额函数\npublic double getTotalBalance(List<User> userList) {\n    // 初始合计余额\n    double totalBalance = 0.0D;\n\n    // 依次累加余额\n    for (User user : userList) {\n        // 获取用户账户\n        UserAccount account = user.getAccount();\n        if (Objects.nonNull(account)) {\n            // 累加用户余额\n            Double balance = account.getBalance();\n            if (Objects.nonNull(balance)) {\n                totalBalance += balance;\n            }\n        }\n    }\n    // 返回合计余额\n    return totalBalance;\n}\n```\n\n整洁方案\n\n```\n// 获取合计余额函数\npublic double getTotalBalance(List<User> userList) {\n    // 初始合计余额\n    double totalBalance = 0.0D;\n\n    // 依次累加余额\n    for (User user : userList) {\n        // 获取用户账户\n        UserAccount account = user.getAccount();\n        if (Objects.isNull(account)) {\n            continue;\n        }\n\n        // 累加用户余额\n        Double balance = account.getBalance();\n        if (Objects.nonNull(balance)) {\n            totalBalance += balance;\n        }\n    }\n\n    // 返回合计余额\n    return totalBalance;\n}\n```\n\n## 封装条件表达式函数\n\n### 整洁理念\n\n- 把条件表达式从业务函数中独立，使业务逻辑更清晰；\n- 封装的条件表达式为独立函数，可以在代码中重复使用。\n\n### 场景一：封装简单条件表达式为函数\n\n冗余场景\n\n```\n// 获取门票价格函数\npublic double getTicketPrice(Date currDate) {\n    if (Objects.nonNull(currDate) && currDate.after(DISCOUNT_BEGIN_DATE)\n        && currDate.before(DISCOUNT_END_DATE)) {\n        return TICKET_PRICE * DISCOUNT_RATE;\n    }\n    return TICKET_PRICE;\n}\n```\n\n整洁方案\n\n```\n// 获取门票价格函数\npublic double getTicketPrice(Date currDate) {\n    if (isDiscountDate(currDate)) {\n        return TICKET_PRICE * DISCOUNT_RATE;\n    }\n    return TICKET_PRICE;\n}\n\n// 是否折扣日期函数\nprivate static boolean isDiscountDate(Date currDate) {\n    return Objects.nonNull(currDate) \n        && currDate.after(DISCOUNT_BEGIN_DATE)\n        && currDate.before(DISCOUNT_END_DATE);\n}\n```\n\n### 场景二：封装复杂条件表达式为函数\n\n整洁建议: 也可以用流式(Stream)编程的过滤来实现。\n\n冗余场景\n\n```\n// 获取土豪用户列表\npublic List<User> getRichUserList(List<User> userList) {\n    // 初始土豪用户列表\n    List<User> richUserList = new ArrayList<>();\n\n    // 依次查找土豪用户\n    for (User user : userList) {\n        // 获取用户账户\n        UserAccount account = user.getAccount();\n        if (Objects.nonNull(account)) {\n            // 判断用户余额\n            Double balance = account.getBalance();\n            if (Objects.nonNull(balance) && balance.compareTo(RICH_THRESHOLD) >= 0) {\n                // 添加土豪用户\n                richUserList.add(user);\n            }\n        }\n    }\n\n    // 返回土豪用户列表\n    return richUserList;\n}\n```\n\n整洁方案\n\n```\n// 获取土豪用户列表\npublic List<User> getRichUserList(List<User> userList) {\n    // 初始土豪用户列表\n    List<User> richUserList = new ArrayList<>();\n\n    // 依次查找土豪用户\n    for (User user : userList) {\n        // 判断土豪用户\n        if (isRichUser(user)) {\n            // 添加土豪用户\n            richUserList.add(user);\n        }\n    }\n\n    // 返回土豪用户列表\n    return richUserList;\n}\n\n// 是否土豪用户\nprivate boolean isRichUser(User user) {\n    // 获取用户账户\n    UserAccount account = user.getAccount();\n    if (Objects.isNull(account)) {\n        return false;\n    }\n\n    // 获取用户余额\n    Double balance = account.getBalance();\n    if (Objects.isNull(balance)) {\n        return false;\n    }\n\n    // 比较用户余额\n    return balance.compareTo(RICH_THRESHOLD) >= 0;\n}\n```\n\n## 避免不必要的空指针判断\n\n### 整洁理念\n\n- 避免不必要的空指针判断，精简业务代码处理逻辑，提高业务代码运行效率；\n- 不必要的空指针判断，属于永远不执行的Death代码，删除有助于代码维护。\n\n### 场景一：MyBatis 返回值\n\nMyBatis是一款优秀的持久层框架，是在项目中使用的最广泛的数据库中间件之一。\n\n通过对MyBatis源码进行分析，查询函数返回的列表和数据项都不为空，在代码中可以不用进行空指针判断。\n\n\n## 参考/摘录\n\n- [Java代码整洁之道](https://blog.csdn.net/qq_32447301/article/details/97042462)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"developer/style-guide/tips-to-keep-java-code-clean.md","raw":"---\ntitle: 整洁 Java 代码\ntype: 整洁 Java 代码\n---\n\n## 工具函数\n\n### 整理理念\n\n- 函数式编程，减少业务代码，逻辑一目了然。\n- 通用工具函数，逻辑考虑周全，出问题概率低。\n\n### 场景一：比较对象\n\n```\n// 不完善\nthisName != null && thisName.equals(name);\n\n// 冗余\n(thisName == name) || (thisName != null && thisName.equals(name));\n\n// 整洁\nObjects.equals(name, thisName);\n```\n\n### 场景一：判断对象为空\n\n```\n// 冗余\n!(list == null || list.isEmpty());\n\n// 整洁\nimport org.apache.commons.collections4.CollectionUtils;\nCollectionUtils.isNotEmpty(list);\n```\n\n## 拆分长函数\n\n### 整洁理念\n\n- 函数越短小精悍，功能就越单一，往往生命周期较长；\n- 函数越长越不容易理解和维护，维护人员不敢轻易修改；\n- 过长函数中，往往含有难以发现的重复代码。\n\n理解思路:\n\n- 当函数超过 80 行后，就属于长函数，需要进行拆分。\n- 代码块前方有一行注释，就是提醒你可以将这段代码替换成一个函数。\n- 函数有一个描述恰当的名字，就不需要去看内部代码究竟是如何实现的。\n\n### 场景一：代码块封装为函数\n\n冗余场景:\n\n```\n// 每日生活函数\npublic void liveDaily() {\n    // 吃饭\n    // 吃饭相关代码几十行\n\n    // 编码\n    // 编码相关代码几十行\n\n    // 睡觉\n    // 睡觉相关代码几十行\n}\n```\n\n整洁方案:\n\n```\n// 每日生活函数\npublic void liveDaily() {\n    // 吃饭\n    eat();\n\n    // 编码\n    code();\n\n    // 睡觉\n    sleep();\n}\n\n// 吃饭函数\nprivate void eat() {\n    // 吃饭相关代码\n}\n\n// 编码函数\nprivate void code() {\n    // 编码相关代码\n}\n\n// 睡觉函数\nprivate void sleep() {\n    // 睡觉相关代码\n}\n```\n\n### 场景二：循环体封装为函数\n\n冗余场景:\n\n```\n// 生活函数\npublic void live() {\n    while (isAlive) {\n        // 吃饭\n        eat();\n\n        // 编码\n        code();\n\n        // 睡觉\n        sleep();\n    }\n}\n```\n\n整洁方案:\n\n```\n// 生活函数\npublic void live() {\n    while (isAlive) {\n        // 每日生活\n        liveDaily();\n    }\n}\n\n// 每日生活函数\nprivate void liveDaily() {\n    // 吃饭\n    eat();\n\n    // 编码\n    code();\n\n    // 睡觉\n    sleep();\n}\n```\n\n### 场景三：条件体封装为函数\n\n冗余场景\n\n```\n// 外出函数\npublic void goOut() {\n    // 判断是否周末\n    // 判断是否周末: 是周末则游玩\n    if (isWeekday()) {\n        // 游玩代码几十行\n    }\n    // 判断是否周末: 非周末则工作\n    else {\n        // 工作代码几十行\n    }\n}\n```\n\n整洁方案\n\n```\n// 外出函数\npublic void goOut() {\n    // 判断是否周末\n    // 判断是否周末: 是周末则游玩\n    if (isWeekday()) {\n        play();\n        return;\n    }\n    // 判断是否周末: 非周末则工作\n    else {\n        // work();\n    }\n}\n\n// 游玩函数\nprivate void play() {\n    // 游玩代码几十行\n}\n\n// 工作函数\nprivate void work() {\n    // 工作代码几十行\n}\n```\n\n## 函数内代码块级别尽量一致\n\n### 整洁理念\n\n- 函数调用表明用途，函数实现表达逻辑，层次分明便于理解；\n- 不用层次的代码块放在一起，容易让人觉得代码头重脚轻。\n\n### 场景一：函数与代码块混合\n\n冗余场景\n\n```\n// 每日生活函数\npublic void liveDaily() {\n    // 吃饭\n    eat();\n\n    // 编码\n    code();\n\n    // 睡觉\n    // 睡觉相关代码几十行\n}\n```\n\n整洁方案\n\n```\npublic void liveDaily() {\n    // 吃饭\n    eat();\n\n    // 编码\n    code();\n\n    // 睡觉\n    sleep();\n}\n\n// 睡觉\nprivate void sleep() {\n    // 睡觉相关代码\n}\n```\n\n## 封装相同功能代码为函数\n\n### 整理理念: \n- 封装相似代码为函数，差异性通过函数参数控制。\n- 封装公共函数，减少代码行数，提高代码质量；\n- 封装公共函数，使业务代码更精炼，可读性可维护性更强。\n\n### 场景一：封装相同代码为函数\n\n冗余场景\n\n```\n// 禁用用户函数\npublic void disableUser() {\n    // 禁用黑名单用户\n    List<Long> userIdList = queryBlackUser();\n    for (Long userId : userIdList) {\n        User userUpdate = new User();\n        userUpdate.setId(userId);\n        userUpdate.setEnable(Boolean.FALSE);\n        userDAO.update(userUpdate);\n    }\n\n    // 禁用过期用户\n    userIdList = queryExpiredUser();\n    for (Long userId : userIdList) {\n        User userUpdate = new User();\n        userUpdate.setId(userId);\n        userUpdate.setEnable(Boolean.FALSE);\n        userDAO.update(userUpdate);\n    }\n}\n```\n\n整洁方案\n\n```\n// 禁用用户函数\npublic void disableUser() {\n    // 禁用黑名单用户\n    List<Long> userIdList = queryBlackUser();\n    for (Long userId : userIdList) {\n        disableUser(userId);\n    }\n\n    // 禁用过期用户\n    userIdList = queryExpiredUser();\n    for (Long userId : userIdList) {\n        disableUser(userId);\n    }\n}\n\n// 禁用用户函数\nprivate void disableUser(Long userId) {\n    User userUpdate = new User();\n    userUpdate.setId(userId);\n    userUpdate.setEnable(Boolean.FALSE);\n    userDAO.update(userUpdate);\n}\n```\n\n### 场景二：封装相似代码为函数\n\n冗余场景\n\n```\n// 通过工单函数\npublic void adoptOrder(Long orderId) {\n    Order orderUpdate = new Order();\n    orderUpdate.setId(orderId);\n    orderUpdate.setStatus(OrderStatus.ADOPTED);\n    orderUpdate.setAuditTime(new Date());\n    orderDAO.update(orderUpdate);\n}\n\n// 驳回工单函数\npublic void rejectOrder(Long orderId) {\n    Order orderUpdate = new Order();\n    orderUpdate.setId(orderId);\n    orderUpdate.setStatus(OrderStatus.REJECTED);\n    orderUpdate.setAuditTime(new Date());\n    orderDAO.update(orderUpdate);\n}\n```\n\n整洁方案\n\n```\n// 通过工单函数\npublic void adoptOrder(Long orderId) {\n    auditOrder(orderId, OrderStatus.ADOPTED);\n}\n\n// 驳回工单函数\npublic void rejectOrder(Long orderId) {\n    auditOrder(orderId, OrderStatus.REJECTED);\n}\n\n// 审核工单函数\nprivate void auditOrder(Long orderId, OrderStatus orderStatus) {\n    Order orderUpdate = new Order();\n    orderUpdate.setId(orderId);\n    orderUpdate.setStatus(orderStatus);\n    orderUpdate.setAuditTime(new Date());\n    orderDAO.update(orderUpdate);\n}\n```\n\n## 封装获取`参数值函数`\n\n### 整洁理念\n\n- 把获取参数值从业务函数中独立，使业务逻辑更清晰；\n- 封装的获取参数值为独立函数，在代码中重复使用。\n\n### 场景示例\n\n冗余场景\n\n```\n// 是否通过函数\npublic boolean isPassed(Long userId) {\n    // 获取通过阈值\n    double thisPassThreshold = PASS_THRESHOLD;\n    if (Objects.nonNull(passThreshold)) {\n        thisPassThreshold = passThreshold;\n    }\n\n    // 获取通过率\n    double passRate = getPassRate(userId);\n\n    // 判读是否通过\n    return passRate >= thisPassThreshold;\n}\n```\n\n整洁方案\n\n```\n// 是否通过函数\npublic boolean isPassed(Long userId) {\n    // 获取通过阈值\n    double thisPassThreshold = getPassThreshold();\n\n    // 获取通过率\n    double passRate = getPassRate(userId);\n\n    // 判读是否通过\n    return passRate >= thisPassThreshold;\n}\n\n// 获取通过阈值函数\nprivate double getPassThreshold() {\n    if (Objects.nonNull(passThreshold)) {\n        return passThreshold;\n    }\n    return PASS_THRESHOLD;\n}\n```\n\n## 接口参数化封装相同逻辑\n\n### 整洁理念\n\n- 把核心逻辑从各个业务函数中抽取，使业务代码更清晰更易维护；\n- 避免重复性代码多次编写，精简重复函数越多收益越大。\n\n### 场景示例\n\n冗余场景\n\n```\n// 发送审核员结算数据函数\npublic void sendAuditorSettleData() {\n    List<WorkerSettleData> settleDataList = auditTaskDAO.statAuditorSettleData();\n    for (WorkerSettleData settleData : settleDataList) {\n        WorkerPushData pushData = new WorkerPushData();\n        pushData.setId(settleData.getWorkerId());\n        pushData.setType(WorkerPushDataType.AUDITOR);\n        pushData.setData(settleData);\n        pushService.push(pushData);\n    }\n}\n\n// 发送验收员结算数据函数\npublic void sendCheckerSettleData() {\n    List<WorkerSettleData> settleDataList = auditTaskDAO.statCheckerSettleData();\n    for (WorkerSettleData settleData : settleDataList) {\n        WorkerPushData pushData = new WorkerPushData();\n        pushData.setId(settleData.getWorkerId());\n        pushData.setType(WorkerPushDataType.CHECKER);\n        pushData.setData(settleData);\n        pushService.push(pushData);\n    }\n}\n```\n\n整洁方案\n\n```\n// 发送审核员结算数据函数\npublic void sendAuditorSettleData() {\n    sendWorkerSettleData(WorkerPushDataType.AUDITOR, () -> auditTaskDAO.statAuditorSettleData());\n}\n\n// 发送验收员结算数据函数\npublic void sendCheckerSettleData() {\n    sendWorkerSettleData(WorkerPushDataType.CHECKER, () -> auditTaskDAO.statCheckerSettleData());\n}\n\n// 发送作业员结算数据函数\npublic void sendWorkerSettleData(WorkerPushDataType dataType, WorkerSettleDataProvider dataProvider) {\n    List<WorkerSettleData> settleDataList = dataProvider.statWorkerSettleData();\n    for (WorkerSettleData settleData : settleDataList) {\n        WorkerPushData pushData = new WorkerPushData();\n        pushData.setId(settleData.getWorkerId());\n        pushData.setType(dataType);\n        pushData.setData(settleData);\n        pushService.push(pushData);\n    }\n}\n\n// 作业员结算数据提供者接口\nprivate interface WorkerSettleDataProvider {\n    // 统计作业员结算数据\n    public List<WorkerSettleData> statWorkerSettleData();\n}\n```\n\n## 减少函数代码层级\n\n### 整洁理念\n\n- 代码层级减少，代码缩进减少；\n- 模块划分清晰，方便阅读维护。\n- 过多的缩进会让函数难以阅读。\n- 函数代码层级控制在1-4之间。\n\n### 场景一：提前 `return` 返回函数\n\n冗余场景\n\n```\n// 获取用户余额函数\npublic Double getUserBalance(Long userId) {\n    User user = getUser(userId);\n    if (Objects.nonNull(user)) {\n        UserAccount account = user.getAccount();\n        if (Objects.nonNull(account)) {\n            return account.getBalance();\n        }\n    }\n    return null;\n}\n```\n\n整洁方案\n\n```\n// 获取用户余额函数\npublic Double getUserBalance(Long userId) {\n    // 获取用户信息\n    User user = getUser(userId);\n    if (Objects.isNull(user)) {\n        return null;\n    }\n\n    // 获取用户账户\n    UserAccount account = user.getAccount();\n    if (Objects.isNull(account)) {\n        return null;\n    }\n\n    // 返回账户余额\n    return account.getBalance();\n}\n```\n\n### 场景二：提前 `continue` 结束循环\n\n整洁建议:\n\n- 在循环体中，建议最多使用一次continue。\n- 需要多次 continue 时，把循环体封装为函数。\n\n冗余场景\n\n```\n// 获取合计余额函数\npublic double getTotalBalance(List<User> userList) {\n    // 初始合计余额\n    double totalBalance = 0.0D;\n\n    // 依次累加余额\n    for (User user : userList) {\n        // 获取用户账户\n        UserAccount account = user.getAccount();\n        if (Objects.nonNull(account)) {\n            // 累加用户余额\n            Double balance = account.getBalance();\n            if (Objects.nonNull(balance)) {\n                totalBalance += balance;\n            }\n        }\n    }\n    // 返回合计余额\n    return totalBalance;\n}\n```\n\n整洁方案\n\n```\n// 获取合计余额函数\npublic double getTotalBalance(List<User> userList) {\n    // 初始合计余额\n    double totalBalance = 0.0D;\n\n    // 依次累加余额\n    for (User user : userList) {\n        // 获取用户账户\n        UserAccount account = user.getAccount();\n        if (Objects.isNull(account)) {\n            continue;\n        }\n\n        // 累加用户余额\n        Double balance = account.getBalance();\n        if (Objects.nonNull(balance)) {\n            totalBalance += balance;\n        }\n    }\n\n    // 返回合计余额\n    return totalBalance;\n}\n```\n\n## 封装条件表达式函数\n\n### 整洁理念\n\n- 把条件表达式从业务函数中独立，使业务逻辑更清晰；\n- 封装的条件表达式为独立函数，可以在代码中重复使用。\n\n### 场景一：封装简单条件表达式为函数\n\n冗余场景\n\n```\n// 获取门票价格函数\npublic double getTicketPrice(Date currDate) {\n    if (Objects.nonNull(currDate) && currDate.after(DISCOUNT_BEGIN_DATE)\n        && currDate.before(DISCOUNT_END_DATE)) {\n        return TICKET_PRICE * DISCOUNT_RATE;\n    }\n    return TICKET_PRICE;\n}\n```\n\n整洁方案\n\n```\n// 获取门票价格函数\npublic double getTicketPrice(Date currDate) {\n    if (isDiscountDate(currDate)) {\n        return TICKET_PRICE * DISCOUNT_RATE;\n    }\n    return TICKET_PRICE;\n}\n\n// 是否折扣日期函数\nprivate static boolean isDiscountDate(Date currDate) {\n    return Objects.nonNull(currDate) \n        && currDate.after(DISCOUNT_BEGIN_DATE)\n        && currDate.before(DISCOUNT_END_DATE);\n}\n```\n\n### 场景二：封装复杂条件表达式为函数\n\n整洁建议: 也可以用流式(Stream)编程的过滤来实现。\n\n冗余场景\n\n```\n// 获取土豪用户列表\npublic List<User> getRichUserList(List<User> userList) {\n    // 初始土豪用户列表\n    List<User> richUserList = new ArrayList<>();\n\n    // 依次查找土豪用户\n    for (User user : userList) {\n        // 获取用户账户\n        UserAccount account = user.getAccount();\n        if (Objects.nonNull(account)) {\n            // 判断用户余额\n            Double balance = account.getBalance();\n            if (Objects.nonNull(balance) && balance.compareTo(RICH_THRESHOLD) >= 0) {\n                // 添加土豪用户\n                richUserList.add(user);\n            }\n        }\n    }\n\n    // 返回土豪用户列表\n    return richUserList;\n}\n```\n\n整洁方案\n\n```\n// 获取土豪用户列表\npublic List<User> getRichUserList(List<User> userList) {\n    // 初始土豪用户列表\n    List<User> richUserList = new ArrayList<>();\n\n    // 依次查找土豪用户\n    for (User user : userList) {\n        // 判断土豪用户\n        if (isRichUser(user)) {\n            // 添加土豪用户\n            richUserList.add(user);\n        }\n    }\n\n    // 返回土豪用户列表\n    return richUserList;\n}\n\n// 是否土豪用户\nprivate boolean isRichUser(User user) {\n    // 获取用户账户\n    UserAccount account = user.getAccount();\n    if (Objects.isNull(account)) {\n        return false;\n    }\n\n    // 获取用户余额\n    Double balance = account.getBalance();\n    if (Objects.isNull(balance)) {\n        return false;\n    }\n\n    // 比较用户余额\n    return balance.compareTo(RICH_THRESHOLD) >= 0;\n}\n```\n\n## 避免不必要的空指针判断\n\n### 整洁理念\n\n- 避免不必要的空指针判断，精简业务代码处理逻辑，提高业务代码运行效率；\n- 不必要的空指针判断，属于永远不执行的Death代码，删除有助于代码维护。\n\n### 场景一：MyBatis 返回值\n\nMyBatis是一款优秀的持久层框架，是在项目中使用的最广泛的数据库中间件之一。\n\n通过对MyBatis源码进行分析，查询函数返回的列表和数据项都不为空，在代码中可以不用进行空指针判断。\n\n\n## 参考/摘录\n\n- [Java代码整洁之道](https://blog.csdn.net/qq_32447301/article/details/97042462)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","date":"2023-06-10T10:49:05.489Z","updated":"2023-06-10T10:49:05.489Z","path":"developer/style-guide/tips-to-keep-java-code-clean.html","comments":1,"layout":"page","_id":"clipw1dd5000woix5gntx9gz9","content":"<h2 id=\"工具函数\"><a href=\"#工具函数\" class=\"headerlink\" title=\"工具函数\"></a>工具函数</h2><h3 id=\"整理理念\"><a href=\"#整理理念\" class=\"headerlink\" title=\"整理理念\"></a>整理理念</h3><ul>\n<li>函数式编程，减少业务代码，逻辑一目了然。</li>\n<li>通用工具函数，逻辑考虑周全，出问题概率低。</li>\n</ul>\n<h3 id=\"场景一：比较对象\"><a href=\"#场景一：比较对象\" class=\"headerlink\" title=\"场景一：比较对象\"></a>场景一：比较对象</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不完善<br>thisName != null &amp;&amp; thisName.equals(name);<br><br>// 冗余<br>(thisName == name) || (thisName != null &amp;&amp; thisName.equals(name));<br><br>// 整洁<br>Objects.equals(name, thisName);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"场景一：判断对象为空\"><a href=\"#场景一：判断对象为空\" class=\"headerlink\" title=\"场景一：判断对象为空\"></a>场景一：判断对象为空</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 冗余<br>!(list == null || list.isEmpty());<br><br>// 整洁<br>import org.apache.commons.collections4.CollectionUtils;<br>CollectionUtils.isNotEmpty(list);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"拆分长函数\"><a href=\"#拆分长函数\" class=\"headerlink\" title=\"拆分长函数\"></a>拆分长函数</h2><h3 id=\"整洁理念\"><a href=\"#整洁理念\" class=\"headerlink\" title=\"整洁理念\"></a>整洁理念</h3><ul>\n<li>函数越短小精悍，功能就越单一，往往生命周期较长；</li>\n<li>函数越长越不容易理解和维护，维护人员不敢轻易修改；</li>\n<li>过长函数中，往往含有难以发现的重复代码。</li>\n</ul>\n<p>理解思路:</p>\n<ul>\n<li>当函数超过 80 行后，就属于长函数，需要进行拆分。</li>\n<li>代码块前方有一行注释，就是提醒你可以将这段代码替换成一个函数。</li>\n<li>函数有一个描述恰当的名字，就不需要去看内部代码究竟是如何实现的。</li>\n</ul>\n<h3 id=\"场景一：代码块封装为函数\"><a href=\"#场景一：代码块封装为函数\" class=\"headerlink\" title=\"场景一：代码块封装为函数\"></a>场景一：代码块封装为函数</h3><p>冗余场景:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 每日生活函数<br>public void liveDaily() &#123;<br>    // 吃饭<br>    // 吃饭相关代码几十行<br><br>    // 编码<br>    // 编码相关代码几十行<br><br>    // 睡觉<br>    // 睡觉相关代码几十行<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>整洁方案:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 每日生活函数<br>public void liveDaily() &#123;<br>    // 吃饭<br>    eat();<br><br>    // 编码<br>    code();<br><br>    // 睡觉<br>    sleep();<br>&#125;<br><br>// 吃饭函数<br>private void eat() &#123;<br>    // 吃饭相关代码<br>&#125;<br><br>// 编码函数<br>private void code() &#123;<br>    // 编码相关代码<br>&#125;<br><br>// 睡觉函数<br>private void sleep() &#123;<br>    // 睡觉相关代码<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"场景二：循环体封装为函数\"><a href=\"#场景二：循环体封装为函数\" class=\"headerlink\" title=\"场景二：循环体封装为函数\"></a>场景二：循环体封装为函数</h3><p>冗余场景:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 生活函数<br>public void live() &#123;<br>    while (isAlive) &#123;<br>        // 吃饭<br>        eat();<br><br>        // 编码<br>        code();<br><br>        // 睡觉<br>        sleep();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>整洁方案:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 生活函数<br>public void live() &#123;<br>    while (isAlive) &#123;<br>        // 每日生活<br>        liveDaily();<br>    &#125;<br>&#125;<br><br>// 每日生活函数<br>private void liveDaily() &#123;<br>    // 吃饭<br>    eat();<br><br>    // 编码<br>    code();<br><br>    // 睡觉<br>    sleep();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"场景三：条件体封装为函数\"><a href=\"#场景三：条件体封装为函数\" class=\"headerlink\" title=\"场景三：条件体封装为函数\"></a>场景三：条件体封装为函数</h3><p>冗余场景</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 外出函数<br>public void goOut() &#123;<br>    // 判断是否周末<br>    // 判断是否周末: 是周末则游玩<br>    if (isWeekday()) &#123;<br>        // 游玩代码几十行<br>    &#125;<br>    // 判断是否周末: 非周末则工作<br>    else &#123;<br>        // 工作代码几十行<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>整洁方案</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 外出函数<br>public void goOut() &#123;<br>    // 判断是否周末<br>    // 判断是否周末: 是周末则游玩<br>    if (isWeekday()) &#123;<br>        play();<br>        return;<br>    &#125;<br>    // 判断是否周末: 非周末则工作<br>    else &#123;<br>        // work();<br>    &#125;<br>&#125;<br><br>// 游玩函数<br>private void play() &#123;<br>    // 游玩代码几十行<br>&#125;<br><br>// 工作函数<br>private void work() &#123;<br>    // 工作代码几十行<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"函数内代码块级别尽量一致\"><a href=\"#函数内代码块级别尽量一致\" class=\"headerlink\" title=\"函数内代码块级别尽量一致\"></a>函数内代码块级别尽量一致</h2><h3 id=\"整洁理念-1\"><a href=\"#整洁理念-1\" class=\"headerlink\" title=\"整洁理念\"></a>整洁理念</h3><ul>\n<li>函数调用表明用途，函数实现表达逻辑，层次分明便于理解；</li>\n<li>不用层次的代码块放在一起，容易让人觉得代码头重脚轻。</li>\n</ul>\n<h3 id=\"场景一：函数与代码块混合\"><a href=\"#场景一：函数与代码块混合\" class=\"headerlink\" title=\"场景一：函数与代码块混合\"></a>场景一：函数与代码块混合</h3><p>冗余场景</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 每日生活函数<br>public void liveDaily() &#123;<br>    // 吃饭<br>    eat();<br><br>    // 编码<br>    code();<br><br>    // 睡觉<br>    // 睡觉相关代码几十行<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>整洁方案</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">public void liveDaily() &#123;<br>    // 吃饭<br>    eat();<br><br>    // 编码<br>    code();<br><br>    // 睡觉<br>    sleep();<br>&#125;<br><br>// 睡觉<br>private void sleep() &#123;<br>    // 睡觉相关代码<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"封装相同功能代码为函数\"><a href=\"#封装相同功能代码为函数\" class=\"headerlink\" title=\"封装相同功能代码为函数\"></a>封装相同功能代码为函数</h2><h3 id=\"整理理念-1\"><a href=\"#整理理念-1\" class=\"headerlink\" title=\"整理理念:\"></a>整理理念:</h3><ul>\n<li>封装相似代码为函数，差异性通过函数参数控制。</li>\n<li>封装公共函数，减少代码行数，提高代码质量；</li>\n<li>封装公共函数，使业务代码更精炼，可读性可维护性更强。</li>\n</ul>\n<h3 id=\"场景一：封装相同代码为函数\"><a href=\"#场景一：封装相同代码为函数\" class=\"headerlink\" title=\"场景一：封装相同代码为函数\"></a>场景一：封装相同代码为函数</h3><p>冗余场景</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 禁用用户函数<br>public void disableUser() &#123;<br>    // 禁用黑名单用户<br>    List&lt;Long&gt; userIdList = queryBlackUser();<br>    for (Long userId : userIdList) &#123;<br>        User userUpdate = new User();<br>        userUpdate.setId(userId);<br>        userUpdate.setEnable(Boolean.FALSE);<br>        userDAO.update(userUpdate);<br>    &#125;<br><br>    // 禁用过期用户<br>    userIdList = queryExpiredUser();<br>    for (Long userId : userIdList) &#123;<br>        User userUpdate = new User();<br>        userUpdate.setId(userId);<br>        userUpdate.setEnable(Boolean.FALSE);<br>        userDAO.update(userUpdate);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>整洁方案</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 禁用用户函数<br>public void disableUser() &#123;<br>    // 禁用黑名单用户<br>    List&lt;Long&gt; userIdList = queryBlackUser();<br>    for (Long userId : userIdList) &#123;<br>        disableUser(userId);<br>    &#125;<br><br>    // 禁用过期用户<br>    userIdList = queryExpiredUser();<br>    for (Long userId : userIdList) &#123;<br>        disableUser(userId);<br>    &#125;<br>&#125;<br><br>// 禁用用户函数<br>private void disableUser(Long userId) &#123;<br>    User userUpdate = new User();<br>    userUpdate.setId(userId);<br>    userUpdate.setEnable(Boolean.FALSE);<br>    userDAO.update(userUpdate);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"场景二：封装相似代码为函数\"><a href=\"#场景二：封装相似代码为函数\" class=\"headerlink\" title=\"场景二：封装相似代码为函数\"></a>场景二：封装相似代码为函数</h3><p>冗余场景</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 通过工单函数<br>public void adoptOrder(Long orderId) &#123;<br>    Order orderUpdate = new Order();<br>    orderUpdate.setId(orderId);<br>    orderUpdate.setStatus(OrderStatus.ADOPTED);<br>    orderUpdate.setAuditTime(new Date());<br>    orderDAO.update(orderUpdate);<br>&#125;<br><br>// 驳回工单函数<br>public void rejectOrder(Long orderId) &#123;<br>    Order orderUpdate = new Order();<br>    orderUpdate.setId(orderId);<br>    orderUpdate.setStatus(OrderStatus.REJECTED);<br>    orderUpdate.setAuditTime(new Date());<br>    orderDAO.update(orderUpdate);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>整洁方案</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 通过工单函数<br>public void adoptOrder(Long orderId) &#123;<br>    auditOrder(orderId, OrderStatus.ADOPTED);<br>&#125;<br><br>// 驳回工单函数<br>public void rejectOrder(Long orderId) &#123;<br>    auditOrder(orderId, OrderStatus.REJECTED);<br>&#125;<br><br>// 审核工单函数<br>private void auditOrder(Long orderId, OrderStatus orderStatus) &#123;<br>    Order orderUpdate = new Order();<br>    orderUpdate.setId(orderId);<br>    orderUpdate.setStatus(orderStatus);<br>    orderUpdate.setAuditTime(new Date());<br>    orderDAO.update(orderUpdate);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"封装获取参数值函数\"><a href=\"#封装获取参数值函数\" class=\"headerlink\" title=\"封装获取参数值函数\"></a>封装获取<code>参数值函数</code></h2><h3 id=\"整洁理念-2\"><a href=\"#整洁理念-2\" class=\"headerlink\" title=\"整洁理念\"></a>整洁理念</h3><ul>\n<li>把获取参数值从业务函数中独立，使业务逻辑更清晰；</li>\n<li>封装的获取参数值为独立函数，在代码中重复使用。</li>\n</ul>\n<h3 id=\"场景示例\"><a href=\"#场景示例\" class=\"headerlink\" title=\"场景示例\"></a>场景示例</h3><p>冗余场景</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 是否通过函数<br>public boolean isPassed(Long userId) &#123;<br>    // 获取通过阈值<br>    double thisPassThreshold = PASS_THRESHOLD;<br>    if (Objects.nonNull(passThreshold)) &#123;<br>        thisPassThreshold = passThreshold;<br>    &#125;<br><br>    // 获取通过率<br>    double passRate = getPassRate(userId);<br><br>    // 判读是否通过<br>    return passRate &gt;= thisPassThreshold;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>整洁方案</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 是否通过函数<br>public boolean isPassed(Long userId) &#123;<br>    // 获取通过阈值<br>    double thisPassThreshold = getPassThreshold();<br><br>    // 获取通过率<br>    double passRate = getPassRate(userId);<br><br>    // 判读是否通过<br>    return passRate &gt;= thisPassThreshold;<br>&#125;<br><br>// 获取通过阈值函数<br>private double getPassThreshold() &#123;<br>    if (Objects.nonNull(passThreshold)) &#123;<br>        return passThreshold;<br>    &#125;<br>    return PASS_THRESHOLD;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"接口参数化封装相同逻辑\"><a href=\"#接口参数化封装相同逻辑\" class=\"headerlink\" title=\"接口参数化封装相同逻辑\"></a>接口参数化封装相同逻辑</h2><h3 id=\"整洁理念-3\"><a href=\"#整洁理念-3\" class=\"headerlink\" title=\"整洁理念\"></a>整洁理念</h3><ul>\n<li>把核心逻辑从各个业务函数中抽取，使业务代码更清晰更易维护；</li>\n<li>避免重复性代码多次编写，精简重复函数越多收益越大。</li>\n</ul>\n<h3 id=\"场景示例-1\"><a href=\"#场景示例-1\" class=\"headerlink\" title=\"场景示例\"></a>场景示例</h3><p>冗余场景</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 发送审核员结算数据函数<br>public void sendAuditorSettleData() &#123;<br>    List&lt;WorkerSettleData&gt; settleDataList = auditTaskDAO.statAuditorSettleData();<br>    for (WorkerSettleData settleData : settleDataList) &#123;<br>        WorkerPushData pushData = new WorkerPushData();<br>        pushData.setId(settleData.getWorkerId());<br>        pushData.setType(WorkerPushDataType.AUDITOR);<br>        pushData.setData(settleData);<br>        pushService.push(pushData);<br>    &#125;<br>&#125;<br><br>// 发送验收员结算数据函数<br>public void sendCheckerSettleData() &#123;<br>    List&lt;WorkerSettleData&gt; settleDataList = auditTaskDAO.statCheckerSettleData();<br>    for (WorkerSettleData settleData : settleDataList) &#123;<br>        WorkerPushData pushData = new WorkerPushData();<br>        pushData.setId(settleData.getWorkerId());<br>        pushData.setType(WorkerPushDataType.CHECKER);<br>        pushData.setData(settleData);<br>        pushService.push(pushData);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>整洁方案</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 发送审核员结算数据函数<br>public void sendAuditorSettleData() &#123;<br>    sendWorkerSettleData(WorkerPushDataType.AUDITOR, () -&gt; auditTaskDAO.statAuditorSettleData());<br>&#125;<br><br>// 发送验收员结算数据函数<br>public void sendCheckerSettleData() &#123;<br>    sendWorkerSettleData(WorkerPushDataType.CHECKER, () -&gt; auditTaskDAO.statCheckerSettleData());<br>&#125;<br><br>// 发送作业员结算数据函数<br>public void sendWorkerSettleData(WorkerPushDataType dataType, WorkerSettleDataProvider dataProvider) &#123;<br>    List&lt;WorkerSettleData&gt; settleDataList = dataProvider.statWorkerSettleData();<br>    for (WorkerSettleData settleData : settleDataList) &#123;<br>        WorkerPushData pushData = new WorkerPushData();<br>        pushData.setId(settleData.getWorkerId());<br>        pushData.setType(dataType);<br>        pushData.setData(settleData);<br>        pushService.push(pushData);<br>    &#125;<br>&#125;<br><br>// 作业员结算数据提供者接口<br>private interface WorkerSettleDataProvider &#123;<br>    // 统计作业员结算数据<br>    public List&lt;WorkerSettleData&gt; statWorkerSettleData();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"减少函数代码层级\"><a href=\"#减少函数代码层级\" class=\"headerlink\" title=\"减少函数代码层级\"></a>减少函数代码层级</h2><h3 id=\"整洁理念-4\"><a href=\"#整洁理念-4\" class=\"headerlink\" title=\"整洁理念\"></a>整洁理念</h3><ul>\n<li>代码层级减少，代码缩进减少；</li>\n<li>模块划分清晰，方便阅读维护。</li>\n<li>过多的缩进会让函数难以阅读。</li>\n<li>函数代码层级控制在1-4之间。</li>\n</ul>\n<h3 id=\"场景一：提前-return-返回函数\"><a href=\"#场景一：提前-return-返回函数\" class=\"headerlink\" title=\"场景一：提前 return 返回函数\"></a>场景一：提前 <code>return</code> 返回函数</h3><p>冗余场景</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 获取用户余额函数<br>public Double getUserBalance(Long userId) &#123;<br>    User user = getUser(userId);<br>    if (Objects.nonNull(user)) &#123;<br>        UserAccount account = user.getAccount();<br>        if (Objects.nonNull(account)) &#123;<br>            return account.getBalance();<br>        &#125;<br>    &#125;<br>    return null;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>整洁方案</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 获取用户余额函数<br>public Double getUserBalance(Long userId) &#123;<br>    // 获取用户信息<br>    User user = getUser(userId);<br>    if (Objects.isNull(user)) &#123;<br>        return null;<br>    &#125;<br><br>    // 获取用户账户<br>    UserAccount account = user.getAccount();<br>    if (Objects.isNull(account)) &#123;<br>        return null;<br>    &#125;<br><br>    // 返回账户余额<br>    return account.getBalance();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"场景二：提前-continue-结束循环\"><a href=\"#场景二：提前-continue-结束循环\" class=\"headerlink\" title=\"场景二：提前 continue 结束循环\"></a>场景二：提前 <code>continue</code> 结束循环</h3><p>整洁建议:</p>\n<ul>\n<li>在循环体中，建议最多使用一次continue。</li>\n<li>需要多次 continue 时，把循环体封装为函数。</li>\n</ul>\n<p>冗余场景</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 获取合计余额函数<br>public double getTotalBalance(List&lt;User&gt; userList) &#123;<br>    // 初始合计余额<br>    double totalBalance = 0.0D;<br><br>    // 依次累加余额<br>    for (User user : userList) &#123;<br>        // 获取用户账户<br>        UserAccount account = user.getAccount();<br>        if (Objects.nonNull(account)) &#123;<br>            // 累加用户余额<br>            Double balance = account.getBalance();<br>            if (Objects.nonNull(balance)) &#123;<br>                totalBalance += balance;<br>            &#125;<br>        &#125;<br>    &#125;<br>    // 返回合计余额<br>    return totalBalance;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>整洁方案</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 获取合计余额函数<br>public double getTotalBalance(List&lt;User&gt; userList) &#123;<br>    // 初始合计余额<br>    double totalBalance = 0.0D;<br><br>    // 依次累加余额<br>    for (User user : userList) &#123;<br>        // 获取用户账户<br>        UserAccount account = user.getAccount();<br>        if (Objects.isNull(account)) &#123;<br>            continue;<br>        &#125;<br><br>        // 累加用户余额<br>        Double balance = account.getBalance();<br>        if (Objects.nonNull(balance)) &#123;<br>            totalBalance += balance;<br>        &#125;<br>    &#125;<br><br>    // 返回合计余额<br>    return totalBalance;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"封装条件表达式函数\"><a href=\"#封装条件表达式函数\" class=\"headerlink\" title=\"封装条件表达式函数\"></a>封装条件表达式函数</h2><h3 id=\"整洁理念-5\"><a href=\"#整洁理念-5\" class=\"headerlink\" title=\"整洁理念\"></a>整洁理念</h3><ul>\n<li>把条件表达式从业务函数中独立，使业务逻辑更清晰；</li>\n<li>封装的条件表达式为独立函数，可以在代码中重复使用。</li>\n</ul>\n<h3 id=\"场景一：封装简单条件表达式为函数\"><a href=\"#场景一：封装简单条件表达式为函数\" class=\"headerlink\" title=\"场景一：封装简单条件表达式为函数\"></a>场景一：封装简单条件表达式为函数</h3><p>冗余场景</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 获取门票价格函数<br>public double getTicketPrice(Date currDate) &#123;<br>    if (Objects.nonNull(currDate) &amp;&amp; currDate.after(DISCOUNT_BEGIN_DATE)<br>        &amp;&amp; currDate.before(DISCOUNT_END_DATE)) &#123;<br>        return TICKET_PRICE * DISCOUNT_RATE;<br>    &#125;<br>    return TICKET_PRICE;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>整洁方案</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 获取门票价格函数<br>public double getTicketPrice(Date currDate) &#123;<br>    if (isDiscountDate(currDate)) &#123;<br>        return TICKET_PRICE * DISCOUNT_RATE;<br>    &#125;<br>    return TICKET_PRICE;<br>&#125;<br><br>// 是否折扣日期函数<br>private static boolean isDiscountDate(Date currDate) &#123;<br>    return Objects.nonNull(currDate) <br>        &amp;&amp; currDate.after(DISCOUNT_BEGIN_DATE)<br>        &amp;&amp; currDate.before(DISCOUNT_END_DATE);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"场景二：封装复杂条件表达式为函数\"><a href=\"#场景二：封装复杂条件表达式为函数\" class=\"headerlink\" title=\"场景二：封装复杂条件表达式为函数\"></a>场景二：封装复杂条件表达式为函数</h3><p>整洁建议: 也可以用流式(Stream)编程的过滤来实现。</p>\n<p>冗余场景</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 获取土豪用户列表<br>public List&lt;User&gt; getRichUserList(List&lt;User&gt; userList) &#123;<br>    // 初始土豪用户列表<br>    List&lt;User&gt; richUserList = new ArrayList&lt;&gt;();<br><br>    // 依次查找土豪用户<br>    for (User user : userList) &#123;<br>        // 获取用户账户<br>        UserAccount account = user.getAccount();<br>        if (Objects.nonNull(account)) &#123;<br>            // 判断用户余额<br>            Double balance = account.getBalance();<br>            if (Objects.nonNull(balance) &amp;&amp; balance.compareTo(RICH_THRESHOLD) &gt;= 0) &#123;<br>                // 添加土豪用户<br>                richUserList.add(user);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    // 返回土豪用户列表<br>    return richUserList;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>整洁方案</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 获取土豪用户列表<br>public List&lt;User&gt; getRichUserList(List&lt;User&gt; userList) &#123;<br>    // 初始土豪用户列表<br>    List&lt;User&gt; richUserList = new ArrayList&lt;&gt;();<br><br>    // 依次查找土豪用户<br>    for (User user : userList) &#123;<br>        // 判断土豪用户<br>        if (isRichUser(user)) &#123;<br>            // 添加土豪用户<br>            richUserList.add(user);<br>        &#125;<br>    &#125;<br><br>    // 返回土豪用户列表<br>    return richUserList;<br>&#125;<br><br>// 是否土豪用户<br>private boolean isRichUser(User user) &#123;<br>    // 获取用户账户<br>    UserAccount account = user.getAccount();<br>    if (Objects.isNull(account)) &#123;<br>        return false;<br>    &#125;<br><br>    // 获取用户余额<br>    Double balance = account.getBalance();<br>    if (Objects.isNull(balance)) &#123;<br>        return false;<br>    &#125;<br><br>    // 比较用户余额<br>    return balance.compareTo(RICH_THRESHOLD) &gt;= 0;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"避免不必要的空指针判断\"><a href=\"#避免不必要的空指针判断\" class=\"headerlink\" title=\"避免不必要的空指针判断\"></a>避免不必要的空指针判断</h2><h3 id=\"整洁理念-6\"><a href=\"#整洁理念-6\" class=\"headerlink\" title=\"整洁理念\"></a>整洁理念</h3><ul>\n<li>避免不必要的空指针判断，精简业务代码处理逻辑，提高业务代码运行效率；</li>\n<li>不必要的空指针判断，属于永远不执行的Death代码，删除有助于代码维护。</li>\n</ul>\n<h3 id=\"场景一：MyBatis-返回值\"><a href=\"#场景一：MyBatis-返回值\" class=\"headerlink\" title=\"场景一：MyBatis 返回值\"></a>场景一：MyBatis 返回值</h3><p>MyBatis是一款优秀的持久层框架，是在项目中使用的最广泛的数据库中间件之一。</p>\n<p>通过对MyBatis源码进行分析，查询函数返回的列表和数据项都不为空，在代码中可以不用进行空指针判断。</p>\n<h2 id=\"参考-x2F-摘录\"><a href=\"#参考-x2F-摘录\" class=\"headerlink\" title=\"参考&#x2F;摘录\"></a>参考&#x2F;摘录</h2><ul>\n<li><a href=\"https://blog.csdn.net/qq_32447301/article/details/97042462\">Java代码整洁之道</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"工具函数\"><a href=\"#工具函数\" class=\"headerlink\" title=\"工具函数\"></a>工具函数</h2><h3 id=\"整理理念\"><a href=\"#整理理念\" class=\"headerlink\" title=\"整理理念\"></a>整理理念</h3><ul>\n<li>函数式编程，减少业务代码，逻辑一目了然。</li>\n<li>通用工具函数，逻辑考虑周全，出问题概率低。</li>\n</ul>\n<h3 id=\"场景一：比较对象\"><a href=\"#场景一：比较对象\" class=\"headerlink\" title=\"场景一：比较对象\"></a>场景一：比较对象</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 不完善<br>thisName != null &amp;&amp; thisName.equals(name);<br><br>// 冗余<br>(thisName == name) || (thisName != null &amp;&amp; thisName.equals(name));<br><br>// 整洁<br>Objects.equals(name, thisName);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"场景一：判断对象为空\"><a href=\"#场景一：判断对象为空\" class=\"headerlink\" title=\"场景一：判断对象为空\"></a>场景一：判断对象为空</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 冗余<br>!(list == null || list.isEmpty());<br><br>// 整洁<br>import org.apache.commons.collections4.CollectionUtils;<br>CollectionUtils.isNotEmpty(list);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"拆分长函数\"><a href=\"#拆分长函数\" class=\"headerlink\" title=\"拆分长函数\"></a>拆分长函数</h2><h3 id=\"整洁理念\"><a href=\"#整洁理念\" class=\"headerlink\" title=\"整洁理念\"></a>整洁理念</h3><ul>\n<li>函数越短小精悍，功能就越单一，往往生命周期较长；</li>\n<li>函数越长越不容易理解和维护，维护人员不敢轻易修改；</li>\n<li>过长函数中，往往含有难以发现的重复代码。</li>\n</ul>\n<p>理解思路:</p>\n<ul>\n<li>当函数超过 80 行后，就属于长函数，需要进行拆分。</li>\n<li>代码块前方有一行注释，就是提醒你可以将这段代码替换成一个函数。</li>\n<li>函数有一个描述恰当的名字，就不需要去看内部代码究竟是如何实现的。</li>\n</ul>\n<h3 id=\"场景一：代码块封装为函数\"><a href=\"#场景一：代码块封装为函数\" class=\"headerlink\" title=\"场景一：代码块封装为函数\"></a>场景一：代码块封装为函数</h3><p>冗余场景:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 每日生活函数<br>public void liveDaily() &#123;<br>    // 吃饭<br>    // 吃饭相关代码几十行<br><br>    // 编码<br>    // 编码相关代码几十行<br><br>    // 睡觉<br>    // 睡觉相关代码几十行<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>整洁方案:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 每日生活函数<br>public void liveDaily() &#123;<br>    // 吃饭<br>    eat();<br><br>    // 编码<br>    code();<br><br>    // 睡觉<br>    sleep();<br>&#125;<br><br>// 吃饭函数<br>private void eat() &#123;<br>    // 吃饭相关代码<br>&#125;<br><br>// 编码函数<br>private void code() &#123;<br>    // 编码相关代码<br>&#125;<br><br>// 睡觉函数<br>private void sleep() &#123;<br>    // 睡觉相关代码<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"场景二：循环体封装为函数\"><a href=\"#场景二：循环体封装为函数\" class=\"headerlink\" title=\"场景二：循环体封装为函数\"></a>场景二：循环体封装为函数</h3><p>冗余场景:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 生活函数<br>public void live() &#123;<br>    while (isAlive) &#123;<br>        // 吃饭<br>        eat();<br><br>        // 编码<br>        code();<br><br>        // 睡觉<br>        sleep();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>整洁方案:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 生活函数<br>public void live() &#123;<br>    while (isAlive) &#123;<br>        // 每日生活<br>        liveDaily();<br>    &#125;<br>&#125;<br><br>// 每日生活函数<br>private void liveDaily() &#123;<br>    // 吃饭<br>    eat();<br><br>    // 编码<br>    code();<br><br>    // 睡觉<br>    sleep();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"场景三：条件体封装为函数\"><a href=\"#场景三：条件体封装为函数\" class=\"headerlink\" title=\"场景三：条件体封装为函数\"></a>场景三：条件体封装为函数</h3><p>冗余场景</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 外出函数<br>public void goOut() &#123;<br>    // 判断是否周末<br>    // 判断是否周末: 是周末则游玩<br>    if (isWeekday()) &#123;<br>        // 游玩代码几十行<br>    &#125;<br>    // 判断是否周末: 非周末则工作<br>    else &#123;<br>        // 工作代码几十行<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>整洁方案</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 外出函数<br>public void goOut() &#123;<br>    // 判断是否周末<br>    // 判断是否周末: 是周末则游玩<br>    if (isWeekday()) &#123;<br>        play();<br>        return;<br>    &#125;<br>    // 判断是否周末: 非周末则工作<br>    else &#123;<br>        // work();<br>    &#125;<br>&#125;<br><br>// 游玩函数<br>private void play() &#123;<br>    // 游玩代码几十行<br>&#125;<br><br>// 工作函数<br>private void work() &#123;<br>    // 工作代码几十行<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"函数内代码块级别尽量一致\"><a href=\"#函数内代码块级别尽量一致\" class=\"headerlink\" title=\"函数内代码块级别尽量一致\"></a>函数内代码块级别尽量一致</h2><h3 id=\"整洁理念-1\"><a href=\"#整洁理念-1\" class=\"headerlink\" title=\"整洁理念\"></a>整洁理念</h3><ul>\n<li>函数调用表明用途，函数实现表达逻辑，层次分明便于理解；</li>\n<li>不用层次的代码块放在一起，容易让人觉得代码头重脚轻。</li>\n</ul>\n<h3 id=\"场景一：函数与代码块混合\"><a href=\"#场景一：函数与代码块混合\" class=\"headerlink\" title=\"场景一：函数与代码块混合\"></a>场景一：函数与代码块混合</h3><p>冗余场景</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 每日生活函数<br>public void liveDaily() &#123;<br>    // 吃饭<br>    eat();<br><br>    // 编码<br>    code();<br><br>    // 睡觉<br>    // 睡觉相关代码几十行<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>整洁方案</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">public void liveDaily() &#123;<br>    // 吃饭<br>    eat();<br><br>    // 编码<br>    code();<br><br>    // 睡觉<br>    sleep();<br>&#125;<br><br>// 睡觉<br>private void sleep() &#123;<br>    // 睡觉相关代码<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"封装相同功能代码为函数\"><a href=\"#封装相同功能代码为函数\" class=\"headerlink\" title=\"封装相同功能代码为函数\"></a>封装相同功能代码为函数</h2><h3 id=\"整理理念-1\"><a href=\"#整理理念-1\" class=\"headerlink\" title=\"整理理念:\"></a>整理理念:</h3><ul>\n<li>封装相似代码为函数，差异性通过函数参数控制。</li>\n<li>封装公共函数，减少代码行数，提高代码质量；</li>\n<li>封装公共函数，使业务代码更精炼，可读性可维护性更强。</li>\n</ul>\n<h3 id=\"场景一：封装相同代码为函数\"><a href=\"#场景一：封装相同代码为函数\" class=\"headerlink\" title=\"场景一：封装相同代码为函数\"></a>场景一：封装相同代码为函数</h3><p>冗余场景</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 禁用用户函数<br>public void disableUser() &#123;<br>    // 禁用黑名单用户<br>    List&lt;Long&gt; userIdList = queryBlackUser();<br>    for (Long userId : userIdList) &#123;<br>        User userUpdate = new User();<br>        userUpdate.setId(userId);<br>        userUpdate.setEnable(Boolean.FALSE);<br>        userDAO.update(userUpdate);<br>    &#125;<br><br>    // 禁用过期用户<br>    userIdList = queryExpiredUser();<br>    for (Long userId : userIdList) &#123;<br>        User userUpdate = new User();<br>        userUpdate.setId(userId);<br>        userUpdate.setEnable(Boolean.FALSE);<br>        userDAO.update(userUpdate);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>整洁方案</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 禁用用户函数<br>public void disableUser() &#123;<br>    // 禁用黑名单用户<br>    List&lt;Long&gt; userIdList = queryBlackUser();<br>    for (Long userId : userIdList) &#123;<br>        disableUser(userId);<br>    &#125;<br><br>    // 禁用过期用户<br>    userIdList = queryExpiredUser();<br>    for (Long userId : userIdList) &#123;<br>        disableUser(userId);<br>    &#125;<br>&#125;<br><br>// 禁用用户函数<br>private void disableUser(Long userId) &#123;<br>    User userUpdate = new User();<br>    userUpdate.setId(userId);<br>    userUpdate.setEnable(Boolean.FALSE);<br>    userDAO.update(userUpdate);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"场景二：封装相似代码为函数\"><a href=\"#场景二：封装相似代码为函数\" class=\"headerlink\" title=\"场景二：封装相似代码为函数\"></a>场景二：封装相似代码为函数</h3><p>冗余场景</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 通过工单函数<br>public void adoptOrder(Long orderId) &#123;<br>    Order orderUpdate = new Order();<br>    orderUpdate.setId(orderId);<br>    orderUpdate.setStatus(OrderStatus.ADOPTED);<br>    orderUpdate.setAuditTime(new Date());<br>    orderDAO.update(orderUpdate);<br>&#125;<br><br>// 驳回工单函数<br>public void rejectOrder(Long orderId) &#123;<br>    Order orderUpdate = new Order();<br>    orderUpdate.setId(orderId);<br>    orderUpdate.setStatus(OrderStatus.REJECTED);<br>    orderUpdate.setAuditTime(new Date());<br>    orderDAO.update(orderUpdate);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>整洁方案</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 通过工单函数<br>public void adoptOrder(Long orderId) &#123;<br>    auditOrder(orderId, OrderStatus.ADOPTED);<br>&#125;<br><br>// 驳回工单函数<br>public void rejectOrder(Long orderId) &#123;<br>    auditOrder(orderId, OrderStatus.REJECTED);<br>&#125;<br><br>// 审核工单函数<br>private void auditOrder(Long orderId, OrderStatus orderStatus) &#123;<br>    Order orderUpdate = new Order();<br>    orderUpdate.setId(orderId);<br>    orderUpdate.setStatus(orderStatus);<br>    orderUpdate.setAuditTime(new Date());<br>    orderDAO.update(orderUpdate);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"封装获取参数值函数\"><a href=\"#封装获取参数值函数\" class=\"headerlink\" title=\"封装获取参数值函数\"></a>封装获取<code>参数值函数</code></h2><h3 id=\"整洁理念-2\"><a href=\"#整洁理念-2\" class=\"headerlink\" title=\"整洁理念\"></a>整洁理念</h3><ul>\n<li>把获取参数值从业务函数中独立，使业务逻辑更清晰；</li>\n<li>封装的获取参数值为独立函数，在代码中重复使用。</li>\n</ul>\n<h3 id=\"场景示例\"><a href=\"#场景示例\" class=\"headerlink\" title=\"场景示例\"></a>场景示例</h3><p>冗余场景</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 是否通过函数<br>public boolean isPassed(Long userId) &#123;<br>    // 获取通过阈值<br>    double thisPassThreshold = PASS_THRESHOLD;<br>    if (Objects.nonNull(passThreshold)) &#123;<br>        thisPassThreshold = passThreshold;<br>    &#125;<br><br>    // 获取通过率<br>    double passRate = getPassRate(userId);<br><br>    // 判读是否通过<br>    return passRate &gt;= thisPassThreshold;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>整洁方案</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 是否通过函数<br>public boolean isPassed(Long userId) &#123;<br>    // 获取通过阈值<br>    double thisPassThreshold = getPassThreshold();<br><br>    // 获取通过率<br>    double passRate = getPassRate(userId);<br><br>    // 判读是否通过<br>    return passRate &gt;= thisPassThreshold;<br>&#125;<br><br>// 获取通过阈值函数<br>private double getPassThreshold() &#123;<br>    if (Objects.nonNull(passThreshold)) &#123;<br>        return passThreshold;<br>    &#125;<br>    return PASS_THRESHOLD;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"接口参数化封装相同逻辑\"><a href=\"#接口参数化封装相同逻辑\" class=\"headerlink\" title=\"接口参数化封装相同逻辑\"></a>接口参数化封装相同逻辑</h2><h3 id=\"整洁理念-3\"><a href=\"#整洁理念-3\" class=\"headerlink\" title=\"整洁理念\"></a>整洁理念</h3><ul>\n<li>把核心逻辑从各个业务函数中抽取，使业务代码更清晰更易维护；</li>\n<li>避免重复性代码多次编写，精简重复函数越多收益越大。</li>\n</ul>\n<h3 id=\"场景示例-1\"><a href=\"#场景示例-1\" class=\"headerlink\" title=\"场景示例\"></a>场景示例</h3><p>冗余场景</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 发送审核员结算数据函数<br>public void sendAuditorSettleData() &#123;<br>    List&lt;WorkerSettleData&gt; settleDataList = auditTaskDAO.statAuditorSettleData();<br>    for (WorkerSettleData settleData : settleDataList) &#123;<br>        WorkerPushData pushData = new WorkerPushData();<br>        pushData.setId(settleData.getWorkerId());<br>        pushData.setType(WorkerPushDataType.AUDITOR);<br>        pushData.setData(settleData);<br>        pushService.push(pushData);<br>    &#125;<br>&#125;<br><br>// 发送验收员结算数据函数<br>public void sendCheckerSettleData() &#123;<br>    List&lt;WorkerSettleData&gt; settleDataList = auditTaskDAO.statCheckerSettleData();<br>    for (WorkerSettleData settleData : settleDataList) &#123;<br>        WorkerPushData pushData = new WorkerPushData();<br>        pushData.setId(settleData.getWorkerId());<br>        pushData.setType(WorkerPushDataType.CHECKER);<br>        pushData.setData(settleData);<br>        pushService.push(pushData);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>整洁方案</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 发送审核员结算数据函数<br>public void sendAuditorSettleData() &#123;<br>    sendWorkerSettleData(WorkerPushDataType.AUDITOR, () -&gt; auditTaskDAO.statAuditorSettleData());<br>&#125;<br><br>// 发送验收员结算数据函数<br>public void sendCheckerSettleData() &#123;<br>    sendWorkerSettleData(WorkerPushDataType.CHECKER, () -&gt; auditTaskDAO.statCheckerSettleData());<br>&#125;<br><br>// 发送作业员结算数据函数<br>public void sendWorkerSettleData(WorkerPushDataType dataType, WorkerSettleDataProvider dataProvider) &#123;<br>    List&lt;WorkerSettleData&gt; settleDataList = dataProvider.statWorkerSettleData();<br>    for (WorkerSettleData settleData : settleDataList) &#123;<br>        WorkerPushData pushData = new WorkerPushData();<br>        pushData.setId(settleData.getWorkerId());<br>        pushData.setType(dataType);<br>        pushData.setData(settleData);<br>        pushService.push(pushData);<br>    &#125;<br>&#125;<br><br>// 作业员结算数据提供者接口<br>private interface WorkerSettleDataProvider &#123;<br>    // 统计作业员结算数据<br>    public List&lt;WorkerSettleData&gt; statWorkerSettleData();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"减少函数代码层级\"><a href=\"#减少函数代码层级\" class=\"headerlink\" title=\"减少函数代码层级\"></a>减少函数代码层级</h2><h3 id=\"整洁理念-4\"><a href=\"#整洁理念-4\" class=\"headerlink\" title=\"整洁理念\"></a>整洁理念</h3><ul>\n<li>代码层级减少，代码缩进减少；</li>\n<li>模块划分清晰，方便阅读维护。</li>\n<li>过多的缩进会让函数难以阅读。</li>\n<li>函数代码层级控制在1-4之间。</li>\n</ul>\n<h3 id=\"场景一：提前-return-返回函数\"><a href=\"#场景一：提前-return-返回函数\" class=\"headerlink\" title=\"场景一：提前 return 返回函数\"></a>场景一：提前 <code>return</code> 返回函数</h3><p>冗余场景</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 获取用户余额函数<br>public Double getUserBalance(Long userId) &#123;<br>    User user = getUser(userId);<br>    if (Objects.nonNull(user)) &#123;<br>        UserAccount account = user.getAccount();<br>        if (Objects.nonNull(account)) &#123;<br>            return account.getBalance();<br>        &#125;<br>    &#125;<br>    return null;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>整洁方案</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 获取用户余额函数<br>public Double getUserBalance(Long userId) &#123;<br>    // 获取用户信息<br>    User user = getUser(userId);<br>    if (Objects.isNull(user)) &#123;<br>        return null;<br>    &#125;<br><br>    // 获取用户账户<br>    UserAccount account = user.getAccount();<br>    if (Objects.isNull(account)) &#123;<br>        return null;<br>    &#125;<br><br>    // 返回账户余额<br>    return account.getBalance();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"场景二：提前-continue-结束循环\"><a href=\"#场景二：提前-continue-结束循环\" class=\"headerlink\" title=\"场景二：提前 continue 结束循环\"></a>场景二：提前 <code>continue</code> 结束循环</h3><p>整洁建议:</p>\n<ul>\n<li>在循环体中，建议最多使用一次continue。</li>\n<li>需要多次 continue 时，把循环体封装为函数。</li>\n</ul>\n<p>冗余场景</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 获取合计余额函数<br>public double getTotalBalance(List&lt;User&gt; userList) &#123;<br>    // 初始合计余额<br>    double totalBalance = 0.0D;<br><br>    // 依次累加余额<br>    for (User user : userList) &#123;<br>        // 获取用户账户<br>        UserAccount account = user.getAccount();<br>        if (Objects.nonNull(account)) &#123;<br>            // 累加用户余额<br>            Double balance = account.getBalance();<br>            if (Objects.nonNull(balance)) &#123;<br>                totalBalance += balance;<br>            &#125;<br>        &#125;<br>    &#125;<br>    // 返回合计余额<br>    return totalBalance;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>整洁方案</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 获取合计余额函数<br>public double getTotalBalance(List&lt;User&gt; userList) &#123;<br>    // 初始合计余额<br>    double totalBalance = 0.0D;<br><br>    // 依次累加余额<br>    for (User user : userList) &#123;<br>        // 获取用户账户<br>        UserAccount account = user.getAccount();<br>        if (Objects.isNull(account)) &#123;<br>            continue;<br>        &#125;<br><br>        // 累加用户余额<br>        Double balance = account.getBalance();<br>        if (Objects.nonNull(balance)) &#123;<br>            totalBalance += balance;<br>        &#125;<br>    &#125;<br><br>    // 返回合计余额<br>    return totalBalance;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"封装条件表达式函数\"><a href=\"#封装条件表达式函数\" class=\"headerlink\" title=\"封装条件表达式函数\"></a>封装条件表达式函数</h2><h3 id=\"整洁理念-5\"><a href=\"#整洁理念-5\" class=\"headerlink\" title=\"整洁理念\"></a>整洁理念</h3><ul>\n<li>把条件表达式从业务函数中独立，使业务逻辑更清晰；</li>\n<li>封装的条件表达式为独立函数，可以在代码中重复使用。</li>\n</ul>\n<h3 id=\"场景一：封装简单条件表达式为函数\"><a href=\"#场景一：封装简单条件表达式为函数\" class=\"headerlink\" title=\"场景一：封装简单条件表达式为函数\"></a>场景一：封装简单条件表达式为函数</h3><p>冗余场景</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 获取门票价格函数<br>public double getTicketPrice(Date currDate) &#123;<br>    if (Objects.nonNull(currDate) &amp;&amp; currDate.after(DISCOUNT_BEGIN_DATE)<br>        &amp;&amp; currDate.before(DISCOUNT_END_DATE)) &#123;<br>        return TICKET_PRICE * DISCOUNT_RATE;<br>    &#125;<br>    return TICKET_PRICE;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>整洁方案</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 获取门票价格函数<br>public double getTicketPrice(Date currDate) &#123;<br>    if (isDiscountDate(currDate)) &#123;<br>        return TICKET_PRICE * DISCOUNT_RATE;<br>    &#125;<br>    return TICKET_PRICE;<br>&#125;<br><br>// 是否折扣日期函数<br>private static boolean isDiscountDate(Date currDate) &#123;<br>    return Objects.nonNull(currDate) <br>        &amp;&amp; currDate.after(DISCOUNT_BEGIN_DATE)<br>        &amp;&amp; currDate.before(DISCOUNT_END_DATE);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"场景二：封装复杂条件表达式为函数\"><a href=\"#场景二：封装复杂条件表达式为函数\" class=\"headerlink\" title=\"场景二：封装复杂条件表达式为函数\"></a>场景二：封装复杂条件表达式为函数</h3><p>整洁建议: 也可以用流式(Stream)编程的过滤来实现。</p>\n<p>冗余场景</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 获取土豪用户列表<br>public List&lt;User&gt; getRichUserList(List&lt;User&gt; userList) &#123;<br>    // 初始土豪用户列表<br>    List&lt;User&gt; richUserList = new ArrayList&lt;&gt;();<br><br>    // 依次查找土豪用户<br>    for (User user : userList) &#123;<br>        // 获取用户账户<br>        UserAccount account = user.getAccount();<br>        if (Objects.nonNull(account)) &#123;<br>            // 判断用户余额<br>            Double balance = account.getBalance();<br>            if (Objects.nonNull(balance) &amp;&amp; balance.compareTo(RICH_THRESHOLD) &gt;= 0) &#123;<br>                // 添加土豪用户<br>                richUserList.add(user);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    // 返回土豪用户列表<br>    return richUserList;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>整洁方案</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// 获取土豪用户列表<br>public List&lt;User&gt; getRichUserList(List&lt;User&gt; userList) &#123;<br>    // 初始土豪用户列表<br>    List&lt;User&gt; richUserList = new ArrayList&lt;&gt;();<br><br>    // 依次查找土豪用户<br>    for (User user : userList) &#123;<br>        // 判断土豪用户<br>        if (isRichUser(user)) &#123;<br>            // 添加土豪用户<br>            richUserList.add(user);<br>        &#125;<br>    &#125;<br><br>    // 返回土豪用户列表<br>    return richUserList;<br>&#125;<br><br>// 是否土豪用户<br>private boolean isRichUser(User user) &#123;<br>    // 获取用户账户<br>    UserAccount account = user.getAccount();<br>    if (Objects.isNull(account)) &#123;<br>        return false;<br>    &#125;<br><br>    // 获取用户余额<br>    Double balance = account.getBalance();<br>    if (Objects.isNull(balance)) &#123;<br>        return false;<br>    &#125;<br><br>    // 比较用户余额<br>    return balance.compareTo(RICH_THRESHOLD) &gt;= 0;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"避免不必要的空指针判断\"><a href=\"#避免不必要的空指针判断\" class=\"headerlink\" title=\"避免不必要的空指针判断\"></a>避免不必要的空指针判断</h2><h3 id=\"整洁理念-6\"><a href=\"#整洁理念-6\" class=\"headerlink\" title=\"整洁理念\"></a>整洁理念</h3><ul>\n<li>避免不必要的空指针判断，精简业务代码处理逻辑，提高业务代码运行效率；</li>\n<li>不必要的空指针判断，属于永远不执行的Death代码，删除有助于代码维护。</li>\n</ul>\n<h3 id=\"场景一：MyBatis-返回值\"><a href=\"#场景一：MyBatis-返回值\" class=\"headerlink\" title=\"场景一：MyBatis 返回值\"></a>场景一：MyBatis 返回值</h3><p>MyBatis是一款优秀的持久层框架，是在项目中使用的最广泛的数据库中间件之一。</p>\n<p>通过对MyBatis源码进行分析，查询函数返回的列表和数据项都不为空，在代码中可以不用进行空指针判断。</p>\n<h2 id=\"参考-x2F-摘录\"><a href=\"#参考-x2F-摘录\" class=\"headerlink\" title=\"参考&#x2F;摘录\"></a>参考&#x2F;摘录</h2><ul>\n<li><a href=\"https://blog.csdn.net/qq_32447301/article/details/97042462\">Java代码整洁之道</a></li>\n</ul>\n"},{"title":"MySQL 编程规范","type":"MySQL 编程规范","_content":"\n## 审核规范\n\n- [数据库运维脚本](https://gitlab.idata.mobi/shengyiplus/syp-model-scripts), 向 DBA 审核开发权限。\n- 表结构变更 DBA 审核未通过的，不允许上线。\n- 运维 SQL 脚本必须本地执行成功才能提交合并，由 DBA 部署运维脚本。\n\n## 基础规范\n\n- 库名/表名/字段名统一**小写**。\n- 库名/表名/字段名**注释**业务场景。\n- 库名/表名/字段名禁止使用 `mysql` 保留字。 \n- 库名/表名/字段名小写字母、见名知意、下划线命名。\n- 数据对象/变量命名采用英文字符,禁止中文命名。\n- 临时库/表名必须以 `tmp` 为前缀，并以日期为后缀。\n- 备份库/表必须以 `bak` 为前缀，并以日期为后缀。\n- 禁止明文存储密码。 \n- 禁止跨库访问数据。\n\n## 表设计规范\n\n### 基本概念\n\n表类型:\n- **实体表**: 客观存在的事物数据，比如说员工。\n- **事实表**: 通过各种维度和指标值组合确定的一个事实，比如通过时间、地域组织维度，指标值可以确定在某时某地的一些指标值怎么样的事实。事实表的每一条数据都是几条维度表的数据和指标值交汇而得到的。\n- **维度表**: 对事实的各个方面描述，比如时间维度表；维度表只能是事实表的一个分析角度。\n\n术语:\n- **关系**: 实体表之间的联系\n- **元组**: 表的一行\n- **属性**: 表的一列\n- **键(码)**: 唯一标识元组的最小属性集\n- **候选码**: 二维表会存在多个键(码)统称为候选键(码), 从中选择一个作为用户使用的键称为**主键**\n\n### 范式定义\n\n- 第一范式：对**属性**的原子性约束，不可再分解；\n- 第二范式：对**元组(记录)**的惟一性约束，即实体的惟一性；\n- 第三范式：对字段冗余性的约束，即任何字段不能由其他字段派生出来。\n- 巴斯-科德范式（BCNF）: 每个表中只有一个候选键\n- 第四范式: 消除表中的多值依赖。\n\n注意：落地到第三范式就已够用了，后面的太严格，不符合实际使用。必要的空余（预计算列）可以提升查询效率（以空间换时间）。\n\n### E-R图规范\n\n结构清晰、关联简洁、实体个数适中、属性分配合理、没有低级冗余。\n\n*注*: [功能文档](/developer/style-guide/mysql.html#功能文档)中会使用到 E-R 图，并约束上述规范。\n\n### 完整性约束\n\n- 域的完整性：用Check来实现约束\n- 参照完整性：用PK、FK、表级触发器来实现。\n- 用户定义完整性：是业务规则，用存储过程和触发器来实现。\n\n### 三少原则\n\n- 数据库中表的个数越少越好\n- 表中组合主键的字段个数越少越好\n- 表中的字段个数越少越好\n\n数据库设计的实用原则是：**在数据冗余和处理速度之间找到合适的平衡点。**\n\n“三少”是一个**整体概念，综合观点**，不能孤立某一个原则。该原则是相对的，不是绝对的。\n\n提倡“三少”原则的目的，是**防止利用打补丁技术，不断地对数据库进行增删改**，使企业数据库变成了随意设计数据库表的“垃圾堆”，或数据库表的“大杂院”，最后造成数据库中的基本表、代码表、中间表、临时表杂乱无章，不计其数，导致企事业单位的信息系统无法维护而瘫痪。\n\n\n### 通用原则\n\n- 表名使用复数(后缀 `s`)。\n- 推荐 `utf8mb4`。`utf8mb4` 是真正意义上的 `utf-8`。\n- 必须有主键，使用`id` 自增列作主键；再创建 `uuid` 字段，作为业务主键。\n- 存储状态、性别等，用 `tinyint(1)`，慎用 `enum`。\n- 日期字段，类型使用 `date`，`xxx_date`命名。\n- 时间字段，类型使用 `datetime` ，`xxx_datetime`命名。\n- 价格等小数类型使用 `decimal(10, 2)`。\n- 同一意义的字段设计定义必须相同（便于联表查询）\n- 表与表之间需要建立关联关系时使用 `uuid` 关联。\n- 禁止 `default null`，建议 `not null`。\n- 表设计时基础字段\n\n  ```\n  create table mysql_guides s(\n    `id` int(11) not null auto_increment,\n    `uuid` varchar(50) not null comment 'uuid',\n    ...\n    `delete_status` tinyint(1) default 0 comment '删除状态, 0/1',\n    `created_time` datetime default current_timestamp comment '创建时间',\n    `updated_time` datetime default current_timestamp on update current_timestamp comment '更新时间',\n    primary key(id)\n  )\n  ```\n\n### `datetime` & `timestamp` \n\n## 索引设计\n\n- 唯一索引命名 `uniq_字段1_字段2`，非唯一索引命名 `idx_字段1_字段2`。\n- 建立索引时，务必先 `explain`，查看索引使用情况；禁止冗余索引；禁止重复索引。\n- 重要的 SQL 中 `where` 条件里的字段必须被索引。\n- 不在低基数列上建立索引，例如“性别”。\n- 不要在频繁更新的列上建立索引。\n- 不在索引列进行数学运算和函数运算（参与了运算的列不会引用索引）\n- 复合索引须符合最左前缀的特点建立索引（MySQL 使用复合索引时从左向右匹配）\n\n## SQL 规范\n\n- 建议 SQL 语句小写，包括 SQL 关键字、保留字。\n- `select` `from` `left join` `right join` `inner join` `where` `group by` `order by` `limit` 左对齐\n- 右缩进为两个空格。\n- `join` 与 `on` 在同一行。\n- SQL 代码段之间**空一行**。\n- **鼓励添加简洁的注释，增加代码阅读性**。\n- 单字段赋值, 必须 `limit 1`。\n\n  ```\n  use mysql;\n\n  -- 高版本 MySQL 约束强，没有显式 limit 1 直接抛语法错误\n  set @user = (\n    select `User` \n    from user\n    limit 1\n  );\n\n  select convert(@user using utf8) as user;\n  ```\n\n- 多字段赋值, 使用一条 `select`。\n\n  ```\n  use mysql;\n\n  -- 本质是使用最后一行结果集赋值\n  -- 1. 若 limit 2，赋值的是第二行结果集\n  -- 2. `:=` 是赋值, `=` 是比较\n  select \n    @host := `Host`,\n    @user := `User` \n  from user\n  limit 1;\n\n  select \n    convert(@host using utf8) as host, \n    convert(@user using utf8) as user;\n  ```\n\n  或\n\n  ```\n  use mysql;\n\n  select \n    `Host`, `User` into @host, @user \n  from user\n  limit 1;\n\n  select \n    convert(@host using utf8) as host, \n    convert(@user using utf8) as user;\n  ```\n\n- 事务(`transaction`)与 ACID\n\n  ```\n  drop procedure if exists `pro_sql_acid_example`;\n  delimiter ;;\n  create procedure `pro_sql_acid_example`()\n  begin\n    declare is_sql_error integer default 0;\n    declare continue handler for sqlexception set is_sql_error = 1;\n    start transaction;\n\n    -- 业务SQL, CRUD 语法错误时，取消本次所有数据操作\n    -- 业务SQL一切正常，此处返回结果集\n\n    if is_sql_error = 1 then\n      rollback;\n      select 'rollback with sql exception';\n      -- 根据业务需要，返回对应的内容\n    else\n      commit;\n      -- 此时仅 commit, 避免查询结果集语句出错\n    end if;\n  end\n  ;;\n  delimiter ;\n\n  call pro_sql_acid_example();\n  ```\n\n## 查询规范\n\n- 拆分复杂 SQL 为多个小 SQL，或创建汇总中间表（利用 `query cache`和多核 `cpu`）。\n- 用 `in` 代替 `or`。`in` 的个数控制在 1000 以内。\n- 不使用负向查询，如`not in`/`like`。\n- 用`union all`代替`union`；`union all`不需要对结果集再进行排序。\n- 禁止使用 `order by rand()`。 \n- `select`、`insert`语句必须显式的指明字段名称。\n- `where` 条件中的非等值条件（`in`/`between`/`<`/`<=`/`>`/`>=`）会导致后面的条件使用不了索引。\n- 使用合理的分页方式以提高分页(`limit`)的效率。\n- 减少与数据库交互次数，尽量采用批量sql语句。 \n    - a) `insert on duplicate key update`\n    - b) `replace into` ([禁止使用](/developer/style-guide/mysql-insert-ignore-replace-duplicate-different.html#Replace-Into-禁用))\n    - c) `insert ignore`\n    - d) `insert into values()`\n\n## 存储过程\n\n- 使用 `pro_存储过程名`。\n- 接收参数使用 `var_字段名`。\n- 接收参数将：`in var_data_enterprise_uuid varchar (100)`, `in var_data_enterprise_code varchar (100)`放置接收参数的末尾。\n- 尽可能减少游标的使用。\n\n## 业务场景\n\n- 建表时必带字段：\n\n  ```\n  `id` int(11) not null auto_increment,\n  `uuid` varchar(50) default null comment 'uuid',\n  `creater_uuid` varchar(50) default null comment '创建人uuid',\n  `created_time` datetime default current_timestamp comment '创建时间',\n  `updater_uuid` varchar(50) default null comment '更新人 uuid',\n  `updated_time` datetime default current_timestamp on update current_timestamp comment '更新时间',\n  `data_enterprise_uuid` varchar(100) default null comment '数据所属企业uuid',\n  `data_enterprise_code` varchar(100) default null comment '数据所属企业号',\n  `delete_status` varchar(100) default '0' comment '删除状态, 0 未删除 1 已删除',\n  ```\n\n- 建表时必带索引：\n\n  ```\n  unique key `index_uuid` (`data_enterprise_uuid`,`uuid`)\n  ```\n\n- `uuid` 类型统一为 `varchar(50)`。\n- 如数量等字段需要设置默认值。\n- 尽可能减少主数据字段的变动，如有特定需求建立主数据关联表进行连接。\n- 当表与表之间需要建立关联关系时尽量使用 `uuid` 关联。\n\n### 命名规范\n\n- 模糊查询统一使用字段 `fuzzy_search命名`。\n- 表名称命名第一段使用统一项目名称命名。\n- 当a表与b表为一对多的关系，b表为a表的明细内容时，表名称命名为：`a表名_detail`（a表明细表）。\n- 当需要接受当前登录人的 `uuid` 时，使用 `emp_uuid`字段接收。\n- 当需要接受分页时，使用`start_num`、`end_num`字段接收。\n\n### SQL 规范\n\n- 查询时`join`表时如无特殊情况需加上`data_enterprise_code`和`delete_status`的关联筛选。\n- 编写 SQL 时 `where` 条件中养成带上`data_enterprise_data`、`data_enterprise_code`和`delete_status`字段的筛选。\n- 传递给前端的参数使用驼峰形式别名。\n- `count` 统一使用 `count(*)`。\n- 列表页查询传递筛选时使用以下规范：\n\n  ```\n  and case\n  when '#筛选字段名#' = 'all' or '#筛选字段名#' = '' then\n      1 = 1\n  else\n      数据库字段名 like '%#筛选字段名#%'\n  end\n  ```\n\n- 列表默认使用 `order by updated_time desc`。\n\n### 应用场景规范\n\n- **REP标题命名**规范：\n    1.查询 - 获取xxx列表\n    2.查询 - 获取xxx详情\n    3.查询 - 获取xxx明细列表\n    4.查询 - 统计xxx数量\n    5.查询 - xxx校验\n    6.修改 - 修改xxx\n    7.新增 - 新增xxx\n\n- 需访问数据库的表单校验尽量使用多个接口实现校验。\n- 如需要查询加上增（删改）时，选择 `*/select` 权重类型。\n- 当需要使用 `if` 判定等操作时使用存储过程完成。\n- 当需要接受对象数组进行操作时走固定接口完成。\n- 尽量保持一个项目一个分组。\n- 所有接口需经过 PostMan 测试通过才算完成。\n- 所有接口按模块使用印象笔记呈现，基本格式规范如下：\n\n  ```\n  标题：接口文档-xxx模块\n  正文：\n\n  ### 新增(修改、删除) - 新增(修改、删除)xxx\n\n  #### 请求参数\n\n  {\n    repcode:'rep_0000xx',\n    repgroup:'xxx',\n    请求参数1字段名:'', // 请求参数1\n    请求参数1字段名:'',  // 请求参数2\n  }\n\n  ### 查询 - xxxxx\n\n  #### 请求参数\n\n  {\n    repcode：'rep_0000xx',\n    repgroup:'xxx',\n    请求参数1字段名:'默认值', // 请求参数1\n  }\n\n  #### 接收参数\n\n  {\n    接收参数1字段名:'', // 接收参数1\n  }\n  ```\n\n## 功能文档\n\n详情内链: [职场协作-功能文档](/corporate-culture/teamwork.html#%E5%8A%9F%E8%83%BD%E6%96%87%E6%A1%A3)\n\n- 梳理建表语句，确认字段都有备注\n- 梳理说明业务 SQL 并补充注释\n- 整理业务表模型 E-R 图\n\n  ![MySQL-ER图示例](/images/MySQL-ER图示例.png)\n\n  *注: attachments/navicat-data-modeler-database-model/MySQL-ER图示例.ndm*\n","source":"developer/style-guide/mysql.md","raw":"---\ntitle: MySQL 编程规范\ntype: MySQL 编程规范\n---\n\n## 审核规范\n\n- [数据库运维脚本](https://gitlab.idata.mobi/shengyiplus/syp-model-scripts), 向 DBA 审核开发权限。\n- 表结构变更 DBA 审核未通过的，不允许上线。\n- 运维 SQL 脚本必须本地执行成功才能提交合并，由 DBA 部署运维脚本。\n\n## 基础规范\n\n- 库名/表名/字段名统一**小写**。\n- 库名/表名/字段名**注释**业务场景。\n- 库名/表名/字段名禁止使用 `mysql` 保留字。 \n- 库名/表名/字段名小写字母、见名知意、下划线命名。\n- 数据对象/变量命名采用英文字符,禁止中文命名。\n- 临时库/表名必须以 `tmp` 为前缀，并以日期为后缀。\n- 备份库/表必须以 `bak` 为前缀，并以日期为后缀。\n- 禁止明文存储密码。 \n- 禁止跨库访问数据。\n\n## 表设计规范\n\n### 基本概念\n\n表类型:\n- **实体表**: 客观存在的事物数据，比如说员工。\n- **事实表**: 通过各种维度和指标值组合确定的一个事实，比如通过时间、地域组织维度，指标值可以确定在某时某地的一些指标值怎么样的事实。事实表的每一条数据都是几条维度表的数据和指标值交汇而得到的。\n- **维度表**: 对事实的各个方面描述，比如时间维度表；维度表只能是事实表的一个分析角度。\n\n术语:\n- **关系**: 实体表之间的联系\n- **元组**: 表的一行\n- **属性**: 表的一列\n- **键(码)**: 唯一标识元组的最小属性集\n- **候选码**: 二维表会存在多个键(码)统称为候选键(码), 从中选择一个作为用户使用的键称为**主键**\n\n### 范式定义\n\n- 第一范式：对**属性**的原子性约束，不可再分解；\n- 第二范式：对**元组(记录)**的惟一性约束，即实体的惟一性；\n- 第三范式：对字段冗余性的约束，即任何字段不能由其他字段派生出来。\n- 巴斯-科德范式（BCNF）: 每个表中只有一个候选键\n- 第四范式: 消除表中的多值依赖。\n\n注意：落地到第三范式就已够用了，后面的太严格，不符合实际使用。必要的空余（预计算列）可以提升查询效率（以空间换时间）。\n\n### E-R图规范\n\n结构清晰、关联简洁、实体个数适中、属性分配合理、没有低级冗余。\n\n*注*: [功能文档](/developer/style-guide/mysql.html#功能文档)中会使用到 E-R 图，并约束上述规范。\n\n### 完整性约束\n\n- 域的完整性：用Check来实现约束\n- 参照完整性：用PK、FK、表级触发器来实现。\n- 用户定义完整性：是业务规则，用存储过程和触发器来实现。\n\n### 三少原则\n\n- 数据库中表的个数越少越好\n- 表中组合主键的字段个数越少越好\n- 表中的字段个数越少越好\n\n数据库设计的实用原则是：**在数据冗余和处理速度之间找到合适的平衡点。**\n\n“三少”是一个**整体概念，综合观点**，不能孤立某一个原则。该原则是相对的，不是绝对的。\n\n提倡“三少”原则的目的，是**防止利用打补丁技术，不断地对数据库进行增删改**，使企业数据库变成了随意设计数据库表的“垃圾堆”，或数据库表的“大杂院”，最后造成数据库中的基本表、代码表、中间表、临时表杂乱无章，不计其数，导致企事业单位的信息系统无法维护而瘫痪。\n\n\n### 通用原则\n\n- 表名使用复数(后缀 `s`)。\n- 推荐 `utf8mb4`。`utf8mb4` 是真正意义上的 `utf-8`。\n- 必须有主键，使用`id` 自增列作主键；再创建 `uuid` 字段，作为业务主键。\n- 存储状态、性别等，用 `tinyint(1)`，慎用 `enum`。\n- 日期字段，类型使用 `date`，`xxx_date`命名。\n- 时间字段，类型使用 `datetime` ，`xxx_datetime`命名。\n- 价格等小数类型使用 `decimal(10, 2)`。\n- 同一意义的字段设计定义必须相同（便于联表查询）\n- 表与表之间需要建立关联关系时使用 `uuid` 关联。\n- 禁止 `default null`，建议 `not null`。\n- 表设计时基础字段\n\n  ```\n  create table mysql_guides s(\n    `id` int(11) not null auto_increment,\n    `uuid` varchar(50) not null comment 'uuid',\n    ...\n    `delete_status` tinyint(1) default 0 comment '删除状态, 0/1',\n    `created_time` datetime default current_timestamp comment '创建时间',\n    `updated_time` datetime default current_timestamp on update current_timestamp comment '更新时间',\n    primary key(id)\n  )\n  ```\n\n### `datetime` & `timestamp` \n\n## 索引设计\n\n- 唯一索引命名 `uniq_字段1_字段2`，非唯一索引命名 `idx_字段1_字段2`。\n- 建立索引时，务必先 `explain`，查看索引使用情况；禁止冗余索引；禁止重复索引。\n- 重要的 SQL 中 `where` 条件里的字段必须被索引。\n- 不在低基数列上建立索引，例如“性别”。\n- 不要在频繁更新的列上建立索引。\n- 不在索引列进行数学运算和函数运算（参与了运算的列不会引用索引）\n- 复合索引须符合最左前缀的特点建立索引（MySQL 使用复合索引时从左向右匹配）\n\n## SQL 规范\n\n- 建议 SQL 语句小写，包括 SQL 关键字、保留字。\n- `select` `from` `left join` `right join` `inner join` `where` `group by` `order by` `limit` 左对齐\n- 右缩进为两个空格。\n- `join` 与 `on` 在同一行。\n- SQL 代码段之间**空一行**。\n- **鼓励添加简洁的注释，增加代码阅读性**。\n- 单字段赋值, 必须 `limit 1`。\n\n  ```\n  use mysql;\n\n  -- 高版本 MySQL 约束强，没有显式 limit 1 直接抛语法错误\n  set @user = (\n    select `User` \n    from user\n    limit 1\n  );\n\n  select convert(@user using utf8) as user;\n  ```\n\n- 多字段赋值, 使用一条 `select`。\n\n  ```\n  use mysql;\n\n  -- 本质是使用最后一行结果集赋值\n  -- 1. 若 limit 2，赋值的是第二行结果集\n  -- 2. `:=` 是赋值, `=` 是比较\n  select \n    @host := `Host`,\n    @user := `User` \n  from user\n  limit 1;\n\n  select \n    convert(@host using utf8) as host, \n    convert(@user using utf8) as user;\n  ```\n\n  或\n\n  ```\n  use mysql;\n\n  select \n    `Host`, `User` into @host, @user \n  from user\n  limit 1;\n\n  select \n    convert(@host using utf8) as host, \n    convert(@user using utf8) as user;\n  ```\n\n- 事务(`transaction`)与 ACID\n\n  ```\n  drop procedure if exists `pro_sql_acid_example`;\n  delimiter ;;\n  create procedure `pro_sql_acid_example`()\n  begin\n    declare is_sql_error integer default 0;\n    declare continue handler for sqlexception set is_sql_error = 1;\n    start transaction;\n\n    -- 业务SQL, CRUD 语法错误时，取消本次所有数据操作\n    -- 业务SQL一切正常，此处返回结果集\n\n    if is_sql_error = 1 then\n      rollback;\n      select 'rollback with sql exception';\n      -- 根据业务需要，返回对应的内容\n    else\n      commit;\n      -- 此时仅 commit, 避免查询结果集语句出错\n    end if;\n  end\n  ;;\n  delimiter ;\n\n  call pro_sql_acid_example();\n  ```\n\n## 查询规范\n\n- 拆分复杂 SQL 为多个小 SQL，或创建汇总中间表（利用 `query cache`和多核 `cpu`）。\n- 用 `in` 代替 `or`。`in` 的个数控制在 1000 以内。\n- 不使用负向查询，如`not in`/`like`。\n- 用`union all`代替`union`；`union all`不需要对结果集再进行排序。\n- 禁止使用 `order by rand()`。 \n- `select`、`insert`语句必须显式的指明字段名称。\n- `where` 条件中的非等值条件（`in`/`between`/`<`/`<=`/`>`/`>=`）会导致后面的条件使用不了索引。\n- 使用合理的分页方式以提高分页(`limit`)的效率。\n- 减少与数据库交互次数，尽量采用批量sql语句。 \n    - a) `insert on duplicate key update`\n    - b) `replace into` ([禁止使用](/developer/style-guide/mysql-insert-ignore-replace-duplicate-different.html#Replace-Into-禁用))\n    - c) `insert ignore`\n    - d) `insert into values()`\n\n## 存储过程\n\n- 使用 `pro_存储过程名`。\n- 接收参数使用 `var_字段名`。\n- 接收参数将：`in var_data_enterprise_uuid varchar (100)`, `in var_data_enterprise_code varchar (100)`放置接收参数的末尾。\n- 尽可能减少游标的使用。\n\n## 业务场景\n\n- 建表时必带字段：\n\n  ```\n  `id` int(11) not null auto_increment,\n  `uuid` varchar(50) default null comment 'uuid',\n  `creater_uuid` varchar(50) default null comment '创建人uuid',\n  `created_time` datetime default current_timestamp comment '创建时间',\n  `updater_uuid` varchar(50) default null comment '更新人 uuid',\n  `updated_time` datetime default current_timestamp on update current_timestamp comment '更新时间',\n  `data_enterprise_uuid` varchar(100) default null comment '数据所属企业uuid',\n  `data_enterprise_code` varchar(100) default null comment '数据所属企业号',\n  `delete_status` varchar(100) default '0' comment '删除状态, 0 未删除 1 已删除',\n  ```\n\n- 建表时必带索引：\n\n  ```\n  unique key `index_uuid` (`data_enterprise_uuid`,`uuid`)\n  ```\n\n- `uuid` 类型统一为 `varchar(50)`。\n- 如数量等字段需要设置默认值。\n- 尽可能减少主数据字段的变动，如有特定需求建立主数据关联表进行连接。\n- 当表与表之间需要建立关联关系时尽量使用 `uuid` 关联。\n\n### 命名规范\n\n- 模糊查询统一使用字段 `fuzzy_search命名`。\n- 表名称命名第一段使用统一项目名称命名。\n- 当a表与b表为一对多的关系，b表为a表的明细内容时，表名称命名为：`a表名_detail`（a表明细表）。\n- 当需要接受当前登录人的 `uuid` 时，使用 `emp_uuid`字段接收。\n- 当需要接受分页时，使用`start_num`、`end_num`字段接收。\n\n### SQL 规范\n\n- 查询时`join`表时如无特殊情况需加上`data_enterprise_code`和`delete_status`的关联筛选。\n- 编写 SQL 时 `where` 条件中养成带上`data_enterprise_data`、`data_enterprise_code`和`delete_status`字段的筛选。\n- 传递给前端的参数使用驼峰形式别名。\n- `count` 统一使用 `count(*)`。\n- 列表页查询传递筛选时使用以下规范：\n\n  ```\n  and case\n  when '#筛选字段名#' = 'all' or '#筛选字段名#' = '' then\n      1 = 1\n  else\n      数据库字段名 like '%#筛选字段名#%'\n  end\n  ```\n\n- 列表默认使用 `order by updated_time desc`。\n\n### 应用场景规范\n\n- **REP标题命名**规范：\n    1.查询 - 获取xxx列表\n    2.查询 - 获取xxx详情\n    3.查询 - 获取xxx明细列表\n    4.查询 - 统计xxx数量\n    5.查询 - xxx校验\n    6.修改 - 修改xxx\n    7.新增 - 新增xxx\n\n- 需访问数据库的表单校验尽量使用多个接口实现校验。\n- 如需要查询加上增（删改）时，选择 `*/select` 权重类型。\n- 当需要使用 `if` 判定等操作时使用存储过程完成。\n- 当需要接受对象数组进行操作时走固定接口完成。\n- 尽量保持一个项目一个分组。\n- 所有接口需经过 PostMan 测试通过才算完成。\n- 所有接口按模块使用印象笔记呈现，基本格式规范如下：\n\n  ```\n  标题：接口文档-xxx模块\n  正文：\n\n  ### 新增(修改、删除) - 新增(修改、删除)xxx\n\n  #### 请求参数\n\n  {\n    repcode:'rep_0000xx',\n    repgroup:'xxx',\n    请求参数1字段名:'', // 请求参数1\n    请求参数1字段名:'',  // 请求参数2\n  }\n\n  ### 查询 - xxxxx\n\n  #### 请求参数\n\n  {\n    repcode：'rep_0000xx',\n    repgroup:'xxx',\n    请求参数1字段名:'默认值', // 请求参数1\n  }\n\n  #### 接收参数\n\n  {\n    接收参数1字段名:'', // 接收参数1\n  }\n  ```\n\n## 功能文档\n\n详情内链: [职场协作-功能文档](/corporate-culture/teamwork.html#%E5%8A%9F%E8%83%BD%E6%96%87%E6%A1%A3)\n\n- 梳理建表语句，确认字段都有备注\n- 梳理说明业务 SQL 并补充注释\n- 整理业务表模型 E-R 图\n\n  ![MySQL-ER图示例](/images/MySQL-ER图示例.png)\n\n  *注: attachments/navicat-data-modeler-database-model/MySQL-ER图示例.ndm*\n","date":"2023-06-10T10:49:05.489Z","updated":"2023-06-10T10:49:05.489Z","path":"developer/style-guide/mysql.html","comments":1,"layout":"page","_id":"clipw1dd6000xoix5clzghovy","content":"<h2 id=\"审核规范\"><a href=\"#审核规范\" class=\"headerlink\" title=\"审核规范\"></a>审核规范</h2><ul>\n<li><a href=\"https://gitlab.idata.mobi/shengyiplus/syp-model-scripts\">数据库运维脚本</a>, 向 DBA 审核开发权限。</li>\n<li>表结构变更 DBA 审核未通过的，不允许上线。</li>\n<li>运维 SQL 脚本必须本地执行成功才能提交合并，由 DBA 部署运维脚本。</li>\n</ul>\n<h2 id=\"基础规范\"><a href=\"#基础规范\" class=\"headerlink\" title=\"基础规范\"></a>基础规范</h2><ul>\n<li>库名&#x2F;表名&#x2F;字段名统一<strong>小写</strong>。</li>\n<li>库名&#x2F;表名&#x2F;字段名<strong>注释</strong>业务场景。</li>\n<li>库名&#x2F;表名&#x2F;字段名禁止使用 <code>mysql</code> 保留字。 </li>\n<li>库名&#x2F;表名&#x2F;字段名小写字母、见名知意、下划线命名。</li>\n<li>数据对象&#x2F;变量命名采用英文字符,禁止中文命名。</li>\n<li>临时库&#x2F;表名必须以 <code>tmp</code> 为前缀，并以日期为后缀。</li>\n<li>备份库&#x2F;表必须以 <code>bak</code> 为前缀，并以日期为后缀。</li>\n<li>禁止明文存储密码。 </li>\n<li>禁止跨库访问数据。</li>\n</ul>\n<h2 id=\"表设计规范\"><a href=\"#表设计规范\" class=\"headerlink\" title=\"表设计规范\"></a>表设计规范</h2><h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><p>表类型:</p>\n<ul>\n<li><strong>实体表</strong>: 客观存在的事物数据，比如说员工。</li>\n<li><strong>事实表</strong>: 通过各种维度和指标值组合确定的一个事实，比如通过时间、地域组织维度，指标值可以确定在某时某地的一些指标值怎么样的事实。事实表的每一条数据都是几条维度表的数据和指标值交汇而得到的。</li>\n<li><strong>维度表</strong>: 对事实的各个方面描述，比如时间维度表；维度表只能是事实表的一个分析角度。</li>\n</ul>\n<p>术语:</p>\n<ul>\n<li><strong>关系</strong>: 实体表之间的联系</li>\n<li><strong>元组</strong>: 表的一行</li>\n<li><strong>属性</strong>: 表的一列</li>\n<li><strong>键(码)</strong>: 唯一标识元组的最小属性集</li>\n<li><strong>候选码</strong>: 二维表会存在多个键(码)统称为候选键(码), 从中选择一个作为用户使用的键称为<strong>主键</strong></li>\n</ul>\n<h3 id=\"范式定义\"><a href=\"#范式定义\" class=\"headerlink\" title=\"范式定义\"></a>范式定义</h3><ul>\n<li>第一范式：对<strong>属性</strong>的原子性约束，不可再分解；</li>\n<li>第二范式：对**元组(记录)**的惟一性约束，即实体的惟一性；</li>\n<li>第三范式：对字段冗余性的约束，即任何字段不能由其他字段派生出来。</li>\n<li>巴斯-科德范式（BCNF）: 每个表中只有一个候选键</li>\n<li>第四范式: 消除表中的多值依赖。</li>\n</ul>\n<p>注意：落地到第三范式就已够用了，后面的太严格，不符合实际使用。必要的空余（预计算列）可以提升查询效率（以空间换时间）。</p>\n<h3 id=\"E-R图规范\"><a href=\"#E-R图规范\" class=\"headerlink\" title=\"E-R图规范\"></a>E-R图规范</h3><p>结构清晰、关联简洁、实体个数适中、属性分配合理、没有低级冗余。</p>\n<p><em>注</em>: <a href=\"/developer/style-guide/mysql.html#%E5%8A%9F%E8%83%BD%E6%96%87%E6%A1%A3\">功能文档</a>中会使用到 E-R 图，并约束上述规范。</p>\n<h3 id=\"完整性约束\"><a href=\"#完整性约束\" class=\"headerlink\" title=\"完整性约束\"></a>完整性约束</h3><ul>\n<li>域的完整性：用Check来实现约束</li>\n<li>参照完整性：用PK、FK、表级触发器来实现。</li>\n<li>用户定义完整性：是业务规则，用存储过程和触发器来实现。</li>\n</ul>\n<h3 id=\"三少原则\"><a href=\"#三少原则\" class=\"headerlink\" title=\"三少原则\"></a>三少原则</h3><ul>\n<li>数据库中表的个数越少越好</li>\n<li>表中组合主键的字段个数越少越好</li>\n<li>表中的字段个数越少越好</li>\n</ul>\n<p>数据库设计的实用原则是：<strong>在数据冗余和处理速度之间找到合适的平衡点。</strong></p>\n<p>“三少”是一个<strong>整体概念，综合观点</strong>，不能孤立某一个原则。该原则是相对的，不是绝对的。</p>\n<p>提倡“三少”原则的目的，是<strong>防止利用打补丁技术，不断地对数据库进行增删改</strong>，使企业数据库变成了随意设计数据库表的“垃圾堆”，或数据库表的“大杂院”，最后造成数据库中的基本表、代码表、中间表、临时表杂乱无章，不计其数，导致企事业单位的信息系统无法维护而瘫痪。</p>\n<h3 id=\"通用原则\"><a href=\"#通用原则\" class=\"headerlink\" title=\"通用原则\"></a>通用原则</h3><ul>\n<li><p>表名使用复数(后缀 <code>s</code>)。</p>\n</li>\n<li><p>推荐 <code>utf8mb4</code>。<code>utf8mb4</code> 是真正意义上的 <code>utf-8</code>。</p>\n</li>\n<li><p>必须有主键，使用<code>id</code> 自增列作主键；再创建 <code>uuid</code> 字段，作为业务主键。</p>\n</li>\n<li><p>存储状态、性别等，用 <code>tinyint(1)</code>，慎用 <code>enum</code>。</p>\n</li>\n<li><p>日期字段，类型使用 <code>date</code>，<code>xxx_date</code>命名。</p>\n</li>\n<li><p>时间字段，类型使用 <code>datetime</code> ，<code>xxx_datetime</code>命名。</p>\n</li>\n<li><p>价格等小数类型使用 <code>decimal(10, 2)</code>。</p>\n</li>\n<li><p>同一意义的字段设计定义必须相同（便于联表查询）</p>\n</li>\n<li><p>表与表之间需要建立关联关系时使用 <code>uuid</code> 关联。</p>\n</li>\n<li><p>禁止 <code>default null</code>，建议 <code>not null</code>。</p>\n</li>\n<li><p>表设计时基础字段</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">create table mysql_guides s(<br>  `id` int(11) not null auto_increment,<br>  `uuid` varchar(50) not null comment &#x27;uuid&#x27;,<br>  ...<br>  `delete_status` tinyint(1) default 0 comment &#x27;删除状态, 0/1&#x27;,<br>  `created_time` datetime default current_timestamp comment &#x27;创建时间&#x27;,<br>  `updated_time` datetime default current_timestamp on update current_timestamp comment &#x27;更新时间&#x27;,<br>  primary key(id)<br>)<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"datetime-amp-timestamp\"><a href=\"#datetime-amp-timestamp\" class=\"headerlink\" title=\"datetime &amp; timestamp\"></a><code>datetime</code> &amp; <code>timestamp</code></h3><h2 id=\"索引设计\"><a href=\"#索引设计\" class=\"headerlink\" title=\"索引设计\"></a>索引设计</h2><ul>\n<li>唯一索引命名 <code>uniq_字段1_字段2</code>，非唯一索引命名 <code>idx_字段1_字段2</code>。</li>\n<li>建立索引时，务必先 <code>explain</code>，查看索引使用情况；禁止冗余索引；禁止重复索引。</li>\n<li>重要的 SQL 中 <code>where</code> 条件里的字段必须被索引。</li>\n<li>不在低基数列上建立索引，例如“性别”。</li>\n<li>不要在频繁更新的列上建立索引。</li>\n<li>不在索引列进行数学运算和函数运算（参与了运算的列不会引用索引）</li>\n<li>复合索引须符合最左前缀的特点建立索引（MySQL 使用复合索引时从左向右匹配）</li>\n</ul>\n<h2 id=\"SQL-规范\"><a href=\"#SQL-规范\" class=\"headerlink\" title=\"SQL 规范\"></a>SQL 规范</h2><ul>\n<li><p>建议 SQL 语句小写，包括 SQL 关键字、保留字。</p>\n</li>\n<li><p><code>select</code> <code>from</code> <code>left join</code> <code>right join</code> <code>inner join</code> <code>where</code> <code>group by</code> <code>order by</code> <code>limit</code> 左对齐</p>\n</li>\n<li><p>右缩进为两个空格。</p>\n</li>\n<li><p><code>join</code> 与 <code>on</code> 在同一行。</p>\n</li>\n<li><p>SQL 代码段之间<strong>空一行</strong>。</p>\n</li>\n<li><p><strong>鼓励添加简洁的注释，增加代码阅读性</strong>。</p>\n</li>\n<li><p>单字段赋值, 必须 <code>limit 1</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">use mysql;<br><br>-- 高版本 MySQL 约束强，没有显式 limit 1 直接抛语法错误<br>set @user = (<br>  select `User` <br>  from user<br>  limit 1<br>);<br><br>select convert(@user using utf8) as user;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>多字段赋值, 使用一条 <code>select</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">use mysql;<br><br>-- 本质是使用最后一行结果集赋值<br>-- 1. 若 limit 2，赋值的是第二行结果集<br>-- 2. `:=` 是赋值, `=` 是比较<br>select <br>  @host := `Host`,<br>  @user := `User` <br>from user<br>limit 1;<br><br>select <br>  convert(@host using utf8) as host, <br>  convert(@user using utf8) as user;<br></code></pre></td></tr></table></figure>\n\n<p>或</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">use mysql;<br><br>select <br>  `Host`, `User` into @host, @user <br>from user<br>limit 1;<br><br>select <br>  convert(@host using utf8) as host, <br>  convert(@user using utf8) as user;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>事务(<code>transaction</code>)与 ACID</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">drop procedure if exists `pro_sql_acid_example`;<br>delimiter ;;<br>create procedure `pro_sql_acid_example`()<br>begin<br>  declare is_sql_error integer default 0;<br>  declare continue handler for sqlexception set is_sql_error = 1;<br>  start transaction;<br><br>  -- 业务SQL, CRUD 语法错误时，取消本次所有数据操作<br>  -- 业务SQL一切正常，此处返回结果集<br><br>  if is_sql_error = 1 then<br>    rollback;<br>    select &#x27;rollback with sql exception&#x27;;<br>    -- 根据业务需要，返回对应的内容<br>  else<br>    commit;<br>    -- 此时仅 commit, 避免查询结果集语句出错<br>  end if;<br>end<br>;;<br>delimiter ;<br><br>call pro_sql_acid_example();<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"查询规范\"><a href=\"#查询规范\" class=\"headerlink\" title=\"查询规范\"></a>查询规范</h2><ul>\n<li>拆分复杂 SQL 为多个小 SQL，或创建汇总中间表（利用 <code>query cache</code>和多核 <code>cpu</code>）。</li>\n<li>用 <code>in</code> 代替 <code>or</code>。<code>in</code> 的个数控制在 1000 以内。</li>\n<li>不使用负向查询，如<code>not in</code>&#x2F;<code>like</code>。</li>\n<li>用<code>union all</code>代替<code>union</code>；<code>union all</code>不需要对结果集再进行排序。</li>\n<li>禁止使用 <code>order by rand()</code>。 </li>\n<li><code>select</code>、<code>insert</code>语句必须显式的指明字段名称。</li>\n<li><code>where</code> 条件中的非等值条件（<code>in</code>&#x2F;<code>between</code>&#x2F;<code>&lt;</code>&#x2F;<code>&lt;=</code>&#x2F;<code>&gt;</code>&#x2F;<code>&gt;=</code>）会导致后面的条件使用不了索引。</li>\n<li>使用合理的分页方式以提高分页(<code>limit</code>)的效率。</li>\n<li>减少与数据库交互次数，尽量采用批量sql语句。 <ul>\n<li>a) <code>insert on duplicate key update</code></li>\n<li>b) <code>replace into</code> (<a href=\"/developer/style-guide/mysql-insert-ignore-replace-duplicate-different.html#Replace-Into-%E7%A6%81%E7%94%A8\">禁止使用</a>)</li>\n<li>c) <code>insert ignore</code></li>\n<li>d) <code>insert into values()</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"存储过程\"><a href=\"#存储过程\" class=\"headerlink\" title=\"存储过程\"></a>存储过程</h2><ul>\n<li>使用 <code>pro_存储过程名</code>。</li>\n<li>接收参数使用 <code>var_字段名</code>。</li>\n<li>接收参数将：<code>in var_data_enterprise_uuid varchar (100)</code>, <code>in var_data_enterprise_code varchar (100)</code>放置接收参数的末尾。</li>\n<li>尽可能减少游标的使用。</li>\n</ul>\n<h2 id=\"业务场景\"><a href=\"#业务场景\" class=\"headerlink\" title=\"业务场景\"></a>业务场景</h2><ul>\n<li><p>建表时必带字段：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">`id` int(11) not null auto_increment,<br>`uuid` varchar(50) default null comment &#x27;uuid&#x27;,<br>`creater_uuid` varchar(50) default null comment &#x27;创建人uuid&#x27;,<br>`created_time` datetime default current_timestamp comment &#x27;创建时间&#x27;,<br>`updater_uuid` varchar(50) default null comment &#x27;更新人 uuid&#x27;,<br>`updated_time` datetime default current_timestamp on update current_timestamp comment &#x27;更新时间&#x27;,<br>`data_enterprise_uuid` varchar(100) default null comment &#x27;数据所属企业uuid&#x27;,<br>`data_enterprise_code` varchar(100) default null comment &#x27;数据所属企业号&#x27;,<br>`delete_status` varchar(100) default &#x27;0&#x27; comment &#x27;删除状态, 0 未删除 1 已删除&#x27;,<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>建表时必带索引：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">unique key `index_uuid` (`data_enterprise_uuid`,`uuid`)<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><code>uuid</code> 类型统一为 <code>varchar(50)</code>。</p>\n</li>\n<li><p>如数量等字段需要设置默认值。</p>\n</li>\n<li><p>尽可能减少主数据字段的变动，如有特定需求建立主数据关联表进行连接。</p>\n</li>\n<li><p>当表与表之间需要建立关联关系时尽量使用 <code>uuid</code> 关联。</p>\n</li>\n</ul>\n<h3 id=\"命名规范\"><a href=\"#命名规范\" class=\"headerlink\" title=\"命名规范\"></a>命名规范</h3><ul>\n<li>模糊查询统一使用字段 <code>fuzzy_search命名</code>。</li>\n<li>表名称命名第一段使用统一项目名称命名。</li>\n<li>当a表与b表为一对多的关系，b表为a表的明细内容时，表名称命名为：<code>a表名_detail</code>（a表明细表）。</li>\n<li>当需要接受当前登录人的 <code>uuid</code> 时，使用 <code>emp_uuid</code>字段接收。</li>\n<li>当需要接受分页时，使用<code>start_num</code>、<code>end_num</code>字段接收。</li>\n</ul>\n<h3 id=\"SQL-规范-1\"><a href=\"#SQL-规范-1\" class=\"headerlink\" title=\"SQL 规范\"></a>SQL 规范</h3><ul>\n<li><p>查询时<code>join</code>表时如无特殊情况需加上<code>data_enterprise_code</code>和<code>delete_status</code>的关联筛选。</p>\n</li>\n<li><p>编写 SQL 时 <code>where</code> 条件中养成带上<code>data_enterprise_data</code>、<code>data_enterprise_code</code>和<code>delete_status</code>字段的筛选。</p>\n</li>\n<li><p>传递给前端的参数使用驼峰形式别名。</p>\n</li>\n<li><p><code>count</code> 统一使用 <code>count(*)</code>。</p>\n</li>\n<li><p>列表页查询传递筛选时使用以下规范：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">and case<br>when &#x27;#筛选字段名#&#x27; = &#x27;all&#x27; or &#x27;#筛选字段名#&#x27; = &#x27;&#x27; then<br>    1 = 1<br>else<br>    数据库字段名 like &#x27;%#筛选字段名#%&#x27;<br>end<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>列表默认使用 <code>order by updated_time desc</code>。</p>\n</li>\n</ul>\n<h3 id=\"应用场景规范\"><a href=\"#应用场景规范\" class=\"headerlink\" title=\"应用场景规范\"></a>应用场景规范</h3><ul>\n<li><p><strong>REP标题命名</strong>规范：<br>  1.查询 - 获取xxx列表<br>  2.查询 - 获取xxx详情<br>  3.查询 - 获取xxx明细列表<br>  4.查询 - 统计xxx数量<br>  5.查询 - xxx校验<br>  6.修改 - 修改xxx<br>  7.新增 - 新增xxx</p>\n</li>\n<li><p>需访问数据库的表单校验尽量使用多个接口实现校验。</p>\n</li>\n<li><p>如需要查询加上增（删改）时，选择 <code>*/select</code> 权重类型。</p>\n</li>\n<li><p>当需要使用 <code>if</code> 判定等操作时使用存储过程完成。</p>\n</li>\n<li><p>当需要接受对象数组进行操作时走固定接口完成。</p>\n</li>\n<li><p>尽量保持一个项目一个分组。</p>\n</li>\n<li><p>所有接口需经过 PostMan 测试通过才算完成。</p>\n</li>\n<li><p>所有接口按模块使用印象笔记呈现，基本格式规范如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">标题：接口文档-xxx模块<br>正文：<br><br>### 新增(修改、删除) - 新增(修改、删除)xxx<br><br>#### 请求参数<br><br>&#123;<br>  repcode:&#x27;rep_0000xx&#x27;,<br>  repgroup:&#x27;xxx&#x27;,<br>  请求参数1字段名:&#x27;&#x27;, // 请求参数1<br>  请求参数1字段名:&#x27;&#x27;,  // 请求参数2<br>&#125;<br><br>### 查询 - xxxxx<br><br>#### 请求参数<br><br>&#123;<br>  repcode：&#x27;rep_0000xx&#x27;,<br>  repgroup:&#x27;xxx&#x27;,<br>  请求参数1字段名:&#x27;默认值&#x27;, // 请求参数1<br>&#125;<br><br>#### 接收参数<br><br>&#123;<br>  接收参数1字段名:&#x27;&#x27;, // 接收参数1<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"功能文档\"><a href=\"#功能文档\" class=\"headerlink\" title=\"功能文档\"></a>功能文档</h2><p>详情内链: <a href=\"/corporate-culture/teamwork.html#%E5%8A%9F%E8%83%BD%E6%96%87%E6%A1%A3\">职场协作-功能文档</a></p>\n<ul>\n<li><p>梳理建表语句，确认字段都有备注</p>\n</li>\n<li><p>梳理说明业务 SQL 并补充注释</p>\n</li>\n<li><p>整理业务表模型 E-R 图</p>\n<p><img src=\"/images/MySQL-ER%E5%9B%BE%E7%A4%BA%E4%BE%8B.png\" alt=\"MySQL-ER图示例\"></p>\n<p><em>注: attachments&#x2F;navicat-data-modeler-database-model&#x2F;MySQL-ER图示例.ndm</em></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"审核规范\"><a href=\"#审核规范\" class=\"headerlink\" title=\"审核规范\"></a>审核规范</h2><ul>\n<li><a href=\"https://gitlab.idata.mobi/shengyiplus/syp-model-scripts\">数据库运维脚本</a>, 向 DBA 审核开发权限。</li>\n<li>表结构变更 DBA 审核未通过的，不允许上线。</li>\n<li>运维 SQL 脚本必须本地执行成功才能提交合并，由 DBA 部署运维脚本。</li>\n</ul>\n<h2 id=\"基础规范\"><a href=\"#基础规范\" class=\"headerlink\" title=\"基础规范\"></a>基础规范</h2><ul>\n<li>库名&#x2F;表名&#x2F;字段名统一<strong>小写</strong>。</li>\n<li>库名&#x2F;表名&#x2F;字段名<strong>注释</strong>业务场景。</li>\n<li>库名&#x2F;表名&#x2F;字段名禁止使用 <code>mysql</code> 保留字。 </li>\n<li>库名&#x2F;表名&#x2F;字段名小写字母、见名知意、下划线命名。</li>\n<li>数据对象&#x2F;变量命名采用英文字符,禁止中文命名。</li>\n<li>临时库&#x2F;表名必须以 <code>tmp</code> 为前缀，并以日期为后缀。</li>\n<li>备份库&#x2F;表必须以 <code>bak</code> 为前缀，并以日期为后缀。</li>\n<li>禁止明文存储密码。 </li>\n<li>禁止跨库访问数据。</li>\n</ul>\n<h2 id=\"表设计规范\"><a href=\"#表设计规范\" class=\"headerlink\" title=\"表设计规范\"></a>表设计规范</h2><h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><p>表类型:</p>\n<ul>\n<li><strong>实体表</strong>: 客观存在的事物数据，比如说员工。</li>\n<li><strong>事实表</strong>: 通过各种维度和指标值组合确定的一个事实，比如通过时间、地域组织维度，指标值可以确定在某时某地的一些指标值怎么样的事实。事实表的每一条数据都是几条维度表的数据和指标值交汇而得到的。</li>\n<li><strong>维度表</strong>: 对事实的各个方面描述，比如时间维度表；维度表只能是事实表的一个分析角度。</li>\n</ul>\n<p>术语:</p>\n<ul>\n<li><strong>关系</strong>: 实体表之间的联系</li>\n<li><strong>元组</strong>: 表的一行</li>\n<li><strong>属性</strong>: 表的一列</li>\n<li><strong>键(码)</strong>: 唯一标识元组的最小属性集</li>\n<li><strong>候选码</strong>: 二维表会存在多个键(码)统称为候选键(码), 从中选择一个作为用户使用的键称为<strong>主键</strong></li>\n</ul>\n<h3 id=\"范式定义\"><a href=\"#范式定义\" class=\"headerlink\" title=\"范式定义\"></a>范式定义</h3><ul>\n<li>第一范式：对<strong>属性</strong>的原子性约束，不可再分解；</li>\n<li>第二范式：对**元组(记录)**的惟一性约束，即实体的惟一性；</li>\n<li>第三范式：对字段冗余性的约束，即任何字段不能由其他字段派生出来。</li>\n<li>巴斯-科德范式（BCNF）: 每个表中只有一个候选键</li>\n<li>第四范式: 消除表中的多值依赖。</li>\n</ul>\n<p>注意：落地到第三范式就已够用了，后面的太严格，不符合实际使用。必要的空余（预计算列）可以提升查询效率（以空间换时间）。</p>\n<h3 id=\"E-R图规范\"><a href=\"#E-R图规范\" class=\"headerlink\" title=\"E-R图规范\"></a>E-R图规范</h3><p>结构清晰、关联简洁、实体个数适中、属性分配合理、没有低级冗余。</p>\n<p><em>注</em>: <a href=\"/developer/style-guide/mysql.html#%E5%8A%9F%E8%83%BD%E6%96%87%E6%A1%A3\">功能文档</a>中会使用到 E-R 图，并约束上述规范。</p>\n<h3 id=\"完整性约束\"><a href=\"#完整性约束\" class=\"headerlink\" title=\"完整性约束\"></a>完整性约束</h3><ul>\n<li>域的完整性：用Check来实现约束</li>\n<li>参照完整性：用PK、FK、表级触发器来实现。</li>\n<li>用户定义完整性：是业务规则，用存储过程和触发器来实现。</li>\n</ul>\n<h3 id=\"三少原则\"><a href=\"#三少原则\" class=\"headerlink\" title=\"三少原则\"></a>三少原则</h3><ul>\n<li>数据库中表的个数越少越好</li>\n<li>表中组合主键的字段个数越少越好</li>\n<li>表中的字段个数越少越好</li>\n</ul>\n<p>数据库设计的实用原则是：<strong>在数据冗余和处理速度之间找到合适的平衡点。</strong></p>\n<p>“三少”是一个<strong>整体概念，综合观点</strong>，不能孤立某一个原则。该原则是相对的，不是绝对的。</p>\n<p>提倡“三少”原则的目的，是<strong>防止利用打补丁技术，不断地对数据库进行增删改</strong>，使企业数据库变成了随意设计数据库表的“垃圾堆”，或数据库表的“大杂院”，最后造成数据库中的基本表、代码表、中间表、临时表杂乱无章，不计其数，导致企事业单位的信息系统无法维护而瘫痪。</p>\n<h3 id=\"通用原则\"><a href=\"#通用原则\" class=\"headerlink\" title=\"通用原则\"></a>通用原则</h3><ul>\n<li><p>表名使用复数(后缀 <code>s</code>)。</p>\n</li>\n<li><p>推荐 <code>utf8mb4</code>。<code>utf8mb4</code> 是真正意义上的 <code>utf-8</code>。</p>\n</li>\n<li><p>必须有主键，使用<code>id</code> 自增列作主键；再创建 <code>uuid</code> 字段，作为业务主键。</p>\n</li>\n<li><p>存储状态、性别等，用 <code>tinyint(1)</code>，慎用 <code>enum</code>。</p>\n</li>\n<li><p>日期字段，类型使用 <code>date</code>，<code>xxx_date</code>命名。</p>\n</li>\n<li><p>时间字段，类型使用 <code>datetime</code> ，<code>xxx_datetime</code>命名。</p>\n</li>\n<li><p>价格等小数类型使用 <code>decimal(10, 2)</code>。</p>\n</li>\n<li><p>同一意义的字段设计定义必须相同（便于联表查询）</p>\n</li>\n<li><p>表与表之间需要建立关联关系时使用 <code>uuid</code> 关联。</p>\n</li>\n<li><p>禁止 <code>default null</code>，建议 <code>not null</code>。</p>\n</li>\n<li><p>表设计时基础字段</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">create table mysql_guides s(<br>  `id` int(11) not null auto_increment,<br>  `uuid` varchar(50) not null comment &#x27;uuid&#x27;,<br>  ...<br>  `delete_status` tinyint(1) default 0 comment &#x27;删除状态, 0/1&#x27;,<br>  `created_time` datetime default current_timestamp comment &#x27;创建时间&#x27;,<br>  `updated_time` datetime default current_timestamp on update current_timestamp comment &#x27;更新时间&#x27;,<br>  primary key(id)<br>)<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"datetime-amp-timestamp\"><a href=\"#datetime-amp-timestamp\" class=\"headerlink\" title=\"datetime &amp; timestamp\"></a><code>datetime</code> &amp; <code>timestamp</code></h3><h2 id=\"索引设计\"><a href=\"#索引设计\" class=\"headerlink\" title=\"索引设计\"></a>索引设计</h2><ul>\n<li>唯一索引命名 <code>uniq_字段1_字段2</code>，非唯一索引命名 <code>idx_字段1_字段2</code>。</li>\n<li>建立索引时，务必先 <code>explain</code>，查看索引使用情况；禁止冗余索引；禁止重复索引。</li>\n<li>重要的 SQL 中 <code>where</code> 条件里的字段必须被索引。</li>\n<li>不在低基数列上建立索引，例如“性别”。</li>\n<li>不要在频繁更新的列上建立索引。</li>\n<li>不在索引列进行数学运算和函数运算（参与了运算的列不会引用索引）</li>\n<li>复合索引须符合最左前缀的特点建立索引（MySQL 使用复合索引时从左向右匹配）</li>\n</ul>\n<h2 id=\"SQL-规范\"><a href=\"#SQL-规范\" class=\"headerlink\" title=\"SQL 规范\"></a>SQL 规范</h2><ul>\n<li><p>建议 SQL 语句小写，包括 SQL 关键字、保留字。</p>\n</li>\n<li><p><code>select</code> <code>from</code> <code>left join</code> <code>right join</code> <code>inner join</code> <code>where</code> <code>group by</code> <code>order by</code> <code>limit</code> 左对齐</p>\n</li>\n<li><p>右缩进为两个空格。</p>\n</li>\n<li><p><code>join</code> 与 <code>on</code> 在同一行。</p>\n</li>\n<li><p>SQL 代码段之间<strong>空一行</strong>。</p>\n</li>\n<li><p><strong>鼓励添加简洁的注释，增加代码阅读性</strong>。</p>\n</li>\n<li><p>单字段赋值, 必须 <code>limit 1</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">use mysql;<br><br>-- 高版本 MySQL 约束强，没有显式 limit 1 直接抛语法错误<br>set @user = (<br>  select `User` <br>  from user<br>  limit 1<br>);<br><br>select convert(@user using utf8) as user;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>多字段赋值, 使用一条 <code>select</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">use mysql;<br><br>-- 本质是使用最后一行结果集赋值<br>-- 1. 若 limit 2，赋值的是第二行结果集<br>-- 2. `:=` 是赋值, `=` 是比较<br>select <br>  @host := `Host`,<br>  @user := `User` <br>from user<br>limit 1;<br><br>select <br>  convert(@host using utf8) as host, <br>  convert(@user using utf8) as user;<br></code></pre></td></tr></table></figure>\n\n<p>或</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">use mysql;<br><br>select <br>  `Host`, `User` into @host, @user <br>from user<br>limit 1;<br><br>select <br>  convert(@host using utf8) as host, <br>  convert(@user using utf8) as user;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>事务(<code>transaction</code>)与 ACID</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">drop procedure if exists `pro_sql_acid_example`;<br>delimiter ;;<br>create procedure `pro_sql_acid_example`()<br>begin<br>  declare is_sql_error integer default 0;<br>  declare continue handler for sqlexception set is_sql_error = 1;<br>  start transaction;<br><br>  -- 业务SQL, CRUD 语法错误时，取消本次所有数据操作<br>  -- 业务SQL一切正常，此处返回结果集<br><br>  if is_sql_error = 1 then<br>    rollback;<br>    select &#x27;rollback with sql exception&#x27;;<br>    -- 根据业务需要，返回对应的内容<br>  else<br>    commit;<br>    -- 此时仅 commit, 避免查询结果集语句出错<br>  end if;<br>end<br>;;<br>delimiter ;<br><br>call pro_sql_acid_example();<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"查询规范\"><a href=\"#查询规范\" class=\"headerlink\" title=\"查询规范\"></a>查询规范</h2><ul>\n<li>拆分复杂 SQL 为多个小 SQL，或创建汇总中间表（利用 <code>query cache</code>和多核 <code>cpu</code>）。</li>\n<li>用 <code>in</code> 代替 <code>or</code>。<code>in</code> 的个数控制在 1000 以内。</li>\n<li>不使用负向查询，如<code>not in</code>&#x2F;<code>like</code>。</li>\n<li>用<code>union all</code>代替<code>union</code>；<code>union all</code>不需要对结果集再进行排序。</li>\n<li>禁止使用 <code>order by rand()</code>。 </li>\n<li><code>select</code>、<code>insert</code>语句必须显式的指明字段名称。</li>\n<li><code>where</code> 条件中的非等值条件（<code>in</code>&#x2F;<code>between</code>&#x2F;<code>&lt;</code>&#x2F;<code>&lt;=</code>&#x2F;<code>&gt;</code>&#x2F;<code>&gt;=</code>）会导致后面的条件使用不了索引。</li>\n<li>使用合理的分页方式以提高分页(<code>limit</code>)的效率。</li>\n<li>减少与数据库交互次数，尽量采用批量sql语句。 <ul>\n<li>a) <code>insert on duplicate key update</code></li>\n<li>b) <code>replace into</code> (<a href=\"/developer/style-guide/mysql-insert-ignore-replace-duplicate-different.html#Replace-Into-%E7%A6%81%E7%94%A8\">禁止使用</a>)</li>\n<li>c) <code>insert ignore</code></li>\n<li>d) <code>insert into values()</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"存储过程\"><a href=\"#存储过程\" class=\"headerlink\" title=\"存储过程\"></a>存储过程</h2><ul>\n<li>使用 <code>pro_存储过程名</code>。</li>\n<li>接收参数使用 <code>var_字段名</code>。</li>\n<li>接收参数将：<code>in var_data_enterprise_uuid varchar (100)</code>, <code>in var_data_enterprise_code varchar (100)</code>放置接收参数的末尾。</li>\n<li>尽可能减少游标的使用。</li>\n</ul>\n<h2 id=\"业务场景\"><a href=\"#业务场景\" class=\"headerlink\" title=\"业务场景\"></a>业务场景</h2><ul>\n<li><p>建表时必带字段：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">`id` int(11) not null auto_increment,<br>`uuid` varchar(50) default null comment &#x27;uuid&#x27;,<br>`creater_uuid` varchar(50) default null comment &#x27;创建人uuid&#x27;,<br>`created_time` datetime default current_timestamp comment &#x27;创建时间&#x27;,<br>`updater_uuid` varchar(50) default null comment &#x27;更新人 uuid&#x27;,<br>`updated_time` datetime default current_timestamp on update current_timestamp comment &#x27;更新时间&#x27;,<br>`data_enterprise_uuid` varchar(100) default null comment &#x27;数据所属企业uuid&#x27;,<br>`data_enterprise_code` varchar(100) default null comment &#x27;数据所属企业号&#x27;,<br>`delete_status` varchar(100) default &#x27;0&#x27; comment &#x27;删除状态, 0 未删除 1 已删除&#x27;,<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>建表时必带索引：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">unique key `index_uuid` (`data_enterprise_uuid`,`uuid`)<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><code>uuid</code> 类型统一为 <code>varchar(50)</code>。</p>\n</li>\n<li><p>如数量等字段需要设置默认值。</p>\n</li>\n<li><p>尽可能减少主数据字段的变动，如有特定需求建立主数据关联表进行连接。</p>\n</li>\n<li><p>当表与表之间需要建立关联关系时尽量使用 <code>uuid</code> 关联。</p>\n</li>\n</ul>\n<h3 id=\"命名规范\"><a href=\"#命名规范\" class=\"headerlink\" title=\"命名规范\"></a>命名规范</h3><ul>\n<li>模糊查询统一使用字段 <code>fuzzy_search命名</code>。</li>\n<li>表名称命名第一段使用统一项目名称命名。</li>\n<li>当a表与b表为一对多的关系，b表为a表的明细内容时，表名称命名为：<code>a表名_detail</code>（a表明细表）。</li>\n<li>当需要接受当前登录人的 <code>uuid</code> 时，使用 <code>emp_uuid</code>字段接收。</li>\n<li>当需要接受分页时，使用<code>start_num</code>、<code>end_num</code>字段接收。</li>\n</ul>\n<h3 id=\"SQL-规范-1\"><a href=\"#SQL-规范-1\" class=\"headerlink\" title=\"SQL 规范\"></a>SQL 规范</h3><ul>\n<li><p>查询时<code>join</code>表时如无特殊情况需加上<code>data_enterprise_code</code>和<code>delete_status</code>的关联筛选。</p>\n</li>\n<li><p>编写 SQL 时 <code>where</code> 条件中养成带上<code>data_enterprise_data</code>、<code>data_enterprise_code</code>和<code>delete_status</code>字段的筛选。</p>\n</li>\n<li><p>传递给前端的参数使用驼峰形式别名。</p>\n</li>\n<li><p><code>count</code> 统一使用 <code>count(*)</code>。</p>\n</li>\n<li><p>列表页查询传递筛选时使用以下规范：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">and case<br>when &#x27;#筛选字段名#&#x27; = &#x27;all&#x27; or &#x27;#筛选字段名#&#x27; = &#x27;&#x27; then<br>    1 = 1<br>else<br>    数据库字段名 like &#x27;%#筛选字段名#%&#x27;<br>end<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>列表默认使用 <code>order by updated_time desc</code>。</p>\n</li>\n</ul>\n<h3 id=\"应用场景规范\"><a href=\"#应用场景规范\" class=\"headerlink\" title=\"应用场景规范\"></a>应用场景规范</h3><ul>\n<li><p><strong>REP标题命名</strong>规范：<br>  1.查询 - 获取xxx列表<br>  2.查询 - 获取xxx详情<br>  3.查询 - 获取xxx明细列表<br>  4.查询 - 统计xxx数量<br>  5.查询 - xxx校验<br>  6.修改 - 修改xxx<br>  7.新增 - 新增xxx</p>\n</li>\n<li><p>需访问数据库的表单校验尽量使用多个接口实现校验。</p>\n</li>\n<li><p>如需要查询加上增（删改）时，选择 <code>*/select</code> 权重类型。</p>\n</li>\n<li><p>当需要使用 <code>if</code> 判定等操作时使用存储过程完成。</p>\n</li>\n<li><p>当需要接受对象数组进行操作时走固定接口完成。</p>\n</li>\n<li><p>尽量保持一个项目一个分组。</p>\n</li>\n<li><p>所有接口需经过 PostMan 测试通过才算完成。</p>\n</li>\n<li><p>所有接口按模块使用印象笔记呈现，基本格式规范如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">标题：接口文档-xxx模块<br>正文：<br><br>### 新增(修改、删除) - 新增(修改、删除)xxx<br><br>#### 请求参数<br><br>&#123;<br>  repcode:&#x27;rep_0000xx&#x27;,<br>  repgroup:&#x27;xxx&#x27;,<br>  请求参数1字段名:&#x27;&#x27;, // 请求参数1<br>  请求参数1字段名:&#x27;&#x27;,  // 请求参数2<br>&#125;<br><br>### 查询 - xxxxx<br><br>#### 请求参数<br><br>&#123;<br>  repcode：&#x27;rep_0000xx&#x27;,<br>  repgroup:&#x27;xxx&#x27;,<br>  请求参数1字段名:&#x27;默认值&#x27;, // 请求参数1<br>&#125;<br><br>#### 接收参数<br><br>&#123;<br>  接收参数1字段名:&#x27;&#x27;, // 接收参数1<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"功能文档\"><a href=\"#功能文档\" class=\"headerlink\" title=\"功能文档\"></a>功能文档</h2><p>详情内链: <a href=\"/corporate-culture/teamwork.html#%E5%8A%9F%E8%83%BD%E6%96%87%E6%A1%A3\">职场协作-功能文档</a></p>\n<ul>\n<li><p>梳理建表语句，确认字段都有备注</p>\n</li>\n<li><p>梳理说明业务 SQL 并补充注释</p>\n</li>\n<li><p>整理业务表模型 E-R 图</p>\n<p><img src=\"/images/MySQL-ER%E5%9B%BE%E7%A4%BA%E4%BE%8B.png\" alt=\"MySQL-ER图示例\"></p>\n<p><em>注: attachments&#x2F;navicat-data-modeler-database-model&#x2F;MySQL-ER图示例.ndm</em></p>\n</li>\n</ul>\n"},{"title":"整洁 Javascript 代码","type":"整洁 Javascript 代码","_content":"\n## 善用内置函数\n\n### find/findIndex\n\n*冗余场景：*\n\n```\nlet array = [1, 2, 3, 4],\n    item,\n    index;\n\n// scene1\nfor(let i = 0, len = array.length; i < len; i ++) {\n  if(array[i] >= 1) {\n    item = array[i];\n  }\n}\n// scene2\nfor(let i = 0, len = array.length; i < len; i ++) {\n  if(array[i] >= 3) {\n    index = i;\n  }\n}\n// priority use a `for` when scene1 and scene2 meet\n```\n\n*整洁方案：*\n\n```\nitem = array.find(function(ele) { return ele >= 1; })\n=> 1\nindex = array.findIndex(function(ele) { return ele >= 3; })\n=> 2\n```\n\n### filter/some\n\n*冗余场景：*\n\n```\nlet array = [1, 2, 3, 4],\n    filterArray = [],\n    isBetween2And4 = false;\n\nfor(let i = 0, len = array.length; i < len; i ++) {\n  if(array[i] >= 3) {\n    filterArray.push(array[i])\n  }\n  if(array[i] > 2 && array[i] < 4) {\n    isBetween2And4 = true\n  }\n}\n```\n\n*整洁方案：*\n\n```\nfilterArray = array.filter(function(ele) { return ele >= 3; })\n=> [3, 4]\nisBetween2And4 = array.some(function(ele) { return ele > 2 && ele < 4; })\n=> true\n```\n\n### map\n\n*冗余场景：*\n\n```\nlet array = [1, 2, 3, 4],\n    newArray = [];\n\nfor(let i = 0, len = array.length; i < len; i ++) {\n  newArray.push(array[i] * 2)\n}\n```\n\n*整洁方案：*\n\n```\nnewArray = array.map(function(ele) { return ele * 2; })\n=> [2, 4, 6, 8]\n```\n\n### reduce/reduceRight\n\n*冗余场景：*\n\n```\nlet array = [1, 2, 3, 4],\n    json = {};\n\nfor(let i = 0, len = array.length; i < len; i ++) {\n  json[i] = array[i]\n}\n```\n\n*整洁方案：*\n\n```\njson = array.reduce(function(json, ele, inx, arr) { json[inx] = ele; return json; }, {})\n=> {0: 1, 1: 2, 2: 3, 3: 4}\narray.reduceRight(function(json, ele, inx, arr) { console.log(ele); return json; }, {})\n=> 4 3 2 1\n```\n\n## 可检索的名称\n\n写可读性强、易于检索的的代码非常重要。\n\n*冗余场景：*\n\n```\nfor (let i = 0; i < 525600; i++) {\n  runCronJob();\n}\n```\n\n*整洁方案：*\n\n```\n// `let` 申明为大写的全局变量\nlet MINUTES_IN_A_YEAR = 525600;\nfor (let i = 0; i < MINUTES_IN_A_YEAR; i++) {\n  runCronJob();\n}\n```\n\n## 解析性的变量\n\n*冗余场景：*\n\n```\nconst cityStateRegex = /^(.+)[,\\\\s]+(.+?)\\s*(\\d{5})?$/;\nsaveCityState(cityStateRegex.match(cityStateRegex)[1], cityStateRegex.match(cityStateRegex)[2]);\n```\n\n*整洁方案：*\n\n```\nconst cityStateRegex = /^(.+)[,\\\\s]+(.+?)\\s*(\\d{5})?$/,\n      match = cityStateRegex.match(cityStateRegex),\n      city = match[1],\n      state = match[2];\n\nsaveCityState(city, state);\n```\n\n## 显式优于隐式\n\n*晦涩场景：*\n\n```\nlet locations = ['Austin', 'New York', 'San Francisco'];\nlocations.forEach((l) => {\n  doStuff();\n  doSomeOtherStuff();\n  ...\n  ...\n  ...\n  // 等等，`l` 又是什么？\n  dispatch(l);\n});\n```\n\n*整洁方案：*\n\n```\nlet locations = ['Austin', 'New York', 'San Francisco'];\nlocations.forEach((location) => {\n  doStuff();\n  doSomeOtherStuff();\n  ...\n  ...\n  ...\n  dispatch(location);\n});\n```\n\n## 短路语法更清晰\n\n*冗余场景：*\n\n```\nfunction createMicrobrewery(name) {\n  let breweryName;\n  if (name) {\n    breweryName = name;\n  } else {\n    breweryName = 'Hipster Brew Co.';\n  }\n}\n```\n\n*整洁方案：*\n\n```\nfunction createMicrobrewery(name) {\n  let breweryName = name || 'Hipster Brew Co.'\n}\n```\n\n## 函数参数不多于2\n\n*冗余场景：*\n\n```\nfunction createMenu(title, body, buttonText, cancellable) {\n  ...\n}\n```\n\n*整洁方案：*\n\n```\nlet menuConfig = {\n  title: 'Foo',\n  body: 'Bar',\n  buttonText: 'Baz',\n  cancellable: true\n}\n \nfunction createMenu(menuConfig) {\n  ...\n}\n```\n\n## 一个函数专注一件事\n\n*冗余场景：*\n\n```\nfunction emailClients(clients) {\n  clients.forEach(client => {\n    let clientRecord = database.lookup(client);\n    if (clientRecord.isActive()) {\n      email(client);\n    }\n  });\n}\n```\n\n*整洁方案：*\n\n```\nfunction emailClients(clients) {\n  clients.forEach(client => {\n    emailClientIfNeeded(client);\n  });\n}\n \nfunction emailClientIfNeeded(client) {\n  if (isClientActive(client)) {\n    email(client);\n  }\n}\n \nfunction isClientActive(client) {\n  let clientRecord = database.lookup(client);\n  return clientRecord.isActive();\n}\n```\n\n## 函数名称见名知义\n\n*晦涩场景：*\n\n```\nfunction dateAdd(date, month) {\n  // ...\n}\n\nlet date = new Date();\ndateAdd(date, 1);\n```\n\n*整洁方案：*\n\n```\nfunction dateAddMonth(date, month) {\n  // ...\n}\n\nlet date = new Date();\ndateAddMonth(date, 1);\n```\n\n## 函数只抽象一个层次\n\n整洁理念: 拆分函数使其易于复用和易于测试\n\n*冗余场景：*\n\n```\nfunction parseBetterJSAlternative(code) {\n  let REGEXES = [...],\n      statements = code.split(' '),\n      tokens;\n  REGEXES.forEach((REGEX) => {\n    statements.forEach((statement) => {\n      // ...\n    })\n  });\n\n  let ast;\n  tokens.forEach((token) => {\n    // lex...\n  });\n\n  ast.forEach((node) => {\n    // parse...\n  })\n}\n```\n\n*整洁方案：*\n\n```\nfunction tokenize(code) {\n  let REGEXES = [...],\n      statements = code.split(' '),\n      tokens;\n  REGEXES.forEach((REGEX) => {\n    statements.forEach((statement) => {\n      // ...\n    })\n  });\n\n  return tokens;\n}\n \nfunction lexer(tokens) {\n  let ast;\n  tokens.forEach((token) => {\n    // lex...\n  });\n\n  return ast;\n}\n \nfunction parseBetterJSAlternative(code) {\n  let tokens = tokenize(code);\n  let ast = lexer(tokens);\n  ast.forEach((node) => {\n    // parse...\n  })\n}\n```\n\n## 删除重复代码\n\nJavaScript 是弱类型语句，所以很容易写通用性强的函数\n\n*冗余场景：*\n\n```\nfunction showDeveloperList(developers) {\n  developers.forEach(developers => {\n    let expectedSalary = developer.calculateExpectedSalary();\n    let experience = developer.getExperience();\n    let githubLink = developer.getGithubLink();\n    let data = {\n      expectedSalary: expectedSalary,\n      experience: experience,\n      githubLink: githubLink\n    };\n\n    render(data);\n  });\n}\n\nfunction showManagerList(managers) {\n  managers.forEach(manager => {\n    let expectedSalary = manager.calculateExpectedSalary();\n    let experience = manager.getExperience();\n    let portfolio = manager.getMBAProjects();\n    let data = {\n      expectedSalary: expectedSalary,\n      experience: experience,\n      portfolio: portfolio\n    };\n\n    render(data);\n  });\n}\n```\n\n*整洁方案：*\n\n```\nfunction showList(employees) {\n  employees.forEach(employee => {\n    let expectedSalary = employee.calculateExpectedSalary(),\n        experience = employee.getExperience(),\n        portfolio;\n\n    if (employee.type === 'manager') {\n      portfolio = employee.getMBAProjects();\n    } else {\n      portfolio = employee.getGithubLink();\n    }\n\n    let data = {\n      expectedSalary: expectedSalary,\n      experience: experience,\n      portfolio: portfolio\n    };\n\n    render(data);\n  });\n}\n```\n\n## 默认参数&短路语法\n\n*冗余场景：*\n\n```\nfunction writeForumComment(subject, body) {\n  subject = subject || 'No Subject';\n  body = body || 'No text';\n}\n```\n\n*整洁方案：*\n\n```\nfunction writeForumComment(subject = 'No subject', body = 'No text') {\n  ...\n}\n```\n\n## `Object.assign` 用法\n\n*冗余场景：*\n\n```\nlet menuConfig = {\n  title: null,\n  body: 'Bar',\n  buttonText: null,\n  cancellable: true\n}\n \nfunction createMenu(config) {\n  config.title = config.title || 'Foo'\n  config.body = config.body || 'Bar'\n  config.buttonText = config.buttonText || 'Baz'\n  config.cancellable = config.cancellable === undefined ? config.cancellable : true;\n}\n \ncreateMenu(menuConfig);\n```\n\n*整洁方案：*\n\n```\nlet menuConfig = {\n  title: 'Order',\n  buttonText: 'Send',\n  cancellable: true\n}\n \nfunction createMenu(config) {\n config = Object.assign({\n     title: 'Foo',\n     body: 'Bar',\n     buttonText: 'Baz',\n     cancellable: true\n   }, config);\n}\n \ncreateMenu(menuConfig);\n```\n\n## 不要写入全局函数\n\n*冗余场景：*\n\n```\nArray.prototype.diff = function(comparisonArray) {\n  let values = [];\n  let hash = {};\n\n  for (let i of comparisonArray) {\n    hash[i] = true;\n  }\n\n  for (let i of this) {\n    if (!hash[i]) {\n      values.push(i);\n    }\n  }\n\n  return values;\n}\n```\n\n*整洁方案：*\n\n```\nclass SuperArray extends Array {\n  constructor(...args) {\n    super(...args);\n  }\n\n  diff(comparisonArray) {\n    let values = [];\n    let hash = {};\n\n    for (let i of comparisonArray) {\n      hash[i] = true;\n    }\n\n    for (let i of this) {\n      if (!hash[i]) {\n        values.push(i);\n      }\n    }\n\n    return values;\n  }\n}\n```\n\n## 函数式编程\n\n*冗余场景：*\n\n```\nconst programmerOutput = [\n  {\n    name: 'Uncle Bobby',\n    linesOfCode: 500\n  }, {\n    name: 'Suzie Q',\n    linesOfCode: 1500\n  }, {\n    name: 'Jimmy Gosling',\n    linesOfCode: 150\n  }, {\n    name: 'Gracie Hopper',\n    linesOfCode: 1000\n  }\n];\n \nlet totalOutput = 0;\nfor (let i = 0; i < programmerOutput.length; i++) {\n  totalOutput += programmerOutput[i].linesOfCode;\n}\n```\n\n*整洁方案：*\n\n```\nconst programmerOutput = [\n  {\n    name: 'Uncle Bobby',\n    linesOfCode: 500\n  }, {\n    name: 'Suzie Q',\n    linesOfCode: 1500\n  }, {\n    name: 'Jimmy Gosling',\n    linesOfCode: 150\n  }, {\n    name: 'Gracie Hopper',\n    linesOfCode: 1000\n  }\n];\n \n \nlet totalOutput = programmerOutput\n  .map((programmer) => programmer.linesOfCode)\n  .reduce((acc, linesOfCode) => acc + linesOfCode, 0);\n```\n\n## 封装条件\n\n*冗余场景：*\n\n```\nif (fsm.state === 'fetching' && isEmpty(listNode)) {\n  // ...\n}\n```\n\n*整洁方案：*\n\n```\nfunction shouldShowSpinner(fsm, listNode) {\n  return fsm.state === 'fetching' && isEmpty(listNode);\n}\n \nif (shouldShowSpinner(fsmInstance, listNodeInstance)) {\n  // ...\n}\n```\n\n## 参考\n\n- [浅谈JavaScript 代码整洁之道](https://www.jb51.net/article/149355.htm)\n","source":"developer/style-guide/tips-to-keep-javascript-code-clean.md","raw":"---\ntitle: 整洁 Javascript 代码\ntype: 整洁 Javascript 代码\n---\n\n## 善用内置函数\n\n### find/findIndex\n\n*冗余场景：*\n\n```\nlet array = [1, 2, 3, 4],\n    item,\n    index;\n\n// scene1\nfor(let i = 0, len = array.length; i < len; i ++) {\n  if(array[i] >= 1) {\n    item = array[i];\n  }\n}\n// scene2\nfor(let i = 0, len = array.length; i < len; i ++) {\n  if(array[i] >= 3) {\n    index = i;\n  }\n}\n// priority use a `for` when scene1 and scene2 meet\n```\n\n*整洁方案：*\n\n```\nitem = array.find(function(ele) { return ele >= 1; })\n=> 1\nindex = array.findIndex(function(ele) { return ele >= 3; })\n=> 2\n```\n\n### filter/some\n\n*冗余场景：*\n\n```\nlet array = [1, 2, 3, 4],\n    filterArray = [],\n    isBetween2And4 = false;\n\nfor(let i = 0, len = array.length; i < len; i ++) {\n  if(array[i] >= 3) {\n    filterArray.push(array[i])\n  }\n  if(array[i] > 2 && array[i] < 4) {\n    isBetween2And4 = true\n  }\n}\n```\n\n*整洁方案：*\n\n```\nfilterArray = array.filter(function(ele) { return ele >= 3; })\n=> [3, 4]\nisBetween2And4 = array.some(function(ele) { return ele > 2 && ele < 4; })\n=> true\n```\n\n### map\n\n*冗余场景：*\n\n```\nlet array = [1, 2, 3, 4],\n    newArray = [];\n\nfor(let i = 0, len = array.length; i < len; i ++) {\n  newArray.push(array[i] * 2)\n}\n```\n\n*整洁方案：*\n\n```\nnewArray = array.map(function(ele) { return ele * 2; })\n=> [2, 4, 6, 8]\n```\n\n### reduce/reduceRight\n\n*冗余场景：*\n\n```\nlet array = [1, 2, 3, 4],\n    json = {};\n\nfor(let i = 0, len = array.length; i < len; i ++) {\n  json[i] = array[i]\n}\n```\n\n*整洁方案：*\n\n```\njson = array.reduce(function(json, ele, inx, arr) { json[inx] = ele; return json; }, {})\n=> {0: 1, 1: 2, 2: 3, 3: 4}\narray.reduceRight(function(json, ele, inx, arr) { console.log(ele); return json; }, {})\n=> 4 3 2 1\n```\n\n## 可检索的名称\n\n写可读性强、易于检索的的代码非常重要。\n\n*冗余场景：*\n\n```\nfor (let i = 0; i < 525600; i++) {\n  runCronJob();\n}\n```\n\n*整洁方案：*\n\n```\n// `let` 申明为大写的全局变量\nlet MINUTES_IN_A_YEAR = 525600;\nfor (let i = 0; i < MINUTES_IN_A_YEAR; i++) {\n  runCronJob();\n}\n```\n\n## 解析性的变量\n\n*冗余场景：*\n\n```\nconst cityStateRegex = /^(.+)[,\\\\s]+(.+?)\\s*(\\d{5})?$/;\nsaveCityState(cityStateRegex.match(cityStateRegex)[1], cityStateRegex.match(cityStateRegex)[2]);\n```\n\n*整洁方案：*\n\n```\nconst cityStateRegex = /^(.+)[,\\\\s]+(.+?)\\s*(\\d{5})?$/,\n      match = cityStateRegex.match(cityStateRegex),\n      city = match[1],\n      state = match[2];\n\nsaveCityState(city, state);\n```\n\n## 显式优于隐式\n\n*晦涩场景：*\n\n```\nlet locations = ['Austin', 'New York', 'San Francisco'];\nlocations.forEach((l) => {\n  doStuff();\n  doSomeOtherStuff();\n  ...\n  ...\n  ...\n  // 等等，`l` 又是什么？\n  dispatch(l);\n});\n```\n\n*整洁方案：*\n\n```\nlet locations = ['Austin', 'New York', 'San Francisco'];\nlocations.forEach((location) => {\n  doStuff();\n  doSomeOtherStuff();\n  ...\n  ...\n  ...\n  dispatch(location);\n});\n```\n\n## 短路语法更清晰\n\n*冗余场景：*\n\n```\nfunction createMicrobrewery(name) {\n  let breweryName;\n  if (name) {\n    breweryName = name;\n  } else {\n    breweryName = 'Hipster Brew Co.';\n  }\n}\n```\n\n*整洁方案：*\n\n```\nfunction createMicrobrewery(name) {\n  let breweryName = name || 'Hipster Brew Co.'\n}\n```\n\n## 函数参数不多于2\n\n*冗余场景：*\n\n```\nfunction createMenu(title, body, buttonText, cancellable) {\n  ...\n}\n```\n\n*整洁方案：*\n\n```\nlet menuConfig = {\n  title: 'Foo',\n  body: 'Bar',\n  buttonText: 'Baz',\n  cancellable: true\n}\n \nfunction createMenu(menuConfig) {\n  ...\n}\n```\n\n## 一个函数专注一件事\n\n*冗余场景：*\n\n```\nfunction emailClients(clients) {\n  clients.forEach(client => {\n    let clientRecord = database.lookup(client);\n    if (clientRecord.isActive()) {\n      email(client);\n    }\n  });\n}\n```\n\n*整洁方案：*\n\n```\nfunction emailClients(clients) {\n  clients.forEach(client => {\n    emailClientIfNeeded(client);\n  });\n}\n \nfunction emailClientIfNeeded(client) {\n  if (isClientActive(client)) {\n    email(client);\n  }\n}\n \nfunction isClientActive(client) {\n  let clientRecord = database.lookup(client);\n  return clientRecord.isActive();\n}\n```\n\n## 函数名称见名知义\n\n*晦涩场景：*\n\n```\nfunction dateAdd(date, month) {\n  // ...\n}\n\nlet date = new Date();\ndateAdd(date, 1);\n```\n\n*整洁方案：*\n\n```\nfunction dateAddMonth(date, month) {\n  // ...\n}\n\nlet date = new Date();\ndateAddMonth(date, 1);\n```\n\n## 函数只抽象一个层次\n\n整洁理念: 拆分函数使其易于复用和易于测试\n\n*冗余场景：*\n\n```\nfunction parseBetterJSAlternative(code) {\n  let REGEXES = [...],\n      statements = code.split(' '),\n      tokens;\n  REGEXES.forEach((REGEX) => {\n    statements.forEach((statement) => {\n      // ...\n    })\n  });\n\n  let ast;\n  tokens.forEach((token) => {\n    // lex...\n  });\n\n  ast.forEach((node) => {\n    // parse...\n  })\n}\n```\n\n*整洁方案：*\n\n```\nfunction tokenize(code) {\n  let REGEXES = [...],\n      statements = code.split(' '),\n      tokens;\n  REGEXES.forEach((REGEX) => {\n    statements.forEach((statement) => {\n      // ...\n    })\n  });\n\n  return tokens;\n}\n \nfunction lexer(tokens) {\n  let ast;\n  tokens.forEach((token) => {\n    // lex...\n  });\n\n  return ast;\n}\n \nfunction parseBetterJSAlternative(code) {\n  let tokens = tokenize(code);\n  let ast = lexer(tokens);\n  ast.forEach((node) => {\n    // parse...\n  })\n}\n```\n\n## 删除重复代码\n\nJavaScript 是弱类型语句，所以很容易写通用性强的函数\n\n*冗余场景：*\n\n```\nfunction showDeveloperList(developers) {\n  developers.forEach(developers => {\n    let expectedSalary = developer.calculateExpectedSalary();\n    let experience = developer.getExperience();\n    let githubLink = developer.getGithubLink();\n    let data = {\n      expectedSalary: expectedSalary,\n      experience: experience,\n      githubLink: githubLink\n    };\n\n    render(data);\n  });\n}\n\nfunction showManagerList(managers) {\n  managers.forEach(manager => {\n    let expectedSalary = manager.calculateExpectedSalary();\n    let experience = manager.getExperience();\n    let portfolio = manager.getMBAProjects();\n    let data = {\n      expectedSalary: expectedSalary,\n      experience: experience,\n      portfolio: portfolio\n    };\n\n    render(data);\n  });\n}\n```\n\n*整洁方案：*\n\n```\nfunction showList(employees) {\n  employees.forEach(employee => {\n    let expectedSalary = employee.calculateExpectedSalary(),\n        experience = employee.getExperience(),\n        portfolio;\n\n    if (employee.type === 'manager') {\n      portfolio = employee.getMBAProjects();\n    } else {\n      portfolio = employee.getGithubLink();\n    }\n\n    let data = {\n      expectedSalary: expectedSalary,\n      experience: experience,\n      portfolio: portfolio\n    };\n\n    render(data);\n  });\n}\n```\n\n## 默认参数&短路语法\n\n*冗余场景：*\n\n```\nfunction writeForumComment(subject, body) {\n  subject = subject || 'No Subject';\n  body = body || 'No text';\n}\n```\n\n*整洁方案：*\n\n```\nfunction writeForumComment(subject = 'No subject', body = 'No text') {\n  ...\n}\n```\n\n## `Object.assign` 用法\n\n*冗余场景：*\n\n```\nlet menuConfig = {\n  title: null,\n  body: 'Bar',\n  buttonText: null,\n  cancellable: true\n}\n \nfunction createMenu(config) {\n  config.title = config.title || 'Foo'\n  config.body = config.body || 'Bar'\n  config.buttonText = config.buttonText || 'Baz'\n  config.cancellable = config.cancellable === undefined ? config.cancellable : true;\n}\n \ncreateMenu(menuConfig);\n```\n\n*整洁方案：*\n\n```\nlet menuConfig = {\n  title: 'Order',\n  buttonText: 'Send',\n  cancellable: true\n}\n \nfunction createMenu(config) {\n config = Object.assign({\n     title: 'Foo',\n     body: 'Bar',\n     buttonText: 'Baz',\n     cancellable: true\n   }, config);\n}\n \ncreateMenu(menuConfig);\n```\n\n## 不要写入全局函数\n\n*冗余场景：*\n\n```\nArray.prototype.diff = function(comparisonArray) {\n  let values = [];\n  let hash = {};\n\n  for (let i of comparisonArray) {\n    hash[i] = true;\n  }\n\n  for (let i of this) {\n    if (!hash[i]) {\n      values.push(i);\n    }\n  }\n\n  return values;\n}\n```\n\n*整洁方案：*\n\n```\nclass SuperArray extends Array {\n  constructor(...args) {\n    super(...args);\n  }\n\n  diff(comparisonArray) {\n    let values = [];\n    let hash = {};\n\n    for (let i of comparisonArray) {\n      hash[i] = true;\n    }\n\n    for (let i of this) {\n      if (!hash[i]) {\n        values.push(i);\n      }\n    }\n\n    return values;\n  }\n}\n```\n\n## 函数式编程\n\n*冗余场景：*\n\n```\nconst programmerOutput = [\n  {\n    name: 'Uncle Bobby',\n    linesOfCode: 500\n  }, {\n    name: 'Suzie Q',\n    linesOfCode: 1500\n  }, {\n    name: 'Jimmy Gosling',\n    linesOfCode: 150\n  }, {\n    name: 'Gracie Hopper',\n    linesOfCode: 1000\n  }\n];\n \nlet totalOutput = 0;\nfor (let i = 0; i < programmerOutput.length; i++) {\n  totalOutput += programmerOutput[i].linesOfCode;\n}\n```\n\n*整洁方案：*\n\n```\nconst programmerOutput = [\n  {\n    name: 'Uncle Bobby',\n    linesOfCode: 500\n  }, {\n    name: 'Suzie Q',\n    linesOfCode: 1500\n  }, {\n    name: 'Jimmy Gosling',\n    linesOfCode: 150\n  }, {\n    name: 'Gracie Hopper',\n    linesOfCode: 1000\n  }\n];\n \n \nlet totalOutput = programmerOutput\n  .map((programmer) => programmer.linesOfCode)\n  .reduce((acc, linesOfCode) => acc + linesOfCode, 0);\n```\n\n## 封装条件\n\n*冗余场景：*\n\n```\nif (fsm.state === 'fetching' && isEmpty(listNode)) {\n  // ...\n}\n```\n\n*整洁方案：*\n\n```\nfunction shouldShowSpinner(fsm, listNode) {\n  return fsm.state === 'fetching' && isEmpty(listNode);\n}\n \nif (shouldShowSpinner(fsmInstance, listNodeInstance)) {\n  // ...\n}\n```\n\n## 参考\n\n- [浅谈JavaScript 代码整洁之道](https://www.jb51.net/article/149355.htm)\n","date":"2023-06-10T10:49:05.489Z","updated":"2023-06-10T10:49:05.489Z","path":"developer/style-guide/tips-to-keep-javascript-code-clean.html","comments":1,"layout":"page","_id":"clipw1dd6000yoix5b70s005o","content":"<h2 id=\"善用内置函数\"><a href=\"#善用内置函数\" class=\"headerlink\" title=\"善用内置函数\"></a>善用内置函数</h2><h3 id=\"find-x2F-findIndex\"><a href=\"#find-x2F-findIndex\" class=\"headerlink\" title=\"find&#x2F;findIndex\"></a>find&#x2F;findIndex</h3><p><em>冗余场景：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">let array = [1, 2, 3, 4],<br>    item,<br>    index;<br><br>// scene1<br>for(let i = 0, len = array.length; i &lt; len; i ++) &#123;<br>  if(array[i] &gt;= 1) &#123;<br>    item = array[i];<br>  &#125;<br>&#125;<br>// scene2<br>for(let i = 0, len = array.length; i &lt; len; i ++) &#123;<br>  if(array[i] &gt;= 3) &#123;<br>    index = i;<br>  &#125;<br>&#125;<br>// priority use a `for` when scene1 and scene2 meet<br></code></pre></td></tr></table></figure>\n\n<p><em>整洁方案：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">item = array.find(function(ele) &#123; return ele &gt;= 1; &#125;)<br>=&gt; 1<br>index = array.findIndex(function(ele) &#123; return ele &gt;= 3; &#125;)<br>=&gt; 2<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"filter-x2F-some\"><a href=\"#filter-x2F-some\" class=\"headerlink\" title=\"filter&#x2F;some\"></a>filter&#x2F;some</h3><p><em>冗余场景：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">let array = [1, 2, 3, 4],<br>    filterArray = [],<br>    isBetween2And4 = false;<br><br>for(let i = 0, len = array.length; i &lt; len; i ++) &#123;<br>  if(array[i] &gt;= 3) &#123;<br>    filterArray.push(array[i])<br>  &#125;<br>  if(array[i] &gt; 2 &amp;&amp; array[i] &lt; 4) &#123;<br>    isBetween2And4 = true<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><em>整洁方案：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">filterArray = array.filter(function(ele) &#123; return ele &gt;= 3; &#125;)<br>=&gt; [3, 4]<br>isBetween2And4 = array.some(function(ele) &#123; return ele &gt; 2 &amp;&amp; ele &lt; 4; &#125;)<br>=&gt; true<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h3><p><em>冗余场景：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">let array = [1, 2, 3, 4],<br>    newArray = [];<br><br>for(let i = 0, len = array.length; i &lt; len; i ++) &#123;<br>  newArray.push(array[i] * 2)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><em>整洁方案：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">newArray = array.map(function(ele) &#123; return ele * 2; &#125;)<br>=&gt; [2, 4, 6, 8]<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"reduce-x2F-reduceRight\"><a href=\"#reduce-x2F-reduceRight\" class=\"headerlink\" title=\"reduce&#x2F;reduceRight\"></a>reduce&#x2F;reduceRight</h3><p><em>冗余场景：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">let array = [1, 2, 3, 4],<br>    json = &#123;&#125;;<br><br>for(let i = 0, len = array.length; i &lt; len; i ++) &#123;<br>  json[i] = array[i]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><em>整洁方案：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">json = array.reduce(function(json, ele, inx, arr) &#123; json[inx] = ele; return json; &#125;, &#123;&#125;)<br>=&gt; &#123;0: 1, 1: 2, 2: 3, 3: 4&#125;<br>array.reduceRight(function(json, ele, inx, arr) &#123; console.log(ele); return json; &#125;, &#123;&#125;)<br>=&gt; 4 3 2 1<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"可检索的名称\"><a href=\"#可检索的名称\" class=\"headerlink\" title=\"可检索的名称\"></a>可检索的名称</h2><p>写可读性强、易于检索的的代码非常重要。</p>\n<p><em>冗余场景：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">for (let i = 0; i &lt; 525600; i++) &#123;<br>  runCronJob();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><em>整洁方案：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// `let` 申明为大写的全局变量<br>let MINUTES_IN_A_YEAR = 525600;<br>for (let i = 0; i &lt; MINUTES_IN_A_YEAR; i++) &#123;<br>  runCronJob();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"解析性的变量\"><a href=\"#解析性的变量\" class=\"headerlink\" title=\"解析性的变量\"></a>解析性的变量</h2><p><em>冗余场景：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">const cityStateRegex = /^(.+)[,\\\\s]+(.+?)\\s*(\\d&#123;5&#125;)?$/;<br>saveCityState(cityStateRegex.match(cityStateRegex)[1], cityStateRegex.match(cityStateRegex)[2]);<br></code></pre></td></tr></table></figure>\n\n<p><em>整洁方案：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">const cityStateRegex = /^(.+)[,\\\\s]+(.+?)\\s*(\\d&#123;5&#125;)?$/,<br>      match = cityStateRegex.match(cityStateRegex),<br>      city = match[1],<br>      state = match[2];<br><br>saveCityState(city, state);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"显式优于隐式\"><a href=\"#显式优于隐式\" class=\"headerlink\" title=\"显式优于隐式\"></a>显式优于隐式</h2><p><em>晦涩场景：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">let locations = [&#x27;Austin&#x27;, &#x27;New York&#x27;, &#x27;San Francisco&#x27;];<br>locations.forEach((l) =&gt; &#123;<br>  doStuff();<br>  doSomeOtherStuff();<br>  ...<br>  ...<br>  ...<br>  // 等等，`l` 又是什么？<br>  dispatch(l);<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<p><em>整洁方案：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">let locations = [&#x27;Austin&#x27;, &#x27;New York&#x27;, &#x27;San Francisco&#x27;];<br>locations.forEach((location) =&gt; &#123;<br>  doStuff();<br>  doSomeOtherStuff();<br>  ...<br>  ...<br>  ...<br>  dispatch(location);<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"短路语法更清晰\"><a href=\"#短路语法更清晰\" class=\"headerlink\" title=\"短路语法更清晰\"></a>短路语法更清晰</h2><p><em>冗余场景：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">function createMicrobrewery(name) &#123;<br>  let breweryName;<br>  if (name) &#123;<br>    breweryName = name;<br>  &#125; else &#123;<br>    breweryName = &#x27;Hipster Brew Co.&#x27;;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><em>整洁方案：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">function createMicrobrewery(name) &#123;<br>  let breweryName = name || &#x27;Hipster Brew Co.&#x27;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"函数参数不多于2\"><a href=\"#函数参数不多于2\" class=\"headerlink\" title=\"函数参数不多于2\"></a>函数参数不多于2</h2><p><em>冗余场景：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">function createMenu(title, body, buttonText, cancellable) &#123;<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><em>整洁方案：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">let menuConfig = &#123;<br>  title: &#x27;Foo&#x27;,<br>  body: &#x27;Bar&#x27;,<br>  buttonText: &#x27;Baz&#x27;,<br>  cancellable: true<br>&#125;<br> <br>function createMenu(menuConfig) &#123;<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"一个函数专注一件事\"><a href=\"#一个函数专注一件事\" class=\"headerlink\" title=\"一个函数专注一件事\"></a>一个函数专注一件事</h2><p><em>冗余场景：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">function emailClients(clients) &#123;<br>  clients.forEach(client =&gt; &#123;<br>    let clientRecord = database.lookup(client);<br>    if (clientRecord.isActive()) &#123;<br>      email(client);<br>    &#125;<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><em>整洁方案：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">function emailClients(clients) &#123;<br>  clients.forEach(client =&gt; &#123;<br>    emailClientIfNeeded(client);<br>  &#125;);<br>&#125;<br> <br>function emailClientIfNeeded(client) &#123;<br>  if (isClientActive(client)) &#123;<br>    email(client);<br>  &#125;<br>&#125;<br> <br>function isClientActive(client) &#123;<br>  let clientRecord = database.lookup(client);<br>  return clientRecord.isActive();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"函数名称见名知义\"><a href=\"#函数名称见名知义\" class=\"headerlink\" title=\"函数名称见名知义\"></a>函数名称见名知义</h2><p><em>晦涩场景：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">function dateAdd(date, month) &#123;<br>  // ...<br>&#125;<br><br>let date = new Date();<br>dateAdd(date, 1);<br></code></pre></td></tr></table></figure>\n\n<p><em>整洁方案：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">function dateAddMonth(date, month) &#123;<br>  // ...<br>&#125;<br><br>let date = new Date();<br>dateAddMonth(date, 1);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"函数只抽象一个层次\"><a href=\"#函数只抽象一个层次\" class=\"headerlink\" title=\"函数只抽象一个层次\"></a>函数只抽象一个层次</h2><p>整洁理念: 拆分函数使其易于复用和易于测试</p>\n<p><em>冗余场景：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">function parseBetterJSAlternative(code) &#123;<br>  let REGEXES = [...],<br>      statements = code.split(&#x27; &#x27;),<br>      tokens;<br>  REGEXES.forEach((REGEX) =&gt; &#123;<br>    statements.forEach((statement) =&gt; &#123;<br>      // ...<br>    &#125;)<br>  &#125;);<br><br>  let ast;<br>  tokens.forEach((token) =&gt; &#123;<br>    // lex...<br>  &#125;);<br><br>  ast.forEach((node) =&gt; &#123;<br>    // parse...<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><em>整洁方案：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">function tokenize(code) &#123;<br>  let REGEXES = [...],<br>      statements = code.split(&#x27; &#x27;),<br>      tokens;<br>  REGEXES.forEach((REGEX) =&gt; &#123;<br>    statements.forEach((statement) =&gt; &#123;<br>      // ...<br>    &#125;)<br>  &#125;);<br><br>  return tokens;<br>&#125;<br> <br>function lexer(tokens) &#123;<br>  let ast;<br>  tokens.forEach((token) =&gt; &#123;<br>    // lex...<br>  &#125;);<br><br>  return ast;<br>&#125;<br> <br>function parseBetterJSAlternative(code) &#123;<br>  let tokens = tokenize(code);<br>  let ast = lexer(tokens);<br>  ast.forEach((node) =&gt; &#123;<br>    // parse...<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"删除重复代码\"><a href=\"#删除重复代码\" class=\"headerlink\" title=\"删除重复代码\"></a>删除重复代码</h2><p>JavaScript 是弱类型语句，所以很容易写通用性强的函数</p>\n<p><em>冗余场景：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">function showDeveloperList(developers) &#123;<br>  developers.forEach(developers =&gt; &#123;<br>    let expectedSalary = developer.calculateExpectedSalary();<br>    let experience = developer.getExperience();<br>    let githubLink = developer.getGithubLink();<br>    let data = &#123;<br>      expectedSalary: expectedSalary,<br>      experience: experience,<br>      githubLink: githubLink<br>    &#125;;<br><br>    render(data);<br>  &#125;);<br>&#125;<br><br>function showManagerList(managers) &#123;<br>  managers.forEach(manager =&gt; &#123;<br>    let expectedSalary = manager.calculateExpectedSalary();<br>    let experience = manager.getExperience();<br>    let portfolio = manager.getMBAProjects();<br>    let data = &#123;<br>      expectedSalary: expectedSalary,<br>      experience: experience,<br>      portfolio: portfolio<br>    &#125;;<br><br>    render(data);<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><em>整洁方案：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">function showList(employees) &#123;<br>  employees.forEach(employee =&gt; &#123;<br>    let expectedSalary = employee.calculateExpectedSalary(),<br>        experience = employee.getExperience(),<br>        portfolio;<br><br>    if (employee.type === &#x27;manager&#x27;) &#123;<br>      portfolio = employee.getMBAProjects();<br>    &#125; else &#123;<br>      portfolio = employee.getGithubLink();<br>    &#125;<br><br>    let data = &#123;<br>      expectedSalary: expectedSalary,<br>      experience: experience,<br>      portfolio: portfolio<br>    &#125;;<br><br>    render(data);<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"默认参数-amp-短路语法\"><a href=\"#默认参数-amp-短路语法\" class=\"headerlink\" title=\"默认参数&amp;短路语法\"></a>默认参数&amp;短路语法</h2><p><em>冗余场景：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">function writeForumComment(subject, body) &#123;<br>  subject = subject || &#x27;No Subject&#x27;;<br>  body = body || &#x27;No text&#x27;;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><em>整洁方案：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">function writeForumComment(subject = &#x27;No subject&#x27;, body = &#x27;No text&#x27;) &#123;<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Object-assign-用法\"><a href=\"#Object-assign-用法\" class=\"headerlink\" title=\"Object.assign 用法\"></a><code>Object.assign</code> 用法</h2><p><em>冗余场景：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">let menuConfig = &#123;<br>  title: null,<br>  body: &#x27;Bar&#x27;,<br>  buttonText: null,<br>  cancellable: true<br>&#125;<br> <br>function createMenu(config) &#123;<br>  config.title = config.title || &#x27;Foo&#x27;<br>  config.body = config.body || &#x27;Bar&#x27;<br>  config.buttonText = config.buttonText || &#x27;Baz&#x27;<br>  config.cancellable = config.cancellable === undefined ? config.cancellable : true;<br>&#125;<br> <br>createMenu(menuConfig);<br></code></pre></td></tr></table></figure>\n\n<p><em>整洁方案：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">let menuConfig = &#123;<br>  title: &#x27;Order&#x27;,<br>  buttonText: &#x27;Send&#x27;,<br>  cancellable: true<br>&#125;<br> <br>function createMenu(config) &#123;<br> config = Object.assign(&#123;<br>     title: &#x27;Foo&#x27;,<br>     body: &#x27;Bar&#x27;,<br>     buttonText: &#x27;Baz&#x27;,<br>     cancellable: true<br>   &#125;, config);<br>&#125;<br> <br>createMenu(menuConfig);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"不要写入全局函数\"><a href=\"#不要写入全局函数\" class=\"headerlink\" title=\"不要写入全局函数\"></a>不要写入全局函数</h2><p><em>冗余场景：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">Array.prototype.diff = function(comparisonArray) &#123;<br>  let values = [];<br>  let hash = &#123;&#125;;<br><br>  for (let i of comparisonArray) &#123;<br>    hash[i] = true;<br>  &#125;<br><br>  for (let i of this) &#123;<br>    if (!hash[i]) &#123;<br>      values.push(i);<br>    &#125;<br>  &#125;<br><br>  return values;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><em>整洁方案：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">class SuperArray extends Array &#123;<br>  constructor(...args) &#123;<br>    super(...args);<br>  &#125;<br><br>  diff(comparisonArray) &#123;<br>    let values = [];<br>    let hash = &#123;&#125;;<br><br>    for (let i of comparisonArray) &#123;<br>      hash[i] = true;<br>    &#125;<br><br>    for (let i of this) &#123;<br>      if (!hash[i]) &#123;<br>        values.push(i);<br>      &#125;<br>    &#125;<br><br>    return values;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"函数式编程\"><a href=\"#函数式编程\" class=\"headerlink\" title=\"函数式编程\"></a>函数式编程</h2><p><em>冗余场景：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">const programmerOutput = [<br>  &#123;<br>    name: &#x27;Uncle Bobby&#x27;,<br>    linesOfCode: 500<br>  &#125;, &#123;<br>    name: &#x27;Suzie Q&#x27;,<br>    linesOfCode: 1500<br>  &#125;, &#123;<br>    name: &#x27;Jimmy Gosling&#x27;,<br>    linesOfCode: 150<br>  &#125;, &#123;<br>    name: &#x27;Gracie Hopper&#x27;,<br>    linesOfCode: 1000<br>  &#125;<br>];<br> <br>let totalOutput = 0;<br>for (let i = 0; i &lt; programmerOutput.length; i++) &#123;<br>  totalOutput += programmerOutput[i].linesOfCode;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><em>整洁方案：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">const programmerOutput = [<br>  &#123;<br>    name: &#x27;Uncle Bobby&#x27;,<br>    linesOfCode: 500<br>  &#125;, &#123;<br>    name: &#x27;Suzie Q&#x27;,<br>    linesOfCode: 1500<br>  &#125;, &#123;<br>    name: &#x27;Jimmy Gosling&#x27;,<br>    linesOfCode: 150<br>  &#125;, &#123;<br>    name: &#x27;Gracie Hopper&#x27;,<br>    linesOfCode: 1000<br>  &#125;<br>];<br> <br> <br>let totalOutput = programmerOutput<br>  .map((programmer) =&gt; programmer.linesOfCode)<br>  .reduce((acc, linesOfCode) =&gt; acc + linesOfCode, 0);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"封装条件\"><a href=\"#封装条件\" class=\"headerlink\" title=\"封装条件\"></a>封装条件</h2><p><em>冗余场景：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">if (fsm.state === &#x27;fetching&#x27; &amp;&amp; isEmpty(listNode)) &#123;<br>  // ...<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><em>整洁方案：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">function shouldShowSpinner(fsm, listNode) &#123;<br>  return fsm.state === &#x27;fetching&#x27; &amp;&amp; isEmpty(listNode);<br>&#125;<br> <br>if (shouldShowSpinner(fsmInstance, listNodeInstance)) &#123;<br>  // ...<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://www.jb51.net/article/149355.htm\">浅谈JavaScript 代码整洁之道</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"善用内置函数\"><a href=\"#善用内置函数\" class=\"headerlink\" title=\"善用内置函数\"></a>善用内置函数</h2><h3 id=\"find-x2F-findIndex\"><a href=\"#find-x2F-findIndex\" class=\"headerlink\" title=\"find&#x2F;findIndex\"></a>find&#x2F;findIndex</h3><p><em>冗余场景：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">let array = [1, 2, 3, 4],<br>    item,<br>    index;<br><br>// scene1<br>for(let i = 0, len = array.length; i &lt; len; i ++) &#123;<br>  if(array[i] &gt;= 1) &#123;<br>    item = array[i];<br>  &#125;<br>&#125;<br>// scene2<br>for(let i = 0, len = array.length; i &lt; len; i ++) &#123;<br>  if(array[i] &gt;= 3) &#123;<br>    index = i;<br>  &#125;<br>&#125;<br>// priority use a `for` when scene1 and scene2 meet<br></code></pre></td></tr></table></figure>\n\n<p><em>整洁方案：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">item = array.find(function(ele) &#123; return ele &gt;= 1; &#125;)<br>=&gt; 1<br>index = array.findIndex(function(ele) &#123; return ele &gt;= 3; &#125;)<br>=&gt; 2<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"filter-x2F-some\"><a href=\"#filter-x2F-some\" class=\"headerlink\" title=\"filter&#x2F;some\"></a>filter&#x2F;some</h3><p><em>冗余场景：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">let array = [1, 2, 3, 4],<br>    filterArray = [],<br>    isBetween2And4 = false;<br><br>for(let i = 0, len = array.length; i &lt; len; i ++) &#123;<br>  if(array[i] &gt;= 3) &#123;<br>    filterArray.push(array[i])<br>  &#125;<br>  if(array[i] &gt; 2 &amp;&amp; array[i] &lt; 4) &#123;<br>    isBetween2And4 = true<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><em>整洁方案：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">filterArray = array.filter(function(ele) &#123; return ele &gt;= 3; &#125;)<br>=&gt; [3, 4]<br>isBetween2And4 = array.some(function(ele) &#123; return ele &gt; 2 &amp;&amp; ele &lt; 4; &#125;)<br>=&gt; true<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h3><p><em>冗余场景：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">let array = [1, 2, 3, 4],<br>    newArray = [];<br><br>for(let i = 0, len = array.length; i &lt; len; i ++) &#123;<br>  newArray.push(array[i] * 2)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><em>整洁方案：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">newArray = array.map(function(ele) &#123; return ele * 2; &#125;)<br>=&gt; [2, 4, 6, 8]<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"reduce-x2F-reduceRight\"><a href=\"#reduce-x2F-reduceRight\" class=\"headerlink\" title=\"reduce&#x2F;reduceRight\"></a>reduce&#x2F;reduceRight</h3><p><em>冗余场景：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">let array = [1, 2, 3, 4],<br>    json = &#123;&#125;;<br><br>for(let i = 0, len = array.length; i &lt; len; i ++) &#123;<br>  json[i] = array[i]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><em>整洁方案：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">json = array.reduce(function(json, ele, inx, arr) &#123; json[inx] = ele; return json; &#125;, &#123;&#125;)<br>=&gt; &#123;0: 1, 1: 2, 2: 3, 3: 4&#125;<br>array.reduceRight(function(json, ele, inx, arr) &#123; console.log(ele); return json; &#125;, &#123;&#125;)<br>=&gt; 4 3 2 1<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"可检索的名称\"><a href=\"#可检索的名称\" class=\"headerlink\" title=\"可检索的名称\"></a>可检索的名称</h2><p>写可读性强、易于检索的的代码非常重要。</p>\n<p><em>冗余场景：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">for (let i = 0; i &lt; 525600; i++) &#123;<br>  runCronJob();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><em>整洁方案：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">// `let` 申明为大写的全局变量<br>let MINUTES_IN_A_YEAR = 525600;<br>for (let i = 0; i &lt; MINUTES_IN_A_YEAR; i++) &#123;<br>  runCronJob();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"解析性的变量\"><a href=\"#解析性的变量\" class=\"headerlink\" title=\"解析性的变量\"></a>解析性的变量</h2><p><em>冗余场景：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">const cityStateRegex = /^(.+)[,\\\\s]+(.+?)\\s*(\\d&#123;5&#125;)?$/;<br>saveCityState(cityStateRegex.match(cityStateRegex)[1], cityStateRegex.match(cityStateRegex)[2]);<br></code></pre></td></tr></table></figure>\n\n<p><em>整洁方案：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">const cityStateRegex = /^(.+)[,\\\\s]+(.+?)\\s*(\\d&#123;5&#125;)?$/,<br>      match = cityStateRegex.match(cityStateRegex),<br>      city = match[1],<br>      state = match[2];<br><br>saveCityState(city, state);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"显式优于隐式\"><a href=\"#显式优于隐式\" class=\"headerlink\" title=\"显式优于隐式\"></a>显式优于隐式</h2><p><em>晦涩场景：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">let locations = [&#x27;Austin&#x27;, &#x27;New York&#x27;, &#x27;San Francisco&#x27;];<br>locations.forEach((l) =&gt; &#123;<br>  doStuff();<br>  doSomeOtherStuff();<br>  ...<br>  ...<br>  ...<br>  // 等等，`l` 又是什么？<br>  dispatch(l);<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<p><em>整洁方案：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">let locations = [&#x27;Austin&#x27;, &#x27;New York&#x27;, &#x27;San Francisco&#x27;];<br>locations.forEach((location) =&gt; &#123;<br>  doStuff();<br>  doSomeOtherStuff();<br>  ...<br>  ...<br>  ...<br>  dispatch(location);<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"短路语法更清晰\"><a href=\"#短路语法更清晰\" class=\"headerlink\" title=\"短路语法更清晰\"></a>短路语法更清晰</h2><p><em>冗余场景：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">function createMicrobrewery(name) &#123;<br>  let breweryName;<br>  if (name) &#123;<br>    breweryName = name;<br>  &#125; else &#123;<br>    breweryName = &#x27;Hipster Brew Co.&#x27;;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><em>整洁方案：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">function createMicrobrewery(name) &#123;<br>  let breweryName = name || &#x27;Hipster Brew Co.&#x27;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"函数参数不多于2\"><a href=\"#函数参数不多于2\" class=\"headerlink\" title=\"函数参数不多于2\"></a>函数参数不多于2</h2><p><em>冗余场景：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">function createMenu(title, body, buttonText, cancellable) &#123;<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><em>整洁方案：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">let menuConfig = &#123;<br>  title: &#x27;Foo&#x27;,<br>  body: &#x27;Bar&#x27;,<br>  buttonText: &#x27;Baz&#x27;,<br>  cancellable: true<br>&#125;<br> <br>function createMenu(menuConfig) &#123;<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"一个函数专注一件事\"><a href=\"#一个函数专注一件事\" class=\"headerlink\" title=\"一个函数专注一件事\"></a>一个函数专注一件事</h2><p><em>冗余场景：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">function emailClients(clients) &#123;<br>  clients.forEach(client =&gt; &#123;<br>    let clientRecord = database.lookup(client);<br>    if (clientRecord.isActive()) &#123;<br>      email(client);<br>    &#125;<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><em>整洁方案：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">function emailClients(clients) &#123;<br>  clients.forEach(client =&gt; &#123;<br>    emailClientIfNeeded(client);<br>  &#125;);<br>&#125;<br> <br>function emailClientIfNeeded(client) &#123;<br>  if (isClientActive(client)) &#123;<br>    email(client);<br>  &#125;<br>&#125;<br> <br>function isClientActive(client) &#123;<br>  let clientRecord = database.lookup(client);<br>  return clientRecord.isActive();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"函数名称见名知义\"><a href=\"#函数名称见名知义\" class=\"headerlink\" title=\"函数名称见名知义\"></a>函数名称见名知义</h2><p><em>晦涩场景：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">function dateAdd(date, month) &#123;<br>  // ...<br>&#125;<br><br>let date = new Date();<br>dateAdd(date, 1);<br></code></pre></td></tr></table></figure>\n\n<p><em>整洁方案：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">function dateAddMonth(date, month) &#123;<br>  // ...<br>&#125;<br><br>let date = new Date();<br>dateAddMonth(date, 1);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"函数只抽象一个层次\"><a href=\"#函数只抽象一个层次\" class=\"headerlink\" title=\"函数只抽象一个层次\"></a>函数只抽象一个层次</h2><p>整洁理念: 拆分函数使其易于复用和易于测试</p>\n<p><em>冗余场景：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">function parseBetterJSAlternative(code) &#123;<br>  let REGEXES = [...],<br>      statements = code.split(&#x27; &#x27;),<br>      tokens;<br>  REGEXES.forEach((REGEX) =&gt; &#123;<br>    statements.forEach((statement) =&gt; &#123;<br>      // ...<br>    &#125;)<br>  &#125;);<br><br>  let ast;<br>  tokens.forEach((token) =&gt; &#123;<br>    // lex...<br>  &#125;);<br><br>  ast.forEach((node) =&gt; &#123;<br>    // parse...<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><em>整洁方案：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">function tokenize(code) &#123;<br>  let REGEXES = [...],<br>      statements = code.split(&#x27; &#x27;),<br>      tokens;<br>  REGEXES.forEach((REGEX) =&gt; &#123;<br>    statements.forEach((statement) =&gt; &#123;<br>      // ...<br>    &#125;)<br>  &#125;);<br><br>  return tokens;<br>&#125;<br> <br>function lexer(tokens) &#123;<br>  let ast;<br>  tokens.forEach((token) =&gt; &#123;<br>    // lex...<br>  &#125;);<br><br>  return ast;<br>&#125;<br> <br>function parseBetterJSAlternative(code) &#123;<br>  let tokens = tokenize(code);<br>  let ast = lexer(tokens);<br>  ast.forEach((node) =&gt; &#123;<br>    // parse...<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"删除重复代码\"><a href=\"#删除重复代码\" class=\"headerlink\" title=\"删除重复代码\"></a>删除重复代码</h2><p>JavaScript 是弱类型语句，所以很容易写通用性强的函数</p>\n<p><em>冗余场景：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">function showDeveloperList(developers) &#123;<br>  developers.forEach(developers =&gt; &#123;<br>    let expectedSalary = developer.calculateExpectedSalary();<br>    let experience = developer.getExperience();<br>    let githubLink = developer.getGithubLink();<br>    let data = &#123;<br>      expectedSalary: expectedSalary,<br>      experience: experience,<br>      githubLink: githubLink<br>    &#125;;<br><br>    render(data);<br>  &#125;);<br>&#125;<br><br>function showManagerList(managers) &#123;<br>  managers.forEach(manager =&gt; &#123;<br>    let expectedSalary = manager.calculateExpectedSalary();<br>    let experience = manager.getExperience();<br>    let portfolio = manager.getMBAProjects();<br>    let data = &#123;<br>      expectedSalary: expectedSalary,<br>      experience: experience,<br>      portfolio: portfolio<br>    &#125;;<br><br>    render(data);<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><em>整洁方案：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">function showList(employees) &#123;<br>  employees.forEach(employee =&gt; &#123;<br>    let expectedSalary = employee.calculateExpectedSalary(),<br>        experience = employee.getExperience(),<br>        portfolio;<br><br>    if (employee.type === &#x27;manager&#x27;) &#123;<br>      portfolio = employee.getMBAProjects();<br>    &#125; else &#123;<br>      portfolio = employee.getGithubLink();<br>    &#125;<br><br>    let data = &#123;<br>      expectedSalary: expectedSalary,<br>      experience: experience,<br>      portfolio: portfolio<br>    &#125;;<br><br>    render(data);<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"默认参数-amp-短路语法\"><a href=\"#默认参数-amp-短路语法\" class=\"headerlink\" title=\"默认参数&amp;短路语法\"></a>默认参数&amp;短路语法</h2><p><em>冗余场景：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">function writeForumComment(subject, body) &#123;<br>  subject = subject || &#x27;No Subject&#x27;;<br>  body = body || &#x27;No text&#x27;;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><em>整洁方案：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">function writeForumComment(subject = &#x27;No subject&#x27;, body = &#x27;No text&#x27;) &#123;<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Object-assign-用法\"><a href=\"#Object-assign-用法\" class=\"headerlink\" title=\"Object.assign 用法\"></a><code>Object.assign</code> 用法</h2><p><em>冗余场景：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">let menuConfig = &#123;<br>  title: null,<br>  body: &#x27;Bar&#x27;,<br>  buttonText: null,<br>  cancellable: true<br>&#125;<br> <br>function createMenu(config) &#123;<br>  config.title = config.title || &#x27;Foo&#x27;<br>  config.body = config.body || &#x27;Bar&#x27;<br>  config.buttonText = config.buttonText || &#x27;Baz&#x27;<br>  config.cancellable = config.cancellable === undefined ? config.cancellable : true;<br>&#125;<br> <br>createMenu(menuConfig);<br></code></pre></td></tr></table></figure>\n\n<p><em>整洁方案：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">let menuConfig = &#123;<br>  title: &#x27;Order&#x27;,<br>  buttonText: &#x27;Send&#x27;,<br>  cancellable: true<br>&#125;<br> <br>function createMenu(config) &#123;<br> config = Object.assign(&#123;<br>     title: &#x27;Foo&#x27;,<br>     body: &#x27;Bar&#x27;,<br>     buttonText: &#x27;Baz&#x27;,<br>     cancellable: true<br>   &#125;, config);<br>&#125;<br> <br>createMenu(menuConfig);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"不要写入全局函数\"><a href=\"#不要写入全局函数\" class=\"headerlink\" title=\"不要写入全局函数\"></a>不要写入全局函数</h2><p><em>冗余场景：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">Array.prototype.diff = function(comparisonArray) &#123;<br>  let values = [];<br>  let hash = &#123;&#125;;<br><br>  for (let i of comparisonArray) &#123;<br>    hash[i] = true;<br>  &#125;<br><br>  for (let i of this) &#123;<br>    if (!hash[i]) &#123;<br>      values.push(i);<br>    &#125;<br>  &#125;<br><br>  return values;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><em>整洁方案：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">class SuperArray extends Array &#123;<br>  constructor(...args) &#123;<br>    super(...args);<br>  &#125;<br><br>  diff(comparisonArray) &#123;<br>    let values = [];<br>    let hash = &#123;&#125;;<br><br>    for (let i of comparisonArray) &#123;<br>      hash[i] = true;<br>    &#125;<br><br>    for (let i of this) &#123;<br>      if (!hash[i]) &#123;<br>        values.push(i);<br>      &#125;<br>    &#125;<br><br>    return values;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"函数式编程\"><a href=\"#函数式编程\" class=\"headerlink\" title=\"函数式编程\"></a>函数式编程</h2><p><em>冗余场景：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">const programmerOutput = [<br>  &#123;<br>    name: &#x27;Uncle Bobby&#x27;,<br>    linesOfCode: 500<br>  &#125;, &#123;<br>    name: &#x27;Suzie Q&#x27;,<br>    linesOfCode: 1500<br>  &#125;, &#123;<br>    name: &#x27;Jimmy Gosling&#x27;,<br>    linesOfCode: 150<br>  &#125;, &#123;<br>    name: &#x27;Gracie Hopper&#x27;,<br>    linesOfCode: 1000<br>  &#125;<br>];<br> <br>let totalOutput = 0;<br>for (let i = 0; i &lt; programmerOutput.length; i++) &#123;<br>  totalOutput += programmerOutput[i].linesOfCode;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><em>整洁方案：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">const programmerOutput = [<br>  &#123;<br>    name: &#x27;Uncle Bobby&#x27;,<br>    linesOfCode: 500<br>  &#125;, &#123;<br>    name: &#x27;Suzie Q&#x27;,<br>    linesOfCode: 1500<br>  &#125;, &#123;<br>    name: &#x27;Jimmy Gosling&#x27;,<br>    linesOfCode: 150<br>  &#125;, &#123;<br>    name: &#x27;Gracie Hopper&#x27;,<br>    linesOfCode: 1000<br>  &#125;<br>];<br> <br> <br>let totalOutput = programmerOutput<br>  .map((programmer) =&gt; programmer.linesOfCode)<br>  .reduce((acc, linesOfCode) =&gt; acc + linesOfCode, 0);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"封装条件\"><a href=\"#封装条件\" class=\"headerlink\" title=\"封装条件\"></a>封装条件</h2><p><em>冗余场景：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">if (fsm.state === &#x27;fetching&#x27; &amp;&amp; isEmpty(listNode)) &#123;<br>  // ...<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><em>整洁方案：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">function shouldShowSpinner(fsm, listNode) &#123;<br>  return fsm.state === &#x27;fetching&#x27; &amp;&amp; isEmpty(listNode);<br>&#125;<br> <br>if (shouldShowSpinner(fsmInstance, listNodeInstance)) &#123;<br>  // ...<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://www.jb51.net/article/149355.htm\">浅谈JavaScript 代码整洁之道</a></li>\n</ul>\n"}],"Post":[],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}